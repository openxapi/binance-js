/* tslint:disable */
/* eslint-disable */
/**
 * Binance Options API
 * OpenAPI specification for Binance exchange - Options API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { OptionsCreateBlockOrderCreateV1Resp } from '../model';
/**
 * MarketMakerBlockTradeApi - axios parameter creator
 * @export
 */
export const MarketMakerBlockTradeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Send in a new block trade order.
         * @summary New Block Trade Order (TRADE)
         * @param {Array<string>} legs 
         * @param {string} liquidity 
         * @param {string} price 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlockOrderCreateV1: async (legs: Array<string>, liquidity: string, price: string, quantity: string, side: string, symbol: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legs' is not null or undefined
            assertParamExists('createBlockOrderCreateV1', 'legs', legs)
            // verify required parameter 'liquidity' is not null or undefined
            assertParamExists('createBlockOrderCreateV1', 'liquidity', liquidity)
            // verify required parameter 'price' is not null or undefined
            assertParamExists('createBlockOrderCreateV1', 'price', price)
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('createBlockOrderCreateV1', 'quantity', quantity)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('createBlockOrderCreateV1', 'side', side)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('createBlockOrderCreateV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBlockOrderCreateV1', 'timestamp', timestamp)
            const localVarPath = `/eapi/v1/block/order/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required

            if (legs) {
                localVarFormParams.set('legs', legs.join(COLLECTION_FORMATS.csv));
            }

    
            if (liquidity !== undefined) { 
                localVarFormParams.set('liquidity', liquidity as any);
            }
    
            if (price !== undefined) { 
                localVarFormParams.set('price', price as any);
            }
    
            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.set('side', side as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel a block trade order.
         * @summary Cancel Block Trade Order (TRADE)
         * @param {string} blockOrderMatchingKey 
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlockOrderCreateV1: async (blockOrderMatchingKey: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockOrderMatchingKey' is not null or undefined
            assertParamExists('deleteBlockOrderCreateV1', 'blockOrderMatchingKey', blockOrderMatchingKey)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('deleteBlockOrderCreateV1', 'timestamp', timestamp)
            const localVarPath = `/eapi/v1/block/order/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (blockOrderMatchingKey !== undefined) {
                localVarQueryParameter['blockOrderMatchingKey'] = blockOrderMatchingKey;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketMakerBlockTradeApi - functional programming interface
 * @export
 */
export const MarketMakerBlockTradeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketMakerBlockTradeApiAxiosParamCreator(configuration)
    return {
        /**
         * Send in a new block trade order.
         * @summary New Block Trade Order (TRADE)
         * @param {Array<string>} legs 
         * @param {string} liquidity 
         * @param {string} price 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBlockOrderCreateV1(legs: Array<string>, liquidity: string, price: string, quantity: string, side: string, symbol: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsCreateBlockOrderCreateV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBlockOrderCreateV1(legs, liquidity, price, quantity, side, symbol, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketMakerBlockTradeApi.createBlockOrderCreateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancel a block trade order.
         * @summary Cancel Block Trade Order (TRADE)
         * @param {string} blockOrderMatchingKey 
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlockOrderCreateV1(blockOrderMatchingKey: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlockOrderCreateV1(blockOrderMatchingKey, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketMakerBlockTradeApi.deleteBlockOrderCreateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MarketMakerBlockTradeApi - factory interface
 * @export
 */
export const MarketMakerBlockTradeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketMakerBlockTradeApiFp(configuration)
    return {
        /**
         * Send in a new block trade order.
         * @summary New Block Trade Order (TRADE)
         * @param {MarketMakerBlockTradeApiCreateBlockOrderCreateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlockOrderCreateV1(requestParameters: MarketMakerBlockTradeApiCreateBlockOrderCreateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsCreateBlockOrderCreateV1Resp> {
            return localVarFp.createBlockOrderCreateV1(requestParameters.legs, requestParameters.liquidity, requestParameters.price, requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel a block trade order.
         * @summary Cancel Block Trade Order (TRADE)
         * @param {MarketMakerBlockTradeApiDeleteBlockOrderCreateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlockOrderCreateV1(requestParameters: MarketMakerBlockTradeApiDeleteBlockOrderCreateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteBlockOrderCreateV1(requestParameters.blockOrderMatchingKey, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketMakerBlockTradeApi - interface
 * @export
 * @interface MarketMakerBlockTradeApi
 */
export interface MarketMakerBlockTradeApiInterface {
    /**
     * Send in a new block trade order.
     * @summary New Block Trade Order (TRADE)
     * @param {MarketMakerBlockTradeApiCreateBlockOrderCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerBlockTradeApiInterface
     */
    createBlockOrderCreateV1(requestParameters: MarketMakerBlockTradeApiCreateBlockOrderCreateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsCreateBlockOrderCreateV1Resp>;

    /**
     * Cancel a block trade order.
     * @summary Cancel Block Trade Order (TRADE)
     * @param {MarketMakerBlockTradeApiDeleteBlockOrderCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerBlockTradeApiInterface
     */
    deleteBlockOrderCreateV1(requestParameters: MarketMakerBlockTradeApiDeleteBlockOrderCreateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

}

/**
 * Request parameters for createBlockOrderCreateV1 operation in MarketMakerBlockTradeApi.
 * @export
 * @interface MarketMakerBlockTradeApiCreateBlockOrderCreateV1Request
 */
export interface MarketMakerBlockTradeApiCreateBlockOrderCreateV1Request {
    /**
     * 
     * @type {Array<string>}
     * @memberof MarketMakerBlockTradeApiCreateBlockOrderCreateV1
     */
    readonly legs: Array<string>

    /**
     * 
     * @type {string}
     * @memberof MarketMakerBlockTradeApiCreateBlockOrderCreateV1
     */
    readonly liquidity: string

    /**
     * 
     * @type {string}
     * @memberof MarketMakerBlockTradeApiCreateBlockOrderCreateV1
     */
    readonly price: string

    /**
     * 
     * @type {string}
     * @memberof MarketMakerBlockTradeApiCreateBlockOrderCreateV1
     */
    readonly quantity: string

    /**
     * 
     * @type {string}
     * @memberof MarketMakerBlockTradeApiCreateBlockOrderCreateV1
     */
    readonly side: string

    /**
     * 
     * @type {string}
     * @memberof MarketMakerBlockTradeApiCreateBlockOrderCreateV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof MarketMakerBlockTradeApiCreateBlockOrderCreateV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof MarketMakerBlockTradeApiCreateBlockOrderCreateV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for deleteBlockOrderCreateV1 operation in MarketMakerBlockTradeApi.
 * @export
 * @interface MarketMakerBlockTradeApiDeleteBlockOrderCreateV1Request
 */
export interface MarketMakerBlockTradeApiDeleteBlockOrderCreateV1Request {
    /**
     * 
     * @type {string}
     * @memberof MarketMakerBlockTradeApiDeleteBlockOrderCreateV1
     */
    readonly blockOrderMatchingKey: string

    /**
     * 
     * @type {number}
     * @memberof MarketMakerBlockTradeApiDeleteBlockOrderCreateV1
     */
    readonly timestamp: number

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof MarketMakerBlockTradeApiDeleteBlockOrderCreateV1
     */
    readonly recvWindow?: number
}

/**
 * MarketMakerBlockTradeApi - object-oriented interface
 * @export
 * @class MarketMakerBlockTradeApi
 * @extends {BaseAPI}
 */
export class MarketMakerBlockTradeApi extends BaseAPI implements MarketMakerBlockTradeApiInterface {
    /**
     * Send in a new block trade order.
     * @summary New Block Trade Order (TRADE)
     * @param {MarketMakerBlockTradeApiCreateBlockOrderCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerBlockTradeApi
     */
    public createBlockOrderCreateV1(requestParameters: MarketMakerBlockTradeApiCreateBlockOrderCreateV1Request, options?: RawAxiosRequestConfig) {
        return MarketMakerBlockTradeApiFp(this.configuration).createBlockOrderCreateV1(requestParameters.legs, requestParameters.liquidity, requestParameters.price, requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel a block trade order.
     * @summary Cancel Block Trade Order (TRADE)
     * @param {MarketMakerBlockTradeApiDeleteBlockOrderCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerBlockTradeApi
     */
    public deleteBlockOrderCreateV1(requestParameters: MarketMakerBlockTradeApiDeleteBlockOrderCreateV1Request, options?: RawAxiosRequestConfig) {
        return MarketMakerBlockTradeApiFp(this.configuration).deleteBlockOrderCreateV1(requestParameters.blockOrderMatchingKey, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

