/* tslint:disable */
/* eslint-disable */
/**
 * Binance Sub Account API
 * OpenAPI specification for Binance exchange - Subaccount API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { SubaccountCreateManagedSubaccountDepositV1Resp } from '../model';
// @ts-ignore
import type { SubaccountCreateManagedSubaccountWithdrawV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetManagedSubaccountAccountSnapshotV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetManagedSubaccountAssetV1RespItem } from '../model';
// @ts-ignore
import type { SubaccountGetManagedSubaccountDepositAddressV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetManagedSubaccountFetchFutureAssetV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetManagedSubaccountInfoV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetManagedSubaccountMarginAssetV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetManagedSubaccountQueryTransLogForInvestorV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetManagedSubaccountQueryTransLogV1Resp } from '../model';
/**
 * ManagedSubAccountApi - axios parameter creator
 * @export
 */
export const ManagedSubAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deposit Assets Into The Managed Sub-account
         * @summary Deposit Assets Into The Managed Sub-account(For Investor Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateManagedSubaccountDepositV1: async (amount: string, asset: string, timestamp: number, toEmail: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subaccountCreateManagedSubaccountDepositV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('subaccountCreateManagedSubaccountDepositV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateManagedSubaccountDepositV1', 'timestamp', timestamp)
            // verify required parameter 'toEmail' is not null or undefined
            assertParamExists('subaccountCreateManagedSubaccountDepositV1', 'toEmail', toEmail)
            const localVarPath = `/sapi/v1/managed-subaccount/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toEmail !== undefined) { 
                localVarFormParams.set('toEmail', toEmail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdrawl Assets From The Managed Sub-account
         * @summary Withdrawl Assets From The Managed Sub-account(For Investor Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromEmail 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {number} [transferDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateManagedSubaccountWithdrawV1: async (amount: string, asset: string, fromEmail: string, timestamp: number, recvWindow?: number, transferDate?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subaccountCreateManagedSubaccountWithdrawV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('subaccountCreateManagedSubaccountWithdrawV1', 'asset', asset)
            // verify required parameter 'fromEmail' is not null or undefined
            assertParamExists('subaccountCreateManagedSubaccountWithdrawV1', 'fromEmail', fromEmail)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateManagedSubaccountWithdrawV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (fromEmail !== undefined) { 
                localVarFormParams.set('fromEmail', fromEmail as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (transferDate !== undefined) { 
                localVarFormParams.set('transferDate', transferDate as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Managed Sub-account Snapshot
         * @summary Query Managed Sub-account Snapshot(For Investor Master Account)
         * @param {string} email 
         * @param {string} type &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;（cross）, &amp;#34;FUTURES&amp;#34;（UM）
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountAccountSnapshotV1: async (email: string, type: string, timestamp: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountAccountSnapshotV1', 'email', email)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountAccountSnapshotV1', 'type', type)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountAccountSnapshotV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/accountSnapshot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Managed Sub-account Asset Details
         * @summary Query Managed Sub-account Asset Details(For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountAssetV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountAssetV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountAssetV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get investor\'s managed sub-account deposit address.
         * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
         * @param {string} email Sub user email
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] networks can be found in &#x60;GET /sapi/v1/capital/deposit/address&#x60;
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountDepositAddressV1: async (email: string, coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountDepositAddressV1', 'email', email)
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountDepositAddressV1', 'coin', coin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountDepositAddressV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/deposit/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Investor can use this api to query managed sub account futures asset details
         * @summary Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {string} [accountType] No input or input &amp;#34;USDT_FUTURE&amp;#34; to get UM Futures account details. Input &amp;#34;COIN_FUTURE&amp;#34; to get CM Futures account details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountFetchFutureAssetV1: async (email: string, accountType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountFetchFutureAssetV1', 'email', email)
            const localVarPath = `/sapi/v1/managed-subaccount/fetch-future-asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (accountType !== undefined) {
                localVarQueryParameter['accountType'] = accountType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get investor\'s managed sub-account list.
         * @summary Query Managed Sub-account List(For Investor)(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [email] Managed sub-account email
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 20, Max value: 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountInfoV1: async (timestamp: number, email?: string, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountInfoV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Investor can use this api to query managed sub account margin asset details
         * @summary Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {string} [accountType] No input or input &amp;#34;MARGIN&amp;#34; to get Cross Margin account details. Input &amp;#34;ISOLATED_MARGIN&amp;#34; to get Isolated Margin account details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountMarginAssetV1: async (email: string, accountType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountMarginAssetV1', 'email', email)
            const localVarPath = `/sapi/v1/managed-subaccount/marginAsset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (accountType !== undefined) {
                localVarQueryParameter['accountType'] = accountType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountQueryTransLogForInvestorV1: async (email: string, startTime: number, endTime: number, page: number, limit: number, transfers?: string, transferFunctionAccountType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogForInvestorV1', 'email', email)
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogForInvestorV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogForInvestorV1', 'endTime', endTime)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogForInvestorV1', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogForInvestorV1', 'limit', limit)
            const localVarPath = `/sapi/v1/managed-subaccount/queryTransLogForInvestor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountQueryTransLogForTradeParentV1: async (email: string, startTime: number, endTime: number, page: number, limit: number, transfers?: string, transferFunctionAccountType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogForTradeParentV1', 'email', email)
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogForTradeParentV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogForTradeParentV1', 'endTime', endTime)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogForTradeParentV1', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogForTradeParentV1', 'limit', limit)
            const localVarPath = `/sapi/v1/managed-subaccount/queryTransLogForTradeParent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {number} timestamp 
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountQueryTransLogV1: async (startTime: number, endTime: number, page: number, limit: number, timestamp: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogV1', 'endTime', endTime)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogV1', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogV1', 'limit', limit)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetManagedSubaccountQueryTransLogV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/query-trans-log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagedSubAccountApi - functional programming interface
 * @export
 */
export const ManagedSubAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManagedSubAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Deposit Assets Into The Managed Sub-account
         * @summary Deposit Assets Into The Managed Sub-account(For Investor Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateManagedSubaccountDepositV1(amount: string, asset: string, timestamp: number, toEmail: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateManagedSubaccountDepositV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateManagedSubaccountDepositV1(amount, asset, timestamp, toEmail, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedSubAccountApi.subaccountCreateManagedSubaccountDepositV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Withdrawl Assets From The Managed Sub-account
         * @summary Withdrawl Assets From The Managed Sub-account(For Investor Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromEmail 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {number} [transferDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateManagedSubaccountWithdrawV1(amount: string, asset: string, fromEmail: string, timestamp: number, recvWindow?: number, transferDate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateManagedSubaccountWithdrawV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateManagedSubaccountWithdrawV1(amount, asset, fromEmail, timestamp, recvWindow, transferDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedSubAccountApi.subaccountCreateManagedSubaccountWithdrawV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Managed Sub-account Snapshot
         * @summary Query Managed Sub-account Snapshot(For Investor Master Account)
         * @param {string} email 
         * @param {string} type &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;（cross）, &amp;#34;FUTURES&amp;#34;（UM）
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetManagedSubaccountAccountSnapshotV1(email: string, type: string, timestamp: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetManagedSubaccountAccountSnapshotV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetManagedSubaccountAccountSnapshotV1(email, type, timestamp, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedSubAccountApi.subaccountGetManagedSubaccountAccountSnapshotV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Managed Sub-account Asset Details
         * @summary Query Managed Sub-account Asset Details(For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetManagedSubaccountAssetV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubaccountGetManagedSubaccountAssetV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetManagedSubaccountAssetV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedSubAccountApi.subaccountGetManagedSubaccountAssetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get investor\'s managed sub-account deposit address.
         * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
         * @param {string} email Sub user email
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] networks can be found in &#x60;GET /sapi/v1/capital/deposit/address&#x60;
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetManagedSubaccountDepositAddressV1(email: string, coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetManagedSubaccountDepositAddressV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetManagedSubaccountDepositAddressV1(email, coin, timestamp, network, amount, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedSubAccountApi.subaccountGetManagedSubaccountDepositAddressV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Investor can use this api to query managed sub account futures asset details
         * @summary Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {string} [accountType] No input or input &amp;#34;USDT_FUTURE&amp;#34; to get UM Futures account details. Input &amp;#34;COIN_FUTURE&amp;#34; to get CM Futures account details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetManagedSubaccountFetchFutureAssetV1(email: string, accountType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetManagedSubaccountFetchFutureAssetV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetManagedSubaccountFetchFutureAssetV1(email, accountType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedSubAccountApi.subaccountGetManagedSubaccountFetchFutureAssetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get investor\'s managed sub-account list.
         * @summary Query Managed Sub-account List(For Investor)(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [email] Managed sub-account email
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 20, Max value: 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetManagedSubaccountInfoV1(timestamp: number, email?: string, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetManagedSubaccountInfoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetManagedSubaccountInfoV1(timestamp, email, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedSubAccountApi.subaccountGetManagedSubaccountInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Investor can use this api to query managed sub account margin asset details
         * @summary Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {string} [accountType] No input or input &amp;#34;MARGIN&amp;#34; to get Cross Margin account details. Input &amp;#34;ISOLATED_MARGIN&amp;#34; to get Isolated Margin account details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetManagedSubaccountMarginAssetV1(email: string, accountType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetManagedSubaccountMarginAssetV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetManagedSubaccountMarginAssetV1(email, accountType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedSubAccountApi.subaccountGetManagedSubaccountMarginAssetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetManagedSubaccountQueryTransLogForInvestorV1(email: string, startTime: number, endTime: number, page: number, limit: number, transfers?: string, transferFunctionAccountType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetManagedSubaccountQueryTransLogForInvestorV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetManagedSubaccountQueryTransLogForInvestorV1(email, startTime, endTime, page, limit, transfers, transferFunctionAccountType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedSubAccountApi.subaccountGetManagedSubaccountQueryTransLogForInvestorV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetManagedSubaccountQueryTransLogForTradeParentV1(email: string, startTime: number, endTime: number, page: number, limit: number, transfers?: string, transferFunctionAccountType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetManagedSubaccountQueryTransLogForTradeParentV1(email, startTime, endTime, page, limit, transfers, transferFunctionAccountType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedSubAccountApi.subaccountGetManagedSubaccountQueryTransLogForTradeParentV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {number} timestamp 
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetManagedSubaccountQueryTransLogV1(startTime: number, endTime: number, page: number, limit: number, timestamp: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetManagedSubaccountQueryTransLogV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetManagedSubaccountQueryTransLogV1(startTime, endTime, page, limit, timestamp, transfers, transferFunctionAccountType, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedSubAccountApi.subaccountGetManagedSubaccountQueryTransLogV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ManagedSubAccountApi - factory interface
 * @export
 */
export const ManagedSubAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManagedSubAccountApiFp(configuration)
    return {
        /**
         * Deposit Assets Into The Managed Sub-account
         * @summary Deposit Assets Into The Managed Sub-account(For Investor Master Account)
         * @param {ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateManagedSubaccountDepositV1(requestParameters: ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateManagedSubaccountDepositV1Resp> {
            return localVarFp.subaccountCreateManagedSubaccountDepositV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Withdrawl Assets From The Managed Sub-account
         * @summary Withdrawl Assets From The Managed Sub-account(For Investor Master Account)
         * @param {ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateManagedSubaccountWithdrawV1(requestParameters: ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateManagedSubaccountWithdrawV1Resp> {
            return localVarFp.subaccountCreateManagedSubaccountWithdrawV1(requestParameters.amount, requestParameters.asset, requestParameters.fromEmail, requestParameters.timestamp, requestParameters.recvWindow, requestParameters.transferDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Managed Sub-account Snapshot
         * @summary Query Managed Sub-account Snapshot(For Investor Master Account)
         * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountAccountSnapshotV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountAccountSnapshotV1Resp> {
            return localVarFp.subaccountGetManagedSubaccountAccountSnapshotV1(requestParameters.email, requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Managed Sub-account Asset Details
         * @summary Query Managed Sub-account Asset Details(For Investor Master Account)
         * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountAssetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountAssetV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetManagedSubaccountAssetV1RespItem>> {
            return localVarFp.subaccountGetManagedSubaccountAssetV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get investor\'s managed sub-account deposit address.
         * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
         * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountDepositAddressV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountDepositAddressV1Resp> {
            return localVarFp.subaccountGetManagedSubaccountDepositAddressV1(requestParameters.email, requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Investor can use this api to query managed sub account futures asset details
         * @summary Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
         * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountFetchFutureAssetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountFetchFutureAssetV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountFetchFutureAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountFetchFutureAssetV1Resp> {
            return localVarFp.subaccountGetManagedSubaccountFetchFutureAssetV1(requestParameters.email, requestParameters.accountType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get investor\'s managed sub-account list.
         * @summary Query Managed Sub-account List(For Investor)(USER_DATA)
         * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountInfoV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountInfoV1Resp> {
            return localVarFp.subaccountGetManagedSubaccountInfoV1(requestParameters.timestamp, requestParameters.email, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Investor can use this api to query managed sub account margin asset details
         * @summary Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
         * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountMarginAssetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountMarginAssetV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountMarginAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountMarginAssetV1Resp> {
            return localVarFp.subaccountGetManagedSubaccountMarginAssetV1(requestParameters.email, requestParameters.accountType, options).then((request) => request(axios, basePath));
        },
        /**
         * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
         * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountQueryTransLogForInvestorV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountQueryTransLogForInvestorV1Resp> {
            return localVarFp.subaccountGetManagedSubaccountQueryTransLogForInvestorV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.transfers, requestParameters.transferFunctionAccountType, options).then((request) => request(axios, basePath));
        },
        /**
         * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
         * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountQueryTransLogForTradeParentV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Resp> {
            return localVarFp.subaccountGetManagedSubaccountQueryTransLogForTradeParentV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.transfers, requestParameters.transferFunctionAccountType, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
         * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetManagedSubaccountQueryTransLogV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountQueryTransLogV1Resp> {
            return localVarFp.subaccountGetManagedSubaccountQueryTransLogV1(requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.timestamp, requestParameters.transfers, requestParameters.transferFunctionAccountType, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManagedSubAccountApi - interface
 * @export
 * @interface ManagedSubAccountApi
 */
export interface ManagedSubAccountApiInterface {
    /**
     * Deposit Assets Into The Managed Sub-account
     * @summary Deposit Assets Into The Managed Sub-account(For Investor Master Account)
     * @param {ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApiInterface
     */
    subaccountCreateManagedSubaccountDepositV1(requestParameters: ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateManagedSubaccountDepositV1Resp>;

    /**
     * Withdrawl Assets From The Managed Sub-account
     * @summary Withdrawl Assets From The Managed Sub-account(For Investor Master Account)
     * @param {ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApiInterface
     */
    subaccountCreateManagedSubaccountWithdrawV1(requestParameters: ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateManagedSubaccountWithdrawV1Resp>;

    /**
     * Query Managed Sub-account Snapshot
     * @summary Query Managed Sub-account Snapshot(For Investor Master Account)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApiInterface
     */
    subaccountGetManagedSubaccountAccountSnapshotV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountAccountSnapshotV1Resp>;

    /**
     * Query Managed Sub-account Asset Details
     * @summary Query Managed Sub-account Asset Details(For Investor Master Account)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApiInterface
     */
    subaccountGetManagedSubaccountAssetV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetManagedSubaccountAssetV1RespItem>>;

    /**
     * Get investor\'s managed sub-account deposit address.
     * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApiInterface
     */
    subaccountGetManagedSubaccountDepositAddressV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountDepositAddressV1Resp>;

    /**
     * Investor can use this api to query managed sub account futures asset details
     * @summary Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountFetchFutureAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApiInterface
     */
    subaccountGetManagedSubaccountFetchFutureAssetV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountFetchFutureAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountFetchFutureAssetV1Resp>;

    /**
     * Get investor\'s managed sub-account list.
     * @summary Query Managed Sub-account List(For Investor)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApiInterface
     */
    subaccountGetManagedSubaccountInfoV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountInfoV1Resp>;

    /**
     * Investor can use this api to query managed sub account margin asset details
     * @summary Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountMarginAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApiInterface
     */
    subaccountGetManagedSubaccountMarginAssetV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountMarginAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountMarginAssetV1Resp>;

    /**
     * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
     * @summary Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApiInterface
     */
    subaccountGetManagedSubaccountQueryTransLogForInvestorV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountQueryTransLogForInvestorV1Resp>;

    /**
     * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
     * @summary Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApiInterface
     */
    subaccountGetManagedSubaccountQueryTransLogForTradeParentV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Resp>;

    /**
     * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
     * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApiInterface
     */
    subaccountGetManagedSubaccountQueryTransLogV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetManagedSubaccountQueryTransLogV1Resp>;

}

/**
 * Request parameters for subaccountCreateManagedSubaccountDepositV1 operation in ManagedSubAccountApi.
 * @export
 * @interface ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1Request
 */
export interface ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1Request {
    /**
     * 
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1
     */
    readonly toEmail: string

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountCreateManagedSubaccountWithdrawV1 operation in ManagedSubAccountApi.
 * @export
 * @interface ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1Request
 */
export interface ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1Request {
    /**
     * 
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1
     */
    readonly fromEmail: string

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1
     */
    readonly transferDate?: number
}

/**
 * Request parameters for subaccountGetManagedSubaccountAccountSnapshotV1 operation in ManagedSubAccountApi.
 * @export
 * @interface ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1Request
 */
export interface ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1Request {
    /**
     * 
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1
     */
    readonly email: string

    /**
     * &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;（cross）, &amp;#34;FUTURES&amp;#34;（UM）
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1
     */
    readonly type: string

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1
     */
    readonly endTime?: number

    /**
     * min 7, max 30, default 7
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetManagedSubaccountAssetV1 operation in ManagedSubAccountApi.
 * @export
 * @interface ManagedSubAccountApiSubaccountGetManagedSubaccountAssetV1Request
 */
export interface ManagedSubAccountApiSubaccountGetManagedSubaccountAssetV1Request {
    /**
     * 
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountAssetV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountAssetV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountAssetV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetManagedSubaccountDepositAddressV1 operation in ManagedSubAccountApi.
 * @export
 * @interface ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1Request
 */
export interface ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1Request {
    /**
     * Sub user email
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1
     */
    readonly email: string

    /**
     * 
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1
     */
    readonly coin: string

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1
     */
    readonly timestamp: number

    /**
     * networks can be found in &#x60;GET /sapi/v1/capital/deposit/address&#x60;
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1
     */
    readonly amount?: string

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetManagedSubaccountFetchFutureAssetV1 operation in ManagedSubAccountApi.
 * @export
 * @interface ManagedSubAccountApiSubaccountGetManagedSubaccountFetchFutureAssetV1Request
 */
export interface ManagedSubAccountApiSubaccountGetManagedSubaccountFetchFutureAssetV1Request {
    /**
     * Managed Sub Account Email
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountFetchFutureAssetV1
     */
    readonly email: string

    /**
     * No input or input &amp;#34;USDT_FUTURE&amp;#34; to get UM Futures account details. Input &amp;#34;COIN_FUTURE&amp;#34; to get CM Futures account details.
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountFetchFutureAssetV1
     */
    readonly accountType?: string
}

/**
 * Request parameters for subaccountGetManagedSubaccountInfoV1 operation in ManagedSubAccountApi.
 * @export
 * @interface ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1Request
 */
export interface ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1Request {
    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1
     */
    readonly timestamp: number

    /**
     * Managed sub-account email
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1
     */
    readonly email?: string

    /**
     * Default value: 1
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1
     */
    readonly page?: number

    /**
     * Default value: 20, Max value: 20
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetManagedSubaccountMarginAssetV1 operation in ManagedSubAccountApi.
 * @export
 * @interface ManagedSubAccountApiSubaccountGetManagedSubaccountMarginAssetV1Request
 */
export interface ManagedSubAccountApiSubaccountGetManagedSubaccountMarginAssetV1Request {
    /**
     * Managed Sub Account Email
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountMarginAssetV1
     */
    readonly email: string

    /**
     * No input or input &amp;#34;MARGIN&amp;#34; to get Cross Margin account details. Input &amp;#34;ISOLATED_MARGIN&amp;#34; to get Isolated Margin account details.
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountMarginAssetV1
     */
    readonly accountType?: string
}

/**
 * Request parameters for subaccountGetManagedSubaccountQueryTransLogForInvestorV1 operation in ManagedSubAccountApi.
 * @export
 * @interface ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1Request
 */
export interface ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1Request {
    /**
     * Managed Sub Account Email
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly email: string

    /**
     * Start Time
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly startTime: number

    /**
     * End Time (The start time and end time interval cannot exceed half a year)
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly endTime: number

    /**
     * Page
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly page: number

    /**
     * Limit (Max: 500)
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly limit: number

    /**
     * Transfer Direction (FROM/TO)
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly transfers?: string

    /**
     * Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly transferFunctionAccountType?: string
}

/**
 * Request parameters for subaccountGetManagedSubaccountQueryTransLogForTradeParentV1 operation in ManagedSubAccountApi.
 * @export
 * @interface ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Request
 */
export interface ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Request {
    /**
     * Managed Sub Account Email
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly email: string

    /**
     * Start Time
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly startTime: number

    /**
     * End Time (The start time and end time interval cannot exceed half a year)
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly endTime: number

    /**
     * Page
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly page: number

    /**
     * Limit (Max: 500)
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly limit: number

    /**
     * Transfer Direction (FROM/TO)
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly transfers?: string

    /**
     * Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly transferFunctionAccountType?: string
}

/**
 * Request parameters for subaccountGetManagedSubaccountQueryTransLogV1 operation in ManagedSubAccountApi.
 * @export
 * @interface ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1Request
 */
export interface ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1Request {
    /**
     * Start Time
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1
     */
    readonly startTime: number

    /**
     * End Time (The start time and end time interval cannot exceed half a year)
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1
     */
    readonly endTime: number

    /**
     * Page
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1
     */
    readonly page: number

    /**
     * Limit (Max: 500)
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1
     */
    readonly limit: number

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1
     */
    readonly timestamp: number

    /**
     * Transfer Direction (FROM/TO)
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1
     */
    readonly transfers?: string

    /**
     * Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
     * @type {string}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1
     */
    readonly transferFunctionAccountType?: string

    /**
     * 
     * @type {number}
     * @memberof ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1
     */
    readonly recvWindow?: number
}

/**
 * ManagedSubAccountApi - object-oriented interface
 * @export
 * @class ManagedSubAccountApi
 * @extends {BaseAPI}
 */
export class ManagedSubAccountApi extends BaseAPI implements ManagedSubAccountApiInterface {
    /**
     * Deposit Assets Into The Managed Sub-account
     * @summary Deposit Assets Into The Managed Sub-account(For Investor Master Account)
     * @param {ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApi
     */
    public subaccountCreateManagedSubaccountDepositV1(requestParameters: ManagedSubAccountApiSubaccountCreateManagedSubaccountDepositV1Request, options?: RawAxiosRequestConfig) {
        return ManagedSubAccountApiFp(this.configuration).subaccountCreateManagedSubaccountDepositV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Withdrawl Assets From The Managed Sub-account
     * @summary Withdrawl Assets From The Managed Sub-account(For Investor Master Account)
     * @param {ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApi
     */
    public subaccountCreateManagedSubaccountWithdrawV1(requestParameters: ManagedSubAccountApiSubaccountCreateManagedSubaccountWithdrawV1Request, options?: RawAxiosRequestConfig) {
        return ManagedSubAccountApiFp(this.configuration).subaccountCreateManagedSubaccountWithdrawV1(requestParameters.amount, requestParameters.asset, requestParameters.fromEmail, requestParameters.timestamp, requestParameters.recvWindow, requestParameters.transferDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Managed Sub-account Snapshot
     * @summary Query Managed Sub-account Snapshot(For Investor Master Account)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApi
     */
    public subaccountGetManagedSubaccountAccountSnapshotV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountAccountSnapshotV1Request, options?: RawAxiosRequestConfig) {
        return ManagedSubAccountApiFp(this.configuration).subaccountGetManagedSubaccountAccountSnapshotV1(requestParameters.email, requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Managed Sub-account Asset Details
     * @summary Query Managed Sub-account Asset Details(For Investor Master Account)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApi
     */
    public subaccountGetManagedSubaccountAssetV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountAssetV1Request, options?: RawAxiosRequestConfig) {
        return ManagedSubAccountApiFp(this.configuration).subaccountGetManagedSubaccountAssetV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get investor\'s managed sub-account deposit address.
     * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApi
     */
    public subaccountGetManagedSubaccountDepositAddressV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountDepositAddressV1Request, options?: RawAxiosRequestConfig) {
        return ManagedSubAccountApiFp(this.configuration).subaccountGetManagedSubaccountDepositAddressV1(requestParameters.email, requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Investor can use this api to query managed sub account futures asset details
     * @summary Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountFetchFutureAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApi
     */
    public subaccountGetManagedSubaccountFetchFutureAssetV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountFetchFutureAssetV1Request, options?: RawAxiosRequestConfig) {
        return ManagedSubAccountApiFp(this.configuration).subaccountGetManagedSubaccountFetchFutureAssetV1(requestParameters.email, requestParameters.accountType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get investor\'s managed sub-account list.
     * @summary Query Managed Sub-account List(For Investor)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApi
     */
    public subaccountGetManagedSubaccountInfoV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountInfoV1Request, options?: RawAxiosRequestConfig) {
        return ManagedSubAccountApiFp(this.configuration).subaccountGetManagedSubaccountInfoV1(requestParameters.timestamp, requestParameters.email, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Investor can use this api to query managed sub account margin asset details
     * @summary Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountMarginAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApi
     */
    public subaccountGetManagedSubaccountMarginAssetV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountMarginAssetV1Request, options?: RawAxiosRequestConfig) {
        return ManagedSubAccountApiFp(this.configuration).subaccountGetManagedSubaccountMarginAssetV1(requestParameters.email, requestParameters.accountType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
     * @summary Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApi
     */
    public subaccountGetManagedSubaccountQueryTransLogForInvestorV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForInvestorV1Request, options?: RawAxiosRequestConfig) {
        return ManagedSubAccountApiFp(this.configuration).subaccountGetManagedSubaccountQueryTransLogForInvestorV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.transfers, requestParameters.transferFunctionAccountType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
     * @summary Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApi
     */
    public subaccountGetManagedSubaccountQueryTransLogForTradeParentV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogForTradeParentV1Request, options?: RawAxiosRequestConfig) {
        return ManagedSubAccountApiFp(this.configuration).subaccountGetManagedSubaccountQueryTransLogForTradeParentV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.transfers, requestParameters.transferFunctionAccountType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
     * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
     * @param {ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedSubAccountApi
     */
    public subaccountGetManagedSubaccountQueryTransLogV1(requestParameters: ManagedSubAccountApiSubaccountGetManagedSubaccountQueryTransLogV1Request, options?: RawAxiosRequestConfig) {
        return ManagedSubAccountApiFp(this.configuration).subaccountGetManagedSubaccountQueryTransLogV1(requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.timestamp, requestParameters.transfers, requestParameters.transferFunctionAccountType, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

