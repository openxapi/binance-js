/* tslint:disable */
/* eslint-disable */
/**
 * Binance Sub Account API
 * OpenAPI specification for Binance exchange - Subaccount API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountFuturesInternalTransferV1Resp } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountFuturesMovePositionV1Resp } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountFuturesTransferV1Resp } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountMarginTransferV1Resp } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountTransferSubToMasterV1Resp } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountTransferSubToSubV1Resp } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountUniversalTransferV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetCapitalDepositSubAddressV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetCapitalDepositSubHisrecV1RespItem } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountAssetsV3Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountAssetsV4Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountFuturesAccountSummaryV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountFuturesAccountSummaryV2Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountFuturesAccountV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountFuturesAccountV2Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountFuturesInternalTransferV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountFuturesMovePositionV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountMarginAccountSummaryV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountMarginAccountV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountSpotSummaryV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountSubTransferHistoryV1RespItem } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountTransferSubUserHistoryV1RespItem } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountUniversalTransferV1Resp } from '../model';
/**
 * AssetManagementApi - axios parameter creator
 * @export
 */
export const AssetManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sub-account Futures Asset Transfer
         * @summary Sub-account Futures Asset Transfer(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromEmail 
         * @param {number} futuresType 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountFuturesInternalTransferV1: async (amount: string, asset: string, fromEmail: string, futuresType: number, timestamp: number, toEmail: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesInternalTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesInternalTransferV1', 'asset', asset)
            // verify required parameter 'fromEmail' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesInternalTransferV1', 'fromEmail', fromEmail)
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesInternalTransferV1', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesInternalTransferV1', 'timestamp', timestamp)
            // verify required parameter 'toEmail' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesInternalTransferV1', 'toEmail', toEmail)
            const localVarPath = `/sapi/v1/sub-account/futures/internalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (fromEmail !== undefined) { 
                localVarFormParams.set('fromEmail', fromEmail as any);
            }
    
            if (futuresType !== undefined) { 
                localVarFormParams.set('futuresType', futuresType as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toEmail !== undefined) { 
                localVarFormParams.set('toEmail', toEmail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Move position between sub-master, master-sub, or sub-sub accounts when necessary
         * @summary Move Position for Sub-account (For Master Account)
         * @param {string} fromUserEmail 
         * @param {Array<object>} orderArgs 
         * @param {string} productType 
         * @param {number} timestamp 
         * @param {string} toUserEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountFuturesMovePositionV1: async (fromUserEmail: string, orderArgs: Array<object>, productType: string, timestamp: number, toUserEmail: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromUserEmail' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesMovePositionV1', 'fromUserEmail', fromUserEmail)
            // verify required parameter 'orderArgs' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesMovePositionV1', 'orderArgs', orderArgs)
            // verify required parameter 'productType' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesMovePositionV1', 'productType', productType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesMovePositionV1', 'timestamp', timestamp)
            // verify required parameter 'toUserEmail' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesMovePositionV1', 'toUserEmail', toUserEmail)
            const localVarPath = `/sapi/v1/sub-account/futures/move-position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (fromUserEmail !== undefined) { 
                localVarFormParams.set('fromUserEmail', fromUserEmail as any);
            }
                if (orderArgs) {
                localVarFormParams.set('orderArgs', orderArgs.join(COLLECTION_FORMATS.csv));
            }

    
            if (productType !== undefined) { 
                localVarFormParams.set('productType', productType as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toUserEmail !== undefined) { 
                localVarFormParams.set('toUserEmail', toUserEmail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Futures Transfer for Sub-account
         * @summary Futures Transfer for Sub-account(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} type 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountFuturesTransferV1: async (amount: string, asset: string, email: string, timestamp: number, type: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesTransferV1', 'asset', asset)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesTransferV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesTransferV1', 'timestamp', timestamp)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesTransferV1', 'type', type)
            const localVarPath = `/sapi/v1/sub-account/futures/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Margin Transfer for Sub-account
         * @summary Margin Transfer for Sub-account(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} type 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountMarginTransferV1: async (amount: string, asset: string, email: string, timestamp: number, type: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subaccountCreateSubAccountMarginTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('subaccountCreateSubAccountMarginTransferV1', 'asset', asset)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountCreateSubAccountMarginTransferV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountMarginTransferV1', 'timestamp', timestamp)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('subaccountCreateSubAccountMarginTransferV1', 'type', type)
            const localVarPath = `/sapi/v1/sub-account/margin/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer to Master
         * @summary Transfer to Master(For Sub-account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountTransferSubToMasterV1: async (amount: string, asset: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subaccountCreateSubAccountTransferSubToMasterV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('subaccountCreateSubAccountTransferSubToMasterV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountTransferSubToMasterV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/transfer/subToMaster`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer to Sub-account of Same Master
         * @summary Transfer to Sub-account of Same Master(For Sub-account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountTransferSubToSubV1: async (amount: string, asset: string, timestamp: number, toEmail: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subaccountCreateSubAccountTransferSubToSubV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('subaccountCreateSubAccountTransferSubToSubV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountTransferSubToSubV1', 'timestamp', timestamp)
            // verify required parameter 'toEmail' is not null or undefined
            assertParamExists('subaccountCreateSubAccountTransferSubToSubV1', 'toEmail', toEmail)
            const localVarPath = `/sapi/v1/sub-account/transfer/subToSub`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toEmail !== undefined) { 
                localVarFormParams.set('toEmail', toEmail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Universal Transfer
         * @summary Universal Transfer(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromAccountType 
         * @param {number} timestamp 
         * @param {string} toAccountType 
         * @param {string} [clientTranId] 
         * @param {string} [fromEmail] 
         * @param {number} [recvWindow] 
         * @param {string} [symbol] 
         * @param {string} [toEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountUniversalTransferV1: async (amount: string, asset: string, fromAccountType: string, timestamp: number, toAccountType: string, clientTranId?: string, fromEmail?: string, recvWindow?: number, symbol?: string, toEmail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subaccountCreateSubAccountUniversalTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('subaccountCreateSubAccountUniversalTransferV1', 'asset', asset)
            // verify required parameter 'fromAccountType' is not null or undefined
            assertParamExists('subaccountCreateSubAccountUniversalTransferV1', 'fromAccountType', fromAccountType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountUniversalTransferV1', 'timestamp', timestamp)
            // verify required parameter 'toAccountType' is not null or undefined
            assertParamExists('subaccountCreateSubAccountUniversalTransferV1', 'toAccountType', toAccountType)
            const localVarPath = `/sapi/v1/sub-account/universalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (clientTranId !== undefined) { 
                localVarFormParams.set('clientTranId', clientTranId as any);
            }
    
            if (fromAccountType !== undefined) { 
                localVarFormParams.set('fromAccountType', fromAccountType as any);
            }
    
            if (fromEmail !== undefined) { 
                localVarFormParams.set('fromEmail', fromEmail as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toAccountType !== undefined) { 
                localVarFormParams.set('toAccountType', toAccountType as any);
            }
    
            if (toEmail !== undefined) { 
                localVarFormParams.set('toEmail', toEmail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch sub-account deposit address
         * @summary Get Sub-account Deposit Address(For Master Account)
         * @param {string} email Sub account email
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetCapitalDepositSubAddressV1: async (email: string, coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetCapitalDepositSubAddressV1', 'email', email)
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('subaccountGetCapitalDepositSubAddressV1', 'coin', coin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetCapitalDepositSubAddressV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/deposit/subAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch sub-account deposit history
         * @summary Get Sub-account Deposit History(For Master Account)
         * @param {string} email Sub account email
         * @param {number} timestamp 
         * @param {string} [coin] 
         * @param {number} [status] 0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User confirm,1:success)
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] 
         * @param {number} [offset] default:0
         * @param {number} [recvWindow] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetCapitalDepositSubHisrecV1: async (email: string, timestamp: number, coin?: string, status?: number, startTime?: number, endTime?: number, limit?: number, offset?: number, recvWindow?: number, txId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetCapitalDepositSubHisrecV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetCapitalDepositSubHisrecV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/deposit/subHisrec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (txId !== undefined) {
                localVarQueryParameter['txId'] = txId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets(For Master Account)
         * @param {string} email Sub account email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountAssetsV3: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetSubAccountAssetsV3', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountAssetsV3', 'timestamp', timestamp)
            const localVarPath = `/sapi/v3/sub-account/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
         * @param {string} email Sub Account Email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountAssetsV4: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetSubAccountAssetsV4', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountAssetsV4', 'timestamp', timestamp)
            const localVarPath = `/sapi/v4/sub-account/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesAccountSummaryV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesAccountSummaryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/accountSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [page] default:1
         * @param {number} [limit] default:10, max:20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesAccountSummaryV2: async (futuresType: number, timestamp: number, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesAccountSummaryV2', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesAccountSummaryV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/sub-account/futures/accountSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesAccountV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesAccountV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesAccountV2: async (email: string, futuresType: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesAccountV2', 'email', email)
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesAccountV2', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesAccountV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/sub-account/futures/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Sub-account Futures Asset Transfer History
         * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Query-Sub-account-Futures-Asset-Transfer-History#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT-margined Futures，2: Coin-margined Futures
         * @param {number} timestamp 
         * @param {number} [startTime] Cannot be earlier than 1 month ago
         * @param {number} [endTime] 
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 50, Max value: 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesInternalTransferV1: async (email: string, futuresType: number, timestamp: number, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesInternalTransferV1', 'email', email)
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesInternalTransferV1', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesInternalTransferV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/internalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query move position history
         * @summary Get Move Position History for Sub-account (For Master Account)
         * @param {string} symbol 
         * @param {number} page 
         * @param {number} row 
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesMovePositionV1: async (symbol: string, page: number, row: number, timestamp: number, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesMovePositionV1', 'symbol', symbol)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesMovePositionV1', 'page', page)
            // verify required parameter 'row' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesMovePositionV1', 'row', row)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesMovePositionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/move-position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (row !== undefined) {
                localVarQueryParameter['row'] = row;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Summary of Sub-account\'s Margin Account
         * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountMarginAccountSummaryV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountMarginAccountSummaryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/margin/accountSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Detail on Sub-account\'s Margin Account
         * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Margin-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountMarginAccountV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetSubAccountMarginAccountV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountMarginAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/margin/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get BTC valued asset summary of subaccounts.
         * @summary Query Sub-account Spot Assets Summary(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] Sub account email
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountSpotSummaryV1: async (timestamp: number, email?: string, page?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountSpotSummaryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/spotSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Sub-account Spot Asset Transfer History
         * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
         * @param {number} timestamp 
         * @param {string} [fromEmail] 
         * @param {string} [toEmail] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountSubTransferHistoryV1: async (timestamp: number, fromEmail?: string, toEmail?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountSubTransferHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/sub/transfer/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromEmail !== undefined) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sub-account Transfer History
         * @summary Sub-account Transfer History(For Sub-account)
         * @param {number} timestamp 
         * @param {string} [asset] If not sent, result of all assets will be returned
         * @param {number} [type] 1: transfer in, 2: transfer out
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 500
         * @param {boolean} [returnFailHistory] Default &#x60;False&#x60;, return PROCESS and SUCCESS status history; If &#x60;True&#x60;,return PROCESS and SUCCESS and FAILURE status history
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountTransferSubUserHistoryV1: async (timestamp: number, asset?: string, type?: number, startTime?: number, endTime?: number, limit?: number, returnFailHistory?: boolean, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountTransferSubUserHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/transfer/subUserHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (returnFailHistory !== undefined) {
                localVarQueryParameter['returnFailHistory'] = returnFailHistory;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Universal Transfer History
         * @summary Query Universal Transfer History(For Master Account)
         * @param {number} timestamp 
         * @param {string} [fromEmail] 
         * @param {string} [toEmail] 
         * @param {string} [clientTranId] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500, Max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountUniversalTransferV1: async (timestamp: number, fromEmail?: string, toEmail?: string, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountUniversalTransferV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/universalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromEmail !== undefined) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (clientTranId !== undefined) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetManagementApi - functional programming interface
 * @export
 */
export const AssetManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Sub-account Futures Asset Transfer
         * @summary Sub-account Futures Asset Transfer(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromEmail 
         * @param {number} futuresType 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountFuturesInternalTransferV1(amount: string, asset: string, fromEmail: string, futuresType: number, timestamp: number, toEmail: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountFuturesInternalTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountFuturesInternalTransferV1(amount, asset, fromEmail, futuresType, timestamp, toEmail, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountCreateSubAccountFuturesInternalTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Move position between sub-master, master-sub, or sub-sub accounts when necessary
         * @summary Move Position for Sub-account (For Master Account)
         * @param {string} fromUserEmail 
         * @param {Array<object>} orderArgs 
         * @param {string} productType 
         * @param {number} timestamp 
         * @param {string} toUserEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountFuturesMovePositionV1(fromUserEmail: string, orderArgs: Array<object>, productType: string, timestamp: number, toUserEmail: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountFuturesMovePositionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountFuturesMovePositionV1(fromUserEmail, orderArgs, productType, timestamp, toUserEmail, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountCreateSubAccountFuturesMovePositionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Futures Transfer for Sub-account
         * @summary Futures Transfer for Sub-account(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} type 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountFuturesTransferV1(amount: string, asset: string, email: string, timestamp: number, type: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountFuturesTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountFuturesTransferV1(amount, asset, email, timestamp, type, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountCreateSubAccountFuturesTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Margin Transfer for Sub-account
         * @summary Margin Transfer for Sub-account(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} type 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountMarginTransferV1(amount: string, asset: string, email: string, timestamp: number, type: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountMarginTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountMarginTransferV1(amount, asset, email, timestamp, type, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountCreateSubAccountMarginTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfer to Master
         * @summary Transfer to Master(For Sub-account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountTransferSubToMasterV1(amount: string, asset: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountTransferSubToMasterV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountTransferSubToMasterV1(amount, asset, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountCreateSubAccountTransferSubToMasterV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfer to Sub-account of Same Master
         * @summary Transfer to Sub-account of Same Master(For Sub-account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountTransferSubToSubV1(amount: string, asset: string, timestamp: number, toEmail: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountTransferSubToSubV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountTransferSubToSubV1(amount, asset, timestamp, toEmail, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountCreateSubAccountTransferSubToSubV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Universal Transfer
         * @summary Universal Transfer(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromAccountType 
         * @param {number} timestamp 
         * @param {string} toAccountType 
         * @param {string} [clientTranId] 
         * @param {string} [fromEmail] 
         * @param {number} [recvWindow] 
         * @param {string} [symbol] 
         * @param {string} [toEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountUniversalTransferV1(amount: string, asset: string, fromAccountType: string, timestamp: number, toAccountType: string, clientTranId?: string, fromEmail?: string, recvWindow?: number, symbol?: string, toEmail?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountUniversalTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountUniversalTransferV1(amount, asset, fromAccountType, timestamp, toAccountType, clientTranId, fromEmail, recvWindow, symbol, toEmail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountCreateSubAccountUniversalTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch sub-account deposit address
         * @summary Get Sub-account Deposit Address(For Master Account)
         * @param {string} email Sub account email
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetCapitalDepositSubAddressV1(email: string, coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetCapitalDepositSubAddressV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetCapitalDepositSubAddressV1(email, coin, timestamp, network, amount, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetCapitalDepositSubAddressV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch sub-account deposit history
         * @summary Get Sub-account Deposit History(For Master Account)
         * @param {string} email Sub account email
         * @param {number} timestamp 
         * @param {string} [coin] 
         * @param {number} [status] 0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User confirm,1:success)
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] 
         * @param {number} [offset] default:0
         * @param {number} [recvWindow] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetCapitalDepositSubHisrecV1(email: string, timestamp: number, coin?: string, status?: number, startTime?: number, endTime?: number, limit?: number, offset?: number, recvWindow?: number, txId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubaccountGetCapitalDepositSubHisrecV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetCapitalDepositSubHisrecV1(email, timestamp, coin, status, startTime, endTime, limit, offset, recvWindow, txId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetCapitalDepositSubHisrecV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets(For Master Account)
         * @param {string} email Sub account email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountAssetsV3(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountAssetsV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountAssetsV3(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountAssetsV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
         * @param {string} email Sub Account Email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountAssetsV4(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountAssetsV4Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountAssetsV4(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountAssetsV4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountFuturesAccountSummaryV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountFuturesAccountSummaryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountFuturesAccountSummaryV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountFuturesAccountSummaryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [page] default:1
         * @param {number} [limit] default:10, max:20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountFuturesAccountSummaryV2(futuresType: number, timestamp: number, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountFuturesAccountSummaryV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountFuturesAccountSummaryV2(futuresType, timestamp, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountFuturesAccountSummaryV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountFuturesAccountV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountFuturesAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountFuturesAccountV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountFuturesAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountFuturesAccountV2(email: string, futuresType: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountFuturesAccountV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountFuturesAccountV2(email, futuresType, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountFuturesAccountV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Sub-account Futures Asset Transfer History
         * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Query-Sub-account-Futures-Asset-Transfer-History#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT-margined Futures，2: Coin-margined Futures
         * @param {number} timestamp 
         * @param {number} [startTime] Cannot be earlier than 1 month ago
         * @param {number} [endTime] 
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 50, Max value: 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountFuturesInternalTransferV1(email: string, futuresType: number, timestamp: number, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountFuturesInternalTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountFuturesInternalTransferV1(email, futuresType, timestamp, startTime, endTime, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountFuturesInternalTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query move position history
         * @summary Get Move Position History for Sub-account (For Master Account)
         * @param {string} symbol 
         * @param {number} page 
         * @param {number} row 
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountFuturesMovePositionV1(symbol: string, page: number, row: number, timestamp: number, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountFuturesMovePositionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountFuturesMovePositionV1(symbol, page, row, timestamp, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountFuturesMovePositionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Summary of Sub-account\'s Margin Account
         * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountMarginAccountSummaryV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountMarginAccountSummaryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountMarginAccountSummaryV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountMarginAccountSummaryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Detail on Sub-account\'s Margin Account
         * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Margin-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountMarginAccountV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountMarginAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountMarginAccountV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountMarginAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get BTC valued asset summary of subaccounts.
         * @summary Query Sub-account Spot Assets Summary(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] Sub account email
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountSpotSummaryV1(timestamp: number, email?: string, page?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountSpotSummaryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountSpotSummaryV1(timestamp, email, page, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountSpotSummaryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Sub-account Spot Asset Transfer History
         * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
         * @param {number} timestamp 
         * @param {string} [fromEmail] 
         * @param {string} [toEmail] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountSubTransferHistoryV1(timestamp: number, fromEmail?: string, toEmail?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubaccountGetSubAccountSubTransferHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountSubTransferHistoryV1(timestamp, fromEmail, toEmail, startTime, endTime, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountSubTransferHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sub-account Transfer History
         * @summary Sub-account Transfer History(For Sub-account)
         * @param {number} timestamp 
         * @param {string} [asset] If not sent, result of all assets will be returned
         * @param {number} [type] 1: transfer in, 2: transfer out
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 500
         * @param {boolean} [returnFailHistory] Default &#x60;False&#x60;, return PROCESS and SUCCESS status history; If &#x60;True&#x60;,return PROCESS and SUCCESS and FAILURE status history
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountTransferSubUserHistoryV1(timestamp: number, asset?: string, type?: number, startTime?: number, endTime?: number, limit?: number, returnFailHistory?: boolean, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubaccountGetSubAccountTransferSubUserHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountTransferSubUserHistoryV1(timestamp, asset, type, startTime, endTime, limit, returnFailHistory, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountTransferSubUserHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Universal Transfer History
         * @summary Query Universal Transfer History(For Master Account)
         * @param {number} timestamp 
         * @param {string} [fromEmail] 
         * @param {string} [toEmail] 
         * @param {string} [clientTranId] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500, Max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountUniversalTransferV1(timestamp: number, fromEmail?: string, toEmail?: string, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountUniversalTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountUniversalTransferV1(timestamp, fromEmail, toEmail, clientTranId, startTime, endTime, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetManagementApi.subaccountGetSubAccountUniversalTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssetManagementApi - factory interface
 * @export
 */
export const AssetManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetManagementApiFp(configuration)
    return {
        /**
         * Sub-account Futures Asset Transfer
         * @summary Sub-account Futures Asset Transfer(For Master Account)
         * @param {AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountFuturesInternalTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountFuturesInternalTransferV1Resp> {
            return localVarFp.subaccountCreateSubAccountFuturesInternalTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.fromEmail, requestParameters.futuresType, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Move position between sub-master, master-sub, or sub-sub accounts when necessary
         * @summary Move Position for Sub-account (For Master Account)
         * @param {AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountFuturesMovePositionV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountFuturesMovePositionV1Resp> {
            return localVarFp.subaccountCreateSubAccountFuturesMovePositionV1(requestParameters.fromUserEmail, requestParameters.orderArgs, requestParameters.productType, requestParameters.timestamp, requestParameters.toUserEmail, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Futures Transfer for Sub-account
         * @summary Futures Transfer for Sub-account(For Master Account)
         * @param {AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountFuturesTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountFuturesTransferV1Resp> {
            return localVarFp.subaccountCreateSubAccountFuturesTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.email, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Margin Transfer for Sub-account
         * @summary Margin Transfer for Sub-account(For Master Account)
         * @param {AssetManagementApiSubaccountCreateSubAccountMarginTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountMarginTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountMarginTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountMarginTransferV1Resp> {
            return localVarFp.subaccountCreateSubAccountMarginTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.email, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer to Master
         * @summary Transfer to Master(For Sub-account)
         * @param {AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountTransferSubToMasterV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountTransferSubToMasterV1Resp> {
            return localVarFp.subaccountCreateSubAccountTransferSubToMasterV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer to Sub-account of Same Master
         * @summary Transfer to Sub-account of Same Master(For Sub-account)
         * @param {AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountTransferSubToSubV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountTransferSubToSubV1Resp> {
            return localVarFp.subaccountCreateSubAccountTransferSubToSubV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Universal Transfer
         * @summary Universal Transfer(For Master Account)
         * @param {AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountUniversalTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountUniversalTransferV1Resp> {
            return localVarFp.subaccountCreateSubAccountUniversalTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.fromAccountType, requestParameters.timestamp, requestParameters.toAccountType, requestParameters.clientTranId, requestParameters.fromEmail, requestParameters.recvWindow, requestParameters.symbol, requestParameters.toEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch sub-account deposit address
         * @summary Get Sub-account Deposit Address(For Master Account)
         * @param {AssetManagementApiSubaccountGetCapitalDepositSubAddressV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetCapitalDepositSubAddressV1(requestParameters: AssetManagementApiSubaccountGetCapitalDepositSubAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetCapitalDepositSubAddressV1Resp> {
            return localVarFp.subaccountGetCapitalDepositSubAddressV1(requestParameters.email, requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch sub-account deposit history
         * @summary Get Sub-account Deposit History(For Master Account)
         * @param {AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetCapitalDepositSubHisrecV1(requestParameters: AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetCapitalDepositSubHisrecV1RespItem>> {
            return localVarFp.subaccountGetCapitalDepositSubHisrecV1(requestParameters.email, requestParameters.timestamp, requestParameters.coin, requestParameters.status, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.offset, requestParameters.recvWindow, requestParameters.txId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets(For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountAssetsV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountAssetsV3(requestParameters: AssetManagementApiSubaccountGetSubAccountAssetsV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountAssetsV3Resp> {
            return localVarFp.subaccountGetSubAccountAssetsV3(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
         * @param {AssetManagementApiSubaccountGetSubAccountAssetsV4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountAssetsV4(requestParameters: AssetManagementApiSubaccountGetSubAccountAssetsV4Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountAssetsV4Resp> {
            return localVarFp.subaccountGetSubAccountAssetsV4(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesAccountSummaryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesAccountSummaryV1Resp> {
            return localVarFp.subaccountGetSubAccountFuturesAccountSummaryV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesAccountSummaryV2(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesAccountSummaryV2Resp> {
            return localVarFp.subaccountGetSubAccountFuturesAccountSummaryV2(requestParameters.futuresType, requestParameters.timestamp, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesAccountV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesAccountV1Resp> {
            return localVarFp.subaccountGetSubAccountFuturesAccountV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesAccountV2(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesAccountV2Resp> {
            return localVarFp.subaccountGetSubAccountFuturesAccountV2(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Sub-account Futures Asset Transfer History
         * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesInternalTransferV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesInternalTransferV1Resp> {
            return localVarFp.subaccountGetSubAccountFuturesInternalTransferV1(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query move position history
         * @summary Get Move Position History for Sub-account (For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesMovePositionV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesMovePositionV1Resp> {
            return localVarFp.subaccountGetSubAccountFuturesMovePositionV1(requestParameters.symbol, requestParameters.page, requestParameters.row, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Summary of Sub-account\'s Margin Account
         * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountMarginAccountSummaryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountMarginAccountSummaryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountMarginAccountSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountMarginAccountSummaryV1Resp> {
            return localVarFp.subaccountGetSubAccountMarginAccountSummaryV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Detail on Sub-account\'s Margin Account
         * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountMarginAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountMarginAccountV1(requestParameters: AssetManagementApiSubaccountGetSubAccountMarginAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountMarginAccountV1Resp> {
            return localVarFp.subaccountGetSubAccountMarginAccountV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get BTC valued asset summary of subaccounts.
         * @summary Query Sub-account Spot Assets Summary(For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountSpotSummaryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountSpotSummaryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountSpotSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountSpotSummaryV1Resp> {
            return localVarFp.subaccountGetSubAccountSpotSummaryV1(requestParameters.timestamp, requestParameters.email, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Sub-account Spot Asset Transfer History
         * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountSubTransferHistoryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetSubAccountSubTransferHistoryV1RespItem>> {
            return localVarFp.subaccountGetSubAccountSubTransferHistoryV1(requestParameters.timestamp, requestParameters.fromEmail, requestParameters.toEmail, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Sub-account Transfer History
         * @summary Sub-account Transfer History(For Sub-account)
         * @param {AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountTransferSubUserHistoryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetSubAccountTransferSubUserHistoryV1RespItem>> {
            return localVarFp.subaccountGetSubAccountTransferSubUserHistoryV1(requestParameters.timestamp, requestParameters.asset, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.returnFailHistory, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Universal Transfer History
         * @summary Query Universal Transfer History(For Master Account)
         * @param {AssetManagementApiSubaccountGetSubAccountUniversalTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountUniversalTransferV1(requestParameters: AssetManagementApiSubaccountGetSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountUniversalTransferV1Resp> {
            return localVarFp.subaccountGetSubAccountUniversalTransferV1(requestParameters.timestamp, requestParameters.fromEmail, requestParameters.toEmail, requestParameters.clientTranId, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetManagementApi - interface
 * @export
 * @interface AssetManagementApi
 */
export interface AssetManagementApiInterface {
    /**
     * Sub-account Futures Asset Transfer
     * @summary Sub-account Futures Asset Transfer(For Master Account)
     * @param {AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountCreateSubAccountFuturesInternalTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountFuturesInternalTransferV1Resp>;

    /**
     * Move position between sub-master, master-sub, or sub-sub accounts when necessary
     * @summary Move Position for Sub-account (For Master Account)
     * @param {AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountCreateSubAccountFuturesMovePositionV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountFuturesMovePositionV1Resp>;

    /**
     * Futures Transfer for Sub-account
     * @summary Futures Transfer for Sub-account(For Master Account)
     * @param {AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountCreateSubAccountFuturesTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountFuturesTransferV1Resp>;

    /**
     * Margin Transfer for Sub-account
     * @summary Margin Transfer for Sub-account(For Master Account)
     * @param {AssetManagementApiSubaccountCreateSubAccountMarginTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountCreateSubAccountMarginTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountMarginTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountMarginTransferV1Resp>;

    /**
     * Transfer to Master
     * @summary Transfer to Master(For Sub-account)
     * @param {AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountCreateSubAccountTransferSubToMasterV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountTransferSubToMasterV1Resp>;

    /**
     * Transfer to Sub-account of Same Master
     * @summary Transfer to Sub-account of Same Master(For Sub-account)
     * @param {AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountCreateSubAccountTransferSubToSubV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountTransferSubToSubV1Resp>;

    /**
     * Universal Transfer
     * @summary Universal Transfer(For Master Account)
     * @param {AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountCreateSubAccountUniversalTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountUniversalTransferV1Resp>;

    /**
     * Fetch sub-account deposit address
     * @summary Get Sub-account Deposit Address(For Master Account)
     * @param {AssetManagementApiSubaccountGetCapitalDepositSubAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetCapitalDepositSubAddressV1(requestParameters: AssetManagementApiSubaccountGetCapitalDepositSubAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetCapitalDepositSubAddressV1Resp>;

    /**
     * Fetch sub-account deposit history
     * @summary Get Sub-account Deposit History(For Master Account)
     * @param {AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetCapitalDepositSubHisrecV1(requestParameters: AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetCapitalDepositSubHisrecV1RespItem>>;

    /**
     * Fetch sub-account assets
     * @summary Query Sub-account Assets(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountAssetsV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountAssetsV3(requestParameters: AssetManagementApiSubaccountGetSubAccountAssetsV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountAssetsV3Resp>;

    /**
     * Fetch sub-account assets
     * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
     * @param {AssetManagementApiSubaccountGetSubAccountAssetsV4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountAssetsV4(requestParameters: AssetManagementApiSubaccountGetSubAccountAssetsV4Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountAssetsV4Resp>;

    /**
     * Get Summary of Sub-account\'s Futures Account
     * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountFuturesAccountSummaryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesAccountSummaryV1Resp>;

    /**
     * Get Summary of Sub-account\'s Futures Account
     * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountFuturesAccountSummaryV2(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesAccountSummaryV2Resp>;

    /**
     * Get Detail on Sub-account\'s Futures Account
     * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountFuturesAccountV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesAccountV1Resp>;

    /**
     * Get Detail on Sub-account\'s Futures Account
     * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountFuturesAccountV2(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesAccountV2Resp>;

    /**
     * Query Sub-account Futures Asset Transfer History
     * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountFuturesInternalTransferV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesInternalTransferV1Resp>;

    /**
     * Query move position history
     * @summary Get Move Position History for Sub-account (For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountFuturesMovePositionV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesMovePositionV1Resp>;

    /**
     * Get Summary of Sub-account\'s Margin Account
     * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountMarginAccountSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountMarginAccountSummaryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountMarginAccountSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountMarginAccountSummaryV1Resp>;

    /**
     * Get Detail on Sub-account\'s Margin Account
     * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountMarginAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountMarginAccountV1(requestParameters: AssetManagementApiSubaccountGetSubAccountMarginAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountMarginAccountV1Resp>;

    /**
     * Get BTC valued asset summary of subaccounts.
     * @summary Query Sub-account Spot Assets Summary(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountSpotSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountSpotSummaryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountSpotSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountSpotSummaryV1Resp>;

    /**
     * Query Sub-account Spot Asset Transfer History
     * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountSubTransferHistoryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetSubAccountSubTransferHistoryV1RespItem>>;

    /**
     * Sub-account Transfer History
     * @summary Sub-account Transfer History(For Sub-account)
     * @param {AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountTransferSubUserHistoryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetSubAccountTransferSubUserHistoryV1RespItem>>;

    /**
     * Query Universal Transfer History
     * @summary Query Universal Transfer History(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApiInterface
     */
    subaccountGetSubAccountUniversalTransferV1(requestParameters: AssetManagementApiSubaccountGetSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountUniversalTransferV1Resp>;

}

/**
 * Request parameters for subaccountCreateSubAccountFuturesInternalTransferV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1Request
 */
export interface AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1
     */
    readonly fromEmail: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1
     */
    readonly toEmail: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountCreateSubAccountFuturesMovePositionV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1Request
 */
export interface AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1Request {
    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1
     */
    readonly fromUserEmail: string

    /**
     * 
     * @type {Array<object>}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1
     */
    readonly orderArgs: Array<object>

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1
     */
    readonly productType: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1
     */
    readonly toUserEmail: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountCreateSubAccountFuturesTransferV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1Request
 */
export interface AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1
     */
    readonly type: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountCreateSubAccountMarginTransferV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountCreateSubAccountMarginTransferV1Request
 */
export interface AssetManagementApiSubaccountCreateSubAccountMarginTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountMarginTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountMarginTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountMarginTransferV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountMarginTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountMarginTransferV1
     */
    readonly type: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountMarginTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountCreateSubAccountTransferSubToMasterV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1Request
 */
export interface AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1Request {
    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountCreateSubAccountTransferSubToSubV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1Request
 */
export interface AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1Request {
    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1
     */
    readonly toEmail: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountCreateSubAccountUniversalTransferV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1Request
 */
export interface AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1
     */
    readonly fromAccountType: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1
     */
    readonly toAccountType: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1
     */
    readonly clientTranId?: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1
     */
    readonly fromEmail?: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1
     */
    readonly symbol?: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1
     */
    readonly toEmail?: string
}

/**
 * Request parameters for subaccountGetCapitalDepositSubAddressV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetCapitalDepositSubAddressV1Request
 */
export interface AssetManagementApiSubaccountGetCapitalDepositSubAddressV1Request {
    /**
     * Sub account email
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubAddressV1
     */
    readonly email: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubAddressV1
     */
    readonly coin: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubAddressV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubAddressV1
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubAddressV1
     */
    readonly amount?: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubAddressV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetCapitalDepositSubHisrecV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1Request
 */
export interface AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1Request {
    /**
     * Sub account email
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1
     */
    readonly coin?: string

    /**
     * 0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User confirm,1:success)
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1
     */
    readonly status?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1
     */
    readonly limit?: number

    /**
     * default:0
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1
     */
    readonly txId?: string
}

/**
 * Request parameters for subaccountGetSubAccountAssetsV3 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountAssetsV3Request
 */
export interface AssetManagementApiSubaccountGetSubAccountAssetsV3Request {
    /**
     * Sub account email
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountAssetsV3
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountAssetsV3
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountAssetsV3
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountAssetsV4 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountAssetsV4Request
 */
export interface AssetManagementApiSubaccountGetSubAccountAssetsV4Request {
    /**
     * Sub Account Email
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountAssetsV4
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountAssetsV4
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountAssetsV4
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountFuturesAccountSummaryV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV1Request
 */
export interface AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountFuturesAccountSummaryV2 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2Request
 */
export interface AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2Request {
    /**
     * 1:USDT Margined Futures, 2:COIN Margined Futures
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2
     */
    readonly timestamp: number

    /**
     * default:1
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2
     */
    readonly page?: number

    /**
     * default:10, max:20
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountFuturesAccountV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountFuturesAccountV1Request
 */
export interface AssetManagementApiSubaccountGetSubAccountFuturesAccountV1Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountFuturesAccountV2 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountFuturesAccountV2Request
 */
export interface AssetManagementApiSubaccountGetSubAccountFuturesAccountV2Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountV2
     */
    readonly email: string

    /**
     * 1:USDT Margined Futures, 2:COIN Margined Futures
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountV2
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesAccountV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountFuturesInternalTransferV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1Request
 */
export interface AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Query-Sub-account-Futures-Asset-Transfer-History#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1
     */
    readonly email: string

    /**
     * 1:USDT-margined Futures，2: Coin-margined Futures
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1
     */
    readonly timestamp: number

    /**
     * Cannot be earlier than 1 month ago
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1
     */
    readonly endTime?: number

    /**
     * Default value: 1
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1
     */
    readonly page?: number

    /**
     * Default value: 50, Max value: 500
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountFuturesMovePositionV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1Request
 */
export interface AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1Request {
    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1
     */
    readonly page: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1
     */
    readonly row: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountMarginAccountSummaryV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountMarginAccountSummaryV1Request
 */
export interface AssetManagementApiSubaccountGetSubAccountMarginAccountSummaryV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountMarginAccountSummaryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountMarginAccountSummaryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountMarginAccountV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountMarginAccountV1Request
 */
export interface AssetManagementApiSubaccountGetSubAccountMarginAccountV1Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Margin-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountMarginAccountV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountMarginAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountMarginAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountSpotSummaryV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountSpotSummaryV1Request
 */
export interface AssetManagementApiSubaccountGetSubAccountSpotSummaryV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountSpotSummaryV1
     */
    readonly timestamp: number

    /**
     * Sub account email
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountSpotSummaryV1
     */
    readonly email?: string

    /**
     * default 1
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountSpotSummaryV1
     */
    readonly page?: number

    /**
     * default 10, max 20
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountSpotSummaryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountSpotSummaryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountSubTransferHistoryV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1Request
 */
export interface AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1
     */
    readonly fromEmail?: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1
     */
    readonly toEmail?: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1
     */
    readonly endTime?: number

    /**
     * Default value: 1
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1
     */
    readonly page?: number

    /**
     * Default value: 500
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountTransferSubUserHistoryV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1Request
 */
export interface AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1
     */
    readonly timestamp: number

    /**
     * If not sent, result of all assets will be returned
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1
     */
    readonly asset?: string

    /**
     * 1: transfer in, 2: transfer out
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1
     */
    readonly type?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1
     */
    readonly endTime?: number

    /**
     * Default 500
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1
     */
    readonly limit?: number

    /**
     * Default &#x60;False&#x60;, return PROCESS and SUCCESS status history; If &#x60;True&#x60;,return PROCESS and SUCCESS and FAILURE status history
     * @type {boolean}
     * @memberof AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1
     */
    readonly returnFailHistory?: boolean

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountUniversalTransferV1 operation in AssetManagementApi.
 * @export
 * @interface AssetManagementApiSubaccountGetSubAccountUniversalTransferV1Request
 */
export interface AssetManagementApiSubaccountGetSubAccountUniversalTransferV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountUniversalTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountUniversalTransferV1
     */
    readonly fromEmail?: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountUniversalTransferV1
     */
    readonly toEmail?: string

    /**
     * 
     * @type {string}
     * @memberof AssetManagementApiSubaccountGetSubAccountUniversalTransferV1
     */
    readonly clientTranId?: string

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountUniversalTransferV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountUniversalTransferV1
     */
    readonly endTime?: number

    /**
     * Default 1
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountUniversalTransferV1
     */
    readonly page?: number

    /**
     * Default 500, Max 500
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountUniversalTransferV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AssetManagementApiSubaccountGetSubAccountUniversalTransferV1
     */
    readonly recvWindow?: number
}

/**
 * AssetManagementApi - object-oriented interface
 * @export
 * @class AssetManagementApi
 * @extends {BaseAPI}
 */
export class AssetManagementApi extends BaseAPI implements AssetManagementApiInterface {
    /**
     * Sub-account Futures Asset Transfer
     * @summary Sub-account Futures Asset Transfer(For Master Account)
     * @param {AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountCreateSubAccountFuturesInternalTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountCreateSubAccountFuturesInternalTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.fromEmail, requestParameters.futuresType, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Move position between sub-master, master-sub, or sub-sub accounts when necessary
     * @summary Move Position for Sub-account (For Master Account)
     * @param {AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountCreateSubAccountFuturesMovePositionV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountCreateSubAccountFuturesMovePositionV1(requestParameters.fromUserEmail, requestParameters.orderArgs, requestParameters.productType, requestParameters.timestamp, requestParameters.toUserEmail, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Futures Transfer for Sub-account
     * @summary Futures Transfer for Sub-account(For Master Account)
     * @param {AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountCreateSubAccountFuturesTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountFuturesTransferV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountCreateSubAccountFuturesTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.email, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Margin Transfer for Sub-account
     * @summary Margin Transfer for Sub-account(For Master Account)
     * @param {AssetManagementApiSubaccountCreateSubAccountMarginTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountCreateSubAccountMarginTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountMarginTransferV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountCreateSubAccountMarginTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.email, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer to Master
     * @summary Transfer to Master(For Sub-account)
     * @param {AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountCreateSubAccountTransferSubToMasterV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountTransferSubToMasterV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountCreateSubAccountTransferSubToMasterV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer to Sub-account of Same Master
     * @summary Transfer to Sub-account of Same Master(For Sub-account)
     * @param {AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountCreateSubAccountTransferSubToSubV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountTransferSubToSubV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountCreateSubAccountTransferSubToSubV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Universal Transfer
     * @summary Universal Transfer(For Master Account)
     * @param {AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountCreateSubAccountUniversalTransferV1(requestParameters: AssetManagementApiSubaccountCreateSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountCreateSubAccountUniversalTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.fromAccountType, requestParameters.timestamp, requestParameters.toAccountType, requestParameters.clientTranId, requestParameters.fromEmail, requestParameters.recvWindow, requestParameters.symbol, requestParameters.toEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch sub-account deposit address
     * @summary Get Sub-account Deposit Address(For Master Account)
     * @param {AssetManagementApiSubaccountGetCapitalDepositSubAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetCapitalDepositSubAddressV1(requestParameters: AssetManagementApiSubaccountGetCapitalDepositSubAddressV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetCapitalDepositSubAddressV1(requestParameters.email, requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch sub-account deposit history
     * @summary Get Sub-account Deposit History(For Master Account)
     * @param {AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetCapitalDepositSubHisrecV1(requestParameters: AssetManagementApiSubaccountGetCapitalDepositSubHisrecV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetCapitalDepositSubHisrecV1(requestParameters.email, requestParameters.timestamp, requestParameters.coin, requestParameters.status, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.offset, requestParameters.recvWindow, requestParameters.txId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch sub-account assets
     * @summary Query Sub-account Assets(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountAssetsV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountAssetsV3(requestParameters: AssetManagementApiSubaccountGetSubAccountAssetsV3Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountAssetsV3(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch sub-account assets
     * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
     * @param {AssetManagementApiSubaccountGetSubAccountAssetsV4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountAssetsV4(requestParameters: AssetManagementApiSubaccountGetSubAccountAssetsV4Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountAssetsV4(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Summary of Sub-account\'s Futures Account
     * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountFuturesAccountSummaryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountFuturesAccountSummaryV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Summary of Sub-account\'s Futures Account
     * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountFuturesAccountSummaryV2(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountSummaryV2Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountFuturesAccountSummaryV2(requestParameters.futuresType, requestParameters.timestamp, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Detail on Sub-account\'s Futures Account
     * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountFuturesAccountV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountFuturesAccountV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Detail on Sub-account\'s Futures Account
     * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountFuturesAccountV2(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesAccountV2Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountFuturesAccountV2(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Sub-account Futures Asset Transfer History
     * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountFuturesInternalTransferV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountFuturesInternalTransferV1(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query move position history
     * @summary Get Move Position History for Sub-account (For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountFuturesMovePositionV1(requestParameters: AssetManagementApiSubaccountGetSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountFuturesMovePositionV1(requestParameters.symbol, requestParameters.page, requestParameters.row, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Summary of Sub-account\'s Margin Account
     * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountMarginAccountSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountMarginAccountSummaryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountMarginAccountSummaryV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountMarginAccountSummaryV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Detail on Sub-account\'s Margin Account
     * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountMarginAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountMarginAccountV1(requestParameters: AssetManagementApiSubaccountGetSubAccountMarginAccountV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountMarginAccountV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get BTC valued asset summary of subaccounts.
     * @summary Query Sub-account Spot Assets Summary(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountSpotSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountSpotSummaryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountSpotSummaryV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountSpotSummaryV1(requestParameters.timestamp, requestParameters.email, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Sub-account Spot Asset Transfer History
     * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountSubTransferHistoryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountSubTransferHistoryV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountSubTransferHistoryV1(requestParameters.timestamp, requestParameters.fromEmail, requestParameters.toEmail, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sub-account Transfer History
     * @summary Sub-account Transfer History(For Sub-account)
     * @param {AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountTransferSubUserHistoryV1(requestParameters: AssetManagementApiSubaccountGetSubAccountTransferSubUserHistoryV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountTransferSubUserHistoryV1(requestParameters.timestamp, requestParameters.asset, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.returnFailHistory, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Universal Transfer History
     * @summary Query Universal Transfer History(For Master Account)
     * @param {AssetManagementApiSubaccountGetSubAccountUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetManagementApi
     */
    public subaccountGetSubAccountUniversalTransferV1(requestParameters: AssetManagementApiSubaccountGetSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig) {
        return AssetManagementApiFp(this.configuration).subaccountGetSubAccountUniversalTransferV1(requestParameters.timestamp, requestParameters.fromEmail, requestParameters.toEmail, requestParameters.clientTranId, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

