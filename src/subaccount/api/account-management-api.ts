/* tslint:disable */
/* eslint-disable */
/**
 * Binance Sub Account API
 * OpenAPI specification for Binance exchange - Subaccount API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountBlvtEnableV1Resp } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountEoptionsEnableV1Resp } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountFuturesEnableV1Resp } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountMarginEnableV1Resp } from '../model';
// @ts-ignore
import type { SubaccountCreateSubAccountVirtualSubAccountV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountFuturesPositionRiskV1RespItem } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountFuturesPositionRiskV2Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountListV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountStatusV1RespItem } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountTransactionStatisticsV1Resp } from '../model';
/**
 * AccountManagementApi - axios parameter creator
 * @export
 */
export const AccountManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Enable Leverage Token for Sub-account
         * @summary Enable Leverage Token for Sub-account(For Master Account)
         * @param {string} email 
         * @param {boolean} enableBlvt 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountBlvtEnableV1: async (email: string, enableBlvt: boolean, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountCreateSubAccountBlvtEnableV1', 'email', email)
            // verify required parameter 'enableBlvt' is not null or undefined
            assertParamExists('subaccountCreateSubAccountBlvtEnableV1', 'enableBlvt', enableBlvt)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountBlvtEnableV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/blvt/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (enableBlvt !== undefined) { 
                localVarFormParams.set('enableBlvt', enableBlvt as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable Options for Sub-account (For Master Account).
         * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountEoptionsEnableV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountCreateSubAccountEoptionsEnableV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountEoptionsEnableV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/eoptions/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable Futures for Sub-account for Master Account
         * @summary Enable Futures for Sub-account(For Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountFuturesEnableV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesEnableV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountFuturesEnableV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable Margin for Sub-account
         * @summary Enable Margin for Sub-account(For Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountMarginEnableV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountCreateSubAccountMarginEnableV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountMarginEnableV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/margin/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Virtual Sub-account
         * @summary Create a Virtual Sub-account(For Master Account)
         * @param {string} subAccountString 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountVirtualSubAccountV1: async (subAccountString: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountString' is not null or undefined
            assertParamExists('subaccountCreateSubAccountVirtualSubAccountV1', 'subAccountString', subAccountString)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountCreateSubAccountVirtualSubAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/virtualSubAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (subAccountString !== undefined) { 
                localVarFormParams.set('subAccountString', subAccountString as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Futures Position-Risk of Sub-account
         * @summary Get Futures Position-Risk of Sub-account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesPositionRiskV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesPositionRiskV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesPositionRiskV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/positionRisk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Futures Position-Risk of Sub-account V2
         * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesPositionRiskV2: async (email: string, futuresType: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesPositionRiskV2', 'email', email)
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesPositionRiskV2', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountFuturesPositionRiskV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/sub-account/futures/positionRisk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Sub-account List
         * @summary Query Sub-account List(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Query-Sub-account-List#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {string} [isFreeze] true or false
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountListV1: async (timestamp: number, email?: string, isFreeze?: string, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (isFreeze !== undefined) {
                localVarQueryParameter['isFreeze'] = isFreeze;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Sub-account\'s Status on Margin Or Futures
         * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Sub-accounts-Status-on-Margin-Or-Futures#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountStatusV1: async (timestamp: number, email?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountStatusV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Sub-account Transaction statistics (For Master Account).
         * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
         * @param {string} email Sub user email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountTransactionStatisticsV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('subaccountGetSubAccountTransactionStatisticsV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('subaccountGetSubAccountTransactionStatisticsV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/transaction-statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountManagementApi - functional programming interface
 * @export
 */
export const AccountManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Enable Leverage Token for Sub-account
         * @summary Enable Leverage Token for Sub-account(For Master Account)
         * @param {string} email 
         * @param {boolean} enableBlvt 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountBlvtEnableV1(email: string, enableBlvt: boolean, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountBlvtEnableV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountBlvtEnableV1(email, enableBlvt, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountManagementApi.subaccountCreateSubAccountBlvtEnableV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable Options for Sub-account (For Master Account).
         * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountEoptionsEnableV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountEoptionsEnableV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountEoptionsEnableV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountManagementApi.subaccountCreateSubAccountEoptionsEnableV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable Futures for Sub-account for Master Account
         * @summary Enable Futures for Sub-account(For Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountFuturesEnableV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountFuturesEnableV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountFuturesEnableV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountManagementApi.subaccountCreateSubAccountFuturesEnableV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable Margin for Sub-account
         * @summary Enable Margin for Sub-account(For Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountMarginEnableV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountMarginEnableV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountMarginEnableV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountManagementApi.subaccountCreateSubAccountMarginEnableV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a Virtual Sub-account
         * @summary Create a Virtual Sub-account(For Master Account)
         * @param {string} subAccountString 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountCreateSubAccountVirtualSubAccountV1(subAccountString: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountCreateSubAccountVirtualSubAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountCreateSubAccountVirtualSubAccountV1(subAccountString, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountManagementApi.subaccountCreateSubAccountVirtualSubAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Futures Position-Risk of Sub-account
         * @summary Get Futures Position-Risk of Sub-account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountFuturesPositionRiskV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubaccountGetSubAccountFuturesPositionRiskV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountFuturesPositionRiskV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountManagementApi.subaccountGetSubAccountFuturesPositionRiskV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Futures Position-Risk of Sub-account V2
         * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountFuturesPositionRiskV2(email: string, futuresType: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountFuturesPositionRiskV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountFuturesPositionRiskV2(email, futuresType, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountManagementApi.subaccountGetSubAccountFuturesPositionRiskV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Sub-account List
         * @summary Query Sub-account List(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Query-Sub-account-List#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {string} [isFreeze] true or false
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountListV1(timestamp: number, email?: string, isFreeze?: string, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountListV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountListV1(timestamp, email, isFreeze, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountManagementApi.subaccountGetSubAccountListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Sub-account\'s Status on Margin Or Futures
         * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Sub-accounts-Status-on-Margin-Or-Futures#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountStatusV1(timestamp: number, email?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubaccountGetSubAccountStatusV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountStatusV1(timestamp, email, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountManagementApi.subaccountGetSubAccountStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Sub-account Transaction statistics (For Master Account).
         * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
         * @param {string} email Sub user email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subaccountGetSubAccountTransactionStatisticsV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountTransactionStatisticsV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subaccountGetSubAccountTransactionStatisticsV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountManagementApi.subaccountGetSubAccountTransactionStatisticsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountManagementApi - factory interface
 * @export
 */
export const AccountManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountManagementApiFp(configuration)
    return {
        /**
         * Enable Leverage Token for Sub-account
         * @summary Enable Leverage Token for Sub-account(For Master Account)
         * @param {AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountBlvtEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountBlvtEnableV1Resp> {
            return localVarFp.subaccountCreateSubAccountBlvtEnableV1(requestParameters.email, requestParameters.enableBlvt, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable Options for Sub-account (For Master Account).
         * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
         * @param {AccountManagementApiSubaccountCreateSubAccountEoptionsEnableV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountEoptionsEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountEoptionsEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountEoptionsEnableV1Resp> {
            return localVarFp.subaccountCreateSubAccountEoptionsEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable Futures for Sub-account for Master Account
         * @summary Enable Futures for Sub-account(For Master Account)
         * @param {AccountManagementApiSubaccountCreateSubAccountFuturesEnableV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountFuturesEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountFuturesEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountFuturesEnableV1Resp> {
            return localVarFp.subaccountCreateSubAccountFuturesEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable Margin for Sub-account
         * @summary Enable Margin for Sub-account(For Master Account)
         * @param {AccountManagementApiSubaccountCreateSubAccountMarginEnableV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountMarginEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountMarginEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountMarginEnableV1Resp> {
            return localVarFp.subaccountCreateSubAccountMarginEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Virtual Sub-account
         * @summary Create a Virtual Sub-account(For Master Account)
         * @param {AccountManagementApiSubaccountCreateSubAccountVirtualSubAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountCreateSubAccountVirtualSubAccountV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountVirtualSubAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountVirtualSubAccountV1Resp> {
            return localVarFp.subaccountCreateSubAccountVirtualSubAccountV1(requestParameters.subAccountString, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Futures Position-Risk of Sub-account
         * @summary Get Futures Position-Risk of Sub-account(For Master Account)
         * @param {AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesPositionRiskV1(requestParameters: AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetSubAccountFuturesPositionRiskV1RespItem>> {
            return localVarFp.subaccountGetSubAccountFuturesPositionRiskV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Futures Position-Risk of Sub-account V2
         * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
         * @param {AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountFuturesPositionRiskV2(requestParameters: AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesPositionRiskV2Resp> {
            return localVarFp.subaccountGetSubAccountFuturesPositionRiskV2(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Sub-account List
         * @summary Query Sub-account List(For Master Account)
         * @param {AccountManagementApiSubaccountGetSubAccountListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountListV1(requestParameters: AccountManagementApiSubaccountGetSubAccountListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountListV1Resp> {
            return localVarFp.subaccountGetSubAccountListV1(requestParameters.timestamp, requestParameters.email, requestParameters.isFreeze, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Sub-account\'s Status on Margin Or Futures
         * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
         * @param {AccountManagementApiSubaccountGetSubAccountStatusV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountStatusV1(requestParameters: AccountManagementApiSubaccountGetSubAccountStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetSubAccountStatusV1RespItem>> {
            return localVarFp.subaccountGetSubAccountStatusV1(requestParameters.timestamp, requestParameters.email, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Sub-account Transaction statistics (For Master Account).
         * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
         * @param {AccountManagementApiSubaccountGetSubAccountTransactionStatisticsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountGetSubAccountTransactionStatisticsV1(requestParameters: AccountManagementApiSubaccountGetSubAccountTransactionStatisticsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountTransactionStatisticsV1Resp> {
            return localVarFp.subaccountGetSubAccountTransactionStatisticsV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountManagementApi - interface
 * @export
 * @interface AccountManagementApi
 */
export interface AccountManagementApiInterface {
    /**
     * Enable Leverage Token for Sub-account
     * @summary Enable Leverage Token for Sub-account(For Master Account)
     * @param {AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApiInterface
     */
    subaccountCreateSubAccountBlvtEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountBlvtEnableV1Resp>;

    /**
     * Enable Options for Sub-account (For Master Account).
     * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
     * @param {AccountManagementApiSubaccountCreateSubAccountEoptionsEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApiInterface
     */
    subaccountCreateSubAccountEoptionsEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountEoptionsEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountEoptionsEnableV1Resp>;

    /**
     * Enable Futures for Sub-account for Master Account
     * @summary Enable Futures for Sub-account(For Master Account)
     * @param {AccountManagementApiSubaccountCreateSubAccountFuturesEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApiInterface
     */
    subaccountCreateSubAccountFuturesEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountFuturesEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountFuturesEnableV1Resp>;

    /**
     * Enable Margin for Sub-account
     * @summary Enable Margin for Sub-account(For Master Account)
     * @param {AccountManagementApiSubaccountCreateSubAccountMarginEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApiInterface
     */
    subaccountCreateSubAccountMarginEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountMarginEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountMarginEnableV1Resp>;

    /**
     * Create a Virtual Sub-account
     * @summary Create a Virtual Sub-account(For Master Account)
     * @param {AccountManagementApiSubaccountCreateSubAccountVirtualSubAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApiInterface
     */
    subaccountCreateSubAccountVirtualSubAccountV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountVirtualSubAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountCreateSubAccountVirtualSubAccountV1Resp>;

    /**
     * Get Futures Position-Risk of Sub-account
     * @summary Get Futures Position-Risk of Sub-account(For Master Account)
     * @param {AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApiInterface
     */
    subaccountGetSubAccountFuturesPositionRiskV1(requestParameters: AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetSubAccountFuturesPositionRiskV1RespItem>>;

    /**
     * Get Futures Position-Risk of Sub-account V2
     * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
     * @param {AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApiInterface
     */
    subaccountGetSubAccountFuturesPositionRiskV2(requestParameters: AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountFuturesPositionRiskV2Resp>;

    /**
     * Query Sub-account List
     * @summary Query Sub-account List(For Master Account)
     * @param {AccountManagementApiSubaccountGetSubAccountListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApiInterface
     */
    subaccountGetSubAccountListV1(requestParameters: AccountManagementApiSubaccountGetSubAccountListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountListV1Resp>;

    /**
     * Get Sub-account\'s Status on Margin Or Futures
     * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
     * @param {AccountManagementApiSubaccountGetSubAccountStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApiInterface
     */
    subaccountGetSubAccountStatusV1(requestParameters: AccountManagementApiSubaccountGetSubAccountStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SubaccountGetSubAccountStatusV1RespItem>>;

    /**
     * Query Sub-account Transaction statistics (For Master Account).
     * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
     * @param {AccountManagementApiSubaccountGetSubAccountTransactionStatisticsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApiInterface
     */
    subaccountGetSubAccountTransactionStatisticsV1(requestParameters: AccountManagementApiSubaccountGetSubAccountTransactionStatisticsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountTransactionStatisticsV1Resp>;

}

/**
 * Request parameters for subaccountCreateSubAccountBlvtEnableV1 operation in AccountManagementApi.
 * @export
 * @interface AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1Request
 */
export interface AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1
     */
    readonly email: string

    /**
     * 
     * @type {boolean}
     * @memberof AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1
     */
    readonly enableBlvt: boolean

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountCreateSubAccountEoptionsEnableV1 operation in AccountManagementApi.
 * @export
 * @interface AccountManagementApiSubaccountCreateSubAccountEoptionsEnableV1Request
 */
export interface AccountManagementApiSubaccountCreateSubAccountEoptionsEnableV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountManagementApiSubaccountCreateSubAccountEoptionsEnableV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountCreateSubAccountEoptionsEnableV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountCreateSubAccountEoptionsEnableV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountCreateSubAccountFuturesEnableV1 operation in AccountManagementApi.
 * @export
 * @interface AccountManagementApiSubaccountCreateSubAccountFuturesEnableV1Request
 */
export interface AccountManagementApiSubaccountCreateSubAccountFuturesEnableV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountManagementApiSubaccountCreateSubAccountFuturesEnableV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountCreateSubAccountFuturesEnableV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountCreateSubAccountFuturesEnableV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountCreateSubAccountMarginEnableV1 operation in AccountManagementApi.
 * @export
 * @interface AccountManagementApiSubaccountCreateSubAccountMarginEnableV1Request
 */
export interface AccountManagementApiSubaccountCreateSubAccountMarginEnableV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountManagementApiSubaccountCreateSubAccountMarginEnableV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountCreateSubAccountMarginEnableV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountCreateSubAccountMarginEnableV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountCreateSubAccountVirtualSubAccountV1 operation in AccountManagementApi.
 * @export
 * @interface AccountManagementApiSubaccountCreateSubAccountVirtualSubAccountV1Request
 */
export interface AccountManagementApiSubaccountCreateSubAccountVirtualSubAccountV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountManagementApiSubaccountCreateSubAccountVirtualSubAccountV1
     */
    readonly subAccountString: string

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountCreateSubAccountVirtualSubAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountCreateSubAccountVirtualSubAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountFuturesPositionRiskV1 operation in AccountManagementApi.
 * @export
 * @interface AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV1Request
 */
export interface AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV1Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountFuturesPositionRiskV2 operation in AccountManagementApi.
 * @export
 * @interface AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2Request
 */
export interface AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2
     */
    readonly email: string

    /**
     * 1:USDT Margined Futures, 2:COIN Margined Futures
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountListV1 operation in AccountManagementApi.
 * @export
 * @interface AccountManagementApiSubaccountGetSubAccountListV1Request
 */
export interface AccountManagementApiSubaccountGetSubAccountListV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountListV1
     */
    readonly timestamp: number

    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Query-Sub-account-List#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof AccountManagementApiSubaccountGetSubAccountListV1
     */
    readonly email?: string

    /**
     * true or false
     * @type {string}
     * @memberof AccountManagementApiSubaccountGetSubAccountListV1
     */
    readonly isFreeze?: string

    /**
     * Default value: 1
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountListV1
     */
    readonly page?: number

    /**
     * Default value: 1, Max value: 200
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountListV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountStatusV1 operation in AccountManagementApi.
 * @export
 * @interface AccountManagementApiSubaccountGetSubAccountStatusV1Request
 */
export interface AccountManagementApiSubaccountGetSubAccountStatusV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountStatusV1
     */
    readonly timestamp: number

    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Sub-accounts-Status-on-Margin-Or-Futures#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof AccountManagementApiSubaccountGetSubAccountStatusV1
     */
    readonly email?: string

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountStatusV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for subaccountGetSubAccountTransactionStatisticsV1 operation in AccountManagementApi.
 * @export
 * @interface AccountManagementApiSubaccountGetSubAccountTransactionStatisticsV1Request
 */
export interface AccountManagementApiSubaccountGetSubAccountTransactionStatisticsV1Request {
    /**
     * Sub user email
     * @type {string}
     * @memberof AccountManagementApiSubaccountGetSubAccountTransactionStatisticsV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountTransactionStatisticsV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountManagementApiSubaccountGetSubAccountTransactionStatisticsV1
     */
    readonly recvWindow?: number
}

/**
 * AccountManagementApi - object-oriented interface
 * @export
 * @class AccountManagementApi
 * @extends {BaseAPI}
 */
export class AccountManagementApi extends BaseAPI implements AccountManagementApiInterface {
    /**
     * Enable Leverage Token for Sub-account
     * @summary Enable Leverage Token for Sub-account(For Master Account)
     * @param {AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApi
     */
    public subaccountCreateSubAccountBlvtEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountBlvtEnableV1Request, options?: RawAxiosRequestConfig) {
        return AccountManagementApiFp(this.configuration).subaccountCreateSubAccountBlvtEnableV1(requestParameters.email, requestParameters.enableBlvt, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable Options for Sub-account (For Master Account).
     * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
     * @param {AccountManagementApiSubaccountCreateSubAccountEoptionsEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApi
     */
    public subaccountCreateSubAccountEoptionsEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountEoptionsEnableV1Request, options?: RawAxiosRequestConfig) {
        return AccountManagementApiFp(this.configuration).subaccountCreateSubAccountEoptionsEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable Futures for Sub-account for Master Account
     * @summary Enable Futures for Sub-account(For Master Account)
     * @param {AccountManagementApiSubaccountCreateSubAccountFuturesEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApi
     */
    public subaccountCreateSubAccountFuturesEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountFuturesEnableV1Request, options?: RawAxiosRequestConfig) {
        return AccountManagementApiFp(this.configuration).subaccountCreateSubAccountFuturesEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable Margin for Sub-account
     * @summary Enable Margin for Sub-account(For Master Account)
     * @param {AccountManagementApiSubaccountCreateSubAccountMarginEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApi
     */
    public subaccountCreateSubAccountMarginEnableV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountMarginEnableV1Request, options?: RawAxiosRequestConfig) {
        return AccountManagementApiFp(this.configuration).subaccountCreateSubAccountMarginEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Virtual Sub-account
     * @summary Create a Virtual Sub-account(For Master Account)
     * @param {AccountManagementApiSubaccountCreateSubAccountVirtualSubAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApi
     */
    public subaccountCreateSubAccountVirtualSubAccountV1(requestParameters: AccountManagementApiSubaccountCreateSubAccountVirtualSubAccountV1Request, options?: RawAxiosRequestConfig) {
        return AccountManagementApiFp(this.configuration).subaccountCreateSubAccountVirtualSubAccountV1(requestParameters.subAccountString, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Futures Position-Risk of Sub-account
     * @summary Get Futures Position-Risk of Sub-account(For Master Account)
     * @param {AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApi
     */
    public subaccountGetSubAccountFuturesPositionRiskV1(requestParameters: AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV1Request, options?: RawAxiosRequestConfig) {
        return AccountManagementApiFp(this.configuration).subaccountGetSubAccountFuturesPositionRiskV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Futures Position-Risk of Sub-account V2
     * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
     * @param {AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApi
     */
    public subaccountGetSubAccountFuturesPositionRiskV2(requestParameters: AccountManagementApiSubaccountGetSubAccountFuturesPositionRiskV2Request, options?: RawAxiosRequestConfig) {
        return AccountManagementApiFp(this.configuration).subaccountGetSubAccountFuturesPositionRiskV2(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Sub-account List
     * @summary Query Sub-account List(For Master Account)
     * @param {AccountManagementApiSubaccountGetSubAccountListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApi
     */
    public subaccountGetSubAccountListV1(requestParameters: AccountManagementApiSubaccountGetSubAccountListV1Request, options?: RawAxiosRequestConfig) {
        return AccountManagementApiFp(this.configuration).subaccountGetSubAccountListV1(requestParameters.timestamp, requestParameters.email, requestParameters.isFreeze, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Sub-account\'s Status on Margin Or Futures
     * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
     * @param {AccountManagementApiSubaccountGetSubAccountStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApi
     */
    public subaccountGetSubAccountStatusV1(requestParameters: AccountManagementApiSubaccountGetSubAccountStatusV1Request, options?: RawAxiosRequestConfig) {
        return AccountManagementApiFp(this.configuration).subaccountGetSubAccountStatusV1(requestParameters.timestamp, requestParameters.email, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Sub-account Transaction statistics (For Master Account).
     * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
     * @param {AccountManagementApiSubaccountGetSubAccountTransactionStatisticsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountManagementApi
     */
    public subaccountGetSubAccountTransactionStatisticsV1(requestParameters: AccountManagementApiSubaccountGetSubAccountTransactionStatisticsV1Request, options?: RawAxiosRequestConfig) {
        return AccountManagementApiFp(this.configuration).subaccountGetSubAccountTransactionStatisticsV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

