/* tslint:disable */
/* eslint-disable */
/**
 * Binance Wallet API
 * OpenAPI specification for Binance exchange - Wallet API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { WalletGetAccountApiRestrictionsV1Resp } from '../model';
// @ts-ignore
import type { WalletGetAccountApiTradingStatusV1Resp } from '../model';
// @ts-ignore
import type { WalletGetAccountInfoV1Resp } from '../model';
// @ts-ignore
import type { WalletGetAccountSnapshotV1Resp } from '../model';
// @ts-ignore
import type { WalletGetAccountStatusV1Resp } from '../model';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Disable Fast Withdraw Switch (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAccountDisableFastWithdrawSwitchV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletCreateAccountDisableFastWithdrawSwitchV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/disableFastWithdrawSwitch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable Fast Withdraw Switch (USER_DATA)
         * @summary Enable Fast Withdraw Switch (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAccountEnableFastWithdrawSwitchV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletCreateAccountEnableFastWithdrawSwitchV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/enableFastWithdrawSwitch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get API Key Permission
         * @summary Get API Key Permission (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAccountApiRestrictionsV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAccountApiRestrictionsV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/apiRestrictions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch account api trading status detail.
         * @summary Account API Trading Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAccountApiTradingStatusV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAccountApiTradingStatusV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/apiTradingStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch account info detail.
         * @summary Account info (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAccountInfoV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAccountInfoV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Daily account snapshot
         * @summary Daily Account Snapshot (USER_DATA)
         * @param {string} type &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;, &amp;#34;FUTURES&amp;#34;
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAccountSnapshotV1: async (type: string, timestamp: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('walletGetAccountSnapshotV1', 'type', type)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAccountSnapshotV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/accountSnapshot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch account status detail.
         * @summary Account Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAccountStatusV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAccountStatusV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Disable Fast Withdraw Switch (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateAccountDisableFastWithdrawSwitchV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateAccountDisableFastWithdrawSwitchV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.walletCreateAccountDisableFastWithdrawSwitchV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable Fast Withdraw Switch (USER_DATA)
         * @summary Enable Fast Withdraw Switch (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateAccountEnableFastWithdrawSwitchV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateAccountEnableFastWithdrawSwitchV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.walletCreateAccountEnableFastWithdrawSwitchV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get API Key Permission
         * @summary Get API Key Permission (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAccountApiRestrictionsV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetAccountApiRestrictionsV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAccountApiRestrictionsV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.walletGetAccountApiRestrictionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch account api trading status detail.
         * @summary Account API Trading Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAccountApiTradingStatusV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetAccountApiTradingStatusV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAccountApiTradingStatusV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.walletGetAccountApiTradingStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch account info detail.
         * @summary Account info (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAccountInfoV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetAccountInfoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAccountInfoV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.walletGetAccountInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Daily account snapshot
         * @summary Daily Account Snapshot (USER_DATA)
         * @param {string} type &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;, &amp;#34;FUTURES&amp;#34;
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAccountSnapshotV1(type: string, timestamp: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetAccountSnapshotV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAccountSnapshotV1(type, timestamp, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.walletGetAccountSnapshotV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch account status detail.
         * @summary Account Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAccountStatusV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetAccountStatusV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAccountStatusV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.walletGetAccountStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @summary Disable Fast Withdraw Switch (USER_DATA)
         * @param {AccountApiWalletCreateAccountDisableFastWithdrawSwitchV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAccountDisableFastWithdrawSwitchV1(requestParameters: AccountApiWalletCreateAccountDisableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.walletCreateAccountDisableFastWithdrawSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable Fast Withdraw Switch (USER_DATA)
         * @summary Enable Fast Withdraw Switch (USER_DATA)
         * @param {AccountApiWalletCreateAccountEnableFastWithdrawSwitchV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAccountEnableFastWithdrawSwitchV1(requestParameters: AccountApiWalletCreateAccountEnableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.walletCreateAccountEnableFastWithdrawSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get API Key Permission
         * @summary Get API Key Permission (USER_DATA)
         * @param {AccountApiWalletGetAccountApiRestrictionsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAccountApiRestrictionsV1(requestParameters: AccountApiWalletGetAccountApiRestrictionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAccountApiRestrictionsV1Resp> {
            return localVarFp.walletGetAccountApiRestrictionsV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch account api trading status detail.
         * @summary Account API Trading Status (USER_DATA)
         * @param {AccountApiWalletGetAccountApiTradingStatusV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAccountApiTradingStatusV1(requestParameters: AccountApiWalletGetAccountApiTradingStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAccountApiTradingStatusV1Resp> {
            return localVarFp.walletGetAccountApiTradingStatusV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch account info detail.
         * @summary Account info (USER_DATA)
         * @param {AccountApiWalletGetAccountInfoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAccountInfoV1(requestParameters: AccountApiWalletGetAccountInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAccountInfoV1Resp> {
            return localVarFp.walletGetAccountInfoV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Daily account snapshot
         * @summary Daily Account Snapshot (USER_DATA)
         * @param {AccountApiWalletGetAccountSnapshotV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAccountSnapshotV1(requestParameters: AccountApiWalletGetAccountSnapshotV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAccountSnapshotV1Resp> {
            return localVarFp.walletGetAccountSnapshotV1(requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch account status detail.
         * @summary Account Status (USER_DATA)
         * @param {AccountApiWalletGetAccountStatusV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAccountStatusV1(requestParameters: AccountApiWalletGetAccountStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAccountStatusV1Resp> {
            return localVarFp.walletGetAccountStatusV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - interface
 * @export
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * 
     * @summary Disable Fast Withdraw Switch (USER_DATA)
     * @param {AccountApiWalletCreateAccountDisableFastWithdrawSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    walletCreateAccountDisableFastWithdrawSwitchV1(requestParameters: AccountApiWalletCreateAccountDisableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * Enable Fast Withdraw Switch (USER_DATA)
     * @summary Enable Fast Withdraw Switch (USER_DATA)
     * @param {AccountApiWalletCreateAccountEnableFastWithdrawSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    walletCreateAccountEnableFastWithdrawSwitchV1(requestParameters: AccountApiWalletCreateAccountEnableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * Get API Key Permission
     * @summary Get API Key Permission (USER_DATA)
     * @param {AccountApiWalletGetAccountApiRestrictionsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    walletGetAccountApiRestrictionsV1(requestParameters: AccountApiWalletGetAccountApiRestrictionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAccountApiRestrictionsV1Resp>;

    /**
     * Fetch account api trading status detail.
     * @summary Account API Trading Status (USER_DATA)
     * @param {AccountApiWalletGetAccountApiTradingStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    walletGetAccountApiTradingStatusV1(requestParameters: AccountApiWalletGetAccountApiTradingStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAccountApiTradingStatusV1Resp>;

    /**
     * Fetch account info detail.
     * @summary Account info (USER_DATA)
     * @param {AccountApiWalletGetAccountInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    walletGetAccountInfoV1(requestParameters: AccountApiWalletGetAccountInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAccountInfoV1Resp>;

    /**
     * Daily account snapshot
     * @summary Daily Account Snapshot (USER_DATA)
     * @param {AccountApiWalletGetAccountSnapshotV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    walletGetAccountSnapshotV1(requestParameters: AccountApiWalletGetAccountSnapshotV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAccountSnapshotV1Resp>;

    /**
     * Fetch account status detail.
     * @summary Account Status (USER_DATA)
     * @param {AccountApiWalletGetAccountStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    walletGetAccountStatusV1(requestParameters: AccountApiWalletGetAccountStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAccountStatusV1Resp>;

}

/**
 * Request parameters for walletCreateAccountDisableFastWithdrawSwitchV1 operation in AccountApi.
 * @export
 * @interface AccountApiWalletCreateAccountDisableFastWithdrawSwitchV1Request
 */
export interface AccountApiWalletCreateAccountDisableFastWithdrawSwitchV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletCreateAccountDisableFastWithdrawSwitchV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletCreateAccountDisableFastWithdrawSwitchV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletCreateAccountEnableFastWithdrawSwitchV1 operation in AccountApi.
 * @export
 * @interface AccountApiWalletCreateAccountEnableFastWithdrawSwitchV1Request
 */
export interface AccountApiWalletCreateAccountEnableFastWithdrawSwitchV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletCreateAccountEnableFastWithdrawSwitchV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletCreateAccountEnableFastWithdrawSwitchV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetAccountApiRestrictionsV1 operation in AccountApi.
 * @export
 * @interface AccountApiWalletGetAccountApiRestrictionsV1Request
 */
export interface AccountApiWalletGetAccountApiRestrictionsV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountApiRestrictionsV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountApiRestrictionsV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetAccountApiTradingStatusV1 operation in AccountApi.
 * @export
 * @interface AccountApiWalletGetAccountApiTradingStatusV1Request
 */
export interface AccountApiWalletGetAccountApiTradingStatusV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountApiTradingStatusV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountApiTradingStatusV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetAccountInfoV1 operation in AccountApi.
 * @export
 * @interface AccountApiWalletGetAccountInfoV1Request
 */
export interface AccountApiWalletGetAccountInfoV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountInfoV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountInfoV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetAccountSnapshotV1 operation in AccountApi.
 * @export
 * @interface AccountApiWalletGetAccountSnapshotV1Request
 */
export interface AccountApiWalletGetAccountSnapshotV1Request {
    /**
     * &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;, &amp;#34;FUTURES&amp;#34;
     * @type {string}
     * @memberof AccountApiWalletGetAccountSnapshotV1
     */
    readonly type: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountSnapshotV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountSnapshotV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountSnapshotV1
     */
    readonly endTime?: number

    /**
     * min 7, max 30, default 7
     * @type {number}
     * @memberof AccountApiWalletGetAccountSnapshotV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountSnapshotV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetAccountStatusV1 operation in AccountApi.
 * @export
 * @interface AccountApiWalletGetAccountStatusV1Request
 */
export interface AccountApiWalletGetAccountStatusV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountStatusV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiWalletGetAccountStatusV1
     */
    readonly recvWindow?: number
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI implements AccountApiInterface {
    /**
     * 
     * @summary Disable Fast Withdraw Switch (USER_DATA)
     * @param {AccountApiWalletCreateAccountDisableFastWithdrawSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public walletCreateAccountDisableFastWithdrawSwitchV1(requestParameters: AccountApiWalletCreateAccountDisableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).walletCreateAccountDisableFastWithdrawSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable Fast Withdraw Switch (USER_DATA)
     * @summary Enable Fast Withdraw Switch (USER_DATA)
     * @param {AccountApiWalletCreateAccountEnableFastWithdrawSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public walletCreateAccountEnableFastWithdrawSwitchV1(requestParameters: AccountApiWalletCreateAccountEnableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).walletCreateAccountEnableFastWithdrawSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get API Key Permission
     * @summary Get API Key Permission (USER_DATA)
     * @param {AccountApiWalletGetAccountApiRestrictionsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public walletGetAccountApiRestrictionsV1(requestParameters: AccountApiWalletGetAccountApiRestrictionsV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).walletGetAccountApiRestrictionsV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch account api trading status detail.
     * @summary Account API Trading Status (USER_DATA)
     * @param {AccountApiWalletGetAccountApiTradingStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public walletGetAccountApiTradingStatusV1(requestParameters: AccountApiWalletGetAccountApiTradingStatusV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).walletGetAccountApiTradingStatusV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch account info detail.
     * @summary Account info (USER_DATA)
     * @param {AccountApiWalletGetAccountInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public walletGetAccountInfoV1(requestParameters: AccountApiWalletGetAccountInfoV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).walletGetAccountInfoV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Daily account snapshot
     * @summary Daily Account Snapshot (USER_DATA)
     * @param {AccountApiWalletGetAccountSnapshotV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public walletGetAccountSnapshotV1(requestParameters: AccountApiWalletGetAccountSnapshotV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).walletGetAccountSnapshotV1(requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch account status detail.
     * @summary Account Status (USER_DATA)
     * @param {AccountApiWalletGetAccountStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public walletGetAccountStatusV1(requestParameters: AccountApiWalletGetAccountStatusV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).walletGetAccountStatusV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

