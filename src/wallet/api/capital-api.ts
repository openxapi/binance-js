/* tslint:disable */
/* eslint-disable */
/**
 * Binance Wallet API
 * OpenAPI specification for Binance exchange - Wallet API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { WalletCreateCapitalDepositCreditApplyV1Resp } from '../model';
// @ts-ignore
import type { WalletCreateCapitalWithdrawApplyV1Resp } from '../model';
// @ts-ignore
import type { WalletGetCapitalConfigGetallV1RespItem } from '../model';
// @ts-ignore
import type { WalletGetCapitalDepositAddressListV1RespItem } from '../model';
// @ts-ignore
import type { WalletGetCapitalDepositAddressV1Resp } from '../model';
// @ts-ignore
import type { WalletGetCapitalDepositHisrecV1RespItem } from '../model';
// @ts-ignore
import type { WalletGetCapitalWithdrawAddressListV1RespItem } from '../model';
// @ts-ignore
import type { WalletGetCapitalWithdrawHistoryV1RespItem } from '../model';
/**
 * CapitalApi - axios parameter creator
 * @export
 */
export const CapitalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Apply deposit credit for expired address (One click arrival)
         * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
         * @param {number} [depositId] 
         * @param {number} [subAccountId] 
         * @param {number} [subUserId] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateCapitalDepositCreditApplyV1: async (depositId?: number, subAccountId?: number, subUserId?: number, txId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/capital/deposit/credit-apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (depositId !== undefined) { 
                localVarFormParams.set('depositId', depositId as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (subUserId !== undefined) { 
                localVarFormParams.set('subUserId', subUserId as any);
            }
    
            if (txId !== undefined) { 
                localVarFormParams.set('txId', txId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit a withdraw request.
         * @summary Withdraw(USER_DATA)
         * @param {string} address 
         * @param {string} amount 
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [addressTag] 
         * @param {string} [name] 
         * @param {string} [network] 
         * @param {number} [recvWindow] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {string} [withdrawOrderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateCapitalWithdrawApplyV1: async (address: string, amount: string, coin: string, timestamp: number, addressTag?: string, name?: string, network?: string, recvWindow?: number, transactionFeeFlag?: boolean, walletType?: number, withdrawOrderId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('walletCreateCapitalWithdrawApplyV1', 'address', address)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('walletCreateCapitalWithdrawApplyV1', 'amount', amount)
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('walletCreateCapitalWithdrawApplyV1', 'coin', coin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletCreateCapitalWithdrawApplyV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/withdraw/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (address !== undefined) { 
                localVarFormParams.set('address', address as any);
            }
    
            if (addressTag !== undefined) { 
                localVarFormParams.set('addressTag', addressTag as any);
            }
    
            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (coin !== undefined) { 
                localVarFormParams.set('coin', coin as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (network !== undefined) { 
                localVarFormParams.set('network', network as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (transactionFeeFlag !== undefined) { 
                localVarFormParams.set('transactionFeeFlag', transactionFeeFlag as any);
            }
    
            if (walletType !== undefined) { 
                localVarFormParams.set('walletType', walletType as any);
            }
    
            if (withdrawOrderId !== undefined) { 
                localVarFormParams.set('withdrawOrderId', withdrawOrderId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information of coins (available for deposit and withdraw) for user.
         * @summary All Coins\' Information (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalConfigGetallV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetCapitalConfigGetallV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/config/getall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch deposit address list with network.
         * @summary Fetch deposit address list with network(USER_DATA)
         * @param {string} coin &#x60;coin&#x60; refers to the parent network address format that the address is using
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalDepositAddressListV1: async (coin: string, timestamp: number, network?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('walletGetCapitalDepositAddressListV1', 'coin', coin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetCapitalDepositAddressListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/deposit/address/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch deposit address with network.
         * @summary Deposit Address(supporting network) (USER_DATA)
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalDepositAddressV1: async (coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('walletGetCapitalDepositAddressV1', 'coin', coin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetCapitalDepositAddressV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/deposit/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch deposit history.
         * @summary Deposit History (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {boolean} [includeSource] Default: &#x60;false&#x60;, return &#x60;sourceAddress&#x60;field when set to &#x60;true&#x60;
         * @param {string} [coin] 
         * @param {number} [status] 0(0:pending, 6:credited but cannot withdraw, 7:Wrong Deposit, 8:Waiting User confirm, 1:success, 2:rejected)
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [offset] Default:0
         * @param {number} [limit] Default:1000, Max:1000
         * @param {number} [recvWindow] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalDepositHisrecV1: async (timestamp: number, includeSource?: boolean, coin?: string, status?: number, startTime?: number, endTime?: number, offset?: number, limit?: number, recvWindow?: number, txId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetCapitalDepositHisrecV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/deposit/hisrec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (includeSource !== undefined) {
                localVarQueryParameter['includeSource'] = includeSource;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (txId !== undefined) {
                localVarQueryParameter['txId'] = txId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch withdraw address list
         * @summary Fetch withdraw address list (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalWithdrawAddressListV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/capital/withdraw/address/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch withdraw history.
         * @summary Withdraw History (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [coin] 
         * @param {string} [withdrawOrderId] 
         * @param {number} [status] 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
         * @param {number} [offset] 
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {string} [idList] id list returned in the response of POST &#x60;/sapi/v1/capital/withdraw/apply&#x60;, separated by &#x60;,&#x60;
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalWithdrawHistoryV1: async (timestamp: number, coin?: string, withdrawOrderId?: string, status?: number, offset?: number, limit?: number, idList?: string, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetCapitalWithdrawHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/withdraw/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (withdrawOrderId !== undefined) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (idList !== undefined) {
                localVarQueryParameter['idList'] = idList;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CapitalApi - functional programming interface
 * @export
 */
export const CapitalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CapitalApiAxiosParamCreator(configuration)
    return {
        /**
         * Apply deposit credit for expired address (One click arrival)
         * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
         * @param {number} [depositId] 
         * @param {number} [subAccountId] 
         * @param {number} [subUserId] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateCapitalDepositCreditApplyV1(depositId?: number, subAccountId?: number, subUserId?: number, txId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCreateCapitalDepositCreditApplyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateCapitalDepositCreditApplyV1(depositId, subAccountId, subUserId, txId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CapitalApi.walletCreateCapitalDepositCreditApplyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit a withdraw request.
         * @summary Withdraw(USER_DATA)
         * @param {string} address 
         * @param {string} amount 
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [addressTag] 
         * @param {string} [name] 
         * @param {string} [network] 
         * @param {number} [recvWindow] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {string} [withdrawOrderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateCapitalWithdrawApplyV1(address: string, amount: string, coin: string, timestamp: number, addressTag?: string, name?: string, network?: string, recvWindow?: number, transactionFeeFlag?: boolean, walletType?: number, withdrawOrderId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCreateCapitalWithdrawApplyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateCapitalWithdrawApplyV1(address, amount, coin, timestamp, addressTag, name, network, recvWindow, transactionFeeFlag, walletType, withdrawOrderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CapitalApi.walletCreateCapitalWithdrawApplyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get information of coins (available for deposit and withdraw) for user.
         * @summary All Coins\' Information (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetCapitalConfigGetallV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetCapitalConfigGetallV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetCapitalConfigGetallV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CapitalApi.walletGetCapitalConfigGetallV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch deposit address list with network.
         * @summary Fetch deposit address list with network(USER_DATA)
         * @param {string} coin &#x60;coin&#x60; refers to the parent network address format that the address is using
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetCapitalDepositAddressListV1(coin: string, timestamp: number, network?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetCapitalDepositAddressListV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetCapitalDepositAddressListV1(coin, timestamp, network, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CapitalApi.walletGetCapitalDepositAddressListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch deposit address with network.
         * @summary Deposit Address(supporting network) (USER_DATA)
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetCapitalDepositAddressV1(coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetCapitalDepositAddressV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetCapitalDepositAddressV1(coin, timestamp, network, amount, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CapitalApi.walletGetCapitalDepositAddressV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch deposit history.
         * @summary Deposit History (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {boolean} [includeSource] Default: &#x60;false&#x60;, return &#x60;sourceAddress&#x60;field when set to &#x60;true&#x60;
         * @param {string} [coin] 
         * @param {number} [status] 0(0:pending, 6:credited but cannot withdraw, 7:Wrong Deposit, 8:Waiting User confirm, 1:success, 2:rejected)
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [offset] Default:0
         * @param {number} [limit] Default:1000, Max:1000
         * @param {number} [recvWindow] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetCapitalDepositHisrecV1(timestamp: number, includeSource?: boolean, coin?: string, status?: number, startTime?: number, endTime?: number, offset?: number, limit?: number, recvWindow?: number, txId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetCapitalDepositHisrecV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetCapitalDepositHisrecV1(timestamp, includeSource, coin, status, startTime, endTime, offset, limit, recvWindow, txId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CapitalApi.walletGetCapitalDepositHisrecV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch withdraw address list
         * @summary Fetch withdraw address list (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetCapitalWithdrawAddressListV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetCapitalWithdrawAddressListV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetCapitalWithdrawAddressListV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CapitalApi.walletGetCapitalWithdrawAddressListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch withdraw history.
         * @summary Withdraw History (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [coin] 
         * @param {string} [withdrawOrderId] 
         * @param {number} [status] 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
         * @param {number} [offset] 
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {string} [idList] id list returned in the response of POST &#x60;/sapi/v1/capital/withdraw/apply&#x60;, separated by &#x60;,&#x60;
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetCapitalWithdrawHistoryV1(timestamp: number, coin?: string, withdrawOrderId?: string, status?: number, offset?: number, limit?: number, idList?: string, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetCapitalWithdrawHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetCapitalWithdrawHistoryV1(timestamp, coin, withdrawOrderId, status, offset, limit, idList, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CapitalApi.walletGetCapitalWithdrawHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CapitalApi - factory interface
 * @export
 */
export const CapitalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CapitalApiFp(configuration)
    return {
        /**
         * Apply deposit credit for expired address (One click arrival)
         * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
         * @param {CapitalApiWalletCreateCapitalDepositCreditApplyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateCapitalDepositCreditApplyV1(requestParameters: CapitalApiWalletCreateCapitalDepositCreditApplyV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateCapitalDepositCreditApplyV1Resp> {
            return localVarFp.walletCreateCapitalDepositCreditApplyV1(requestParameters.depositId, requestParameters.subAccountId, requestParameters.subUserId, requestParameters.txId, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit a withdraw request.
         * @summary Withdraw(USER_DATA)
         * @param {CapitalApiWalletCreateCapitalWithdrawApplyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateCapitalWithdrawApplyV1(requestParameters: CapitalApiWalletCreateCapitalWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateCapitalWithdrawApplyV1Resp> {
            return localVarFp.walletCreateCapitalWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.timestamp, requestParameters.addressTag, requestParameters.name, requestParameters.network, requestParameters.recvWindow, requestParameters.transactionFeeFlag, requestParameters.walletType, requestParameters.withdrawOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information of coins (available for deposit and withdraw) for user.
         * @summary All Coins\' Information (USER_DATA)
         * @param {CapitalApiWalletGetCapitalConfigGetallV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalConfigGetallV1(requestParameters: CapitalApiWalletGetCapitalConfigGetallV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetCapitalConfigGetallV1RespItem>> {
            return localVarFp.walletGetCapitalConfigGetallV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch deposit address list with network.
         * @summary Fetch deposit address list with network(USER_DATA)
         * @param {CapitalApiWalletGetCapitalDepositAddressListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalDepositAddressListV1(requestParameters: CapitalApiWalletGetCapitalDepositAddressListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetCapitalDepositAddressListV1RespItem>> {
            return localVarFp.walletGetCapitalDepositAddressListV1(requestParameters.coin, requestParameters.timestamp, requestParameters.network, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch deposit address with network.
         * @summary Deposit Address(supporting network) (USER_DATA)
         * @param {CapitalApiWalletGetCapitalDepositAddressV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalDepositAddressV1(requestParameters: CapitalApiWalletGetCapitalDepositAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetCapitalDepositAddressV1Resp> {
            return localVarFp.walletGetCapitalDepositAddressV1(requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch deposit history.
         * @summary Deposit History (supporting network) (USER_DATA)
         * @param {CapitalApiWalletGetCapitalDepositHisrecV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalDepositHisrecV1(requestParameters: CapitalApiWalletGetCapitalDepositHisrecV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetCapitalDepositHisrecV1RespItem>> {
            return localVarFp.walletGetCapitalDepositHisrecV1(requestParameters.timestamp, requestParameters.includeSource, requestParameters.coin, requestParameters.status, requestParameters.startTime, requestParameters.endTime, requestParameters.offset, requestParameters.limit, requestParameters.recvWindow, requestParameters.txId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch withdraw address list
         * @summary Fetch withdraw address list (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalWithdrawAddressListV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetCapitalWithdrawAddressListV1RespItem>> {
            return localVarFp.walletGetCapitalWithdrawAddressListV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch withdraw history.
         * @summary Withdraw History (supporting network) (USER_DATA)
         * @param {CapitalApiWalletGetCapitalWithdrawHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetCapitalWithdrawHistoryV1(requestParameters: CapitalApiWalletGetCapitalWithdrawHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetCapitalWithdrawHistoryV1RespItem>> {
            return localVarFp.walletGetCapitalWithdrawHistoryV1(requestParameters.timestamp, requestParameters.coin, requestParameters.withdrawOrderId, requestParameters.status, requestParameters.offset, requestParameters.limit, requestParameters.idList, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CapitalApi - interface
 * @export
 * @interface CapitalApi
 */
export interface CapitalApiInterface {
    /**
     * Apply deposit credit for expired address (One click arrival)
     * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
     * @param {CapitalApiWalletCreateCapitalDepositCreditApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApiInterface
     */
    walletCreateCapitalDepositCreditApplyV1(requestParameters?: CapitalApiWalletCreateCapitalDepositCreditApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateCapitalDepositCreditApplyV1Resp>;

    /**
     * Submit a withdraw request.
     * @summary Withdraw(USER_DATA)
     * @param {CapitalApiWalletCreateCapitalWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApiInterface
     */
    walletCreateCapitalWithdrawApplyV1(requestParameters: CapitalApiWalletCreateCapitalWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateCapitalWithdrawApplyV1Resp>;

    /**
     * Get information of coins (available for deposit and withdraw) for user.
     * @summary All Coins\' Information (USER_DATA)
     * @param {CapitalApiWalletGetCapitalConfigGetallV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApiInterface
     */
    walletGetCapitalConfigGetallV1(requestParameters: CapitalApiWalletGetCapitalConfigGetallV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetCapitalConfigGetallV1RespItem>>;

    /**
     * Fetch deposit address list with network.
     * @summary Fetch deposit address list with network(USER_DATA)
     * @param {CapitalApiWalletGetCapitalDepositAddressListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApiInterface
     */
    walletGetCapitalDepositAddressListV1(requestParameters: CapitalApiWalletGetCapitalDepositAddressListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetCapitalDepositAddressListV1RespItem>>;

    /**
     * Fetch deposit address with network.
     * @summary Deposit Address(supporting network) (USER_DATA)
     * @param {CapitalApiWalletGetCapitalDepositAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApiInterface
     */
    walletGetCapitalDepositAddressV1(requestParameters: CapitalApiWalletGetCapitalDepositAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetCapitalDepositAddressV1Resp>;

    /**
     * Fetch deposit history.
     * @summary Deposit History (supporting network) (USER_DATA)
     * @param {CapitalApiWalletGetCapitalDepositHisrecV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApiInterface
     */
    walletGetCapitalDepositHisrecV1(requestParameters: CapitalApiWalletGetCapitalDepositHisrecV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetCapitalDepositHisrecV1RespItem>>;

    /**
     * Fetch withdraw address list
     * @summary Fetch withdraw address list (USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApiInterface
     */
    walletGetCapitalWithdrawAddressListV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetCapitalWithdrawAddressListV1RespItem>>;

    /**
     * Fetch withdraw history.
     * @summary Withdraw History (supporting network) (USER_DATA)
     * @param {CapitalApiWalletGetCapitalWithdrawHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApiInterface
     */
    walletGetCapitalWithdrawHistoryV1(requestParameters: CapitalApiWalletGetCapitalWithdrawHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetCapitalWithdrawHistoryV1RespItem>>;

}

/**
 * Request parameters for walletCreateCapitalDepositCreditApplyV1 operation in CapitalApi.
 * @export
 * @interface CapitalApiWalletCreateCapitalDepositCreditApplyV1Request
 */
export interface CapitalApiWalletCreateCapitalDepositCreditApplyV1Request {
    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletCreateCapitalDepositCreditApplyV1
     */
    readonly depositId?: number

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletCreateCapitalDepositCreditApplyV1
     */
    readonly subAccountId?: number

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletCreateCapitalDepositCreditApplyV1
     */
    readonly subUserId?: number

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletCreateCapitalDepositCreditApplyV1
     */
    readonly txId?: string
}

/**
 * Request parameters for walletCreateCapitalWithdrawApplyV1 operation in CapitalApi.
 * @export
 * @interface CapitalApiWalletCreateCapitalWithdrawApplyV1Request
 */
export interface CapitalApiWalletCreateCapitalWithdrawApplyV1Request {
    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletCreateCapitalWithdrawApplyV1
     */
    readonly address: string

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletCreateCapitalWithdrawApplyV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletCreateCapitalWithdrawApplyV1
     */
    readonly coin: string

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletCreateCapitalWithdrawApplyV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletCreateCapitalWithdrawApplyV1
     */
    readonly addressTag?: string

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletCreateCapitalWithdrawApplyV1
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletCreateCapitalWithdrawApplyV1
     */
    readonly network?: string

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletCreateCapitalWithdrawApplyV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {boolean}
     * @memberof CapitalApiWalletCreateCapitalWithdrawApplyV1
     */
    readonly transactionFeeFlag?: boolean

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletCreateCapitalWithdrawApplyV1
     */
    readonly walletType?: number

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletCreateCapitalWithdrawApplyV1
     */
    readonly withdrawOrderId?: string
}

/**
 * Request parameters for walletGetCapitalConfigGetallV1 operation in CapitalApi.
 * @export
 * @interface CapitalApiWalletGetCapitalConfigGetallV1Request
 */
export interface CapitalApiWalletGetCapitalConfigGetallV1Request {
    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalConfigGetallV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalConfigGetallV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetCapitalDepositAddressListV1 operation in CapitalApi.
 * @export
 * @interface CapitalApiWalletGetCapitalDepositAddressListV1Request
 */
export interface CapitalApiWalletGetCapitalDepositAddressListV1Request {
    /**
     * &#x60;coin&#x60; refers to the parent network address format that the address is using
     * @type {string}
     * @memberof CapitalApiWalletGetCapitalDepositAddressListV1
     */
    readonly coin: string

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalDepositAddressListV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletGetCapitalDepositAddressListV1
     */
    readonly network?: string
}

/**
 * Request parameters for walletGetCapitalDepositAddressV1 operation in CapitalApi.
 * @export
 * @interface CapitalApiWalletGetCapitalDepositAddressV1Request
 */
export interface CapitalApiWalletGetCapitalDepositAddressV1Request {
    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletGetCapitalDepositAddressV1
     */
    readonly coin: string

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalDepositAddressV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletGetCapitalDepositAddressV1
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletGetCapitalDepositAddressV1
     */
    readonly amount?: string

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalDepositAddressV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetCapitalDepositHisrecV1 operation in CapitalApi.
 * @export
 * @interface CapitalApiWalletGetCapitalDepositHisrecV1Request
 */
export interface CapitalApiWalletGetCapitalDepositHisrecV1Request {
    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalDepositHisrecV1
     */
    readonly timestamp: number

    /**
     * Default: &#x60;false&#x60;, return &#x60;sourceAddress&#x60;field when set to &#x60;true&#x60;
     * @type {boolean}
     * @memberof CapitalApiWalletGetCapitalDepositHisrecV1
     */
    readonly includeSource?: boolean

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletGetCapitalDepositHisrecV1
     */
    readonly coin?: string

    /**
     * 0(0:pending, 6:credited but cannot withdraw, 7:Wrong Deposit, 8:Waiting User confirm, 1:success, 2:rejected)
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalDepositHisrecV1
     */
    readonly status?: number

    /**
     * Default: 90 days from current timestamp
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalDepositHisrecV1
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalDepositHisrecV1
     */
    readonly endTime?: number

    /**
     * Default:0
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalDepositHisrecV1
     */
    readonly offset?: number

    /**
     * Default:1000, Max:1000
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalDepositHisrecV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalDepositHisrecV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletGetCapitalDepositHisrecV1
     */
    readonly txId?: string
}

/**
 * Request parameters for walletGetCapitalWithdrawHistoryV1 operation in CapitalApi.
 * @export
 * @interface CapitalApiWalletGetCapitalWithdrawHistoryV1Request
 */
export interface CapitalApiWalletGetCapitalWithdrawHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalWithdrawHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletGetCapitalWithdrawHistoryV1
     */
    readonly coin?: string

    /**
     * 
     * @type {string}
     * @memberof CapitalApiWalletGetCapitalWithdrawHistoryV1
     */
    readonly withdrawOrderId?: string

    /**
     * 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalWithdrawHistoryV1
     */
    readonly status?: number

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalWithdrawHistoryV1
     */
    readonly offset?: number

    /**
     * Default: 1000, Max: 1000
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalWithdrawHistoryV1
     */
    readonly limit?: number

    /**
     * id list returned in the response of POST &#x60;/sapi/v1/capital/withdraw/apply&#x60;, separated by &#x60;,&#x60;
     * @type {string}
     * @memberof CapitalApiWalletGetCapitalWithdrawHistoryV1
     */
    readonly idList?: string

    /**
     * Default: 90 days from current timestamp
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalWithdrawHistoryV1
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalWithdrawHistoryV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof CapitalApiWalletGetCapitalWithdrawHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * CapitalApi - object-oriented interface
 * @export
 * @class CapitalApi
 * @extends {BaseAPI}
 */
export class CapitalApi extends BaseAPI implements CapitalApiInterface {
    /**
     * Apply deposit credit for expired address (One click arrival)
     * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
     * @param {CapitalApiWalletCreateCapitalDepositCreditApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApi
     */
    public walletCreateCapitalDepositCreditApplyV1(requestParameters: CapitalApiWalletCreateCapitalDepositCreditApplyV1Request = {}, options?: RawAxiosRequestConfig) {
        return CapitalApiFp(this.configuration).walletCreateCapitalDepositCreditApplyV1(requestParameters.depositId, requestParameters.subAccountId, requestParameters.subUserId, requestParameters.txId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit a withdraw request.
     * @summary Withdraw(USER_DATA)
     * @param {CapitalApiWalletCreateCapitalWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApi
     */
    public walletCreateCapitalWithdrawApplyV1(requestParameters: CapitalApiWalletCreateCapitalWithdrawApplyV1Request, options?: RawAxiosRequestConfig) {
        return CapitalApiFp(this.configuration).walletCreateCapitalWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.timestamp, requestParameters.addressTag, requestParameters.name, requestParameters.network, requestParameters.recvWindow, requestParameters.transactionFeeFlag, requestParameters.walletType, requestParameters.withdrawOrderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information of coins (available for deposit and withdraw) for user.
     * @summary All Coins\' Information (USER_DATA)
     * @param {CapitalApiWalletGetCapitalConfigGetallV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApi
     */
    public walletGetCapitalConfigGetallV1(requestParameters: CapitalApiWalletGetCapitalConfigGetallV1Request, options?: RawAxiosRequestConfig) {
        return CapitalApiFp(this.configuration).walletGetCapitalConfigGetallV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch deposit address list with network.
     * @summary Fetch deposit address list with network(USER_DATA)
     * @param {CapitalApiWalletGetCapitalDepositAddressListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApi
     */
    public walletGetCapitalDepositAddressListV1(requestParameters: CapitalApiWalletGetCapitalDepositAddressListV1Request, options?: RawAxiosRequestConfig) {
        return CapitalApiFp(this.configuration).walletGetCapitalDepositAddressListV1(requestParameters.coin, requestParameters.timestamp, requestParameters.network, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch deposit address with network.
     * @summary Deposit Address(supporting network) (USER_DATA)
     * @param {CapitalApiWalletGetCapitalDepositAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApi
     */
    public walletGetCapitalDepositAddressV1(requestParameters: CapitalApiWalletGetCapitalDepositAddressV1Request, options?: RawAxiosRequestConfig) {
        return CapitalApiFp(this.configuration).walletGetCapitalDepositAddressV1(requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch deposit history.
     * @summary Deposit History (supporting network) (USER_DATA)
     * @param {CapitalApiWalletGetCapitalDepositHisrecV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApi
     */
    public walletGetCapitalDepositHisrecV1(requestParameters: CapitalApiWalletGetCapitalDepositHisrecV1Request, options?: RawAxiosRequestConfig) {
        return CapitalApiFp(this.configuration).walletGetCapitalDepositHisrecV1(requestParameters.timestamp, requestParameters.includeSource, requestParameters.coin, requestParameters.status, requestParameters.startTime, requestParameters.endTime, requestParameters.offset, requestParameters.limit, requestParameters.recvWindow, requestParameters.txId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch withdraw address list
     * @summary Fetch withdraw address list (USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApi
     */
    public walletGetCapitalWithdrawAddressListV1(options?: RawAxiosRequestConfig) {
        return CapitalApiFp(this.configuration).walletGetCapitalWithdrawAddressListV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch withdraw history.
     * @summary Withdraw History (supporting network) (USER_DATA)
     * @param {CapitalApiWalletGetCapitalWithdrawHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapitalApi
     */
    public walletGetCapitalWithdrawHistoryV1(requestParameters: CapitalApiWalletGetCapitalWithdrawHistoryV1Request, options?: RawAxiosRequestConfig) {
        return CapitalApiFp(this.configuration).walletGetCapitalWithdrawHistoryV1(requestParameters.timestamp, requestParameters.coin, requestParameters.withdrawOrderId, requestParameters.status, requestParameters.offset, requestParameters.limit, requestParameters.idList, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

