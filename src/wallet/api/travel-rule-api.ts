/* tslint:disable */
/* eslint-disable */
/**
 * Binance Wallet API
 * OpenAPI specification for Binance exchange - Wallet API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { WalletCreateLocalentityBrokerWithdrawApplyV1Resp } from '../model';
// @ts-ignore
import type { WalletCreateLocalentityWithdrawApplyV1Resp } from '../model';
// @ts-ignore
import type { WalletGetLocalentityDepositHistoryV1RespItem } from '../model';
// @ts-ignore
import type { WalletGetLocalentityVaspV1RespItem } from '../model';
// @ts-ignore
import type { WalletGetLocalentityWithdrawHistoryV1RespItem } from '../model';
// @ts-ignore
import type { WalletGetLocalentityWithdrawHistoryV2RespItem } from '../model';
// @ts-ignore
import type { WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp } from '../model';
// @ts-ignore
import type { WalletUpdateLocalentityDepositProvideInfoV1Resp } from '../model';
/**
 * TravelRuleApi - axios parameter creator
 * @export
 */
export const TravelRuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Submit a withdrawal request for brokers of local entities that required travel rule.
         * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
         * @param {string} address 
         * @param {object} amount 
         * @param {string} coin 
         * @param {string} originatorPii 
         * @param {string} questionnaire 
         * @param {string} signature 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} withdrawOrderId 
         * @param {string} [addressName] 
         * @param {string} [addressTag] 
         * @param {string} [network] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateLocalentityBrokerWithdrawApplyV1: async (address: string, amount: object, coin: string, originatorPii: string, questionnaire: string, signature: string, subAccountId: string, timestamp: number, withdrawOrderId: string, addressName?: string, addressTag?: string, network?: string, transactionFeeFlag?: boolean, walletType?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('walletCreateLocalentityBrokerWithdrawApplyV1', 'address', address)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('walletCreateLocalentityBrokerWithdrawApplyV1', 'amount', amount)
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('walletCreateLocalentityBrokerWithdrawApplyV1', 'coin', coin)
            // verify required parameter 'originatorPii' is not null or undefined
            assertParamExists('walletCreateLocalentityBrokerWithdrawApplyV1', 'originatorPii', originatorPii)
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists('walletCreateLocalentityBrokerWithdrawApplyV1', 'questionnaire', questionnaire)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('walletCreateLocalentityBrokerWithdrawApplyV1', 'signature', signature)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('walletCreateLocalentityBrokerWithdrawApplyV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletCreateLocalentityBrokerWithdrawApplyV1', 'timestamp', timestamp)
            // verify required parameter 'withdrawOrderId' is not null or undefined
            assertParamExists('walletCreateLocalentityBrokerWithdrawApplyV1', 'withdrawOrderId', withdrawOrderId)
            const localVarPath = `/sapi/v1/localentity/broker/withdraw/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (address !== undefined) { 
                localVarFormParams.set('address', address as any);
            }
    
            if (addressName !== undefined) { 
                localVarFormParams.set('addressName', addressName as any);
            }
    
            if (addressTag !== undefined) { 
                localVarFormParams.set('addressTag', addressTag as any);
            }
    
            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (coin !== undefined) { 
                localVarFormParams.set('coin', coin as any);
            }
    
            if (network !== undefined) { 
                localVarFormParams.set('network', network as any);
            }
    
            if (originatorPii !== undefined) { 
                localVarFormParams.set('originatorPii', originatorPii as any);
            }
    
            if (questionnaire !== undefined) { 
                localVarFormParams.set('questionnaire', questionnaire as any);
            }
    
            if (signature !== undefined) { 
                localVarFormParams.set('signature', signature as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (transactionFeeFlag !== undefined) { 
                localVarFormParams.set('transactionFeeFlag', transactionFeeFlag as any);
            }
    
            if (walletType !== undefined) { 
                localVarFormParams.set('walletType', walletType as any);
            }
    
            if (withdrawOrderId !== undefined) { 
                localVarFormParams.set('withdrawOrderId', withdrawOrderId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit a withdrawal request for local entities that required travel rule.
         * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
         * @param {string} address 
         * @param {string} amount 
         * @param {string} coin 
         * @param {string} questionnaire 
         * @param {number} timestamp 
         * @param {string} [addressTag] 
         * @param {string} [name] 
         * @param {string} [network] 
         * @param {number} [recvWindow] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {string} [withdrawOrderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateLocalentityWithdrawApplyV1: async (address: string, amount: string, coin: string, questionnaire: string, timestamp: number, addressTag?: string, name?: string, network?: string, recvWindow?: number, transactionFeeFlag?: boolean, walletType?: number, withdrawOrderId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('walletCreateLocalentityWithdrawApplyV1', 'address', address)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('walletCreateLocalentityWithdrawApplyV1', 'amount', amount)
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('walletCreateLocalentityWithdrawApplyV1', 'coin', coin)
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists('walletCreateLocalentityWithdrawApplyV1', 'questionnaire', questionnaire)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletCreateLocalentityWithdrawApplyV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/localentity/withdraw/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (address !== undefined) { 
                localVarFormParams.set('address', address as any);
            }
    
            if (addressTag !== undefined) { 
                localVarFormParams.set('addressTag', addressTag as any);
            }
    
            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (coin !== undefined) { 
                localVarFormParams.set('coin', coin as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (network !== undefined) { 
                localVarFormParams.set('network', network as any);
            }
    
            if (questionnaire !== undefined) { 
                localVarFormParams.set('questionnaire', questionnaire as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (transactionFeeFlag !== undefined) { 
                localVarFormParams.set('transactionFeeFlag', transactionFeeFlag as any);
            }
    
            if (walletType !== undefined) { 
                localVarFormParams.set('walletType', walletType as any);
            }
    
            if (withdrawOrderId !== undefined) { 
                localVarFormParams.set('withdrawOrderId', withdrawOrderId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch deposit history for local entities that required travel rule.
         * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [tranId] Comma(,) separated list of wallet tran Ids.
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {boolean} [pendingQuestionnaire] true: Only return records that pending deposit questionnaire. false/not provided: return all records.
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [offset] Default:0
         * @param {number} [limit] Default:1000, Max:1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetLocalentityDepositHistoryV1: async (timestamp: number, trId?: string, txId?: string, tranId?: string, network?: string, coin?: string, travelRuleStatus?: number, pendingQuestionnaire?: boolean, startTime?: number, endTime?: number, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetLocalentityDepositHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/localentity/deposit/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (trId !== undefined) {
                localVarQueryParameter['trId'] = trId;
            }

            if (txId !== undefined) {
                localVarQueryParameter['txId'] = txId;
            }

            if (tranId !== undefined) {
                localVarQueryParameter['tranId'] = tranId;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (travelRuleStatus !== undefined) {
                localVarQueryParameter['travelRuleStatus'] = travelRuleStatus;
            }

            if (pendingQuestionnaire !== undefined) {
                localVarQueryParameter['pendingQuestionnaire'] = pendingQuestionnaire;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the onboarded VASP list for local entities that required travel rule.
         * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetLocalentityVaspV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/localentity/vasp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [withdrawOrderId] Comma(,) separated list of withdrawID defined by the client (i.e. client&amp;#39;s internal withdrawID).
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {number} [offset] Default: 0
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetLocalentityWithdrawHistoryV1: async (timestamp: number, trId?: string, txId?: string, withdrawOrderId?: string, network?: string, coin?: string, travelRuleStatus?: number, offset?: number, limit?: number, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetLocalentityWithdrawHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/localentity/withdraw/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (trId !== undefined) {
                localVarQueryParameter['trId'] = trId;
            }

            if (txId !== undefined) {
                localVarQueryParameter['txId'] = txId;
            }

            if (withdrawOrderId !== undefined) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (travelRuleStatus !== undefined) {
                localVarQueryParameter['travelRuleStatus'] = travelRuleStatus;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [withdrawOrderId] Withdraw ID defined by the client (i.e. client&amp;#39;s internal withdrawID).
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {number} [offset] Default: 0
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetLocalentityWithdrawHistoryV2: async (timestamp: number, trId?: string, txId?: string, withdrawOrderId?: string, network?: string, coin?: string, travelRuleStatus?: number, offset?: number, limit?: number, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetLocalentityWithdrawHistoryV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/localentity/withdraw/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (trId !== undefined) {
                localVarQueryParameter['trId'] = trId;
            }

            if (txId !== undefined) {
                localVarQueryParameter['txId'] = txId;
            }

            if (withdrawOrderId !== undefined) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (travelRuleStatus !== undefined) {
                localVarQueryParameter['travelRuleStatus'] = travelRuleStatus;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {string} beneficiaryPii 
         * @param {string} depositId 
         * @param {string} questionnaire 
         * @param {string} signature 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [address] 
         * @param {string} [addressTag] 
         * @param {object} [amount] 
         * @param {string} [coin] 
         * @param {string} [network] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletUpdateLocalentityBrokerDepositProvideInfoV1: async (beneficiaryPii: string, depositId: string, questionnaire: string, signature: string, subAccountId: string, timestamp: number, address?: string, addressTag?: string, amount?: object, coin?: string, network?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryPii' is not null or undefined
            assertParamExists('walletUpdateLocalentityBrokerDepositProvideInfoV1', 'beneficiaryPii', beneficiaryPii)
            // verify required parameter 'depositId' is not null or undefined
            assertParamExists('walletUpdateLocalentityBrokerDepositProvideInfoV1', 'depositId', depositId)
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists('walletUpdateLocalentityBrokerDepositProvideInfoV1', 'questionnaire', questionnaire)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('walletUpdateLocalentityBrokerDepositProvideInfoV1', 'signature', signature)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('walletUpdateLocalentityBrokerDepositProvideInfoV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletUpdateLocalentityBrokerDepositProvideInfoV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/localentity/broker/deposit/provide-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (address !== undefined) { 
                localVarFormParams.set('address', address as any);
            }
    
            if (addressTag !== undefined) { 
                localVarFormParams.set('addressTag', addressTag as any);
            }
    
            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (beneficiaryPii !== undefined) { 
                localVarFormParams.set('beneficiaryPii', beneficiaryPii as any);
            }
    
            if (coin !== undefined) { 
                localVarFormParams.set('coin', coin as any);
            }
    
            if (depositId !== undefined) { 
                localVarFormParams.set('depositId', depositId as any);
            }
    
            if (network !== undefined) { 
                localVarFormParams.set('network', network as any);
            }
    
            if (questionnaire !== undefined) { 
                localVarFormParams.set('questionnaire', questionnaire as any);
            }
    
            if (signature !== undefined) { 
                localVarFormParams.set('signature', signature as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {string} questionnaire 
         * @param {number} timestamp 
         * @param {number} tranId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletUpdateLocalentityDepositProvideInfoV1: async (questionnaire: string, timestamp: number, tranId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists('walletUpdateLocalentityDepositProvideInfoV1', 'questionnaire', questionnaire)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletUpdateLocalentityDepositProvideInfoV1', 'timestamp', timestamp)
            // verify required parameter 'tranId' is not null or undefined
            assertParamExists('walletUpdateLocalentityDepositProvideInfoV1', 'tranId', tranId)
            const localVarPath = `/sapi/v1/localentity/deposit/provide-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (questionnaire !== undefined) { 
                localVarFormParams.set('questionnaire', questionnaire as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (tranId !== undefined) { 
                localVarFormParams.set('tranId', tranId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TravelRuleApi - functional programming interface
 * @export
 */
export const TravelRuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TravelRuleApiAxiosParamCreator(configuration)
    return {
        /**
         * Submit a withdrawal request for brokers of local entities that required travel rule.
         * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
         * @param {string} address 
         * @param {object} amount 
         * @param {string} coin 
         * @param {string} originatorPii 
         * @param {string} questionnaire 
         * @param {string} signature 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} withdrawOrderId 
         * @param {string} [addressName] 
         * @param {string} [addressTag] 
         * @param {string} [network] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateLocalentityBrokerWithdrawApplyV1(address: string, amount: object, coin: string, originatorPii: string, questionnaire: string, signature: string, subAccountId: string, timestamp: number, withdrawOrderId: string, addressName?: string, addressTag?: string, network?: string, transactionFeeFlag?: boolean, walletType?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCreateLocalentityBrokerWithdrawApplyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateLocalentityBrokerWithdrawApplyV1(address, amount, coin, originatorPii, questionnaire, signature, subAccountId, timestamp, withdrawOrderId, addressName, addressTag, network, transactionFeeFlag, walletType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TravelRuleApi.walletCreateLocalentityBrokerWithdrawApplyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit a withdrawal request for local entities that required travel rule.
         * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
         * @param {string} address 
         * @param {string} amount 
         * @param {string} coin 
         * @param {string} questionnaire 
         * @param {number} timestamp 
         * @param {string} [addressTag] 
         * @param {string} [name] 
         * @param {string} [network] 
         * @param {number} [recvWindow] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {string} [withdrawOrderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateLocalentityWithdrawApplyV1(address: string, amount: string, coin: string, questionnaire: string, timestamp: number, addressTag?: string, name?: string, network?: string, recvWindow?: number, transactionFeeFlag?: boolean, walletType?: number, withdrawOrderId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCreateLocalentityWithdrawApplyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateLocalentityWithdrawApplyV1(address, amount, coin, questionnaire, timestamp, addressTag, name, network, recvWindow, transactionFeeFlag, walletType, withdrawOrderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TravelRuleApi.walletCreateLocalentityWithdrawApplyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch deposit history for local entities that required travel rule.
         * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [tranId] Comma(,) separated list of wallet tran Ids.
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {boolean} [pendingQuestionnaire] true: Only return records that pending deposit questionnaire. false/not provided: return all records.
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [offset] Default:0
         * @param {number} [limit] Default:1000, Max:1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetLocalentityDepositHistoryV1(timestamp: number, trId?: string, txId?: string, tranId?: string, network?: string, coin?: string, travelRuleStatus?: number, pendingQuestionnaire?: boolean, startTime?: number, endTime?: number, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetLocalentityDepositHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetLocalentityDepositHistoryV1(timestamp, trId, txId, tranId, network, coin, travelRuleStatus, pendingQuestionnaire, startTime, endTime, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TravelRuleApi.walletGetLocalentityDepositHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch the onboarded VASP list for local entities that required travel rule.
         * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetLocalentityVaspV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetLocalentityVaspV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetLocalentityVaspV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TravelRuleApi.walletGetLocalentityVaspV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [withdrawOrderId] Comma(,) separated list of withdrawID defined by the client (i.e. client&amp;#39;s internal withdrawID).
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {number} [offset] Default: 0
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetLocalentityWithdrawHistoryV1(timestamp: number, trId?: string, txId?: string, withdrawOrderId?: string, network?: string, coin?: string, travelRuleStatus?: number, offset?: number, limit?: number, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetLocalentityWithdrawHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetLocalentityWithdrawHistoryV1(timestamp, trId, txId, withdrawOrderId, network, coin, travelRuleStatus, offset, limit, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TravelRuleApi.walletGetLocalentityWithdrawHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [withdrawOrderId] Withdraw ID defined by the client (i.e. client&amp;#39;s internal withdrawID).
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {number} [offset] Default: 0
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetLocalentityWithdrawHistoryV2(timestamp: number, trId?: string, txId?: string, withdrawOrderId?: string, network?: string, coin?: string, travelRuleStatus?: number, offset?: number, limit?: number, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetLocalentityWithdrawHistoryV2RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetLocalentityWithdrawHistoryV2(timestamp, trId, txId, withdrawOrderId, network, coin, travelRuleStatus, offset, limit, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TravelRuleApi.walletGetLocalentityWithdrawHistoryV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {string} beneficiaryPii 
         * @param {string} depositId 
         * @param {string} questionnaire 
         * @param {string} signature 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [address] 
         * @param {string} [addressTag] 
         * @param {object} [amount] 
         * @param {string} [coin] 
         * @param {string} [network] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletUpdateLocalentityBrokerDepositProvideInfoV1(beneficiaryPii: string, depositId: string, questionnaire: string, signature: string, subAccountId: string, timestamp: number, address?: string, addressTag?: string, amount?: object, coin?: string, network?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletUpdateLocalentityBrokerDepositProvideInfoV1(beneficiaryPii, depositId, questionnaire, signature, subAccountId, timestamp, address, addressTag, amount, coin, network, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TravelRuleApi.walletUpdateLocalentityBrokerDepositProvideInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {string} questionnaire 
         * @param {number} timestamp 
         * @param {number} tranId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletUpdateLocalentityDepositProvideInfoV1(questionnaire: string, timestamp: number, tranId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletUpdateLocalentityDepositProvideInfoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletUpdateLocalentityDepositProvideInfoV1(questionnaire, timestamp, tranId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TravelRuleApi.walletUpdateLocalentityDepositProvideInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TravelRuleApi - factory interface
 * @export
 */
export const TravelRuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TravelRuleApiFp(configuration)
    return {
        /**
         * Submit a withdrawal request for brokers of local entities that required travel rule.
         * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
         * @param {TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateLocalentityBrokerWithdrawApplyV1(requestParameters: TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateLocalentityBrokerWithdrawApplyV1Resp> {
            return localVarFp.walletCreateLocalentityBrokerWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.originatorPii, requestParameters.questionnaire, requestParameters.signature, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.withdrawOrderId, requestParameters.addressName, requestParameters.addressTag, requestParameters.network, requestParameters.transactionFeeFlag, requestParameters.walletType, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit a withdrawal request for local entities that required travel rule.
         * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
         * @param {TravelRuleApiWalletCreateLocalentityWithdrawApplyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateLocalentityWithdrawApplyV1(requestParameters: TravelRuleApiWalletCreateLocalentityWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateLocalentityWithdrawApplyV1Resp> {
            return localVarFp.walletCreateLocalentityWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.questionnaire, requestParameters.timestamp, requestParameters.addressTag, requestParameters.name, requestParameters.network, requestParameters.recvWindow, requestParameters.transactionFeeFlag, requestParameters.walletType, requestParameters.withdrawOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch deposit history for local entities that required travel rule.
         * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
         * @param {TravelRuleApiWalletGetLocalentityDepositHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetLocalentityDepositHistoryV1(requestParameters: TravelRuleApiWalletGetLocalentityDepositHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetLocalentityDepositHistoryV1RespItem>> {
            return localVarFp.walletGetLocalentityDepositHistoryV1(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.tranId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.pendingQuestionnaire, requestParameters.startTime, requestParameters.endTime, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the onboarded VASP list for local entities that required travel rule.
         * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetLocalentityVaspV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetLocalentityVaspV1RespItem>> {
            return localVarFp.walletGetLocalentityVaspV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {TravelRuleApiWalletGetLocalentityWithdrawHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetLocalentityWithdrawHistoryV1(requestParameters: TravelRuleApiWalletGetLocalentityWithdrawHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetLocalentityWithdrawHistoryV1RespItem>> {
            return localVarFp.walletGetLocalentityWithdrawHistoryV1(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.withdrawOrderId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.offset, requestParameters.limit, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {TravelRuleApiWalletGetLocalentityWithdrawHistoryV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetLocalentityWithdrawHistoryV2(requestParameters: TravelRuleApiWalletGetLocalentityWithdrawHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetLocalentityWithdrawHistoryV2RespItem>> {
            return localVarFp.walletGetLocalentityWithdrawHistoryV2(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.withdrawOrderId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.offset, requestParameters.limit, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletUpdateLocalentityBrokerDepositProvideInfoV1(requestParameters: TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp> {
            return localVarFp.walletUpdateLocalentityBrokerDepositProvideInfoV1(requestParameters.beneficiaryPii, requestParameters.depositId, requestParameters.questionnaire, requestParameters.signature, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.address, requestParameters.addressTag, requestParameters.amount, requestParameters.coin, requestParameters.network, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {TravelRuleApiWalletUpdateLocalentityDepositProvideInfoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletUpdateLocalentityDepositProvideInfoV1(requestParameters: TravelRuleApiWalletUpdateLocalentityDepositProvideInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletUpdateLocalentityDepositProvideInfoV1Resp> {
            return localVarFp.walletUpdateLocalentityDepositProvideInfoV1(requestParameters.questionnaire, requestParameters.timestamp, requestParameters.tranId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TravelRuleApi - interface
 * @export
 * @interface TravelRuleApi
 */
export interface TravelRuleApiInterface {
    /**
     * Submit a withdrawal request for brokers of local entities that required travel rule.
     * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
     * @param {TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApiInterface
     */
    walletCreateLocalentityBrokerWithdrawApplyV1(requestParameters: TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateLocalentityBrokerWithdrawApplyV1Resp>;

    /**
     * Submit a withdrawal request for local entities that required travel rule.
     * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
     * @param {TravelRuleApiWalletCreateLocalentityWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApiInterface
     */
    walletCreateLocalentityWithdrawApplyV1(requestParameters: TravelRuleApiWalletCreateLocalentityWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateLocalentityWithdrawApplyV1Resp>;

    /**
     * Fetch deposit history for local entities that required travel rule.
     * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
     * @param {TravelRuleApiWalletGetLocalentityDepositHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApiInterface
     */
    walletGetLocalentityDepositHistoryV1(requestParameters: TravelRuleApiWalletGetLocalentityDepositHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetLocalentityDepositHistoryV1RespItem>>;

    /**
     * Fetch the onboarded VASP list for local entities that required travel rule.
     * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApiInterface
     */
    walletGetLocalentityVaspV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetLocalentityVaspV1RespItem>>;

    /**
     * Fetch withdraw history for local entities that required travel rule.
     * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {TravelRuleApiWalletGetLocalentityWithdrawHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApiInterface
     */
    walletGetLocalentityWithdrawHistoryV1(requestParameters: TravelRuleApiWalletGetLocalentityWithdrawHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetLocalentityWithdrawHistoryV1RespItem>>;

    /**
     * Fetch withdraw history for local entities that required travel rule.
     * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {TravelRuleApiWalletGetLocalentityWithdrawHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApiInterface
     */
    walletGetLocalentityWithdrawHistoryV2(requestParameters: TravelRuleApiWalletGetLocalentityWithdrawHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetLocalentityWithdrawHistoryV2RespItem>>;

    /**
     * Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApiInterface
     */
    walletUpdateLocalentityBrokerDepositProvideInfoV1(requestParameters: TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp>;

    /**
     * Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {TravelRuleApiWalletUpdateLocalentityDepositProvideInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApiInterface
     */
    walletUpdateLocalentityDepositProvideInfoV1(requestParameters: TravelRuleApiWalletUpdateLocalentityDepositProvideInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletUpdateLocalentityDepositProvideInfoV1Resp>;

}

/**
 * Request parameters for walletCreateLocalentityBrokerWithdrawApplyV1 operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1Request
 */
export interface TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1Request {
    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly address: string

    /**
     * 
     * @type {object}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly amount: object

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly coin: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly originatorPii: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly questionnaire: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly signature: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly withdrawOrderId: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly addressName?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly addressTag?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly network?: string

    /**
     * 
     * @type {boolean}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly transactionFeeFlag?: boolean

    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly walletType?: number
}

/**
 * Request parameters for walletCreateLocalentityWithdrawApplyV1 operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiWalletCreateLocalentityWithdrawApplyV1Request
 */
export interface TravelRuleApiWalletCreateLocalentityWithdrawApplyV1Request {
    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly address: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly coin: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly questionnaire: string

    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly addressTag?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly network?: string

    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {boolean}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly transactionFeeFlag?: boolean

    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly walletType?: number

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletCreateLocalentityWithdrawApplyV1
     */
    readonly withdrawOrderId?: string
}

/**
 * Request parameters for walletGetLocalentityDepositHistoryV1 operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiWalletGetLocalentityDepositHistoryV1Request
 */
export interface TravelRuleApiWalletGetLocalentityDepositHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly timestamp: number

    /**
     * Comma(,) separated list of travel rule record Ids.
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly trId?: string

    /**
     * Comma(,) separated list of transaction Ids.
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly txId?: string

    /**
     * Comma(,) separated list of wallet tran Ids.
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly tranId?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly coin?: string

    /**
     * 0:Completed,1:Pending,2:Failed
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly travelRuleStatus?: number

    /**
     * true: Only return records that pending deposit questionnaire. false/not provided: return all records.
     * @type {boolean}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly pendingQuestionnaire?: boolean

    /**
     * Default: 90 days from current timestamp
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly endTime?: number

    /**
     * Default:0
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly offset?: number

    /**
     * Default:1000, Max:1000
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityDepositHistoryV1
     */
    readonly limit?: number
}

/**
 * Request parameters for walletGetLocalentityWithdrawHistoryV1 operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiWalletGetLocalentityWithdrawHistoryV1Request
 */
export interface TravelRuleApiWalletGetLocalentityWithdrawHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly timestamp: number

    /**
     * Comma(,) separated list of travel rule record Ids.
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly trId?: string

    /**
     * Comma(,) separated list of transaction Ids.
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly txId?: string

    /**
     * Comma(,) separated list of withdrawID defined by the client (i.e. client&amp;#39;s internal withdrawID).
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly withdrawOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly coin?: string

    /**
     * 0:Completed,1:Pending,2:Failed
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly travelRuleStatus?: number

    /**
     * Default: 0
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly offset?: number

    /**
     * Default: 1000, Max: 1000
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly limit?: number

    /**
     * Default: 90 days from current timestamp
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetLocalentityWithdrawHistoryV2 operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiWalletGetLocalentityWithdrawHistoryV2Request
 */
export interface TravelRuleApiWalletGetLocalentityWithdrawHistoryV2Request {
    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly timestamp: number

    /**
     * Comma(,) separated list of travel rule record Ids.
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly trId?: string

    /**
     * Comma(,) separated list of transaction Ids.
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly txId?: string

    /**
     * Withdraw ID defined by the client (i.e. client&amp;#39;s internal withdrawID).
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly withdrawOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly coin?: string

    /**
     * 0:Completed,1:Pending,2:Failed
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly travelRuleStatus?: number

    /**
     * Default: 0
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly offset?: number

    /**
     * Default: 1000, Max: 1000
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly limit?: number

    /**
     * Default: 90 days from current timestamp
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletGetLocalentityWithdrawHistoryV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletUpdateLocalentityBrokerDepositProvideInfoV1 operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1Request
 */
export interface TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1Request {
    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly beneficiaryPii: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly depositId: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly questionnaire: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly signature: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly address?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly addressTag?: string

    /**
     * 
     * @type {object}
     * @memberof TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly amount?: object

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly coin?: string

    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly network?: string
}

/**
 * Request parameters for walletUpdateLocalentityDepositProvideInfoV1 operation in TravelRuleApi.
 * @export
 * @interface TravelRuleApiWalletUpdateLocalentityDepositProvideInfoV1Request
 */
export interface TravelRuleApiWalletUpdateLocalentityDepositProvideInfoV1Request {
    /**
     * 
     * @type {string}
     * @memberof TravelRuleApiWalletUpdateLocalentityDepositProvideInfoV1
     */
    readonly questionnaire: string

    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletUpdateLocalentityDepositProvideInfoV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof TravelRuleApiWalletUpdateLocalentityDepositProvideInfoV1
     */
    readonly tranId: number
}

/**
 * TravelRuleApi - object-oriented interface
 * @export
 * @class TravelRuleApi
 * @extends {BaseAPI}
 */
export class TravelRuleApi extends BaseAPI implements TravelRuleApiInterface {
    /**
     * Submit a withdrawal request for brokers of local entities that required travel rule.
     * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
     * @param {TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    public walletCreateLocalentityBrokerWithdrawApplyV1(requestParameters: TravelRuleApiWalletCreateLocalentityBrokerWithdrawApplyV1Request, options?: RawAxiosRequestConfig) {
        return TravelRuleApiFp(this.configuration).walletCreateLocalentityBrokerWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.originatorPii, requestParameters.questionnaire, requestParameters.signature, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.withdrawOrderId, requestParameters.addressName, requestParameters.addressTag, requestParameters.network, requestParameters.transactionFeeFlag, requestParameters.walletType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit a withdrawal request for local entities that required travel rule.
     * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
     * @param {TravelRuleApiWalletCreateLocalentityWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    public walletCreateLocalentityWithdrawApplyV1(requestParameters: TravelRuleApiWalletCreateLocalentityWithdrawApplyV1Request, options?: RawAxiosRequestConfig) {
        return TravelRuleApiFp(this.configuration).walletCreateLocalentityWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.questionnaire, requestParameters.timestamp, requestParameters.addressTag, requestParameters.name, requestParameters.network, requestParameters.recvWindow, requestParameters.transactionFeeFlag, requestParameters.walletType, requestParameters.withdrawOrderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch deposit history for local entities that required travel rule.
     * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
     * @param {TravelRuleApiWalletGetLocalentityDepositHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    public walletGetLocalentityDepositHistoryV1(requestParameters: TravelRuleApiWalletGetLocalentityDepositHistoryV1Request, options?: RawAxiosRequestConfig) {
        return TravelRuleApiFp(this.configuration).walletGetLocalentityDepositHistoryV1(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.tranId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.pendingQuestionnaire, requestParameters.startTime, requestParameters.endTime, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the onboarded VASP list for local entities that required travel rule.
     * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    public walletGetLocalentityVaspV1(options?: RawAxiosRequestConfig) {
        return TravelRuleApiFp(this.configuration).walletGetLocalentityVaspV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch withdraw history for local entities that required travel rule.
     * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {TravelRuleApiWalletGetLocalentityWithdrawHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    public walletGetLocalentityWithdrawHistoryV1(requestParameters: TravelRuleApiWalletGetLocalentityWithdrawHistoryV1Request, options?: RawAxiosRequestConfig) {
        return TravelRuleApiFp(this.configuration).walletGetLocalentityWithdrawHistoryV1(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.withdrawOrderId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.offset, requestParameters.limit, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch withdraw history for local entities that required travel rule.
     * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {TravelRuleApiWalletGetLocalentityWithdrawHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    public walletGetLocalentityWithdrawHistoryV2(requestParameters: TravelRuleApiWalletGetLocalentityWithdrawHistoryV2Request, options?: RawAxiosRequestConfig) {
        return TravelRuleApiFp(this.configuration).walletGetLocalentityWithdrawHistoryV2(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.withdrawOrderId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.offset, requestParameters.limit, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    public walletUpdateLocalentityBrokerDepositProvideInfoV1(requestParameters: TravelRuleApiWalletUpdateLocalentityBrokerDepositProvideInfoV1Request, options?: RawAxiosRequestConfig) {
        return TravelRuleApiFp(this.configuration).walletUpdateLocalentityBrokerDepositProvideInfoV1(requestParameters.beneficiaryPii, requestParameters.depositId, requestParameters.questionnaire, requestParameters.signature, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.address, requestParameters.addressTag, requestParameters.amount, requestParameters.coin, requestParameters.network, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {TravelRuleApiWalletUpdateLocalentityDepositProvideInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleApi
     */
    public walletUpdateLocalentityDepositProvideInfoV1(requestParameters: TravelRuleApiWalletUpdateLocalentityDepositProvideInfoV1Request, options?: RawAxiosRequestConfig) {
        return TravelRuleApiFp(this.configuration).walletUpdateLocalentityDepositProvideInfoV1(requestParameters.questionnaire, requestParameters.timestamp, requestParameters.tranId, options).then((request) => request(this.axios, this.basePath));
    }
}

