/* tslint:disable */
/* eslint-disable */
/**
 * Binance Wallet API
 * OpenAPI specification for Binance exchange - Wallet API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { WalletCreateAssetDustBtcV1Resp } from '../model';
// @ts-ignore
import type { WalletCreateAssetDustV1Resp } from '../model';
// @ts-ignore
import type { WalletCreateAssetGetFundingAssetV1RespItem } from '../model';
// @ts-ignore
import type { WalletCreateAssetGetUserAssetV3RespItem } from '../model';
// @ts-ignore
import type { WalletCreateAssetTransferV1Resp } from '../model';
// @ts-ignore
import type { WalletCreateBnbBurnV1Resp } from '../model';
// @ts-ignore
import type { WalletGetAssetAssetDetailV1RespValue } from '../model';
// @ts-ignore
import type { WalletGetAssetAssetDividendV1Resp } from '../model';
// @ts-ignore
import type { WalletGetAssetCustodyTransferHistoryV1Resp } from '../model';
// @ts-ignore
import type { WalletGetAssetDribbletV1Resp } from '../model';
// @ts-ignore
import type { WalletGetAssetLedgerTransferCloudMiningQueryByPageV1Resp } from '../model';
// @ts-ignore
import type { WalletGetAssetTradeFeeV1RespItem } from '../model';
// @ts-ignore
import type { WalletGetAssetTransferV1Resp } from '../model';
// @ts-ignore
import type { WalletGetAssetWalletBalanceV1RespItem } from '../model';
// @ts-ignore
import type { WalletGetSpotDelistScheduleV1RespItem } from '../model';
// @ts-ignore
import type { WalletGetSpotOpenSymbolListV1RespItem } from '../model';
/**
 * AssetApi - axios parameter creator
 * @export
 */
export const AssetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Assets That Can Be Converted Into BNB
         * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [accountType] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAssetDustBtcV1: async (timestamp: number, accountType?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletCreateAssetDustBtcV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/dust-btc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (accountType !== undefined) { 
                localVarFormParams.set('accountType', accountType as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Convert dust assets to BNB.
         * @summary Dust Transfer (USER_DATA)
         * @param {Array<string>} asset 
         * @param {number} timestamp 
         * @param {string} [accountType] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAssetDustV1: async (asset: Array<string>, timestamp: number, accountType?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('walletCreateAssetDustV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletCreateAssetDustV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/dust`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (accountType !== undefined) { 
                localVarFormParams.set('accountType', accountType as any);
            }
                if (asset) {
                localVarFormParams.set('asset', asset.join(COLLECTION_FORMATS.csv));
            }

    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Funding Wallet
         * @summary Funding Wallet (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [needBtcValuation] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAssetGetFundingAssetV1: async (timestamp: number, asset?: string, needBtcValuation?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletCreateAssetGetFundingAssetV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/get-funding-asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (needBtcValuation !== undefined) { 
                localVarFormParams.set('needBtcValuation', needBtcValuation as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user assets, just for positive data.
         * @summary User Asset (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {boolean} [needBtcValuation] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAssetGetUserAssetV3: async (timestamp: number, asset?: string, needBtcValuation?: boolean, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletCreateAssetGetUserAssetV3', 'timestamp', timestamp)
            const localVarPath = `/sapi/v3/asset/getUserAsset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (needBtcValuation !== undefined) { 
                localVarFormParams.set('needBtcValuation', needBtcValuation as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * user universal transfer
         * @summary User Universal Transfer (USER_DATA)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} type 
         * @param {string} [fromSymbol] 
         * @param {number} [recvWindow] 
         * @param {string} [toSymbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAssetTransferV1: async (amount: string, asset: string, timestamp: number, type: string, fromSymbol?: string, recvWindow?: number, toSymbol?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('walletCreateAssetTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('walletCreateAssetTransferV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletCreateAssetTransferV1', 'timestamp', timestamp)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('walletCreateAssetTransferV1', 'type', type)
            const localVarPath = `/sapi/v1/asset/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (fromSymbol !== undefined) { 
                localVarFormParams.set('fromSymbol', fromSymbol as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toSymbol !== undefined) { 
                localVarFormParams.set('toSymbol', toSymbol as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle BNB Burn On Spot Trade And Margin Interest
         * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [interestBNBBurn] 
         * @param {number} [recvWindow] 
         * @param {string} [spotBNBBurn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateBnbBurnV1: async (timestamp: number, interestBNBBurn?: string, recvWindow?: number, spotBNBBurn?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletCreateBnbBurnV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/bnbBurn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (interestBNBBurn !== undefined) { 
                localVarFormParams.set('interestBNBBurn', interestBNBBurn as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (spotBNBBurn !== undefined) { 
                localVarFormParams.set('spotBNBBurn', spotBNBBurn as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch details of assets supported on Binance.
         * @summary Asset Detail (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetAssetDetailV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAssetAssetDetailV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/assetDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query asset dividend record.
         * @summary Asset Dividend Record (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 20, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetAssetDividendV1: async (timestamp: number, asset?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAssetAssetDividendV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/assetDividend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query User Delegation History
         * @summary Query User Delegation History(For Master Account)(USER_DATA)
         * @param {string} email 
         * @param {number} startTime 
         * @param {number} endTime 
         * @param {number} timestamp 
         * @param {string} [type] Delegate/Undelegate
         * @param {string} [asset] 
         * @param {number} [current] default 1
         * @param {number} [size] default 10, max 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetCustodyTransferHistoryV1: async (email: string, startTime: number, endTime: number, timestamp: number, type?: string, asset?: string, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('walletGetAssetCustodyTransferHistoryV1', 'email', email)
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('walletGetAssetCustodyTransferHistoryV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('walletGetAssetCustodyTransferHistoryV1', 'endTime', endTime)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAssetCustodyTransferHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/custody/transfer-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Dustlog
         * @summary DustLog(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetDribbletV1: async (timestamp: number, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAssetDribbletV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/dribblet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The query of Cloud-Mining payment and refund history
         * @summary Get Cloud-Mining payment and refund history (USER_DATA)
         * @param {number} startTime inclusive, unit: ms
         * @param {number} endTime exclusive, unit: ms
         * @param {number} [tranId] The transaction id
         * @param {string} [clientTranId] The unique flag
         * @param {string} [asset] If it is blank, we will query all assets
         * @param {number} [current] current page, default 1, the min value is 1
         * @param {number} [size] page size, default 10, the max value is 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetLedgerTransferCloudMiningQueryByPageV1: async (startTime: number, endTime: number, tranId?: number, clientTranId?: string, asset?: string, current?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('walletGetAssetLedgerTransferCloudMiningQueryByPageV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('walletGetAssetLedgerTransferCloudMiningQueryByPageV1', 'endTime', endTime)
            const localVarPath = `/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (tranId !== undefined) {
                localVarQueryParameter['tranId'] = tranId;
            }

            if (clientTranId !== undefined) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch trade fee
         * @summary Trade Fee (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetTradeFeeV1: async (timestamp: number, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAssetTradeFeeV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/tradeFee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query User Universal Transfer History
         * @summary Query User Universal Transfer History(USER_DATA)
         * @param {string} type 
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Default 1
         * @param {number} [size] Default 10, Max 100
         * @param {string} [fromSymbol] 
         * @param {string} [toSymbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetTransferV1: async (type: string, timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, fromSymbol?: string, toSymbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('walletGetAssetTransferV1', 'type', type)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAssetTransferV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (fromSymbol !== undefined) {
                localVarQueryParameter['fromSymbol'] = fromSymbol;
            }

            if (toSymbol !== undefined) {
                localVarQueryParameter['toSymbol'] = toSymbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query User Wallet Balance
         * @summary Query User Wallet Balance (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [quoteAsset] &#x60;USDT&#x60;, &#x60;ETH&#x60;, &#x60;USDC&#x60;, &#x60;BNB&#x60;, etc. default &#x60;BTC&#x60;
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetWalletBalanceV1: async (timestamp: number, quoteAsset?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetAssetWalletBalanceV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/wallet/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (quoteAsset !== undefined) {
                localVarQueryParameter['quoteAsset'] = quoteAsset;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get symbols delist schedule for spot
         * @summary Get Spot Delist Schedule (MARKET_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetSpotDelistScheduleV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('walletGetSpotDelistScheduleV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/spot/delist-schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of symbols that are scheduled to be opened for trading in the market.
         * @summary Get Open Symbol List (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetSpotOpenSymbolListV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/spot/open-symbol-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetApi - functional programming interface
 * @export
 */
export const AssetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Assets That Can Be Converted Into BNB
         * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [accountType] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateAssetDustBtcV1(timestamp: number, accountType?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCreateAssetDustBtcV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateAssetDustBtcV1(timestamp, accountType, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletCreateAssetDustBtcV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Convert dust assets to BNB.
         * @summary Dust Transfer (USER_DATA)
         * @param {Array<string>} asset 
         * @param {number} timestamp 
         * @param {string} [accountType] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateAssetDustV1(asset: Array<string>, timestamp: number, accountType?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCreateAssetDustV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateAssetDustV1(asset, timestamp, accountType, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletCreateAssetDustV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Funding Wallet
         * @summary Funding Wallet (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [needBtcValuation] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateAssetGetFundingAssetV1(timestamp: number, asset?: string, needBtcValuation?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletCreateAssetGetFundingAssetV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateAssetGetFundingAssetV1(timestamp, asset, needBtcValuation, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletCreateAssetGetFundingAssetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user assets, just for positive data.
         * @summary User Asset (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {boolean} [needBtcValuation] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateAssetGetUserAssetV3(timestamp: number, asset?: string, needBtcValuation?: boolean, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletCreateAssetGetUserAssetV3RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateAssetGetUserAssetV3(timestamp, asset, needBtcValuation, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletCreateAssetGetUserAssetV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * user universal transfer
         * @summary User Universal Transfer (USER_DATA)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} type 
         * @param {string} [fromSymbol] 
         * @param {number} [recvWindow] 
         * @param {string} [toSymbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateAssetTransferV1(amount: string, asset: string, timestamp: number, type: string, fromSymbol?: string, recvWindow?: number, toSymbol?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCreateAssetTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateAssetTransferV1(amount, asset, timestamp, type, fromSymbol, recvWindow, toSymbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletCreateAssetTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Toggle BNB Burn On Spot Trade And Margin Interest
         * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [interestBNBBurn] 
         * @param {number} [recvWindow] 
         * @param {string} [spotBNBBurn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCreateBnbBurnV1(timestamp: number, interestBNBBurn?: string, recvWindow?: number, spotBNBBurn?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCreateBnbBurnV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCreateBnbBurnV1(timestamp, interestBNBBurn, recvWindow, spotBNBBurn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletCreateBnbBurnV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch details of assets supported on Binance.
         * @summary Asset Detail (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAssetAssetDetailV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: WalletGetAssetAssetDetailV1RespValue; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAssetAssetDetailV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletGetAssetAssetDetailV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query asset dividend record.
         * @summary Asset Dividend Record (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 20, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAssetAssetDividendV1(timestamp: number, asset?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetAssetAssetDividendV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAssetAssetDividendV1(timestamp, asset, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletGetAssetAssetDividendV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query User Delegation History
         * @summary Query User Delegation History(For Master Account)(USER_DATA)
         * @param {string} email 
         * @param {number} startTime 
         * @param {number} endTime 
         * @param {number} timestamp 
         * @param {string} [type] Delegate/Undelegate
         * @param {string} [asset] 
         * @param {number} [current] default 1
         * @param {number} [size] default 10, max 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAssetCustodyTransferHistoryV1(email: string, startTime: number, endTime: number, timestamp: number, type?: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetAssetCustodyTransferHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAssetCustodyTransferHistoryV1(email, startTime, endTime, timestamp, type, asset, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletGetAssetCustodyTransferHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Dustlog
         * @summary DustLog(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAssetDribbletV1(timestamp: number, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetAssetDribbletV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAssetDribbletV1(timestamp, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletGetAssetDribbletV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The query of Cloud-Mining payment and refund history
         * @summary Get Cloud-Mining payment and refund history (USER_DATA)
         * @param {number} startTime inclusive, unit: ms
         * @param {number} endTime exclusive, unit: ms
         * @param {number} [tranId] The transaction id
         * @param {string} [clientTranId] The unique flag
         * @param {string} [asset] If it is blank, we will query all assets
         * @param {number} [current] current page, default 1, the min value is 1
         * @param {number} [size] page size, default 10, the max value is 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAssetLedgerTransferCloudMiningQueryByPageV1(startTime: number, endTime: number, tranId?: number, clientTranId?: string, asset?: string, current?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetAssetLedgerTransferCloudMiningQueryByPageV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAssetLedgerTransferCloudMiningQueryByPageV1(startTime, endTime, tranId, clientTranId, asset, current, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletGetAssetLedgerTransferCloudMiningQueryByPageV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch trade fee
         * @summary Trade Fee (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAssetTradeFeeV1(timestamp: number, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetAssetTradeFeeV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAssetTradeFeeV1(timestamp, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletGetAssetTradeFeeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query User Universal Transfer History
         * @summary Query User Universal Transfer History(USER_DATA)
         * @param {string} type 
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Default 1
         * @param {number} [size] Default 10, Max 100
         * @param {string} [fromSymbol] 
         * @param {string} [toSymbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAssetTransferV1(type: string, timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, fromSymbol?: string, toSymbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetAssetTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAssetTransferV1(type, timestamp, startTime, endTime, current, size, fromSymbol, toSymbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletGetAssetTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query User Wallet Balance
         * @summary Query User Wallet Balance (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [quoteAsset] &#x60;USDT&#x60;, &#x60;ETH&#x60;, &#x60;USDC&#x60;, &#x60;BNB&#x60;, etc. default &#x60;BTC&#x60;
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetAssetWalletBalanceV1(timestamp: number, quoteAsset?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetAssetWalletBalanceV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetAssetWalletBalanceV1(timestamp, quoteAsset, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletGetAssetWalletBalanceV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get symbols delist schedule for spot
         * @summary Get Spot Delist Schedule (MARKET_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetSpotDelistScheduleV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetSpotDelistScheduleV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetSpotDelistScheduleV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletGetSpotDelistScheduleV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of symbols that are scheduled to be opened for trading in the market.
         * @summary Get Open Symbol List (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGetSpotOpenSymbolListV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletGetSpotOpenSymbolListV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGetSpotOpenSymbolListV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetApi.walletGetSpotOpenSymbolListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssetApi - factory interface
 * @export
 */
export const AssetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetApiFp(configuration)
    return {
        /**
         * Get Assets That Can Be Converted Into BNB
         * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
         * @param {AssetApiWalletCreateAssetDustBtcV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAssetDustBtcV1(requestParameters: AssetApiWalletCreateAssetDustBtcV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateAssetDustBtcV1Resp> {
            return localVarFp.walletCreateAssetDustBtcV1(requestParameters.timestamp, requestParameters.accountType, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Convert dust assets to BNB.
         * @summary Dust Transfer (USER_DATA)
         * @param {AssetApiWalletCreateAssetDustV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAssetDustV1(requestParameters: AssetApiWalletCreateAssetDustV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateAssetDustV1Resp> {
            return localVarFp.walletCreateAssetDustV1(requestParameters.asset, requestParameters.timestamp, requestParameters.accountType, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Funding Wallet
         * @summary Funding Wallet (USER_DATA)
         * @param {AssetApiWalletCreateAssetGetFundingAssetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAssetGetFundingAssetV1(requestParameters: AssetApiWalletCreateAssetGetFundingAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletCreateAssetGetFundingAssetV1RespItem>> {
            return localVarFp.walletCreateAssetGetFundingAssetV1(requestParameters.timestamp, requestParameters.asset, requestParameters.needBtcValuation, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user assets, just for positive data.
         * @summary User Asset (USER_DATA)
         * @param {AssetApiWalletCreateAssetGetUserAssetV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAssetGetUserAssetV3(requestParameters: AssetApiWalletCreateAssetGetUserAssetV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletCreateAssetGetUserAssetV3RespItem>> {
            return localVarFp.walletCreateAssetGetUserAssetV3(requestParameters.timestamp, requestParameters.asset, requestParameters.needBtcValuation, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * user universal transfer
         * @summary User Universal Transfer (USER_DATA)
         * @param {AssetApiWalletCreateAssetTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateAssetTransferV1(requestParameters: AssetApiWalletCreateAssetTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateAssetTransferV1Resp> {
            return localVarFp.walletCreateAssetTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.type, requestParameters.fromSymbol, requestParameters.recvWindow, requestParameters.toSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Toggle BNB Burn On Spot Trade And Margin Interest
         * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
         * @param {AssetApiWalletCreateBnbBurnV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreateBnbBurnV1(requestParameters: AssetApiWalletCreateBnbBurnV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateBnbBurnV1Resp> {
            return localVarFp.walletCreateBnbBurnV1(requestParameters.timestamp, requestParameters.interestBNBBurn, requestParameters.recvWindow, requestParameters.spotBNBBurn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch details of assets supported on Binance.
         * @summary Asset Detail (USER_DATA)
         * @param {AssetApiWalletGetAssetAssetDetailV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetAssetDetailV1(requestParameters: AssetApiWalletGetAssetAssetDetailV1Request, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: WalletGetAssetAssetDetailV1RespValue; }> {
            return localVarFp.walletGetAssetAssetDetailV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query asset dividend record.
         * @summary Asset Dividend Record (USER_DATA)
         * @param {AssetApiWalletGetAssetAssetDividendV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetAssetDividendV1(requestParameters: AssetApiWalletGetAssetAssetDividendV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAssetAssetDividendV1Resp> {
            return localVarFp.walletGetAssetAssetDividendV1(requestParameters.timestamp, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query User Delegation History
         * @summary Query User Delegation History(For Master Account)(USER_DATA)
         * @param {AssetApiWalletGetAssetCustodyTransferHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetCustodyTransferHistoryV1(requestParameters: AssetApiWalletGetAssetCustodyTransferHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAssetCustodyTransferHistoryV1Resp> {
            return localVarFp.walletGetAssetCustodyTransferHistoryV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.type, requestParameters.asset, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Dustlog
         * @summary DustLog(USER_DATA)
         * @param {AssetApiWalletGetAssetDribbletV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetDribbletV1(requestParameters: AssetApiWalletGetAssetDribbletV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAssetDribbletV1Resp> {
            return localVarFp.walletGetAssetDribbletV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * The query of Cloud-Mining payment and refund history
         * @summary Get Cloud-Mining payment and refund history (USER_DATA)
         * @param {AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetLedgerTransferCloudMiningQueryByPageV1(requestParameters: AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAssetLedgerTransferCloudMiningQueryByPageV1Resp> {
            return localVarFp.walletGetAssetLedgerTransferCloudMiningQueryByPageV1(requestParameters.startTime, requestParameters.endTime, requestParameters.tranId, requestParameters.clientTranId, requestParameters.asset, requestParameters.current, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch trade fee
         * @summary Trade Fee (USER_DATA)
         * @param {AssetApiWalletGetAssetTradeFeeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetTradeFeeV1(requestParameters: AssetApiWalletGetAssetTradeFeeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetAssetTradeFeeV1RespItem>> {
            return localVarFp.walletGetAssetTradeFeeV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query User Universal Transfer History
         * @summary Query User Universal Transfer History(USER_DATA)
         * @param {AssetApiWalletGetAssetTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetTransferV1(requestParameters: AssetApiWalletGetAssetTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAssetTransferV1Resp> {
            return localVarFp.walletGetAssetTransferV1(requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.fromSymbol, requestParameters.toSymbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query User Wallet Balance
         * @summary Query User Wallet Balance (USER_DATA)
         * @param {AssetApiWalletGetAssetWalletBalanceV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetAssetWalletBalanceV1(requestParameters: AssetApiWalletGetAssetWalletBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetAssetWalletBalanceV1RespItem>> {
            return localVarFp.walletGetAssetWalletBalanceV1(requestParameters.timestamp, requestParameters.quoteAsset, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get symbols delist schedule for spot
         * @summary Get Spot Delist Schedule (MARKET_DATA)
         * @param {AssetApiWalletGetSpotDelistScheduleV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetSpotDelistScheduleV1(requestParameters: AssetApiWalletGetSpotDelistScheduleV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetSpotDelistScheduleV1RespItem>> {
            return localVarFp.walletGetSpotDelistScheduleV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of symbols that are scheduled to be opened for trading in the market.
         * @summary Get Open Symbol List (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGetSpotOpenSymbolListV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetSpotOpenSymbolListV1RespItem>> {
            return localVarFp.walletGetSpotOpenSymbolListV1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetApi - interface
 * @export
 * @interface AssetApi
 */
export interface AssetApiInterface {
    /**
     * Get Assets That Can Be Converted Into BNB
     * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
     * @param {AssetApiWalletCreateAssetDustBtcV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletCreateAssetDustBtcV1(requestParameters: AssetApiWalletCreateAssetDustBtcV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateAssetDustBtcV1Resp>;

    /**
     * Convert dust assets to BNB.
     * @summary Dust Transfer (USER_DATA)
     * @param {AssetApiWalletCreateAssetDustV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletCreateAssetDustV1(requestParameters: AssetApiWalletCreateAssetDustV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateAssetDustV1Resp>;

    /**
     * Query Funding Wallet
     * @summary Funding Wallet (USER_DATA)
     * @param {AssetApiWalletCreateAssetGetFundingAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletCreateAssetGetFundingAssetV1(requestParameters: AssetApiWalletCreateAssetGetFundingAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletCreateAssetGetFundingAssetV1RespItem>>;

    /**
     * Get user assets, just for positive data.
     * @summary User Asset (USER_DATA)
     * @param {AssetApiWalletCreateAssetGetUserAssetV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletCreateAssetGetUserAssetV3(requestParameters: AssetApiWalletCreateAssetGetUserAssetV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletCreateAssetGetUserAssetV3RespItem>>;

    /**
     * user universal transfer
     * @summary User Universal Transfer (USER_DATA)
     * @param {AssetApiWalletCreateAssetTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletCreateAssetTransferV1(requestParameters: AssetApiWalletCreateAssetTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateAssetTransferV1Resp>;

    /**
     * Toggle BNB Burn On Spot Trade And Margin Interest
     * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
     * @param {AssetApiWalletCreateBnbBurnV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletCreateBnbBurnV1(requestParameters: AssetApiWalletCreateBnbBurnV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletCreateBnbBurnV1Resp>;

    /**
     * Fetch details of assets supported on Binance.
     * @summary Asset Detail (USER_DATA)
     * @param {AssetApiWalletGetAssetAssetDetailV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletGetAssetAssetDetailV1(requestParameters: AssetApiWalletGetAssetAssetDetailV1Request, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: WalletGetAssetAssetDetailV1RespValue; }>;

    /**
     * Query asset dividend record.
     * @summary Asset Dividend Record (USER_DATA)
     * @param {AssetApiWalletGetAssetAssetDividendV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletGetAssetAssetDividendV1(requestParameters: AssetApiWalletGetAssetAssetDividendV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAssetAssetDividendV1Resp>;

    /**
     * Query User Delegation History
     * @summary Query User Delegation History(For Master Account)(USER_DATA)
     * @param {AssetApiWalletGetAssetCustodyTransferHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletGetAssetCustodyTransferHistoryV1(requestParameters: AssetApiWalletGetAssetCustodyTransferHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAssetCustodyTransferHistoryV1Resp>;

    /**
     * Dustlog
     * @summary DustLog(USER_DATA)
     * @param {AssetApiWalletGetAssetDribbletV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletGetAssetDribbletV1(requestParameters: AssetApiWalletGetAssetDribbletV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAssetDribbletV1Resp>;

    /**
     * The query of Cloud-Mining payment and refund history
     * @summary Get Cloud-Mining payment and refund history (USER_DATA)
     * @param {AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletGetAssetLedgerTransferCloudMiningQueryByPageV1(requestParameters: AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAssetLedgerTransferCloudMiningQueryByPageV1Resp>;

    /**
     * Fetch trade fee
     * @summary Trade Fee (USER_DATA)
     * @param {AssetApiWalletGetAssetTradeFeeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletGetAssetTradeFeeV1(requestParameters: AssetApiWalletGetAssetTradeFeeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetAssetTradeFeeV1RespItem>>;

    /**
     * Query User Universal Transfer History
     * @summary Query User Universal Transfer History(USER_DATA)
     * @param {AssetApiWalletGetAssetTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletGetAssetTransferV1(requestParameters: AssetApiWalletGetAssetTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<WalletGetAssetTransferV1Resp>;

    /**
     * Query User Wallet Balance
     * @summary Query User Wallet Balance (USER_DATA)
     * @param {AssetApiWalletGetAssetWalletBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletGetAssetWalletBalanceV1(requestParameters: AssetApiWalletGetAssetWalletBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetAssetWalletBalanceV1RespItem>>;

    /**
     * Get symbols delist schedule for spot
     * @summary Get Spot Delist Schedule (MARKET_DATA)
     * @param {AssetApiWalletGetSpotDelistScheduleV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletGetSpotDelistScheduleV1(requestParameters: AssetApiWalletGetSpotDelistScheduleV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetSpotDelistScheduleV1RespItem>>;

    /**
     * Get the list of symbols that are scheduled to be opened for trading in the market.
     * @summary Get Open Symbol List (MARKET_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiInterface
     */
    walletGetSpotOpenSymbolListV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletGetSpotOpenSymbolListV1RespItem>>;

}

/**
 * Request parameters for walletCreateAssetDustBtcV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletCreateAssetDustBtcV1Request
 */
export interface AssetApiWalletCreateAssetDustBtcV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateAssetDustBtcV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateAssetDustBtcV1
     */
    readonly accountType?: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateAssetDustBtcV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletCreateAssetDustV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletCreateAssetDustV1Request
 */
export interface AssetApiWalletCreateAssetDustV1Request {
    /**
     * 
     * @type {Array<string>}
     * @memberof AssetApiWalletCreateAssetDustV1
     */
    readonly asset: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateAssetDustV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateAssetDustV1
     */
    readonly accountType?: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateAssetDustV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletCreateAssetGetFundingAssetV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletCreateAssetGetFundingAssetV1Request
 */
export interface AssetApiWalletCreateAssetGetFundingAssetV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateAssetGetFundingAssetV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateAssetGetFundingAssetV1
     */
    readonly asset?: string

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateAssetGetFundingAssetV1
     */
    readonly needBtcValuation?: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateAssetGetFundingAssetV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletCreateAssetGetUserAssetV3 operation in AssetApi.
 * @export
 * @interface AssetApiWalletCreateAssetGetUserAssetV3Request
 */
export interface AssetApiWalletCreateAssetGetUserAssetV3Request {
    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateAssetGetUserAssetV3
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateAssetGetUserAssetV3
     */
    readonly asset?: string

    /**
     * 
     * @type {boolean}
     * @memberof AssetApiWalletCreateAssetGetUserAssetV3
     */
    readonly needBtcValuation?: boolean

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateAssetGetUserAssetV3
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletCreateAssetTransferV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletCreateAssetTransferV1Request
 */
export interface AssetApiWalletCreateAssetTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateAssetTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateAssetTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateAssetTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateAssetTransferV1
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateAssetTransferV1
     */
    readonly fromSymbol?: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateAssetTransferV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateAssetTransferV1
     */
    readonly toSymbol?: string
}

/**
 * Request parameters for walletCreateBnbBurnV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletCreateBnbBurnV1Request
 */
export interface AssetApiWalletCreateBnbBurnV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateBnbBurnV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateBnbBurnV1
     */
    readonly interestBNBBurn?: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletCreateBnbBurnV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletCreateBnbBurnV1
     */
    readonly spotBNBBurn?: string
}

/**
 * Request parameters for walletGetAssetAssetDetailV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletGetAssetAssetDetailV1Request
 */
export interface AssetApiWalletGetAssetAssetDetailV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetAssetDetailV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetAssetDetailV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetAssetAssetDividendV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletGetAssetAssetDividendV1Request
 */
export interface AssetApiWalletGetAssetAssetDividendV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetAssetDividendV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletGetAssetAssetDividendV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetAssetDividendV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetAssetDividendV1
     */
    readonly endTime?: number

    /**
     * Default 20, max 500
     * @type {number}
     * @memberof AssetApiWalletGetAssetAssetDividendV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetAssetDividendV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetAssetCustodyTransferHistoryV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletGetAssetCustodyTransferHistoryV1Request
 */
export interface AssetApiWalletGetAssetCustodyTransferHistoryV1Request {
    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletGetAssetCustodyTransferHistoryV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetCustodyTransferHistoryV1
     */
    readonly startTime: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetCustodyTransferHistoryV1
     */
    readonly endTime: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetCustodyTransferHistoryV1
     */
    readonly timestamp: number

    /**
     * Delegate/Undelegate
     * @type {string}
     * @memberof AssetApiWalletGetAssetCustodyTransferHistoryV1
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletGetAssetCustodyTransferHistoryV1
     */
    readonly asset?: string

    /**
     * default 1
     * @type {number}
     * @memberof AssetApiWalletGetAssetCustodyTransferHistoryV1
     */
    readonly current?: number

    /**
     * default 10, max 100
     * @type {number}
     * @memberof AssetApiWalletGetAssetCustodyTransferHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetCustodyTransferHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetAssetDribbletV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletGetAssetDribbletV1Request
 */
export interface AssetApiWalletGetAssetDribbletV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetDribbletV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetDribbletV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetDribbletV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetDribbletV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetAssetLedgerTransferCloudMiningQueryByPageV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request
 */
export interface AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request {
    /**
     * inclusive, unit: ms
     * @type {number}
     * @memberof AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly startTime: number

    /**
     * exclusive, unit: ms
     * @type {number}
     * @memberof AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly endTime: number

    /**
     * The transaction id
     * @type {number}
     * @memberof AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly tranId?: number

    /**
     * The unique flag
     * @type {string}
     * @memberof AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly clientTranId?: string

    /**
     * If it is blank, we will query all assets
     * @type {string}
     * @memberof AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly asset?: string

    /**
     * current page, default 1, the min value is 1
     * @type {number}
     * @memberof AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly current?: number

    /**
     * page size, default 10, the max value is 100
     * @type {number}
     * @memberof AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly size?: number
}

/**
 * Request parameters for walletGetAssetTradeFeeV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletGetAssetTradeFeeV1Request
 */
export interface AssetApiWalletGetAssetTradeFeeV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetTradeFeeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletGetAssetTradeFeeV1
     */
    readonly symbol?: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetTradeFeeV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetAssetTransferV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletGetAssetTransferV1Request
 */
export interface AssetApiWalletGetAssetTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletGetAssetTransferV1
     */
    readonly type: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetTransferV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetTransferV1
     */
    readonly endTime?: number

    /**
     * Default 1
     * @type {number}
     * @memberof AssetApiWalletGetAssetTransferV1
     */
    readonly current?: number

    /**
     * Default 10, Max 100
     * @type {number}
     * @memberof AssetApiWalletGetAssetTransferV1
     */
    readonly size?: number

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletGetAssetTransferV1
     */
    readonly fromSymbol?: string

    /**
     * 
     * @type {string}
     * @memberof AssetApiWalletGetAssetTransferV1
     */
    readonly toSymbol?: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetAssetWalletBalanceV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletGetAssetWalletBalanceV1Request
 */
export interface AssetApiWalletGetAssetWalletBalanceV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetWalletBalanceV1
     */
    readonly timestamp: number

    /**
     * &#x60;USDT&#x60;, &#x60;ETH&#x60;, &#x60;USDC&#x60;, &#x60;BNB&#x60;, etc. default &#x60;BTC&#x60;
     * @type {string}
     * @memberof AssetApiWalletGetAssetWalletBalanceV1
     */
    readonly quoteAsset?: string

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetAssetWalletBalanceV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for walletGetSpotDelistScheduleV1 operation in AssetApi.
 * @export
 * @interface AssetApiWalletGetSpotDelistScheduleV1Request
 */
export interface AssetApiWalletGetSpotDelistScheduleV1Request {
    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetSpotDelistScheduleV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AssetApiWalletGetSpotDelistScheduleV1
     */
    readonly recvWindow?: number
}

/**
 * AssetApi - object-oriented interface
 * @export
 * @class AssetApi
 * @extends {BaseAPI}
 */
export class AssetApi extends BaseAPI implements AssetApiInterface {
    /**
     * Get Assets That Can Be Converted Into BNB
     * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
     * @param {AssetApiWalletCreateAssetDustBtcV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletCreateAssetDustBtcV1(requestParameters: AssetApiWalletCreateAssetDustBtcV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletCreateAssetDustBtcV1(requestParameters.timestamp, requestParameters.accountType, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Convert dust assets to BNB.
     * @summary Dust Transfer (USER_DATA)
     * @param {AssetApiWalletCreateAssetDustV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletCreateAssetDustV1(requestParameters: AssetApiWalletCreateAssetDustV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletCreateAssetDustV1(requestParameters.asset, requestParameters.timestamp, requestParameters.accountType, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Funding Wallet
     * @summary Funding Wallet (USER_DATA)
     * @param {AssetApiWalletCreateAssetGetFundingAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletCreateAssetGetFundingAssetV1(requestParameters: AssetApiWalletCreateAssetGetFundingAssetV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletCreateAssetGetFundingAssetV1(requestParameters.timestamp, requestParameters.asset, requestParameters.needBtcValuation, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user assets, just for positive data.
     * @summary User Asset (USER_DATA)
     * @param {AssetApiWalletCreateAssetGetUserAssetV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletCreateAssetGetUserAssetV3(requestParameters: AssetApiWalletCreateAssetGetUserAssetV3Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletCreateAssetGetUserAssetV3(requestParameters.timestamp, requestParameters.asset, requestParameters.needBtcValuation, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * user universal transfer
     * @summary User Universal Transfer (USER_DATA)
     * @param {AssetApiWalletCreateAssetTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletCreateAssetTransferV1(requestParameters: AssetApiWalletCreateAssetTransferV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletCreateAssetTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.type, requestParameters.fromSymbol, requestParameters.recvWindow, requestParameters.toSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Toggle BNB Burn On Spot Trade And Margin Interest
     * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
     * @param {AssetApiWalletCreateBnbBurnV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletCreateBnbBurnV1(requestParameters: AssetApiWalletCreateBnbBurnV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletCreateBnbBurnV1(requestParameters.timestamp, requestParameters.interestBNBBurn, requestParameters.recvWindow, requestParameters.spotBNBBurn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch details of assets supported on Binance.
     * @summary Asset Detail (USER_DATA)
     * @param {AssetApiWalletGetAssetAssetDetailV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletGetAssetAssetDetailV1(requestParameters: AssetApiWalletGetAssetAssetDetailV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletGetAssetAssetDetailV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query asset dividend record.
     * @summary Asset Dividend Record (USER_DATA)
     * @param {AssetApiWalletGetAssetAssetDividendV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletGetAssetAssetDividendV1(requestParameters: AssetApiWalletGetAssetAssetDividendV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletGetAssetAssetDividendV1(requestParameters.timestamp, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query User Delegation History
     * @summary Query User Delegation History(For Master Account)(USER_DATA)
     * @param {AssetApiWalletGetAssetCustodyTransferHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletGetAssetCustodyTransferHistoryV1(requestParameters: AssetApiWalletGetAssetCustodyTransferHistoryV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletGetAssetCustodyTransferHistoryV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.type, requestParameters.asset, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Dustlog
     * @summary DustLog(USER_DATA)
     * @param {AssetApiWalletGetAssetDribbletV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletGetAssetDribbletV1(requestParameters: AssetApiWalletGetAssetDribbletV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletGetAssetDribbletV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The query of Cloud-Mining payment and refund history
     * @summary Get Cloud-Mining payment and refund history (USER_DATA)
     * @param {AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletGetAssetLedgerTransferCloudMiningQueryByPageV1(requestParameters: AssetApiWalletGetAssetLedgerTransferCloudMiningQueryByPageV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletGetAssetLedgerTransferCloudMiningQueryByPageV1(requestParameters.startTime, requestParameters.endTime, requestParameters.tranId, requestParameters.clientTranId, requestParameters.asset, requestParameters.current, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch trade fee
     * @summary Trade Fee (USER_DATA)
     * @param {AssetApiWalletGetAssetTradeFeeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletGetAssetTradeFeeV1(requestParameters: AssetApiWalletGetAssetTradeFeeV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletGetAssetTradeFeeV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query User Universal Transfer History
     * @summary Query User Universal Transfer History(USER_DATA)
     * @param {AssetApiWalletGetAssetTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletGetAssetTransferV1(requestParameters: AssetApiWalletGetAssetTransferV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletGetAssetTransferV1(requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.fromSymbol, requestParameters.toSymbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query User Wallet Balance
     * @summary Query User Wallet Balance (USER_DATA)
     * @param {AssetApiWalletGetAssetWalletBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletGetAssetWalletBalanceV1(requestParameters: AssetApiWalletGetAssetWalletBalanceV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletGetAssetWalletBalanceV1(requestParameters.timestamp, requestParameters.quoteAsset, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get symbols delist schedule for spot
     * @summary Get Spot Delist Schedule (MARKET_DATA)
     * @param {AssetApiWalletGetSpotDelistScheduleV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletGetSpotDelistScheduleV1(requestParameters: AssetApiWalletGetSpotDelistScheduleV1Request, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletGetSpotDelistScheduleV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of symbols that are scheduled to be opened for trading in the market.
     * @summary Get Open Symbol List (MARKET_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public walletGetSpotOpenSymbolListV1(options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).walletGetSpotOpenSymbolListV1(options).then((request) => request(this.axios, this.basePath));
    }
}

