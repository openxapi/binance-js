/* tslint:disable */
/* eslint-disable */
/**
 * Binance Portfolio Margin Pro API
 * OpenAPI specification for Binance exchange - Pmarginpro API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { PmarginproCreatePortfolioAssetCollectionV1Resp } from '../model';
// @ts-ignore
import type { PmarginproCreatePortfolioAutoCollectionV1Resp } from '../model';
// @ts-ignore
import type { PmarginproCreatePortfolioBnbTransferV1Resp } from '../model';
// @ts-ignore
import type { PmarginproCreatePortfolioMintV1Resp } from '../model';
// @ts-ignore
import type { PmarginproCreatePortfolioRedeemV1Resp } from '../model';
// @ts-ignore
import type { PmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Resp } from '../model';
// @ts-ignore
import type { PmarginproCreatePortfolioRepayFuturesSwitchV1Resp } from '../model';
// @ts-ignore
import type { PmarginproCreatePortfolioRepayV1Resp } from '../model';
// @ts-ignore
import type { PmarginproGetPortfolioAccountV1Resp } from '../model';
// @ts-ignore
import type { PmarginproGetPortfolioBalanceV1RespItem } from '../model';
// @ts-ignore
import type { PmarginproGetPortfolioInterestHistoryV1RespItem } from '../model';
// @ts-ignore
import type { PmarginproGetPortfolioPmLoanHistoryV1Resp } from '../model';
// @ts-ignore
import type { PmarginproGetPortfolioPmLoanV1Resp } from '../model';
// @ts-ignore
import type { PmarginproGetPortfolioRepayFuturesSwitchV1Resp } from '../model';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Transfers specific asset from Futures Account to Margin account
         * @summary Fund Collection by Asset(USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioAssetCollectionV1: async (asset: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioAssetCollectionV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioAssetCollectionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/asset-collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfers all assets from Futures Account to Margin account
         * @summary Fund Auto-collection(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioAutoCollectionV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioAutoCollectionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/auto-collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * BNB transfer can be between Margin Account and USDM Account
         * @summary BNB transfer(USER_DATA)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {string} transferSide 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioBnbTransferV1: async (amount: string, timestamp: number, transferSide: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioBnbTransferV1', 'amount', amount)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioBnbTransferV1', 'timestamp', timestamp)
            // verify required parameter 'transferSide' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioBnbTransferV1', 'transferSide', transferSide)
            const localVarPath = `/sapi/v1/portfolio/bnb-transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (transferSide !== undefined) { 
                localVarFormParams.set('transferSide', transferSide as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mint BFUSD for all types of Portfolio Margin account
         * @summary Mint BFUSD for Portfolio Margin(TRADE)
         * @param {string} amount 
         * @param {string} fromAsset 
         * @param {string} targetAsset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioMintV1: async (amount: string, fromAsset: string, targetAsset: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioMintV1', 'amount', amount)
            // verify required parameter 'fromAsset' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioMintV1', 'fromAsset', fromAsset)
            // verify required parameter 'targetAsset' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioMintV1', 'targetAsset', targetAsset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioMintV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/mint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (fromAsset !== undefined) { 
                localVarFormParams.set('fromAsset', fromAsset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (targetAsset !== undefined) { 
                localVarFormParams.set('targetAsset', targetAsset as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeem BFUSD for all types of Portfolio Margin account
         * @summary Redeem BFUSD for Portfolio Margin(TRADE)
         * @param {string} amount 
         * @param {string} fromAsset 
         * @param {string} targetAsset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioRedeemV1: async (amount: string, fromAsset: string, targetAsset: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioRedeemV1', 'amount', amount)
            // verify required parameter 'fromAsset' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioRedeemV1', 'fromAsset', fromAsset)
            // verify required parameter 'targetAsset' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioRedeemV1', 'targetAsset', targetAsset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioRedeemV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (fromAsset !== undefined) { 
                localVarFormParams.set('fromAsset', fromAsset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (targetAsset !== undefined) { 
                localVarFormParams.set('targetAsset', targetAsset as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Repay futures Negative Balance
         * @summary Repay futures Negative Balance(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [from] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioRepayFuturesNegativeBalanceV1: async (timestamp: number, from?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioRepayFuturesNegativeBalanceV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/repay-futures-negative-balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (from !== undefined) { 
                localVarFormParams.set('from', from as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change Auto-repay-futures Status
         * @summary Change Auto-repay-futures Status(TRADE)
         * @param {string} autoRepay 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioRepayFuturesSwitchV1: async (autoRepay: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'autoRepay' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioRepayFuturesSwitchV1', 'autoRepay', autoRepay)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioRepayFuturesSwitchV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/repay-futures-switch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (autoRepay !== undefined) { 
                localVarFormParams.set('autoRepay', autoRepay as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Repay Portfolio Margin Pro Bankruptcy Loan
         * @summary Portfolio Margin Pro Bankruptcy Loan Repay
         * @param {number} timestamp 
         * @param {string} [from] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioRepayV1: async (timestamp: number, from?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproCreatePortfolioRepayV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (from !== undefined) { 
                localVarFormParams.set('from', from as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Portfolio Margin Pro Account Info
         * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioAccountV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproGetPortfolioAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
         * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioAccountV2: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproGetPortfolioAccountV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/portfolio/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Portfolio Margin Pro account balance
         * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioBalanceV1: async (timestamp: number, asset?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproGetPortfolioBalanceV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query interest history of negative balance for portfolio margin.
         * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioInterestHistoryV1: async (timestamp: number, asset?: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproGetPortfolioInterestHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/interest-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query repay history of pmloan for portfolio margin pro.
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioPmLoanHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproGetPortfolioPmLoanHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/pmLoan-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Portfolio Margin Pro Bankruptcy Loan Amount
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioPmLoanV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproGetPortfolioPmLoanV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/pmLoan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Auto-repay-futures Status
         * @summary Get Auto-repay-futures Status(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioRepayFuturesSwitchV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('pmarginproGetPortfolioRepayFuturesSwitchV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/repay-futures-switch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Transfers specific asset from Futures Account to Margin account
         * @summary Fund Collection by Asset(USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproCreatePortfolioAssetCollectionV1(asset: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproCreatePortfolioAssetCollectionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproCreatePortfolioAssetCollectionV1(asset, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproCreatePortfolioAssetCollectionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfers all assets from Futures Account to Margin account
         * @summary Fund Auto-collection(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproCreatePortfolioAutoCollectionV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproCreatePortfolioAutoCollectionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproCreatePortfolioAutoCollectionV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproCreatePortfolioAutoCollectionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * BNB transfer can be between Margin Account and USDM Account
         * @summary BNB transfer(USER_DATA)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {string} transferSide 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproCreatePortfolioBnbTransferV1(amount: string, timestamp: number, transferSide: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproCreatePortfolioBnbTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproCreatePortfolioBnbTransferV1(amount, timestamp, transferSide, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproCreatePortfolioBnbTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Mint BFUSD for all types of Portfolio Margin account
         * @summary Mint BFUSD for Portfolio Margin(TRADE)
         * @param {string} amount 
         * @param {string} fromAsset 
         * @param {string} targetAsset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproCreatePortfolioMintV1(amount: string, fromAsset: string, targetAsset: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproCreatePortfolioMintV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproCreatePortfolioMintV1(amount, fromAsset, targetAsset, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproCreatePortfolioMintV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redeem BFUSD for all types of Portfolio Margin account
         * @summary Redeem BFUSD for Portfolio Margin(TRADE)
         * @param {string} amount 
         * @param {string} fromAsset 
         * @param {string} targetAsset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproCreatePortfolioRedeemV1(amount: string, fromAsset: string, targetAsset: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproCreatePortfolioRedeemV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproCreatePortfolioRedeemV1(amount, fromAsset, targetAsset, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproCreatePortfolioRedeemV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Repay futures Negative Balance
         * @summary Repay futures Negative Balance(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [from] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproCreatePortfolioRepayFuturesNegativeBalanceV1(timestamp: number, from?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproCreatePortfolioRepayFuturesNegativeBalanceV1(timestamp, from, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproCreatePortfolioRepayFuturesNegativeBalanceV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change Auto-repay-futures Status
         * @summary Change Auto-repay-futures Status(TRADE)
         * @param {string} autoRepay 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproCreatePortfolioRepayFuturesSwitchV1(autoRepay: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproCreatePortfolioRepayFuturesSwitchV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproCreatePortfolioRepayFuturesSwitchV1(autoRepay, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproCreatePortfolioRepayFuturesSwitchV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Repay Portfolio Margin Pro Bankruptcy Loan
         * @summary Portfolio Margin Pro Bankruptcy Loan Repay
         * @param {number} timestamp 
         * @param {string} [from] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproCreatePortfolioRepayV1(timestamp: number, from?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproCreatePortfolioRepayV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproCreatePortfolioRepayV1(timestamp, from, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproCreatePortfolioRepayV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Portfolio Margin Pro Account Info
         * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproGetPortfolioAccountV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproGetPortfolioAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproGetPortfolioAccountV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproGetPortfolioAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
         * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproGetPortfolioAccountV2(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproGetPortfolioAccountV2(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproGetPortfolioAccountV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Portfolio Margin Pro account balance
         * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproGetPortfolioBalanceV1(timestamp: number, asset?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PmarginproGetPortfolioBalanceV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproGetPortfolioBalanceV1(timestamp, asset, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproGetPortfolioBalanceV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query interest history of negative balance for portfolio margin.
         * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproGetPortfolioInterestHistoryV1(timestamp: number, asset?: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PmarginproGetPortfolioInterestHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproGetPortfolioInterestHistoryV1(timestamp, asset, startTime, endTime, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproGetPortfolioInterestHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query repay history of pmloan for portfolio margin pro.
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproGetPortfolioPmLoanHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproGetPortfolioPmLoanHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproGetPortfolioPmLoanHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproGetPortfolioPmLoanHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Portfolio Margin Pro Bankruptcy Loan Amount
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproGetPortfolioPmLoanV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproGetPortfolioPmLoanV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproGetPortfolioPmLoanV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproGetPortfolioPmLoanV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Auto-repay-futures Status
         * @summary Get Auto-repay-futures Status(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pmarginproGetPortfolioRepayFuturesSwitchV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PmarginproGetPortfolioRepayFuturesSwitchV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pmarginproGetPortfolioRepayFuturesSwitchV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.pmarginproGetPortfolioRepayFuturesSwitchV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * Transfers specific asset from Futures Account to Margin account
         * @summary Fund Collection by Asset(USER_DATA)
         * @param {AccountApiPmarginproCreatePortfolioAssetCollectionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioAssetCollectionV1(requestParameters: AccountApiPmarginproCreatePortfolioAssetCollectionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioAssetCollectionV1Resp> {
            return localVarFp.pmarginproCreatePortfolioAssetCollectionV1(requestParameters.asset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfers all assets from Futures Account to Margin account
         * @summary Fund Auto-collection(USER_DATA)
         * @param {AccountApiPmarginproCreatePortfolioAutoCollectionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioAutoCollectionV1(requestParameters: AccountApiPmarginproCreatePortfolioAutoCollectionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioAutoCollectionV1Resp> {
            return localVarFp.pmarginproCreatePortfolioAutoCollectionV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * BNB transfer can be between Margin Account and USDM Account
         * @summary BNB transfer(USER_DATA)
         * @param {AccountApiPmarginproCreatePortfolioBnbTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioBnbTransferV1(requestParameters: AccountApiPmarginproCreatePortfolioBnbTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioBnbTransferV1Resp> {
            return localVarFp.pmarginproCreatePortfolioBnbTransferV1(requestParameters.amount, requestParameters.timestamp, requestParameters.transferSide, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Mint BFUSD for all types of Portfolio Margin account
         * @summary Mint BFUSD for Portfolio Margin(TRADE)
         * @param {AccountApiPmarginproCreatePortfolioMintV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioMintV1(requestParameters: AccountApiPmarginproCreatePortfolioMintV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioMintV1Resp> {
            return localVarFp.pmarginproCreatePortfolioMintV1(requestParameters.amount, requestParameters.fromAsset, requestParameters.targetAsset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeem BFUSD for all types of Portfolio Margin account
         * @summary Redeem BFUSD for Portfolio Margin(TRADE)
         * @param {AccountApiPmarginproCreatePortfolioRedeemV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioRedeemV1(requestParameters: AccountApiPmarginproCreatePortfolioRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioRedeemV1Resp> {
            return localVarFp.pmarginproCreatePortfolioRedeemV1(requestParameters.amount, requestParameters.fromAsset, requestParameters.targetAsset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Repay futures Negative Balance
         * @summary Repay futures Negative Balance(USER_DATA)
         * @param {AccountApiPmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioRepayFuturesNegativeBalanceV1(requestParameters: AccountApiPmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Resp> {
            return localVarFp.pmarginproCreatePortfolioRepayFuturesNegativeBalanceV1(requestParameters.timestamp, requestParameters.from, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Change Auto-repay-futures Status
         * @summary Change Auto-repay-futures Status(TRADE)
         * @param {AccountApiPmarginproCreatePortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioRepayFuturesSwitchV1(requestParameters: AccountApiPmarginproCreatePortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioRepayFuturesSwitchV1Resp> {
            return localVarFp.pmarginproCreatePortfolioRepayFuturesSwitchV1(requestParameters.autoRepay, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Repay Portfolio Margin Pro Bankruptcy Loan
         * @summary Portfolio Margin Pro Bankruptcy Loan Repay
         * @param {AccountApiPmarginproCreatePortfolioRepayV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproCreatePortfolioRepayV1(requestParameters: AccountApiPmarginproCreatePortfolioRepayV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioRepayV1Resp> {
            return localVarFp.pmarginproCreatePortfolioRepayV1(requestParameters.timestamp, requestParameters.from, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Portfolio Margin Pro Account Info
         * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
         * @param {AccountApiPmarginproGetPortfolioAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioAccountV1(requestParameters: AccountApiPmarginproGetPortfolioAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproGetPortfolioAccountV1Resp> {
            return localVarFp.pmarginproGetPortfolioAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
         * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
         * @param {AccountApiPmarginproGetPortfolioAccountV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioAccountV2(requestParameters: AccountApiPmarginproGetPortfolioAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pmarginproGetPortfolioAccountV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Portfolio Margin Pro account balance
         * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
         * @param {AccountApiPmarginproGetPortfolioBalanceV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioBalanceV1(requestParameters: AccountApiPmarginproGetPortfolioBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<PmarginproGetPortfolioBalanceV1RespItem>> {
            return localVarFp.pmarginproGetPortfolioBalanceV1(requestParameters.timestamp, requestParameters.asset, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query interest history of negative balance for portfolio margin.
         * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
         * @param {AccountApiPmarginproGetPortfolioInterestHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioInterestHistoryV1(requestParameters: AccountApiPmarginproGetPortfolioInterestHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<PmarginproGetPortfolioInterestHistoryV1RespItem>> {
            return localVarFp.pmarginproGetPortfolioInterestHistoryV1(requestParameters.timestamp, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query repay history of pmloan for portfolio margin pro.
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
         * @param {AccountApiPmarginproGetPortfolioPmLoanHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioPmLoanHistoryV1(requestParameters: AccountApiPmarginproGetPortfolioPmLoanHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproGetPortfolioPmLoanHistoryV1Resp> {
            return localVarFp.pmarginproGetPortfolioPmLoanHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Portfolio Margin Pro Bankruptcy Loan Amount
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
         * @param {AccountApiPmarginproGetPortfolioPmLoanV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioPmLoanV1(requestParameters: AccountApiPmarginproGetPortfolioPmLoanV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproGetPortfolioPmLoanV1Resp> {
            return localVarFp.pmarginproGetPortfolioPmLoanV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Auto-repay-futures Status
         * @summary Get Auto-repay-futures Status(USER_DATA)
         * @param {AccountApiPmarginproGetPortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pmarginproGetPortfolioRepayFuturesSwitchV1(requestParameters: AccountApiPmarginproGetPortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproGetPortfolioRepayFuturesSwitchV1Resp> {
            return localVarFp.pmarginproGetPortfolioRepayFuturesSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - interface
 * @export
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Transfers specific asset from Futures Account to Margin account
     * @summary Fund Collection by Asset(USER_DATA)
     * @param {AccountApiPmarginproCreatePortfolioAssetCollectionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproCreatePortfolioAssetCollectionV1(requestParameters: AccountApiPmarginproCreatePortfolioAssetCollectionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioAssetCollectionV1Resp>;

    /**
     * Transfers all assets from Futures Account to Margin account
     * @summary Fund Auto-collection(USER_DATA)
     * @param {AccountApiPmarginproCreatePortfolioAutoCollectionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproCreatePortfolioAutoCollectionV1(requestParameters: AccountApiPmarginproCreatePortfolioAutoCollectionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioAutoCollectionV1Resp>;

    /**
     * BNB transfer can be between Margin Account and USDM Account
     * @summary BNB transfer(USER_DATA)
     * @param {AccountApiPmarginproCreatePortfolioBnbTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproCreatePortfolioBnbTransferV1(requestParameters: AccountApiPmarginproCreatePortfolioBnbTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioBnbTransferV1Resp>;

    /**
     * Mint BFUSD for all types of Portfolio Margin account
     * @summary Mint BFUSD for Portfolio Margin(TRADE)
     * @param {AccountApiPmarginproCreatePortfolioMintV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproCreatePortfolioMintV1(requestParameters: AccountApiPmarginproCreatePortfolioMintV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioMintV1Resp>;

    /**
     * Redeem BFUSD for all types of Portfolio Margin account
     * @summary Redeem BFUSD for Portfolio Margin(TRADE)
     * @param {AccountApiPmarginproCreatePortfolioRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproCreatePortfolioRedeemV1(requestParameters: AccountApiPmarginproCreatePortfolioRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioRedeemV1Resp>;

    /**
     * Repay futures Negative Balance
     * @summary Repay futures Negative Balance(USER_DATA)
     * @param {AccountApiPmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproCreatePortfolioRepayFuturesNegativeBalanceV1(requestParameters: AccountApiPmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Resp>;

    /**
     * Change Auto-repay-futures Status
     * @summary Change Auto-repay-futures Status(TRADE)
     * @param {AccountApiPmarginproCreatePortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproCreatePortfolioRepayFuturesSwitchV1(requestParameters: AccountApiPmarginproCreatePortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioRepayFuturesSwitchV1Resp>;

    /**
     * Repay Portfolio Margin Pro Bankruptcy Loan
     * @summary Portfolio Margin Pro Bankruptcy Loan Repay
     * @param {AccountApiPmarginproCreatePortfolioRepayV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproCreatePortfolioRepayV1(requestParameters: AccountApiPmarginproCreatePortfolioRepayV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproCreatePortfolioRepayV1Resp>;

    /**
     * Get Portfolio Margin Pro Account Info
     * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproGetPortfolioAccountV1(requestParameters: AccountApiPmarginproGetPortfolioAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproGetPortfolioAccountV1Resp>;

    /**
     * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
     * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproGetPortfolioAccountV2(requestParameters: AccountApiPmarginproGetPortfolioAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Query Portfolio Margin Pro account balance
     * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproGetPortfolioBalanceV1(requestParameters: AccountApiPmarginproGetPortfolioBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<PmarginproGetPortfolioBalanceV1RespItem>>;

    /**
     * Query interest history of negative balance for portfolio margin.
     * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioInterestHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproGetPortfolioInterestHistoryV1(requestParameters: AccountApiPmarginproGetPortfolioInterestHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<PmarginproGetPortfolioInterestHistoryV1RespItem>>;

    /**
     * Query repay history of pmloan for portfolio margin pro.
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioPmLoanHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproGetPortfolioPmLoanHistoryV1(requestParameters: AccountApiPmarginproGetPortfolioPmLoanHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproGetPortfolioPmLoanHistoryV1Resp>;

    /**
     * Query Portfolio Margin Pro Bankruptcy Loan Amount
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioPmLoanV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproGetPortfolioPmLoanV1(requestParameters: AccountApiPmarginproGetPortfolioPmLoanV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproGetPortfolioPmLoanV1Resp>;

    /**
     * Query Auto-repay-futures Status
     * @summary Get Auto-repay-futures Status(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    pmarginproGetPortfolioRepayFuturesSwitchV1(requestParameters: AccountApiPmarginproGetPortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PmarginproGetPortfolioRepayFuturesSwitchV1Resp>;

}

/**
 * Request parameters for pmarginproCreatePortfolioAssetCollectionV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproCreatePortfolioAssetCollectionV1Request
 */
export interface AccountApiPmarginproCreatePortfolioAssetCollectionV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioAssetCollectionV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioAssetCollectionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioAssetCollectionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproCreatePortfolioAutoCollectionV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproCreatePortfolioAutoCollectionV1Request
 */
export interface AccountApiPmarginproCreatePortfolioAutoCollectionV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioAutoCollectionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioAutoCollectionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproCreatePortfolioBnbTransferV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproCreatePortfolioBnbTransferV1Request
 */
export interface AccountApiPmarginproCreatePortfolioBnbTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioBnbTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioBnbTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioBnbTransferV1
     */
    readonly transferSide: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioBnbTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproCreatePortfolioMintV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproCreatePortfolioMintV1Request
 */
export interface AccountApiPmarginproCreatePortfolioMintV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioMintV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioMintV1
     */
    readonly fromAsset: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioMintV1
     */
    readonly targetAsset: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioMintV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioMintV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproCreatePortfolioRedeemV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproCreatePortfolioRedeemV1Request
 */
export interface AccountApiPmarginproCreatePortfolioRedeemV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioRedeemV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioRedeemV1
     */
    readonly fromAsset: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioRedeemV1
     */
    readonly targetAsset: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioRedeemV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioRedeemV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproCreatePortfolioRepayFuturesNegativeBalanceV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Request
 */
export interface AccountApiPmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioRepayFuturesNegativeBalanceV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioRepayFuturesNegativeBalanceV1
     */
    readonly from?: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioRepayFuturesNegativeBalanceV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproCreatePortfolioRepayFuturesSwitchV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproCreatePortfolioRepayFuturesSwitchV1Request
 */
export interface AccountApiPmarginproCreatePortfolioRepayFuturesSwitchV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioRepayFuturesSwitchV1
     */
    readonly autoRepay: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioRepayFuturesSwitchV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioRepayFuturesSwitchV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproCreatePortfolioRepayV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproCreatePortfolioRepayV1Request
 */
export interface AccountApiPmarginproCreatePortfolioRepayV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioRepayV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproCreatePortfolioRepayV1
     */
    readonly from?: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproCreatePortfolioRepayV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproGetPortfolioAccountV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproGetPortfolioAccountV1Request
 */
export interface AccountApiPmarginproGetPortfolioAccountV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproGetPortfolioAccountV2 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproGetPortfolioAccountV2Request
 */
export interface AccountApiPmarginproGetPortfolioAccountV2Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioAccountV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioAccountV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproGetPortfolioBalanceV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproGetPortfolioBalanceV1Request
 */
export interface AccountApiPmarginproGetPortfolioBalanceV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioBalanceV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproGetPortfolioBalanceV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioBalanceV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproGetPortfolioInterestHistoryV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproGetPortfolioInterestHistoryV1Request
 */
export interface AccountApiPmarginproGetPortfolioInterestHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioInterestHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiPmarginproGetPortfolioInterestHistoryV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioInterestHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioInterestHistoryV1
     */
    readonly endTime?: number

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioInterestHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioInterestHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproGetPortfolioPmLoanHistoryV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproGetPortfolioPmLoanHistoryV1Request
 */
export interface AccountApiPmarginproGetPortfolioPmLoanHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioPmLoanHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioPmLoanHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioPmLoanHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioPmLoanHistoryV1
     */
    readonly current?: number

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioPmLoanHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioPmLoanHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproGetPortfolioPmLoanV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproGetPortfolioPmLoanV1Request
 */
export interface AccountApiPmarginproGetPortfolioPmLoanV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioPmLoanV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioPmLoanV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for pmarginproGetPortfolioRepayFuturesSwitchV1 operation in AccountApi.
 * @export
 * @interface AccountApiPmarginproGetPortfolioRepayFuturesSwitchV1Request
 */
export interface AccountApiPmarginproGetPortfolioRepayFuturesSwitchV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioRepayFuturesSwitchV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiPmarginproGetPortfolioRepayFuturesSwitchV1
     */
    readonly recvWindow?: number
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI implements AccountApiInterface {
    /**
     * Transfers specific asset from Futures Account to Margin account
     * @summary Fund Collection by Asset(USER_DATA)
     * @param {AccountApiPmarginproCreatePortfolioAssetCollectionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproCreatePortfolioAssetCollectionV1(requestParameters: AccountApiPmarginproCreatePortfolioAssetCollectionV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproCreatePortfolioAssetCollectionV1(requestParameters.asset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfers all assets from Futures Account to Margin account
     * @summary Fund Auto-collection(USER_DATA)
     * @param {AccountApiPmarginproCreatePortfolioAutoCollectionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproCreatePortfolioAutoCollectionV1(requestParameters: AccountApiPmarginproCreatePortfolioAutoCollectionV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproCreatePortfolioAutoCollectionV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * BNB transfer can be between Margin Account and USDM Account
     * @summary BNB transfer(USER_DATA)
     * @param {AccountApiPmarginproCreatePortfolioBnbTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproCreatePortfolioBnbTransferV1(requestParameters: AccountApiPmarginproCreatePortfolioBnbTransferV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproCreatePortfolioBnbTransferV1(requestParameters.amount, requestParameters.timestamp, requestParameters.transferSide, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mint BFUSD for all types of Portfolio Margin account
     * @summary Mint BFUSD for Portfolio Margin(TRADE)
     * @param {AccountApiPmarginproCreatePortfolioMintV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproCreatePortfolioMintV1(requestParameters: AccountApiPmarginproCreatePortfolioMintV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproCreatePortfolioMintV1(requestParameters.amount, requestParameters.fromAsset, requestParameters.targetAsset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redeem BFUSD for all types of Portfolio Margin account
     * @summary Redeem BFUSD for Portfolio Margin(TRADE)
     * @param {AccountApiPmarginproCreatePortfolioRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproCreatePortfolioRedeemV1(requestParameters: AccountApiPmarginproCreatePortfolioRedeemV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproCreatePortfolioRedeemV1(requestParameters.amount, requestParameters.fromAsset, requestParameters.targetAsset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Repay futures Negative Balance
     * @summary Repay futures Negative Balance(USER_DATA)
     * @param {AccountApiPmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproCreatePortfolioRepayFuturesNegativeBalanceV1(requestParameters: AccountApiPmarginproCreatePortfolioRepayFuturesNegativeBalanceV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproCreatePortfolioRepayFuturesNegativeBalanceV1(requestParameters.timestamp, requestParameters.from, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change Auto-repay-futures Status
     * @summary Change Auto-repay-futures Status(TRADE)
     * @param {AccountApiPmarginproCreatePortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproCreatePortfolioRepayFuturesSwitchV1(requestParameters: AccountApiPmarginproCreatePortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproCreatePortfolioRepayFuturesSwitchV1(requestParameters.autoRepay, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Repay Portfolio Margin Pro Bankruptcy Loan
     * @summary Portfolio Margin Pro Bankruptcy Loan Repay
     * @param {AccountApiPmarginproCreatePortfolioRepayV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproCreatePortfolioRepayV1(requestParameters: AccountApiPmarginproCreatePortfolioRepayV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproCreatePortfolioRepayV1(requestParameters.timestamp, requestParameters.from, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Portfolio Margin Pro Account Info
     * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproGetPortfolioAccountV1(requestParameters: AccountApiPmarginproGetPortfolioAccountV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproGetPortfolioAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
     * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproGetPortfolioAccountV2(requestParameters: AccountApiPmarginproGetPortfolioAccountV2Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproGetPortfolioAccountV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Portfolio Margin Pro account balance
     * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproGetPortfolioBalanceV1(requestParameters: AccountApiPmarginproGetPortfolioBalanceV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproGetPortfolioBalanceV1(requestParameters.timestamp, requestParameters.asset, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query interest history of negative balance for portfolio margin.
     * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioInterestHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproGetPortfolioInterestHistoryV1(requestParameters: AccountApiPmarginproGetPortfolioInterestHistoryV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproGetPortfolioInterestHistoryV1(requestParameters.timestamp, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query repay history of pmloan for portfolio margin pro.
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioPmLoanHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproGetPortfolioPmLoanHistoryV1(requestParameters: AccountApiPmarginproGetPortfolioPmLoanHistoryV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproGetPortfolioPmLoanHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Portfolio Margin Pro Bankruptcy Loan Amount
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioPmLoanV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproGetPortfolioPmLoanV1(requestParameters: AccountApiPmarginproGetPortfolioPmLoanV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproGetPortfolioPmLoanV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Auto-repay-futures Status
     * @summary Get Auto-repay-futures Status(USER_DATA)
     * @param {AccountApiPmarginproGetPortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public pmarginproGetPortfolioRepayFuturesSwitchV1(requestParameters: AccountApiPmarginproGetPortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).pmarginproGetPortfolioRepayFuturesSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

