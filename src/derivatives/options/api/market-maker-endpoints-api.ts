/* tslint:disable */
/* eslint-disable */
/**
 * Binance Options API
 * OpenAPI specification for Binance exchange - Options API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { OptionsCreateCountdownCancelAllHeartBeatV1Resp } from '../model';
// @ts-ignore
import type { OptionsCreateCountdownCancelAllV1Resp } from '../model';
// @ts-ignore
import type { OptionsCreateMmpResetV1Resp } from '../model';
// @ts-ignore
import type { OptionsCreateMmpSetV1Resp } from '../model';
// @ts-ignore
import type { OptionsGetCountdownCancelAllV1Resp } from '../model';
// @ts-ignore
import type { OptionsGetMarginAccountV1Resp } from '../model';
// @ts-ignore
import type { OptionsGetMmpV1Resp } from '../model';
/**
 * MarketMakerEndpointsApi - axios parameter creator
 * @export
 */
export const MarketMakerEndpointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint resets the time from which the countdown will begin to the time this messaged is received.  It should be called repeatedly as heartbeats.  Multiple heartbeats can be updated at once by specifying the underlying symbols as a list (ex. BTCUSDT,ETHUSDT) in the underlyings parameter.
         * @summary Auto-Cancel All Open Orders (Kill-Switch) Heartbeat (TRADE)
         * @param {number} timestamp 
         * @param {string} underlyings 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsCreateCountdownCancelAllHeartBeatV1: async (timestamp: number, underlyings: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('optionsCreateCountdownCancelAllHeartBeatV1', 'timestamp', timestamp)
            // verify required parameter 'underlyings' is not null or undefined
            assertParamExists('optionsCreateCountdownCancelAllHeartBeatV1', 'underlyings', underlyings)
            const localVarPath = `/eapi/v1/countdownCancelAllHeartBeat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (underlyings !== undefined) { 
                localVarFormParams.set('underlyings', underlyings as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint sets the parameters of the auto-cancel feature which cancels all open orders (both market maker protection and non market maker protection order types) of the underlying symbol at the end of the specified countdown time period if no heartbeat message is sent.  After the countdown time period, all open orders will be cancelled and new orders will be rejected with error code -2010 until either a heartbeat message is sent or the auto-cancel feature is turned off by setting countdownTime to 0.
         * @summary Set Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
         * @param {number} countdownTime 
         * @param {number} timestamp 
         * @param {string} underlying 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsCreateCountdownCancelAllV1: async (countdownTime: number, timestamp: number, underlying: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countdownTime' is not null or undefined
            assertParamExists('optionsCreateCountdownCancelAllV1', 'countdownTime', countdownTime)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('optionsCreateCountdownCancelAllV1', 'timestamp', timestamp)
            // verify required parameter 'underlying' is not null or undefined
            assertParamExists('optionsCreateCountdownCancelAllV1', 'underlying', underlying)
            const localVarPath = `/eapi/v1/countdownCancelAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (countdownTime !== undefined) { 
                localVarFormParams.set('countdownTime', countdownTime as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (underlying !== undefined) { 
                localVarFormParams.set('underlying', underlying as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset MMP, start MMP order again.
         * @summary Reset Market Maker Protection Config (TRADE)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {string} [underlying] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsCreateMmpResetV1: async (timestamp: number, recvWindow?: number, underlying?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('optionsCreateMmpResetV1', 'timestamp', timestamp)
            const localVarPath = `/eapi/v1/mmpReset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (underlying !== undefined) { 
                localVarFormParams.set('underlying', underlying as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set config for MMP. Market Maker Protection(MMP) is a set of protection mechanism for option market maker, this mechanism is able to prevent mass trading in short period time. Once market maker\'s account branches the threshold, the Market Maker Protection will be triggered. When Market Maker Protection triggers, all the current MMP orders will be canceled, new MMP orders will be rejected. Market maker can use this time to reevaluate market and modify order price.
         * @summary Set Market Maker Protection Config (TRADE)
         * @param {number} timestamp 
         * @param {string} [deltaLimit] 
         * @param {number} [frozenTimeInMilliseconds] 
         * @param {string} [qtyLimit] 
         * @param {number} [recvWindow] 
         * @param {string} [underlying] 
         * @param {number} [windowTimeInMilliseconds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsCreateMmpSetV1: async (timestamp: number, deltaLimit?: string, frozenTimeInMilliseconds?: number, qtyLimit?: string, recvWindow?: number, underlying?: string, windowTimeInMilliseconds?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('optionsCreateMmpSetV1', 'timestamp', timestamp)
            const localVarPath = `/eapi/v1/mmpSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (deltaLimit !== undefined) { 
                localVarFormParams.set('deltaLimit', deltaLimit as any);
            }
    
            if (frozenTimeInMilliseconds !== undefined) { 
                localVarFormParams.set('frozenTimeInMilliseconds', frozenTimeInMilliseconds as any);
            }
    
            if (qtyLimit !== undefined) { 
                localVarFormParams.set('qtyLimit', qtyLimit as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (underlying !== undefined) { 
                localVarFormParams.set('underlying', underlying as any);
            }
    
            if (windowTimeInMilliseconds !== undefined) { 
                localVarFormParams.set('windowTimeInMilliseconds', windowTimeInMilliseconds as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the auto-cancel parameters for each underlying symbol. Note only active auto-cancel parameters will be returned, if countdownTime is set to 0 (ie. countdownTime has been turned off), the underlying symbol and corresponding countdownTime parameter will not be returned in the response.
         * @summary Get Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
         * @param {number} timestamp 
         * @param {string} [underlying] Option underlying, e.g BTCUSDT
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetCountdownCancelAllV1: async (timestamp: number, underlying?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('optionsGetCountdownCancelAllV1', 'timestamp', timestamp)
            const localVarPath = `/eapi/v1/countdownCancelAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (underlying !== undefined) {
                localVarQueryParameter['underlying'] = underlying;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current account information.
         * @summary Option Margin Account Information (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetMarginAccountV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('optionsGetMarginAccountV1', 'timestamp', timestamp)
            const localVarPath = `/eapi/v1/marginAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get config for MMP.
         * @summary Get Market Maker Protection Config (TRADE)
         * @param {number} timestamp 
         * @param {string} [underlying] underlying, e.g BTCUSDT
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetMmpV1: async (timestamp: number, underlying?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('optionsGetMmpV1', 'timestamp', timestamp)
            const localVarPath = `/eapi/v1/mmp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (underlying !== undefined) {
                localVarQueryParameter['underlying'] = underlying;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketMakerEndpointsApi - functional programming interface
 * @export
 */
export const MarketMakerEndpointsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketMakerEndpointsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint resets the time from which the countdown will begin to the time this messaged is received.  It should be called repeatedly as heartbeats.  Multiple heartbeats can be updated at once by specifying the underlying symbols as a list (ex. BTCUSDT,ETHUSDT) in the underlyings parameter.
         * @summary Auto-Cancel All Open Orders (Kill-Switch) Heartbeat (TRADE)
         * @param {number} timestamp 
         * @param {string} underlyings 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsCreateCountdownCancelAllHeartBeatV1(timestamp: number, underlyings: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsCreateCountdownCancelAllHeartBeatV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsCreateCountdownCancelAllHeartBeatV1(timestamp, underlyings, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketMakerEndpointsApi.optionsCreateCountdownCancelAllHeartBeatV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint sets the parameters of the auto-cancel feature which cancels all open orders (both market maker protection and non market maker protection order types) of the underlying symbol at the end of the specified countdown time period if no heartbeat message is sent.  After the countdown time period, all open orders will be cancelled and new orders will be rejected with error code -2010 until either a heartbeat message is sent or the auto-cancel feature is turned off by setting countdownTime to 0.
         * @summary Set Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
         * @param {number} countdownTime 
         * @param {number} timestamp 
         * @param {string} underlying 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsCreateCountdownCancelAllV1(countdownTime: number, timestamp: number, underlying: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsCreateCountdownCancelAllV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsCreateCountdownCancelAllV1(countdownTime, timestamp, underlying, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketMakerEndpointsApi.optionsCreateCountdownCancelAllV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reset MMP, start MMP order again.
         * @summary Reset Market Maker Protection Config (TRADE)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {string} [underlying] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsCreateMmpResetV1(timestamp: number, recvWindow?: number, underlying?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsCreateMmpResetV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsCreateMmpResetV1(timestamp, recvWindow, underlying, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketMakerEndpointsApi.optionsCreateMmpResetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set config for MMP. Market Maker Protection(MMP) is a set of protection mechanism for option market maker, this mechanism is able to prevent mass trading in short period time. Once market maker\'s account branches the threshold, the Market Maker Protection will be triggered. When Market Maker Protection triggers, all the current MMP orders will be canceled, new MMP orders will be rejected. Market maker can use this time to reevaluate market and modify order price.
         * @summary Set Market Maker Protection Config (TRADE)
         * @param {number} timestamp 
         * @param {string} [deltaLimit] 
         * @param {number} [frozenTimeInMilliseconds] 
         * @param {string} [qtyLimit] 
         * @param {number} [recvWindow] 
         * @param {string} [underlying] 
         * @param {number} [windowTimeInMilliseconds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsCreateMmpSetV1(timestamp: number, deltaLimit?: string, frozenTimeInMilliseconds?: number, qtyLimit?: string, recvWindow?: number, underlying?: string, windowTimeInMilliseconds?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsCreateMmpSetV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsCreateMmpSetV1(timestamp, deltaLimit, frozenTimeInMilliseconds, qtyLimit, recvWindow, underlying, windowTimeInMilliseconds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketMakerEndpointsApi.optionsCreateMmpSetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the auto-cancel parameters for each underlying symbol. Note only active auto-cancel parameters will be returned, if countdownTime is set to 0 (ie. countdownTime has been turned off), the underlying symbol and corresponding countdownTime parameter will not be returned in the response.
         * @summary Get Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
         * @param {number} timestamp 
         * @param {string} [underlying] Option underlying, e.g BTCUSDT
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetCountdownCancelAllV1(timestamp: number, underlying?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsGetCountdownCancelAllV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetCountdownCancelAllV1(timestamp, underlying, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketMakerEndpointsApi.optionsGetCountdownCancelAllV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current account information.
         * @summary Option Margin Account Information (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetMarginAccountV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsGetMarginAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetMarginAccountV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketMakerEndpointsApi.optionsGetMarginAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get config for MMP.
         * @summary Get Market Maker Protection Config (TRADE)
         * @param {number} timestamp 
         * @param {string} [underlying] underlying, e.g BTCUSDT
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetMmpV1(timestamp: number, underlying?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsGetMmpV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetMmpV1(timestamp, underlying, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketMakerEndpointsApi.optionsGetMmpV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MarketMakerEndpointsApi - factory interface
 * @export
 */
export const MarketMakerEndpointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketMakerEndpointsApiFp(configuration)
    return {
        /**
         * This endpoint resets the time from which the countdown will begin to the time this messaged is received.  It should be called repeatedly as heartbeats.  Multiple heartbeats can be updated at once by specifying the underlying symbols as a list (ex. BTCUSDT,ETHUSDT) in the underlyings parameter.
         * @summary Auto-Cancel All Open Orders (Kill-Switch) Heartbeat (TRADE)
         * @param {MarketMakerEndpointsApiOptionsCreateCountdownCancelAllHeartBeatV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsCreateCountdownCancelAllHeartBeatV1(requestParameters: MarketMakerEndpointsApiOptionsCreateCountdownCancelAllHeartBeatV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsCreateCountdownCancelAllHeartBeatV1Resp> {
            return localVarFp.optionsCreateCountdownCancelAllHeartBeatV1(requestParameters.timestamp, requestParameters.underlyings, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint sets the parameters of the auto-cancel feature which cancels all open orders (both market maker protection and non market maker protection order types) of the underlying symbol at the end of the specified countdown time period if no heartbeat message is sent.  After the countdown time period, all open orders will be cancelled and new orders will be rejected with error code -2010 until either a heartbeat message is sent or the auto-cancel feature is turned off by setting countdownTime to 0.
         * @summary Set Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
         * @param {MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsCreateCountdownCancelAllV1(requestParameters: MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsCreateCountdownCancelAllV1Resp> {
            return localVarFp.optionsCreateCountdownCancelAllV1(requestParameters.countdownTime, requestParameters.timestamp, requestParameters.underlying, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset MMP, start MMP order again.
         * @summary Reset Market Maker Protection Config (TRADE)
         * @param {MarketMakerEndpointsApiOptionsCreateMmpResetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsCreateMmpResetV1(requestParameters: MarketMakerEndpointsApiOptionsCreateMmpResetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsCreateMmpResetV1Resp> {
            return localVarFp.optionsCreateMmpResetV1(requestParameters.timestamp, requestParameters.recvWindow, requestParameters.underlying, options).then((request) => request(axios, basePath));
        },
        /**
         * Set config for MMP. Market Maker Protection(MMP) is a set of protection mechanism for option market maker, this mechanism is able to prevent mass trading in short period time. Once market maker\'s account branches the threshold, the Market Maker Protection will be triggered. When Market Maker Protection triggers, all the current MMP orders will be canceled, new MMP orders will be rejected. Market maker can use this time to reevaluate market and modify order price.
         * @summary Set Market Maker Protection Config (TRADE)
         * @param {MarketMakerEndpointsApiOptionsCreateMmpSetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsCreateMmpSetV1(requestParameters: MarketMakerEndpointsApiOptionsCreateMmpSetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsCreateMmpSetV1Resp> {
            return localVarFp.optionsCreateMmpSetV1(requestParameters.timestamp, requestParameters.deltaLimit, requestParameters.frozenTimeInMilliseconds, requestParameters.qtyLimit, requestParameters.recvWindow, requestParameters.underlying, requestParameters.windowTimeInMilliseconds, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the auto-cancel parameters for each underlying symbol. Note only active auto-cancel parameters will be returned, if countdownTime is set to 0 (ie. countdownTime has been turned off), the underlying symbol and corresponding countdownTime parameter will not be returned in the response.
         * @summary Get Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
         * @param {MarketMakerEndpointsApiOptionsGetCountdownCancelAllV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetCountdownCancelAllV1(requestParameters: MarketMakerEndpointsApiOptionsGetCountdownCancelAllV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetCountdownCancelAllV1Resp> {
            return localVarFp.optionsGetCountdownCancelAllV1(requestParameters.timestamp, requestParameters.underlying, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current account information.
         * @summary Option Margin Account Information (USER_DATA)
         * @param {MarketMakerEndpointsApiOptionsGetMarginAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetMarginAccountV1(requestParameters: MarketMakerEndpointsApiOptionsGetMarginAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetMarginAccountV1Resp> {
            return localVarFp.optionsGetMarginAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get config for MMP.
         * @summary Get Market Maker Protection Config (TRADE)
         * @param {MarketMakerEndpointsApiOptionsGetMmpV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetMmpV1(requestParameters: MarketMakerEndpointsApiOptionsGetMmpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetMmpV1Resp> {
            return localVarFp.optionsGetMmpV1(requestParameters.timestamp, requestParameters.underlying, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketMakerEndpointsApi - interface
 * @export
 * @interface MarketMakerEndpointsApi
 */
export interface MarketMakerEndpointsApiInterface {
    /**
     * This endpoint resets the time from which the countdown will begin to the time this messaged is received.  It should be called repeatedly as heartbeats.  Multiple heartbeats can be updated at once by specifying the underlying symbols as a list (ex. BTCUSDT,ETHUSDT) in the underlyings parameter.
     * @summary Auto-Cancel All Open Orders (Kill-Switch) Heartbeat (TRADE)
     * @param {MarketMakerEndpointsApiOptionsCreateCountdownCancelAllHeartBeatV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApiInterface
     */
    optionsCreateCountdownCancelAllHeartBeatV1(requestParameters: MarketMakerEndpointsApiOptionsCreateCountdownCancelAllHeartBeatV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsCreateCountdownCancelAllHeartBeatV1Resp>;

    /**
     * This endpoint sets the parameters of the auto-cancel feature which cancels all open orders (both market maker protection and non market maker protection order types) of the underlying symbol at the end of the specified countdown time period if no heartbeat message is sent.  After the countdown time period, all open orders will be cancelled and new orders will be rejected with error code -2010 until either a heartbeat message is sent or the auto-cancel feature is turned off by setting countdownTime to 0.
     * @summary Set Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
     * @param {MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApiInterface
     */
    optionsCreateCountdownCancelAllV1(requestParameters: MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsCreateCountdownCancelAllV1Resp>;

    /**
     * Reset MMP, start MMP order again.
     * @summary Reset Market Maker Protection Config (TRADE)
     * @param {MarketMakerEndpointsApiOptionsCreateMmpResetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApiInterface
     */
    optionsCreateMmpResetV1(requestParameters: MarketMakerEndpointsApiOptionsCreateMmpResetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsCreateMmpResetV1Resp>;

    /**
     * Set config for MMP. Market Maker Protection(MMP) is a set of protection mechanism for option market maker, this mechanism is able to prevent mass trading in short period time. Once market maker\'s account branches the threshold, the Market Maker Protection will be triggered. When Market Maker Protection triggers, all the current MMP orders will be canceled, new MMP orders will be rejected. Market maker can use this time to reevaluate market and modify order price.
     * @summary Set Market Maker Protection Config (TRADE)
     * @param {MarketMakerEndpointsApiOptionsCreateMmpSetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApiInterface
     */
    optionsCreateMmpSetV1(requestParameters: MarketMakerEndpointsApiOptionsCreateMmpSetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsCreateMmpSetV1Resp>;

    /**
     * This endpoint returns the auto-cancel parameters for each underlying symbol. Note only active auto-cancel parameters will be returned, if countdownTime is set to 0 (ie. countdownTime has been turned off), the underlying symbol and corresponding countdownTime parameter will not be returned in the response.
     * @summary Get Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
     * @param {MarketMakerEndpointsApiOptionsGetCountdownCancelAllV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApiInterface
     */
    optionsGetCountdownCancelAllV1(requestParameters: MarketMakerEndpointsApiOptionsGetCountdownCancelAllV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetCountdownCancelAllV1Resp>;

    /**
     * Get current account information.
     * @summary Option Margin Account Information (USER_DATA)
     * @param {MarketMakerEndpointsApiOptionsGetMarginAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApiInterface
     */
    optionsGetMarginAccountV1(requestParameters: MarketMakerEndpointsApiOptionsGetMarginAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetMarginAccountV1Resp>;

    /**
     * Get config for MMP.
     * @summary Get Market Maker Protection Config (TRADE)
     * @param {MarketMakerEndpointsApiOptionsGetMmpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApiInterface
     */
    optionsGetMmpV1(requestParameters: MarketMakerEndpointsApiOptionsGetMmpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetMmpV1Resp>;

}

/**
 * Request parameters for optionsCreateCountdownCancelAllHeartBeatV1 operation in MarketMakerEndpointsApi.
 * @export
 * @interface MarketMakerEndpointsApiOptionsCreateCountdownCancelAllHeartBeatV1Request
 */
export interface MarketMakerEndpointsApiOptionsCreateCountdownCancelAllHeartBeatV1Request {
    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsCreateCountdownCancelAllHeartBeatV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof MarketMakerEndpointsApiOptionsCreateCountdownCancelAllHeartBeatV1
     */
    readonly underlyings: string

    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsCreateCountdownCancelAllHeartBeatV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for optionsCreateCountdownCancelAllV1 operation in MarketMakerEndpointsApi.
 * @export
 * @interface MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1Request
 */
export interface MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1Request {
    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1
     */
    readonly countdownTime: number

    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1
     */
    readonly underlying: string

    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for optionsCreateMmpResetV1 operation in MarketMakerEndpointsApi.
 * @export
 * @interface MarketMakerEndpointsApiOptionsCreateMmpResetV1Request
 */
export interface MarketMakerEndpointsApiOptionsCreateMmpResetV1Request {
    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsCreateMmpResetV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsCreateMmpResetV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof MarketMakerEndpointsApiOptionsCreateMmpResetV1
     */
    readonly underlying?: string
}

/**
 * Request parameters for optionsCreateMmpSetV1 operation in MarketMakerEndpointsApi.
 * @export
 * @interface MarketMakerEndpointsApiOptionsCreateMmpSetV1Request
 */
export interface MarketMakerEndpointsApiOptionsCreateMmpSetV1Request {
    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsCreateMmpSetV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof MarketMakerEndpointsApiOptionsCreateMmpSetV1
     */
    readonly deltaLimit?: string

    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsCreateMmpSetV1
     */
    readonly frozenTimeInMilliseconds?: number

    /**
     * 
     * @type {string}
     * @memberof MarketMakerEndpointsApiOptionsCreateMmpSetV1
     */
    readonly qtyLimit?: string

    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsCreateMmpSetV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof MarketMakerEndpointsApiOptionsCreateMmpSetV1
     */
    readonly underlying?: string

    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsCreateMmpSetV1
     */
    readonly windowTimeInMilliseconds?: number
}

/**
 * Request parameters for optionsGetCountdownCancelAllV1 operation in MarketMakerEndpointsApi.
 * @export
 * @interface MarketMakerEndpointsApiOptionsGetCountdownCancelAllV1Request
 */
export interface MarketMakerEndpointsApiOptionsGetCountdownCancelAllV1Request {
    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsGetCountdownCancelAllV1
     */
    readonly timestamp: number

    /**
     * Option underlying, e.g BTCUSDT
     * @type {string}
     * @memberof MarketMakerEndpointsApiOptionsGetCountdownCancelAllV1
     */
    readonly underlying?: string

    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsGetCountdownCancelAllV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for optionsGetMarginAccountV1 operation in MarketMakerEndpointsApi.
 * @export
 * @interface MarketMakerEndpointsApiOptionsGetMarginAccountV1Request
 */
export interface MarketMakerEndpointsApiOptionsGetMarginAccountV1Request {
    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsGetMarginAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsGetMarginAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for optionsGetMmpV1 operation in MarketMakerEndpointsApi.
 * @export
 * @interface MarketMakerEndpointsApiOptionsGetMmpV1Request
 */
export interface MarketMakerEndpointsApiOptionsGetMmpV1Request {
    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsGetMmpV1
     */
    readonly timestamp: number

    /**
     * underlying, e.g BTCUSDT
     * @type {string}
     * @memberof MarketMakerEndpointsApiOptionsGetMmpV1
     */
    readonly underlying?: string

    /**
     * 
     * @type {number}
     * @memberof MarketMakerEndpointsApiOptionsGetMmpV1
     */
    readonly recvWindow?: number
}

/**
 * MarketMakerEndpointsApi - object-oriented interface
 * @export
 * @class MarketMakerEndpointsApi
 * @extends {BaseAPI}
 */
export class MarketMakerEndpointsApi extends BaseAPI implements MarketMakerEndpointsApiInterface {
    /**
     * This endpoint resets the time from which the countdown will begin to the time this messaged is received.  It should be called repeatedly as heartbeats.  Multiple heartbeats can be updated at once by specifying the underlying symbols as a list (ex. BTCUSDT,ETHUSDT) in the underlyings parameter.
     * @summary Auto-Cancel All Open Orders (Kill-Switch) Heartbeat (TRADE)
     * @param {MarketMakerEndpointsApiOptionsCreateCountdownCancelAllHeartBeatV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApi
     */
    public optionsCreateCountdownCancelAllHeartBeatV1(requestParameters: MarketMakerEndpointsApiOptionsCreateCountdownCancelAllHeartBeatV1Request, options?: RawAxiosRequestConfig) {
        return MarketMakerEndpointsApiFp(this.configuration).optionsCreateCountdownCancelAllHeartBeatV1(requestParameters.timestamp, requestParameters.underlyings, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint sets the parameters of the auto-cancel feature which cancels all open orders (both market maker protection and non market maker protection order types) of the underlying symbol at the end of the specified countdown time period if no heartbeat message is sent.  After the countdown time period, all open orders will be cancelled and new orders will be rejected with error code -2010 until either a heartbeat message is sent or the auto-cancel feature is turned off by setting countdownTime to 0.
     * @summary Set Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
     * @param {MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApi
     */
    public optionsCreateCountdownCancelAllV1(requestParameters: MarketMakerEndpointsApiOptionsCreateCountdownCancelAllV1Request, options?: RawAxiosRequestConfig) {
        return MarketMakerEndpointsApiFp(this.configuration).optionsCreateCountdownCancelAllV1(requestParameters.countdownTime, requestParameters.timestamp, requestParameters.underlying, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset MMP, start MMP order again.
     * @summary Reset Market Maker Protection Config (TRADE)
     * @param {MarketMakerEndpointsApiOptionsCreateMmpResetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApi
     */
    public optionsCreateMmpResetV1(requestParameters: MarketMakerEndpointsApiOptionsCreateMmpResetV1Request, options?: RawAxiosRequestConfig) {
        return MarketMakerEndpointsApiFp(this.configuration).optionsCreateMmpResetV1(requestParameters.timestamp, requestParameters.recvWindow, requestParameters.underlying, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set config for MMP. Market Maker Protection(MMP) is a set of protection mechanism for option market maker, this mechanism is able to prevent mass trading in short period time. Once market maker\'s account branches the threshold, the Market Maker Protection will be triggered. When Market Maker Protection triggers, all the current MMP orders will be canceled, new MMP orders will be rejected. Market maker can use this time to reevaluate market and modify order price.
     * @summary Set Market Maker Protection Config (TRADE)
     * @param {MarketMakerEndpointsApiOptionsCreateMmpSetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApi
     */
    public optionsCreateMmpSetV1(requestParameters: MarketMakerEndpointsApiOptionsCreateMmpSetV1Request, options?: RawAxiosRequestConfig) {
        return MarketMakerEndpointsApiFp(this.configuration).optionsCreateMmpSetV1(requestParameters.timestamp, requestParameters.deltaLimit, requestParameters.frozenTimeInMilliseconds, requestParameters.qtyLimit, requestParameters.recvWindow, requestParameters.underlying, requestParameters.windowTimeInMilliseconds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the auto-cancel parameters for each underlying symbol. Note only active auto-cancel parameters will be returned, if countdownTime is set to 0 (ie. countdownTime has been turned off), the underlying symbol and corresponding countdownTime parameter will not be returned in the response.
     * @summary Get Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
     * @param {MarketMakerEndpointsApiOptionsGetCountdownCancelAllV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApi
     */
    public optionsGetCountdownCancelAllV1(requestParameters: MarketMakerEndpointsApiOptionsGetCountdownCancelAllV1Request, options?: RawAxiosRequestConfig) {
        return MarketMakerEndpointsApiFp(this.configuration).optionsGetCountdownCancelAllV1(requestParameters.timestamp, requestParameters.underlying, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current account information.
     * @summary Option Margin Account Information (USER_DATA)
     * @param {MarketMakerEndpointsApiOptionsGetMarginAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApi
     */
    public optionsGetMarginAccountV1(requestParameters: MarketMakerEndpointsApiOptionsGetMarginAccountV1Request, options?: RawAxiosRequestConfig) {
        return MarketMakerEndpointsApiFp(this.configuration).optionsGetMarginAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get config for MMP.
     * @summary Get Market Maker Protection Config (TRADE)
     * @param {MarketMakerEndpointsApiOptionsGetMmpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketMakerEndpointsApi
     */
    public optionsGetMmpV1(requestParameters: MarketMakerEndpointsApiOptionsGetMmpV1Request, options?: RawAxiosRequestConfig) {
        return MarketMakerEndpointsApiFp(this.configuration).optionsGetMmpV1(requestParameters.timestamp, requestParameters.underlying, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

