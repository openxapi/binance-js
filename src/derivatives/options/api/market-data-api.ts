/* tslint:disable */
/* eslint-disable */
/**
 * Binance Options API
 * OpenAPI specification for Binance exchange - Options API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { OptionsGetBlockTradesV1RespItem } from '../model';
// @ts-ignore
import type { OptionsGetDepthV1Resp } from '../model';
// @ts-ignore
import type { OptionsGetExchangeInfoV1Resp } from '../model';
// @ts-ignore
import type { OptionsGetExerciseHistoryV1RespItem } from '../model';
// @ts-ignore
import type { OptionsGetHistoricalTradesV1RespItem } from '../model';
// @ts-ignore
import type { OptionsGetIndexV1Resp } from '../model';
// @ts-ignore
import type { OptionsGetKlinesV1RespItem } from '../model';
// @ts-ignore
import type { OptionsGetMarkV1RespItem } from '../model';
// @ts-ignore
import type { OptionsGetOpenInterestV1RespItem } from '../model';
// @ts-ignore
import type { OptionsGetTickerV1RespItem } from '../model';
// @ts-ignore
import type { OptionsGetTimeV1Resp } from '../model';
// @ts-ignore
import type { OptionsGetTradesV1RespItem } from '../model';
/**
 * MarketDataApi - axios parameter creator
 * @export
 */
export const MarketDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get recent block trades
         * @summary Recent Block Trades List
         * @param {string} [symbol] Option trading pair, e.g. BTC-200730-9000-C
         * @param {number} [limit] Number of records; Default: 100 and Max: 500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetBlockTradesV1: async (symbol?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eapi/v1/blockTrades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check orderbook depth on specific symbol
         * @summary Order Book
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {number} [limit] Default:100 Max:1000.Optional value:[10, 20, 50, 100, 500, 1000]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetDepthV1: async (symbol: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('optionsGetDepthV1', 'symbol', symbol)
            const localVarPath = `/eapi/v1/depth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Current exchange trading rules and symbol information
         * @summary Exchange Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetExchangeInfoV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eapi/v1/exchangeInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get historical exercise records.
         * @summary Historical Exercise Records
         * @param {string} [underlying] Underlying index like BTCUSDT
         * @param {number} [startTime] Start Time
         * @param {number} [endTime] End Time
         * @param {number} [limit] Number of records Default:100 Max:100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetExerciseHistoryV1: async (underlying?: string, startTime?: number, endTime?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eapi/v1/exerciseHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (underlying !== undefined) {
                localVarQueryParameter['underlying'] = underlying;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get older market historical trades.
         * @summary Old Trades Lookup (MARKET_DATA)
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {number} [fromId] The UniqueId ID from which to return. The latest deal record is returned by default
         * @param {number} [limit] Number of records Default:100 Max:500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetHistoricalTradesV1: async (symbol: string, fromId?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('optionsGetHistoricalTradesV1', 'symbol', symbol)
            const localVarPath = `/eapi/v1/historicalTrades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['fromId'] = fromId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get spot index price for option underlying.
         * @summary Symbol Price Ticker
         * @param {string} underlying Spot pair（Option contract underlying asset, e.g BTCUSDT)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetIndexV1: async (underlying: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'underlying' is not null or undefined
            assertParamExists('optionsGetIndexV1', 'underlying', underlying)
            const localVarPath = `/eapi/v1/index`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (underlying !== undefined) {
                localVarQueryParameter['underlying'] = underlying;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Kline/candlestick bars for an option symbol. Klines are uniquely identified by their open time.
         * @summary Kline/Candlestick Data
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {string} interval Time interval
         * @param {number} [startTime] Start Time  1592317127349
         * @param {number} [endTime] End Time
         * @param {number} [limit] Number of records Default:500 Max:1500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetKlinesV1: async (symbol: string, interval: string, startTime?: number, endTime?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('optionsGetKlinesV1', 'symbol', symbol)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('optionsGetKlinesV1', 'interval', interval)
            const localVarPath = `/eapi/v1/klines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Option mark price and greek info.
         * @summary Option Mark Price
         * @param {string} [symbol] Option trading pair, e.g BTC-200730-9000-C
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetMarkV1: async (symbol?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eapi/v1/mark`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get open interest for specific underlying asset on specific expiration date.
         * @summary Open Interest
         * @param {string} underlyingAsset underlying asset, e.g ETH/BTC
         * @param {string} expiration expiration date, e.g 221225
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetOpenInterestV1: async (underlyingAsset: string, expiration: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'underlyingAsset' is not null or undefined
            assertParamExists('optionsGetOpenInterestV1', 'underlyingAsset', underlyingAsset)
            // verify required parameter 'expiration' is not null or undefined
            assertParamExists('optionsGetOpenInterestV1', 'expiration', expiration)
            const localVarPath = `/eapi/v1/openInterest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (underlyingAsset !== undefined) {
                localVarQueryParameter['underlyingAsset'] = underlyingAsset;
            }

            if (expiration !== undefined) {
                localVarQueryParameter['expiration'] = expiration;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test connectivity to the Rest API.
         * @summary Test Connectivity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetPingV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eapi/v1/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 24 hour rolling window price change statistics.
         * @summary 24hr Ticker Price Change Statistics
         * @param {string} [symbol] Option trading pair, e.g BTC-200730-9000-C
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetTickerV1: async (symbol?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eapi/v1/ticker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test connectivity to the Rest API and get the current server time.
         * @summary Check Server Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetTimeV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eapi/v1/time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recent market trades
         * @summary Recent Trades List
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {number} [limit] Number of records Default:100 Max:500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetTradesV1: async (symbol: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('optionsGetTradesV1', 'symbol', symbol)
            const localVarPath = `/eapi/v1/trades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketDataApi - functional programming interface
 * @export
 */
export const MarketDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Get recent block trades
         * @summary Recent Block Trades List
         * @param {string} [symbol] Option trading pair, e.g. BTC-200730-9000-C
         * @param {number} [limit] Number of records; Default: 100 and Max: 500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetBlockTradesV1(symbol?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptionsGetBlockTradesV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetBlockTradesV1(symbol, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetBlockTradesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Check orderbook depth on specific symbol
         * @summary Order Book
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {number} [limit] Default:100 Max:1000.Optional value:[10, 20, 50, 100, 500, 1000]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetDepthV1(symbol: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsGetDepthV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetDepthV1(symbol, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetDepthV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Current exchange trading rules and symbol information
         * @summary Exchange Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetExchangeInfoV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsGetExchangeInfoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetExchangeInfoV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetExchangeInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get historical exercise records.
         * @summary Historical Exercise Records
         * @param {string} [underlying] Underlying index like BTCUSDT
         * @param {number} [startTime] Start Time
         * @param {number} [endTime] End Time
         * @param {number} [limit] Number of records Default:100 Max:100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetExerciseHistoryV1(underlying?: string, startTime?: number, endTime?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptionsGetExerciseHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetExerciseHistoryV1(underlying, startTime, endTime, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetExerciseHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get older market historical trades.
         * @summary Old Trades Lookup (MARKET_DATA)
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {number} [fromId] The UniqueId ID from which to return. The latest deal record is returned by default
         * @param {number} [limit] Number of records Default:100 Max:500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetHistoricalTradesV1(symbol: string, fromId?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptionsGetHistoricalTradesV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetHistoricalTradesV1(symbol, fromId, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetHistoricalTradesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get spot index price for option underlying.
         * @summary Symbol Price Ticker
         * @param {string} underlying Spot pair（Option contract underlying asset, e.g BTCUSDT)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetIndexV1(underlying: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsGetIndexV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetIndexV1(underlying, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetIndexV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Kline/candlestick bars for an option symbol. Klines are uniquely identified by their open time.
         * @summary Kline/Candlestick Data
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {string} interval Time interval
         * @param {number} [startTime] Start Time  1592317127349
         * @param {number} [endTime] End Time
         * @param {number} [limit] Number of records Default:500 Max:1500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetKlinesV1(symbol: string, interval: string, startTime?: number, endTime?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptionsGetKlinesV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetKlinesV1(symbol, interval, startTime, endTime, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetKlinesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Option mark price and greek info.
         * @summary Option Mark Price
         * @param {string} [symbol] Option trading pair, e.g BTC-200730-9000-C
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetMarkV1(symbol?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptionsGetMarkV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetMarkV1(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetMarkV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get open interest for specific underlying asset on specific expiration date.
         * @summary Open Interest
         * @param {string} underlyingAsset underlying asset, e.g ETH/BTC
         * @param {string} expiration expiration date, e.g 221225
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetOpenInterestV1(underlyingAsset: string, expiration: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptionsGetOpenInterestV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetOpenInterestV1(underlyingAsset, expiration, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetOpenInterestV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test connectivity to the Rest API.
         * @summary Test Connectivity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetPingV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetPingV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetPingV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 24 hour rolling window price change statistics.
         * @summary 24hr Ticker Price Change Statistics
         * @param {string} [symbol] Option trading pair, e.g BTC-200730-9000-C
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetTickerV1(symbol?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptionsGetTickerV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetTickerV1(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetTickerV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test connectivity to the Rest API and get the current server time.
         * @summary Check Server Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetTimeV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsGetTimeV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetTimeV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetTimeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get recent market trades
         * @summary Recent Trades List
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {number} [limit] Number of records Default:100 Max:500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetTradesV1(symbol: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptionsGetTradesV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetTradesV1(symbol, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.optionsGetTradesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MarketDataApi - factory interface
 * @export
 */
export const MarketDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketDataApiFp(configuration)
    return {
        /**
         * Get recent block trades
         * @summary Recent Block Trades List
         * @param {MarketDataApiOptionsGetBlockTradesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetBlockTradesV1(requestParameters: MarketDataApiOptionsGetBlockTradesV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetBlockTradesV1RespItem>> {
            return localVarFp.optionsGetBlockTradesV1(requestParameters.symbol, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Check orderbook depth on specific symbol
         * @summary Order Book
         * @param {MarketDataApiOptionsGetDepthV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetDepthV1(requestParameters: MarketDataApiOptionsGetDepthV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetDepthV1Resp> {
            return localVarFp.optionsGetDepthV1(requestParameters.symbol, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Current exchange trading rules and symbol information
         * @summary Exchange Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetExchangeInfoV1(options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetExchangeInfoV1Resp> {
            return localVarFp.optionsGetExchangeInfoV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Get historical exercise records.
         * @summary Historical Exercise Records
         * @param {MarketDataApiOptionsGetExerciseHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetExerciseHistoryV1(requestParameters: MarketDataApiOptionsGetExerciseHistoryV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetExerciseHistoryV1RespItem>> {
            return localVarFp.optionsGetExerciseHistoryV1(requestParameters.underlying, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get older market historical trades.
         * @summary Old Trades Lookup (MARKET_DATA)
         * @param {MarketDataApiOptionsGetHistoricalTradesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetHistoricalTradesV1(requestParameters: MarketDataApiOptionsGetHistoricalTradesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetHistoricalTradesV1RespItem>> {
            return localVarFp.optionsGetHistoricalTradesV1(requestParameters.symbol, requestParameters.fromId, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get spot index price for option underlying.
         * @summary Symbol Price Ticker
         * @param {MarketDataApiOptionsGetIndexV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetIndexV1(requestParameters: MarketDataApiOptionsGetIndexV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetIndexV1Resp> {
            return localVarFp.optionsGetIndexV1(requestParameters.underlying, options).then((request) => request(axios, basePath));
        },
        /**
         * Kline/candlestick bars for an option symbol. Klines are uniquely identified by their open time.
         * @summary Kline/Candlestick Data
         * @param {MarketDataApiOptionsGetKlinesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetKlinesV1(requestParameters: MarketDataApiOptionsGetKlinesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetKlinesV1RespItem>> {
            return localVarFp.optionsGetKlinesV1(requestParameters.symbol, requestParameters.interval, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Option mark price and greek info.
         * @summary Option Mark Price
         * @param {MarketDataApiOptionsGetMarkV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetMarkV1(requestParameters: MarketDataApiOptionsGetMarkV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetMarkV1RespItem>> {
            return localVarFp.optionsGetMarkV1(requestParameters.symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get open interest for specific underlying asset on specific expiration date.
         * @summary Open Interest
         * @param {MarketDataApiOptionsGetOpenInterestV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetOpenInterestV1(requestParameters: MarketDataApiOptionsGetOpenInterestV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetOpenInterestV1RespItem>> {
            return localVarFp.optionsGetOpenInterestV1(requestParameters.underlyingAsset, requestParameters.expiration, options).then((request) => request(axios, basePath));
        },
        /**
         * Test connectivity to the Rest API.
         * @summary Test Connectivity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetPingV1(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.optionsGetPingV1(options).then((request) => request(axios, basePath));
        },
        /**
         * 24 hour rolling window price change statistics.
         * @summary 24hr Ticker Price Change Statistics
         * @param {MarketDataApiOptionsGetTickerV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetTickerV1(requestParameters: MarketDataApiOptionsGetTickerV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetTickerV1RespItem>> {
            return localVarFp.optionsGetTickerV1(requestParameters.symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Test connectivity to the Rest API and get the current server time.
         * @summary Check Server Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetTimeV1(options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetTimeV1Resp> {
            return localVarFp.optionsGetTimeV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Get recent market trades
         * @summary Recent Trades List
         * @param {MarketDataApiOptionsGetTradesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetTradesV1(requestParameters: MarketDataApiOptionsGetTradesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetTradesV1RespItem>> {
            return localVarFp.optionsGetTradesV1(requestParameters.symbol, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketDataApi - interface
 * @export
 * @interface MarketDataApi
 */
export interface MarketDataApiInterface {
    /**
     * Get recent block trades
     * @summary Recent Block Trades List
     * @param {MarketDataApiOptionsGetBlockTradesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetBlockTradesV1(requestParameters?: MarketDataApiOptionsGetBlockTradesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetBlockTradesV1RespItem>>;

    /**
     * Check orderbook depth on specific symbol
     * @summary Order Book
     * @param {MarketDataApiOptionsGetDepthV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetDepthV1(requestParameters: MarketDataApiOptionsGetDepthV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetDepthV1Resp>;

    /**
     * Current exchange trading rules and symbol information
     * @summary Exchange Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetExchangeInfoV1(options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetExchangeInfoV1Resp>;

    /**
     * Get historical exercise records.
     * @summary Historical Exercise Records
     * @param {MarketDataApiOptionsGetExerciseHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetExerciseHistoryV1(requestParameters?: MarketDataApiOptionsGetExerciseHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetExerciseHistoryV1RespItem>>;

    /**
     * Get older market historical trades.
     * @summary Old Trades Lookup (MARKET_DATA)
     * @param {MarketDataApiOptionsGetHistoricalTradesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetHistoricalTradesV1(requestParameters: MarketDataApiOptionsGetHistoricalTradesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetHistoricalTradesV1RespItem>>;

    /**
     * Get spot index price for option underlying.
     * @summary Symbol Price Ticker
     * @param {MarketDataApiOptionsGetIndexV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetIndexV1(requestParameters: MarketDataApiOptionsGetIndexV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetIndexV1Resp>;

    /**
     * Kline/candlestick bars for an option symbol. Klines are uniquely identified by their open time.
     * @summary Kline/Candlestick Data
     * @param {MarketDataApiOptionsGetKlinesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetKlinesV1(requestParameters: MarketDataApiOptionsGetKlinesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetKlinesV1RespItem>>;

    /**
     * Option mark price and greek info.
     * @summary Option Mark Price
     * @param {MarketDataApiOptionsGetMarkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetMarkV1(requestParameters?: MarketDataApiOptionsGetMarkV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetMarkV1RespItem>>;

    /**
     * Get open interest for specific underlying asset on specific expiration date.
     * @summary Open Interest
     * @param {MarketDataApiOptionsGetOpenInterestV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetOpenInterestV1(requestParameters: MarketDataApiOptionsGetOpenInterestV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetOpenInterestV1RespItem>>;

    /**
     * Test connectivity to the Rest API.
     * @summary Test Connectivity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetPingV1(options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 24 hour rolling window price change statistics.
     * @summary 24hr Ticker Price Change Statistics
     * @param {MarketDataApiOptionsGetTickerV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetTickerV1(requestParameters?: MarketDataApiOptionsGetTickerV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetTickerV1RespItem>>;

    /**
     * Test connectivity to the Rest API and get the current server time.
     * @summary Check Server Time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetTimeV1(options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetTimeV1Resp>;

    /**
     * Get recent market trades
     * @summary Recent Trades List
     * @param {MarketDataApiOptionsGetTradesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    optionsGetTradesV1(requestParameters: MarketDataApiOptionsGetTradesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetTradesV1RespItem>>;

}

/**
 * Request parameters for optionsGetBlockTradesV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiOptionsGetBlockTradesV1Request
 */
export interface MarketDataApiOptionsGetBlockTradesV1Request {
    /**
     * Option trading pair, e.g. BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiOptionsGetBlockTradesV1
     */
    readonly symbol?: string

    /**
     * Number of records; Default: 100 and Max: 500
     * @type {number}
     * @memberof MarketDataApiOptionsGetBlockTradesV1
     */
    readonly limit?: number
}

/**
 * Request parameters for optionsGetDepthV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiOptionsGetDepthV1Request
 */
export interface MarketDataApiOptionsGetDepthV1Request {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiOptionsGetDepthV1
     */
    readonly symbol: string

    /**
     * Default:100 Max:1000.Optional value:[10, 20, 50, 100, 500, 1000]
     * @type {number}
     * @memberof MarketDataApiOptionsGetDepthV1
     */
    readonly limit?: number
}

/**
 * Request parameters for optionsGetExerciseHistoryV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiOptionsGetExerciseHistoryV1Request
 */
export interface MarketDataApiOptionsGetExerciseHistoryV1Request {
    /**
     * Underlying index like BTCUSDT
     * @type {string}
     * @memberof MarketDataApiOptionsGetExerciseHistoryV1
     */
    readonly underlying?: string

    /**
     * Start Time
     * @type {number}
     * @memberof MarketDataApiOptionsGetExerciseHistoryV1
     */
    readonly startTime?: number

    /**
     * End Time
     * @type {number}
     * @memberof MarketDataApiOptionsGetExerciseHistoryV1
     */
    readonly endTime?: number

    /**
     * Number of records Default:100 Max:100
     * @type {number}
     * @memberof MarketDataApiOptionsGetExerciseHistoryV1
     */
    readonly limit?: number
}

/**
 * Request parameters for optionsGetHistoricalTradesV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiOptionsGetHistoricalTradesV1Request
 */
export interface MarketDataApiOptionsGetHistoricalTradesV1Request {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiOptionsGetHistoricalTradesV1
     */
    readonly symbol: string

    /**
     * The UniqueId ID from which to return. The latest deal record is returned by default
     * @type {number}
     * @memberof MarketDataApiOptionsGetHistoricalTradesV1
     */
    readonly fromId?: number

    /**
     * Number of records Default:100 Max:500
     * @type {number}
     * @memberof MarketDataApiOptionsGetHistoricalTradesV1
     */
    readonly limit?: number
}

/**
 * Request parameters for optionsGetIndexV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiOptionsGetIndexV1Request
 */
export interface MarketDataApiOptionsGetIndexV1Request {
    /**
     * Spot pair（Option contract underlying asset, e.g BTCUSDT)
     * @type {string}
     * @memberof MarketDataApiOptionsGetIndexV1
     */
    readonly underlying: string
}

/**
 * Request parameters for optionsGetKlinesV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiOptionsGetKlinesV1Request
 */
export interface MarketDataApiOptionsGetKlinesV1Request {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiOptionsGetKlinesV1
     */
    readonly symbol: string

    /**
     * Time interval
     * @type {string}
     * @memberof MarketDataApiOptionsGetKlinesV1
     */
    readonly interval: string

    /**
     * Start Time  1592317127349
     * @type {number}
     * @memberof MarketDataApiOptionsGetKlinesV1
     */
    readonly startTime?: number

    /**
     * End Time
     * @type {number}
     * @memberof MarketDataApiOptionsGetKlinesV1
     */
    readonly endTime?: number

    /**
     * Number of records Default:500 Max:1500
     * @type {number}
     * @memberof MarketDataApiOptionsGetKlinesV1
     */
    readonly limit?: number
}

/**
 * Request parameters for optionsGetMarkV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiOptionsGetMarkV1Request
 */
export interface MarketDataApiOptionsGetMarkV1Request {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiOptionsGetMarkV1
     */
    readonly symbol?: string
}

/**
 * Request parameters for optionsGetOpenInterestV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiOptionsGetOpenInterestV1Request
 */
export interface MarketDataApiOptionsGetOpenInterestV1Request {
    /**
     * underlying asset, e.g ETH/BTC
     * @type {string}
     * @memberof MarketDataApiOptionsGetOpenInterestV1
     */
    readonly underlyingAsset: string

    /**
     * expiration date, e.g 221225
     * @type {string}
     * @memberof MarketDataApiOptionsGetOpenInterestV1
     */
    readonly expiration: string
}

/**
 * Request parameters for optionsGetTickerV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiOptionsGetTickerV1Request
 */
export interface MarketDataApiOptionsGetTickerV1Request {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiOptionsGetTickerV1
     */
    readonly symbol?: string
}

/**
 * Request parameters for optionsGetTradesV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiOptionsGetTradesV1Request
 */
export interface MarketDataApiOptionsGetTradesV1Request {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiOptionsGetTradesV1
     */
    readonly symbol: string

    /**
     * Number of records Default:100 Max:500
     * @type {number}
     * @memberof MarketDataApiOptionsGetTradesV1
     */
    readonly limit?: number
}

/**
 * MarketDataApi - object-oriented interface
 * @export
 * @class MarketDataApi
 * @extends {BaseAPI}
 */
export class MarketDataApi extends BaseAPI implements MarketDataApiInterface {
    /**
     * Get recent block trades
     * @summary Recent Block Trades List
     * @param {MarketDataApiOptionsGetBlockTradesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetBlockTradesV1(requestParameters: MarketDataApiOptionsGetBlockTradesV1Request = {}, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetBlockTradesV1(requestParameters.symbol, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check orderbook depth on specific symbol
     * @summary Order Book
     * @param {MarketDataApiOptionsGetDepthV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetDepthV1(requestParameters: MarketDataApiOptionsGetDepthV1Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetDepthV1(requestParameters.symbol, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Current exchange trading rules and symbol information
     * @summary Exchange Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetExchangeInfoV1(options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetExchangeInfoV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get historical exercise records.
     * @summary Historical Exercise Records
     * @param {MarketDataApiOptionsGetExerciseHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetExerciseHistoryV1(requestParameters: MarketDataApiOptionsGetExerciseHistoryV1Request = {}, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetExerciseHistoryV1(requestParameters.underlying, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get older market historical trades.
     * @summary Old Trades Lookup (MARKET_DATA)
     * @param {MarketDataApiOptionsGetHistoricalTradesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetHistoricalTradesV1(requestParameters: MarketDataApiOptionsGetHistoricalTradesV1Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetHistoricalTradesV1(requestParameters.symbol, requestParameters.fromId, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get spot index price for option underlying.
     * @summary Symbol Price Ticker
     * @param {MarketDataApiOptionsGetIndexV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetIndexV1(requestParameters: MarketDataApiOptionsGetIndexV1Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetIndexV1(requestParameters.underlying, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Kline/candlestick bars for an option symbol. Klines are uniquely identified by their open time.
     * @summary Kline/Candlestick Data
     * @param {MarketDataApiOptionsGetKlinesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetKlinesV1(requestParameters: MarketDataApiOptionsGetKlinesV1Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetKlinesV1(requestParameters.symbol, requestParameters.interval, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Option mark price and greek info.
     * @summary Option Mark Price
     * @param {MarketDataApiOptionsGetMarkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetMarkV1(requestParameters: MarketDataApiOptionsGetMarkV1Request = {}, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetMarkV1(requestParameters.symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get open interest for specific underlying asset on specific expiration date.
     * @summary Open Interest
     * @param {MarketDataApiOptionsGetOpenInterestV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetOpenInterestV1(requestParameters: MarketDataApiOptionsGetOpenInterestV1Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetOpenInterestV1(requestParameters.underlyingAsset, requestParameters.expiration, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test connectivity to the Rest API.
     * @summary Test Connectivity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetPingV1(options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetPingV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 24 hour rolling window price change statistics.
     * @summary 24hr Ticker Price Change Statistics
     * @param {MarketDataApiOptionsGetTickerV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetTickerV1(requestParameters: MarketDataApiOptionsGetTickerV1Request = {}, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetTickerV1(requestParameters.symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test connectivity to the Rest API and get the current server time.
     * @summary Check Server Time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetTimeV1(options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetTimeV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get recent market trades
     * @summary Recent Trades List
     * @param {MarketDataApiOptionsGetTradesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public optionsGetTradesV1(requestParameters: MarketDataApiOptionsGetTradesV1Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).optionsGetTradesV1(requestParameters.symbol, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}

