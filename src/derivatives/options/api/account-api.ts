/* tslint:disable */
/* eslint-disable */
/**
 * Binance Options API
 * OpenAPI specification for Binance exchange - Options API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { OptionsGetAccountV1Resp } from '../model';
// @ts-ignore
import type { OptionsGetBillV1RespItem } from '../model';
// @ts-ignore
import type { OptionsGetIncomeAsynIdV1Resp } from '../model';
// @ts-ignore
import type { OptionsGetIncomeAsynV1Resp } from '../model';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get current account information.
         * @summary Option Account Information(TRADE)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetAccountV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('optionsGetAccountV1', 'timestamp', timestamp)
            const localVarPath = `/eapi/v1/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query account funding flows.
         * @summary Account Funding Flow (USER_DATA)
         * @param {string} currency Asset type, only support USDT  as of now
         * @param {number} timestamp 
         * @param {number} [recordId] Return the recordId and subsequent data, the latest data is returned by default, e.g 100000
         * @param {number} [startTime] Start Time, e.g 1593511200000
         * @param {number} [endTime] End Time, e.g 1593512200000
         * @param {number} [limit] Number of result sets returned Default:100 Max:1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetBillV1: async (currency: string, timestamp: number, recordId?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('optionsGetBillV1', 'currency', currency)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('optionsGetBillV1', 'timestamp', timestamp)
            const localVarPath = `/eapi/v1/bill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (recordId !== undefined) {
                localVarQueryParameter['recordId'] = recordId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get option transaction history download Link by Id
         * @summary Get Option Transaction History Download Link by Id (USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetIncomeAsynIdV1: async (downloadId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('optionsGetIncomeAsynIdV1', 'downloadId', downloadId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('optionsGetIncomeAsynIdV1', 'timestamp', timestamp)
            const localVarPath = `/eapi/v1/income/asyn/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (downloadId !== undefined) {
                localVarQueryParameter['downloadId'] = downloadId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get download id for option transaction history
         * @summary Get Download Id For Option Transaction History (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetIncomeAsynV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eapi/v1/income/asyn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Get current account information.
         * @summary Option Account Information(TRADE)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetAccountV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsGetAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetAccountV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.optionsGetAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query account funding flows.
         * @summary Account Funding Flow (USER_DATA)
         * @param {string} currency Asset type, only support USDT  as of now
         * @param {number} timestamp 
         * @param {number} [recordId] Return the recordId and subsequent data, the latest data is returned by default, e.g 100000
         * @param {number} [startTime] Start Time, e.g 1593511200000
         * @param {number} [endTime] End Time, e.g 1593512200000
         * @param {number} [limit] Number of result sets returned Default:100 Max:1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetBillV1(currency: string, timestamp: number, recordId?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptionsGetBillV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetBillV1(currency, timestamp, recordId, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.optionsGetBillV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get option transaction history download Link by Id
         * @summary Get Option Transaction History Download Link by Id (USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetIncomeAsynIdV1(downloadId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsGetIncomeAsynIdV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetIncomeAsynIdV1(downloadId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.optionsGetIncomeAsynIdV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get download id for option transaction history
         * @summary Get Download Id For Option Transaction History (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsGetIncomeAsynV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptionsGetIncomeAsynV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsGetIncomeAsynV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.optionsGetIncomeAsynV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * Get current account information.
         * @summary Option Account Information(TRADE)
         * @param {AccountApiOptionsGetAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetAccountV1(requestParameters: AccountApiOptionsGetAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetAccountV1Resp> {
            return localVarFp.optionsGetAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query account funding flows.
         * @summary Account Funding Flow (USER_DATA)
         * @param {AccountApiOptionsGetBillV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetBillV1(requestParameters: AccountApiOptionsGetBillV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetBillV1RespItem>> {
            return localVarFp.optionsGetBillV1(requestParameters.currency, requestParameters.timestamp, requestParameters.recordId, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get option transaction history download Link by Id
         * @summary Get Option Transaction History Download Link by Id (USER_DATA)
         * @param {AccountApiOptionsGetIncomeAsynIdV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetIncomeAsynIdV1(requestParameters: AccountApiOptionsGetIncomeAsynIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetIncomeAsynIdV1Resp> {
            return localVarFp.optionsGetIncomeAsynIdV1(requestParameters.downloadId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get download id for option transaction history
         * @summary Get Download Id For Option Transaction History (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsGetIncomeAsynV1(options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetIncomeAsynV1Resp> {
            return localVarFp.optionsGetIncomeAsynV1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - interface
 * @export
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Get current account information.
     * @summary Option Account Information(TRADE)
     * @param {AccountApiOptionsGetAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    optionsGetAccountV1(requestParameters: AccountApiOptionsGetAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetAccountV1Resp>;

    /**
     * Query account funding flows.
     * @summary Account Funding Flow (USER_DATA)
     * @param {AccountApiOptionsGetBillV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    optionsGetBillV1(requestParameters: AccountApiOptionsGetBillV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<OptionsGetBillV1RespItem>>;

    /**
     * Get option transaction history download Link by Id
     * @summary Get Option Transaction History Download Link by Id (USER_DATA)
     * @param {AccountApiOptionsGetIncomeAsynIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    optionsGetIncomeAsynIdV1(requestParameters: AccountApiOptionsGetIncomeAsynIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetIncomeAsynIdV1Resp>;

    /**
     * Get download id for option transaction history
     * @summary Get Download Id For Option Transaction History (USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    optionsGetIncomeAsynV1(options?: RawAxiosRequestConfig): AxiosPromise<OptionsGetIncomeAsynV1Resp>;

}

/**
 * Request parameters for optionsGetAccountV1 operation in AccountApi.
 * @export
 * @interface AccountApiOptionsGetAccountV1Request
 */
export interface AccountApiOptionsGetAccountV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiOptionsGetAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiOptionsGetAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for optionsGetBillV1 operation in AccountApi.
 * @export
 * @interface AccountApiOptionsGetBillV1Request
 */
export interface AccountApiOptionsGetBillV1Request {
    /**
     * Asset type, only support USDT  as of now
     * @type {string}
     * @memberof AccountApiOptionsGetBillV1
     */
    readonly currency: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiOptionsGetBillV1
     */
    readonly timestamp: number

    /**
     * Return the recordId and subsequent data, the latest data is returned by default, e.g 100000
     * @type {number}
     * @memberof AccountApiOptionsGetBillV1
     */
    readonly recordId?: number

    /**
     * Start Time, e.g 1593511200000
     * @type {number}
     * @memberof AccountApiOptionsGetBillV1
     */
    readonly startTime?: number

    /**
     * End Time, e.g 1593512200000
     * @type {number}
     * @memberof AccountApiOptionsGetBillV1
     */
    readonly endTime?: number

    /**
     * Number of result sets returned Default:100 Max:1000
     * @type {number}
     * @memberof AccountApiOptionsGetBillV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiOptionsGetBillV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for optionsGetIncomeAsynIdV1 operation in AccountApi.
 * @export
 * @interface AccountApiOptionsGetIncomeAsynIdV1Request
 */
export interface AccountApiOptionsGetIncomeAsynIdV1Request {
    /**
     * get by download id api
     * @type {string}
     * @memberof AccountApiOptionsGetIncomeAsynIdV1
     */
    readonly downloadId: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiOptionsGetIncomeAsynIdV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiOptionsGetIncomeAsynIdV1
     */
    readonly recvWindow?: number
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI implements AccountApiInterface {
    /**
     * Get current account information.
     * @summary Option Account Information(TRADE)
     * @param {AccountApiOptionsGetAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public optionsGetAccountV1(requestParameters: AccountApiOptionsGetAccountV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).optionsGetAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query account funding flows.
     * @summary Account Funding Flow (USER_DATA)
     * @param {AccountApiOptionsGetBillV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public optionsGetBillV1(requestParameters: AccountApiOptionsGetBillV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).optionsGetBillV1(requestParameters.currency, requestParameters.timestamp, requestParameters.recordId, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get option transaction history download Link by Id
     * @summary Get Option Transaction History Download Link by Id (USER_DATA)
     * @param {AccountApiOptionsGetIncomeAsynIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public optionsGetIncomeAsynIdV1(requestParameters: AccountApiOptionsGetIncomeAsynIdV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).optionsGetIncomeAsynIdV1(requestParameters.downloadId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get download id for option transaction history
     * @summary Get Download Id For Option Transaction History (USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public optionsGetIncomeAsynV1(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).optionsGetIncomeAsynV1(options).then((request) => request(this.axios, this.basePath));
    }
}

