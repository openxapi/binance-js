/* tslint:disable */
/* eslint-disable */
/**
 * Binance USD-M Futures API
 * OpenAPI specification for Binance exchange - Umfutures API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { UmfuturesCreateFeeBurnV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetAccountConfigV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetAccountV2Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetAccountV3Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetApiTradingStatusV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetBalanceV2RespItem } from '../model';
// @ts-ignore
import type { UmfuturesGetBalanceV3RespItem } from '../model';
// @ts-ignore
import type { UmfuturesGetCommissionRateV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetFeeBurnV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetIncomeAsynIdV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetIncomeAsynV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetIncomeV1RespItem } from '../model';
// @ts-ignore
import type { UmfuturesGetLeverageBracketV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetMultiAssetsMarginV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetOrderAsynIdV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetOrderAsynV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetPositionSideDualV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetRateLimitOrderV1RespItem } from '../model';
// @ts-ignore
import type { UmfuturesGetSymbolConfigV1RespItem } from '../model';
// @ts-ignore
import type { UmfuturesGetTradeAsynIdV1Resp } from '../model';
// @ts-ignore
import type { UmfuturesGetTradeAsynV1Resp } from '../model';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change user\'s BNB Fee Discount (Fee Discount On or Fee Discount Off ) on EVERY symbol
         * @summary Toggle BNB Burn On Futures Trade (TRADE)
         * @param {string} feeBurn 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesCreateFeeBurnV1: async (feeBurn: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feeBurn' is not null or undefined
            assertParamExists('umfuturesCreateFeeBurnV1', 'feeBurn', feeBurn)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesCreateFeeBurnV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/feeBurn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (feeBurn !== undefined) { 
                localVarFormParams.set('feeBurn', feeBurn as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query account configuration
         * @summary Futures Account Configuration(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetAccountConfigV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetAccountConfigV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/accountConfig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
         * @summary Account Information V2(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetAccountV2: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetAccountV2', 'timestamp', timestamp)
            const localVarPath = `/fapi/v2/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
         * @summary Account Information V3(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetAccountV3: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetAccountV3', 'timestamp', timestamp)
            const localVarPath = `/fapi/v3/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Futures trading quantitative rules indicators, for more information on this, please refer to the Futures Trading Quantitative Rules
         * @summary Futures Trading Quantitative Rules Indicators (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetApiTradingStatusV1: async (timestamp: number, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetApiTradingStatusV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/apiTradingStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query account balance info
         * @summary Futures Account Balance V2 (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetBalanceV2: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetBalanceV2', 'timestamp', timestamp)
            const localVarPath = `/fapi/v2/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query account balance info
         * @summary Futures Account Balance V3 (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetBalanceV3: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetBalanceV3', 'timestamp', timestamp)
            const localVarPath = `/fapi/v3/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get User Commission Rate
         * @summary User Commission Rate (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetCommissionRateV1: async (symbol: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('umfuturesGetCommissionRateV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetCommissionRateV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/commissionRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s BNB Fee Discount (Fee Discount On or Fee Discount Off )
         * @summary Get BNB Burn Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetFeeBurnV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetFeeBurnV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/feeBurn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get futures transaction history download link by Id
         * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetIncomeAsynIdV1: async (downloadId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('umfuturesGetIncomeAsynIdV1', 'downloadId', downloadId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetIncomeAsynIdV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/income/asyn/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (downloadId !== undefined) {
                localVarQueryParameter['downloadId'] = downloadId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get download id for futures transaction history
         * @summary Get Download Id For Futures Transaction History(USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetIncomeAsynV1: async (startTime: number, endTime: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('umfuturesGetIncomeAsynV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('umfuturesGetIncomeAsynV1', 'endTime', endTime)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetIncomeAsynV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/income/asyn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query income history
         * @summary Get Income History (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {string} [incomeType] TRANSFER, WELCOME_BONUS, REALIZED_PNL, FUNDING_FEE, COMMISSION, INSURANCE_CLEAR, REFERRAL_KICKBACK, COMMISSION_REBATE, API_REBATE, CONTEST_REWARD, CROSS_COLLATERAL_TRANSFER, OPTIONS_PREMIUM_FEE, OPTIONS_SETTLE_PROFIT, INTERNAL_TRANSFER, AUTO_EXCHANGE, DELIVERED_SETTELMENT, COIN_SWAP_DEPOSIT, COIN_SWAP_WITHDRAW, POSITION_LIMIT_INCREASE_FEE, STRATEGY_UMFUTURES_TRANSFER，FEE_RETURN，BFUSD_REWARD
         * @param {number} [startTime] Timestamp in ms to get funding from INCLUSIVE.
         * @param {number} [endTime] Timestamp in ms to get funding until INCLUSIVE.
         * @param {number} [page] 
         * @param {number} [limit] Default 100; max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetIncomeV1: async (timestamp: number, symbol?: string, incomeType?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetIncomeV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/income`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (incomeType !== undefined) {
                localVarQueryParameter['incomeType'] = incomeType;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query user notional and leverage bracket on speicfic symbol
         * @summary Notional and Leverage Brackets (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetLeverageBracketV1: async (timestamp: number, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetLeverageBracketV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/leverageBracket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on Every symbol
         * @summary Get Current Multi-Assets Mode (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetMultiAssetsMarginV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetMultiAssetsMarginV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/multiAssetsMargin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get futures order history download link by Id
         * @summary Get Futures Order History Download Link by Id (USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetOrderAsynIdV1: async (downloadId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('umfuturesGetOrderAsynIdV1', 'downloadId', downloadId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetOrderAsynIdV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/order/asyn/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (downloadId !== undefined) {
                localVarQueryParameter['downloadId'] = downloadId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Download Id For Futures Order History
         * @summary Get Download Id For Futures Order History (USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetOrderAsynV1: async (startTime: number, endTime: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('umfuturesGetOrderAsynV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('umfuturesGetOrderAsynV1', 'endTime', endTime)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetOrderAsynV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/order/asyn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s position mode (Hedge Mode or One-way Mode ) on EVERY symbol
         * @summary Get Current Position Mode(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetPositionSideDualV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetPositionSideDualV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/positionSide/dual`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query User Rate Limit
         * @summary Query User Rate Limit (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetRateLimitOrderV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetRateLimitOrderV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/rateLimit/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current account symbol configuration.
         * @summary Symbol Configuration(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetSymbolConfigV1: async (timestamp: number, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetSymbolConfigV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/symbolConfig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get futures trade download link by Id
         * @summary Get Futures Trade Download Link by Id(USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetTradeAsynIdV1: async (downloadId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('umfuturesGetTradeAsynIdV1', 'downloadId', downloadId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetTradeAsynIdV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/trade/asyn/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (downloadId !== undefined) {
                localVarQueryParameter['downloadId'] = downloadId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get download id for futures trade history
         * @summary Get Download Id For Futures Trade History (USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetTradeAsynV1: async (startTime: number, endTime: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('umfuturesGetTradeAsynV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('umfuturesGetTradeAsynV1', 'endTime', endTime)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('umfuturesGetTradeAsynV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/trade/asyn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Change user\'s BNB Fee Discount (Fee Discount On or Fee Discount Off ) on EVERY symbol
         * @summary Toggle BNB Burn On Futures Trade (TRADE)
         * @param {string} feeBurn 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesCreateFeeBurnV1(feeBurn: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesCreateFeeBurnV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesCreateFeeBurnV1(feeBurn, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesCreateFeeBurnV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query account configuration
         * @summary Futures Account Configuration(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetAccountConfigV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetAccountConfigV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetAccountConfigV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetAccountConfigV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
         * @summary Account Information V2(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetAccountV2(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetAccountV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetAccountV2(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetAccountV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
         * @summary Account Information V3(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetAccountV3(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetAccountV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetAccountV3(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetAccountV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Futures trading quantitative rules indicators, for more information on this, please refer to the Futures Trading Quantitative Rules
         * @summary Futures Trading Quantitative Rules Indicators (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetApiTradingStatusV1(timestamp: number, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetApiTradingStatusV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetApiTradingStatusV1(timestamp, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetApiTradingStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query account balance info
         * @summary Futures Account Balance V2 (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetBalanceV2(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UmfuturesGetBalanceV2RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetBalanceV2(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetBalanceV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query account balance info
         * @summary Futures Account Balance V3 (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetBalanceV3(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UmfuturesGetBalanceV3RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetBalanceV3(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetBalanceV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get User Commission Rate
         * @summary User Commission Rate (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetCommissionRateV1(symbol: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetCommissionRateV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetCommissionRateV1(symbol, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetCommissionRateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user\'s BNB Fee Discount (Fee Discount On or Fee Discount Off )
         * @summary Get BNB Burn Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetFeeBurnV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetFeeBurnV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetFeeBurnV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetFeeBurnV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get futures transaction history download link by Id
         * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetIncomeAsynIdV1(downloadId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetIncomeAsynIdV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetIncomeAsynIdV1(downloadId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetIncomeAsynIdV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get download id for futures transaction history
         * @summary Get Download Id For Futures Transaction History(USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetIncomeAsynV1(startTime: number, endTime: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetIncomeAsynV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetIncomeAsynV1(startTime, endTime, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetIncomeAsynV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query income history
         * @summary Get Income History (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {string} [incomeType] TRANSFER, WELCOME_BONUS, REALIZED_PNL, FUNDING_FEE, COMMISSION, INSURANCE_CLEAR, REFERRAL_KICKBACK, COMMISSION_REBATE, API_REBATE, CONTEST_REWARD, CROSS_COLLATERAL_TRANSFER, OPTIONS_PREMIUM_FEE, OPTIONS_SETTLE_PROFIT, INTERNAL_TRANSFER, AUTO_EXCHANGE, DELIVERED_SETTELMENT, COIN_SWAP_DEPOSIT, COIN_SWAP_WITHDRAW, POSITION_LIMIT_INCREASE_FEE, STRATEGY_UMFUTURES_TRANSFER，FEE_RETURN，BFUSD_REWARD
         * @param {number} [startTime] Timestamp in ms to get funding from INCLUSIVE.
         * @param {number} [endTime] Timestamp in ms to get funding until INCLUSIVE.
         * @param {number} [page] 
         * @param {number} [limit] Default 100; max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetIncomeV1(timestamp: number, symbol?: string, incomeType?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UmfuturesGetIncomeV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetIncomeV1(timestamp, symbol, incomeType, startTime, endTime, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetIncomeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query user notional and leverage bracket on speicfic symbol
         * @summary Notional and Leverage Brackets (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetLeverageBracketV1(timestamp: number, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetLeverageBracketV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetLeverageBracketV1(timestamp, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetLeverageBracketV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user\'s Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on Every symbol
         * @summary Get Current Multi-Assets Mode (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetMultiAssetsMarginV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetMultiAssetsMarginV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetMultiAssetsMarginV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetMultiAssetsMarginV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get futures order history download link by Id
         * @summary Get Futures Order History Download Link by Id (USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetOrderAsynIdV1(downloadId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetOrderAsynIdV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetOrderAsynIdV1(downloadId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetOrderAsynIdV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Download Id For Futures Order History
         * @summary Get Download Id For Futures Order History (USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetOrderAsynV1(startTime: number, endTime: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetOrderAsynV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetOrderAsynV1(startTime, endTime, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetOrderAsynV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user\'s position mode (Hedge Mode or One-way Mode ) on EVERY symbol
         * @summary Get Current Position Mode(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetPositionSideDualV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetPositionSideDualV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetPositionSideDualV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetPositionSideDualV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query User Rate Limit
         * @summary Query User Rate Limit (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetRateLimitOrderV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UmfuturesGetRateLimitOrderV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetRateLimitOrderV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetRateLimitOrderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current account symbol configuration.
         * @summary Symbol Configuration(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetSymbolConfigV1(timestamp: number, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UmfuturesGetSymbolConfigV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetSymbolConfigV1(timestamp, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetSymbolConfigV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get futures trade download link by Id
         * @summary Get Futures Trade Download Link by Id(USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetTradeAsynIdV1(downloadId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetTradeAsynIdV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetTradeAsynIdV1(downloadId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetTradeAsynIdV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get download id for futures trade history
         * @summary Get Download Id For Futures Trade History (USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async umfuturesGetTradeAsynV1(startTime: number, endTime: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UmfuturesGetTradeAsynV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.umfuturesGetTradeAsynV1(startTime, endTime, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.umfuturesGetTradeAsynV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * Change user\'s BNB Fee Discount (Fee Discount On or Fee Discount Off ) on EVERY symbol
         * @summary Toggle BNB Burn On Futures Trade (TRADE)
         * @param {AccountApiUmfuturesCreateFeeBurnV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesCreateFeeBurnV1(requestParameters: AccountApiUmfuturesCreateFeeBurnV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesCreateFeeBurnV1Resp> {
            return localVarFp.umfuturesCreateFeeBurnV1(requestParameters.feeBurn, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query account configuration
         * @summary Futures Account Configuration(USER_DATA)
         * @param {AccountApiUmfuturesGetAccountConfigV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetAccountConfigV1(requestParameters: AccountApiUmfuturesGetAccountConfigV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetAccountConfigV1Resp> {
            return localVarFp.umfuturesGetAccountConfigV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
         * @summary Account Information V2(USER_DATA)
         * @param {AccountApiUmfuturesGetAccountV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetAccountV2(requestParameters: AccountApiUmfuturesGetAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetAccountV2Resp> {
            return localVarFp.umfuturesGetAccountV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
         * @summary Account Information V3(USER_DATA)
         * @param {AccountApiUmfuturesGetAccountV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetAccountV3(requestParameters: AccountApiUmfuturesGetAccountV3Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetAccountV3Resp> {
            return localVarFp.umfuturesGetAccountV3(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Futures trading quantitative rules indicators, for more information on this, please refer to the Futures Trading Quantitative Rules
         * @summary Futures Trading Quantitative Rules Indicators (USER_DATA)
         * @param {AccountApiUmfuturesGetApiTradingStatusV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetApiTradingStatusV1(requestParameters: AccountApiUmfuturesGetApiTradingStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetApiTradingStatusV1Resp> {
            return localVarFp.umfuturesGetApiTradingStatusV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query account balance info
         * @summary Futures Account Balance V2 (USER_DATA)
         * @param {AccountApiUmfuturesGetBalanceV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetBalanceV2(requestParameters: AccountApiUmfuturesGetBalanceV2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<UmfuturesGetBalanceV2RespItem>> {
            return localVarFp.umfuturesGetBalanceV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query account balance info
         * @summary Futures Account Balance V3 (USER_DATA)
         * @param {AccountApiUmfuturesGetBalanceV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetBalanceV3(requestParameters: AccountApiUmfuturesGetBalanceV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<UmfuturesGetBalanceV3RespItem>> {
            return localVarFp.umfuturesGetBalanceV3(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get User Commission Rate
         * @summary User Commission Rate (USER_DATA)
         * @param {AccountApiUmfuturesGetCommissionRateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetCommissionRateV1(requestParameters: AccountApiUmfuturesGetCommissionRateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetCommissionRateV1Resp> {
            return localVarFp.umfuturesGetCommissionRateV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s BNB Fee Discount (Fee Discount On or Fee Discount Off )
         * @summary Get BNB Burn Status (USER_DATA)
         * @param {AccountApiUmfuturesGetFeeBurnV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetFeeBurnV1(requestParameters: AccountApiUmfuturesGetFeeBurnV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetFeeBurnV1Resp> {
            return localVarFp.umfuturesGetFeeBurnV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get futures transaction history download link by Id
         * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
         * @param {AccountApiUmfuturesGetIncomeAsynIdV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetIncomeAsynIdV1(requestParameters: AccountApiUmfuturesGetIncomeAsynIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetIncomeAsynIdV1Resp> {
            return localVarFp.umfuturesGetIncomeAsynIdV1(requestParameters.downloadId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get download id for futures transaction history
         * @summary Get Download Id For Futures Transaction History(USER_DATA)
         * @param {AccountApiUmfuturesGetIncomeAsynV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetIncomeAsynV1(requestParameters: AccountApiUmfuturesGetIncomeAsynV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetIncomeAsynV1Resp> {
            return localVarFp.umfuturesGetIncomeAsynV1(requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query income history
         * @summary Get Income History (USER_DATA)
         * @param {AccountApiUmfuturesGetIncomeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetIncomeV1(requestParameters: AccountApiUmfuturesGetIncomeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<UmfuturesGetIncomeV1RespItem>> {
            return localVarFp.umfuturesGetIncomeV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.incomeType, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query user notional and leverage bracket on speicfic symbol
         * @summary Notional and Leverage Brackets (USER_DATA)
         * @param {AccountApiUmfuturesGetLeverageBracketV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetLeverageBracketV1(requestParameters: AccountApiUmfuturesGetLeverageBracketV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetLeverageBracketV1Resp> {
            return localVarFp.umfuturesGetLeverageBracketV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on Every symbol
         * @summary Get Current Multi-Assets Mode (USER_DATA)
         * @param {AccountApiUmfuturesGetMultiAssetsMarginV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetMultiAssetsMarginV1(requestParameters: AccountApiUmfuturesGetMultiAssetsMarginV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetMultiAssetsMarginV1Resp> {
            return localVarFp.umfuturesGetMultiAssetsMarginV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get futures order history download link by Id
         * @summary Get Futures Order History Download Link by Id (USER_DATA)
         * @param {AccountApiUmfuturesGetOrderAsynIdV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetOrderAsynIdV1(requestParameters: AccountApiUmfuturesGetOrderAsynIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetOrderAsynIdV1Resp> {
            return localVarFp.umfuturesGetOrderAsynIdV1(requestParameters.downloadId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Download Id For Futures Order History
         * @summary Get Download Id For Futures Order History (USER_DATA)
         * @param {AccountApiUmfuturesGetOrderAsynV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetOrderAsynV1(requestParameters: AccountApiUmfuturesGetOrderAsynV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetOrderAsynV1Resp> {
            return localVarFp.umfuturesGetOrderAsynV1(requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s position mode (Hedge Mode or One-way Mode ) on EVERY symbol
         * @summary Get Current Position Mode(USER_DATA)
         * @param {AccountApiUmfuturesGetPositionSideDualV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetPositionSideDualV1(requestParameters: AccountApiUmfuturesGetPositionSideDualV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetPositionSideDualV1Resp> {
            return localVarFp.umfuturesGetPositionSideDualV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query User Rate Limit
         * @summary Query User Rate Limit (USER_DATA)
         * @param {AccountApiUmfuturesGetRateLimitOrderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetRateLimitOrderV1(requestParameters: AccountApiUmfuturesGetRateLimitOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<UmfuturesGetRateLimitOrderV1RespItem>> {
            return localVarFp.umfuturesGetRateLimitOrderV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current account symbol configuration.
         * @summary Symbol Configuration(USER_DATA)
         * @param {AccountApiUmfuturesGetSymbolConfigV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetSymbolConfigV1(requestParameters: AccountApiUmfuturesGetSymbolConfigV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<UmfuturesGetSymbolConfigV1RespItem>> {
            return localVarFp.umfuturesGetSymbolConfigV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get futures trade download link by Id
         * @summary Get Futures Trade Download Link by Id(USER_DATA)
         * @param {AccountApiUmfuturesGetTradeAsynIdV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetTradeAsynIdV1(requestParameters: AccountApiUmfuturesGetTradeAsynIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetTradeAsynIdV1Resp> {
            return localVarFp.umfuturesGetTradeAsynIdV1(requestParameters.downloadId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get download id for futures trade history
         * @summary Get Download Id For Futures Trade History (USER_DATA)
         * @param {AccountApiUmfuturesGetTradeAsynV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        umfuturesGetTradeAsynV1(requestParameters: AccountApiUmfuturesGetTradeAsynV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetTradeAsynV1Resp> {
            return localVarFp.umfuturesGetTradeAsynV1(requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - interface
 * @export
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Change user\'s BNB Fee Discount (Fee Discount On or Fee Discount Off ) on EVERY symbol
     * @summary Toggle BNB Burn On Futures Trade (TRADE)
     * @param {AccountApiUmfuturesCreateFeeBurnV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesCreateFeeBurnV1(requestParameters: AccountApiUmfuturesCreateFeeBurnV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesCreateFeeBurnV1Resp>;

    /**
     * Query account configuration
     * @summary Futures Account Configuration(USER_DATA)
     * @param {AccountApiUmfuturesGetAccountConfigV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetAccountConfigV1(requestParameters: AccountApiUmfuturesGetAccountConfigV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetAccountConfigV1Resp>;

    /**
     * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
     * @summary Account Information V2(USER_DATA)
     * @param {AccountApiUmfuturesGetAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetAccountV2(requestParameters: AccountApiUmfuturesGetAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetAccountV2Resp>;

    /**
     * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
     * @summary Account Information V3(USER_DATA)
     * @param {AccountApiUmfuturesGetAccountV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetAccountV3(requestParameters: AccountApiUmfuturesGetAccountV3Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetAccountV3Resp>;

    /**
     * Futures trading quantitative rules indicators, for more information on this, please refer to the Futures Trading Quantitative Rules
     * @summary Futures Trading Quantitative Rules Indicators (USER_DATA)
     * @param {AccountApiUmfuturesGetApiTradingStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetApiTradingStatusV1(requestParameters: AccountApiUmfuturesGetApiTradingStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetApiTradingStatusV1Resp>;

    /**
     * Query account balance info
     * @summary Futures Account Balance V2 (USER_DATA)
     * @param {AccountApiUmfuturesGetBalanceV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetBalanceV2(requestParameters: AccountApiUmfuturesGetBalanceV2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<UmfuturesGetBalanceV2RespItem>>;

    /**
     * Query account balance info
     * @summary Futures Account Balance V3 (USER_DATA)
     * @param {AccountApiUmfuturesGetBalanceV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetBalanceV3(requestParameters: AccountApiUmfuturesGetBalanceV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<UmfuturesGetBalanceV3RespItem>>;

    /**
     * Get User Commission Rate
     * @summary User Commission Rate (USER_DATA)
     * @param {AccountApiUmfuturesGetCommissionRateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetCommissionRateV1(requestParameters: AccountApiUmfuturesGetCommissionRateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetCommissionRateV1Resp>;

    /**
     * Get user\'s BNB Fee Discount (Fee Discount On or Fee Discount Off )
     * @summary Get BNB Burn Status (USER_DATA)
     * @param {AccountApiUmfuturesGetFeeBurnV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetFeeBurnV1(requestParameters: AccountApiUmfuturesGetFeeBurnV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetFeeBurnV1Resp>;

    /**
     * Get futures transaction history download link by Id
     * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
     * @param {AccountApiUmfuturesGetIncomeAsynIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetIncomeAsynIdV1(requestParameters: AccountApiUmfuturesGetIncomeAsynIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetIncomeAsynIdV1Resp>;

    /**
     * Get download id for futures transaction history
     * @summary Get Download Id For Futures Transaction History(USER_DATA)
     * @param {AccountApiUmfuturesGetIncomeAsynV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetIncomeAsynV1(requestParameters: AccountApiUmfuturesGetIncomeAsynV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetIncomeAsynV1Resp>;

    /**
     * Query income history
     * @summary Get Income History (USER_DATA)
     * @param {AccountApiUmfuturesGetIncomeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetIncomeV1(requestParameters: AccountApiUmfuturesGetIncomeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<UmfuturesGetIncomeV1RespItem>>;

    /**
     * Query user notional and leverage bracket on speicfic symbol
     * @summary Notional and Leverage Brackets (USER_DATA)
     * @param {AccountApiUmfuturesGetLeverageBracketV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetLeverageBracketV1(requestParameters: AccountApiUmfuturesGetLeverageBracketV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetLeverageBracketV1Resp>;

    /**
     * Get user\'s Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on Every symbol
     * @summary Get Current Multi-Assets Mode (USER_DATA)
     * @param {AccountApiUmfuturesGetMultiAssetsMarginV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetMultiAssetsMarginV1(requestParameters: AccountApiUmfuturesGetMultiAssetsMarginV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetMultiAssetsMarginV1Resp>;

    /**
     * Get futures order history download link by Id
     * @summary Get Futures Order History Download Link by Id (USER_DATA)
     * @param {AccountApiUmfuturesGetOrderAsynIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetOrderAsynIdV1(requestParameters: AccountApiUmfuturesGetOrderAsynIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetOrderAsynIdV1Resp>;

    /**
     * Get Download Id For Futures Order History
     * @summary Get Download Id For Futures Order History (USER_DATA)
     * @param {AccountApiUmfuturesGetOrderAsynV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetOrderAsynV1(requestParameters: AccountApiUmfuturesGetOrderAsynV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetOrderAsynV1Resp>;

    /**
     * Get user\'s position mode (Hedge Mode or One-way Mode ) on EVERY symbol
     * @summary Get Current Position Mode(USER_DATA)
     * @param {AccountApiUmfuturesGetPositionSideDualV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetPositionSideDualV1(requestParameters: AccountApiUmfuturesGetPositionSideDualV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetPositionSideDualV1Resp>;

    /**
     * Query User Rate Limit
     * @summary Query User Rate Limit (USER_DATA)
     * @param {AccountApiUmfuturesGetRateLimitOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetRateLimitOrderV1(requestParameters: AccountApiUmfuturesGetRateLimitOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<UmfuturesGetRateLimitOrderV1RespItem>>;

    /**
     * Get current account symbol configuration.
     * @summary Symbol Configuration(USER_DATA)
     * @param {AccountApiUmfuturesGetSymbolConfigV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetSymbolConfigV1(requestParameters: AccountApiUmfuturesGetSymbolConfigV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<UmfuturesGetSymbolConfigV1RespItem>>;

    /**
     * Get futures trade download link by Id
     * @summary Get Futures Trade Download Link by Id(USER_DATA)
     * @param {AccountApiUmfuturesGetTradeAsynIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetTradeAsynIdV1(requestParameters: AccountApiUmfuturesGetTradeAsynIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetTradeAsynIdV1Resp>;

    /**
     * Get download id for futures trade history
     * @summary Get Download Id For Futures Trade History (USER_DATA)
     * @param {AccountApiUmfuturesGetTradeAsynV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    umfuturesGetTradeAsynV1(requestParameters: AccountApiUmfuturesGetTradeAsynV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UmfuturesGetTradeAsynV1Resp>;

}

/**
 * Request parameters for umfuturesCreateFeeBurnV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesCreateFeeBurnV1Request
 */
export interface AccountApiUmfuturesCreateFeeBurnV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiUmfuturesCreateFeeBurnV1
     */
    readonly feeBurn: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesCreateFeeBurnV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesCreateFeeBurnV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetAccountConfigV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetAccountConfigV1Request
 */
export interface AccountApiUmfuturesGetAccountConfigV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetAccountConfigV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetAccountConfigV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetAccountV2 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetAccountV2Request
 */
export interface AccountApiUmfuturesGetAccountV2Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetAccountV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetAccountV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetAccountV3 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetAccountV3Request
 */
export interface AccountApiUmfuturesGetAccountV3Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetAccountV3
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetAccountV3
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetApiTradingStatusV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetApiTradingStatusV1Request
 */
export interface AccountApiUmfuturesGetApiTradingStatusV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetApiTradingStatusV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiUmfuturesGetApiTradingStatusV1
     */
    readonly symbol?: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetApiTradingStatusV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetBalanceV2 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetBalanceV2Request
 */
export interface AccountApiUmfuturesGetBalanceV2Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetBalanceV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetBalanceV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetBalanceV3 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetBalanceV3Request
 */
export interface AccountApiUmfuturesGetBalanceV3Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetBalanceV3
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetBalanceV3
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetCommissionRateV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetCommissionRateV1Request
 */
export interface AccountApiUmfuturesGetCommissionRateV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiUmfuturesGetCommissionRateV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetCommissionRateV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetCommissionRateV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetFeeBurnV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetFeeBurnV1Request
 */
export interface AccountApiUmfuturesGetFeeBurnV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetFeeBurnV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetFeeBurnV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetIncomeAsynIdV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetIncomeAsynIdV1Request
 */
export interface AccountApiUmfuturesGetIncomeAsynIdV1Request {
    /**
     * get by download id api
     * @type {string}
     * @memberof AccountApiUmfuturesGetIncomeAsynIdV1
     */
    readonly downloadId: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeAsynIdV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeAsynIdV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetIncomeAsynV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetIncomeAsynV1Request
 */
export interface AccountApiUmfuturesGetIncomeAsynV1Request {
    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeAsynV1
     */
    readonly startTime: number

    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeAsynV1
     */
    readonly endTime: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeAsynV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeAsynV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetIncomeV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetIncomeV1Request
 */
export interface AccountApiUmfuturesGetIncomeV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiUmfuturesGetIncomeV1
     */
    readonly symbol?: string

    /**
     * TRANSFER, WELCOME_BONUS, REALIZED_PNL, FUNDING_FEE, COMMISSION, INSURANCE_CLEAR, REFERRAL_KICKBACK, COMMISSION_REBATE, API_REBATE, CONTEST_REWARD, CROSS_COLLATERAL_TRANSFER, OPTIONS_PREMIUM_FEE, OPTIONS_SETTLE_PROFIT, INTERNAL_TRANSFER, AUTO_EXCHANGE, DELIVERED_SETTELMENT, COIN_SWAP_DEPOSIT, COIN_SWAP_WITHDRAW, POSITION_LIMIT_INCREASE_FEE, STRATEGY_UMFUTURES_TRANSFER，FEE_RETURN，BFUSD_REWARD
     * @type {string}
     * @memberof AccountApiUmfuturesGetIncomeV1
     */
    readonly incomeType?: string

    /**
     * Timestamp in ms to get funding from INCLUSIVE.
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeV1
     */
    readonly startTime?: number

    /**
     * Timestamp in ms to get funding until INCLUSIVE.
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeV1
     */
    readonly page?: number

    /**
     * Default 100; max 1000
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetIncomeV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetLeverageBracketV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetLeverageBracketV1Request
 */
export interface AccountApiUmfuturesGetLeverageBracketV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetLeverageBracketV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiUmfuturesGetLeverageBracketV1
     */
    readonly symbol?: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetLeverageBracketV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetMultiAssetsMarginV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetMultiAssetsMarginV1Request
 */
export interface AccountApiUmfuturesGetMultiAssetsMarginV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetMultiAssetsMarginV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetMultiAssetsMarginV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetOrderAsynIdV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetOrderAsynIdV1Request
 */
export interface AccountApiUmfuturesGetOrderAsynIdV1Request {
    /**
     * get by download id api
     * @type {string}
     * @memberof AccountApiUmfuturesGetOrderAsynIdV1
     */
    readonly downloadId: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetOrderAsynIdV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetOrderAsynIdV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetOrderAsynV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetOrderAsynV1Request
 */
export interface AccountApiUmfuturesGetOrderAsynV1Request {
    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiUmfuturesGetOrderAsynV1
     */
    readonly startTime: number

    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiUmfuturesGetOrderAsynV1
     */
    readonly endTime: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetOrderAsynV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetOrderAsynV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetPositionSideDualV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetPositionSideDualV1Request
 */
export interface AccountApiUmfuturesGetPositionSideDualV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetPositionSideDualV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetPositionSideDualV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetRateLimitOrderV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetRateLimitOrderV1Request
 */
export interface AccountApiUmfuturesGetRateLimitOrderV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetRateLimitOrderV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetRateLimitOrderV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetSymbolConfigV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetSymbolConfigV1Request
 */
export interface AccountApiUmfuturesGetSymbolConfigV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetSymbolConfigV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiUmfuturesGetSymbolConfigV1
     */
    readonly symbol?: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetSymbolConfigV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetTradeAsynIdV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetTradeAsynIdV1Request
 */
export interface AccountApiUmfuturesGetTradeAsynIdV1Request {
    /**
     * get by download id api
     * @type {string}
     * @memberof AccountApiUmfuturesGetTradeAsynIdV1
     */
    readonly downloadId: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetTradeAsynIdV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetTradeAsynIdV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for umfuturesGetTradeAsynV1 operation in AccountApi.
 * @export
 * @interface AccountApiUmfuturesGetTradeAsynV1Request
 */
export interface AccountApiUmfuturesGetTradeAsynV1Request {
    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiUmfuturesGetTradeAsynV1
     */
    readonly startTime: number

    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiUmfuturesGetTradeAsynV1
     */
    readonly endTime: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetTradeAsynV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiUmfuturesGetTradeAsynV1
     */
    readonly recvWindow?: number
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI implements AccountApiInterface {
    /**
     * Change user\'s BNB Fee Discount (Fee Discount On or Fee Discount Off ) on EVERY symbol
     * @summary Toggle BNB Burn On Futures Trade (TRADE)
     * @param {AccountApiUmfuturesCreateFeeBurnV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesCreateFeeBurnV1(requestParameters: AccountApiUmfuturesCreateFeeBurnV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesCreateFeeBurnV1(requestParameters.feeBurn, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query account configuration
     * @summary Futures Account Configuration(USER_DATA)
     * @param {AccountApiUmfuturesGetAccountConfigV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetAccountConfigV1(requestParameters: AccountApiUmfuturesGetAccountConfigV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetAccountConfigV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
     * @summary Account Information V2(USER_DATA)
     * @param {AccountApiUmfuturesGetAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetAccountV2(requestParameters: AccountApiUmfuturesGetAccountV2Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetAccountV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
     * @summary Account Information V3(USER_DATA)
     * @param {AccountApiUmfuturesGetAccountV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetAccountV3(requestParameters: AccountApiUmfuturesGetAccountV3Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetAccountV3(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Futures trading quantitative rules indicators, for more information on this, please refer to the Futures Trading Quantitative Rules
     * @summary Futures Trading Quantitative Rules Indicators (USER_DATA)
     * @param {AccountApiUmfuturesGetApiTradingStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetApiTradingStatusV1(requestParameters: AccountApiUmfuturesGetApiTradingStatusV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetApiTradingStatusV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query account balance info
     * @summary Futures Account Balance V2 (USER_DATA)
     * @param {AccountApiUmfuturesGetBalanceV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetBalanceV2(requestParameters: AccountApiUmfuturesGetBalanceV2Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetBalanceV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query account balance info
     * @summary Futures Account Balance V3 (USER_DATA)
     * @param {AccountApiUmfuturesGetBalanceV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetBalanceV3(requestParameters: AccountApiUmfuturesGetBalanceV3Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetBalanceV3(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get User Commission Rate
     * @summary User Commission Rate (USER_DATA)
     * @param {AccountApiUmfuturesGetCommissionRateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetCommissionRateV1(requestParameters: AccountApiUmfuturesGetCommissionRateV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetCommissionRateV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s BNB Fee Discount (Fee Discount On or Fee Discount Off )
     * @summary Get BNB Burn Status (USER_DATA)
     * @param {AccountApiUmfuturesGetFeeBurnV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetFeeBurnV1(requestParameters: AccountApiUmfuturesGetFeeBurnV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetFeeBurnV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get futures transaction history download link by Id
     * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
     * @param {AccountApiUmfuturesGetIncomeAsynIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetIncomeAsynIdV1(requestParameters: AccountApiUmfuturesGetIncomeAsynIdV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetIncomeAsynIdV1(requestParameters.downloadId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get download id for futures transaction history
     * @summary Get Download Id For Futures Transaction History(USER_DATA)
     * @param {AccountApiUmfuturesGetIncomeAsynV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetIncomeAsynV1(requestParameters: AccountApiUmfuturesGetIncomeAsynV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetIncomeAsynV1(requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query income history
     * @summary Get Income History (USER_DATA)
     * @param {AccountApiUmfuturesGetIncomeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetIncomeV1(requestParameters: AccountApiUmfuturesGetIncomeV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetIncomeV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.incomeType, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query user notional and leverage bracket on speicfic symbol
     * @summary Notional and Leverage Brackets (USER_DATA)
     * @param {AccountApiUmfuturesGetLeverageBracketV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetLeverageBracketV1(requestParameters: AccountApiUmfuturesGetLeverageBracketV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetLeverageBracketV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on Every symbol
     * @summary Get Current Multi-Assets Mode (USER_DATA)
     * @param {AccountApiUmfuturesGetMultiAssetsMarginV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetMultiAssetsMarginV1(requestParameters: AccountApiUmfuturesGetMultiAssetsMarginV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetMultiAssetsMarginV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get futures order history download link by Id
     * @summary Get Futures Order History Download Link by Id (USER_DATA)
     * @param {AccountApiUmfuturesGetOrderAsynIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetOrderAsynIdV1(requestParameters: AccountApiUmfuturesGetOrderAsynIdV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetOrderAsynIdV1(requestParameters.downloadId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Download Id For Futures Order History
     * @summary Get Download Id For Futures Order History (USER_DATA)
     * @param {AccountApiUmfuturesGetOrderAsynV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetOrderAsynV1(requestParameters: AccountApiUmfuturesGetOrderAsynV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetOrderAsynV1(requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s position mode (Hedge Mode or One-way Mode ) on EVERY symbol
     * @summary Get Current Position Mode(USER_DATA)
     * @param {AccountApiUmfuturesGetPositionSideDualV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetPositionSideDualV1(requestParameters: AccountApiUmfuturesGetPositionSideDualV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetPositionSideDualV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query User Rate Limit
     * @summary Query User Rate Limit (USER_DATA)
     * @param {AccountApiUmfuturesGetRateLimitOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetRateLimitOrderV1(requestParameters: AccountApiUmfuturesGetRateLimitOrderV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetRateLimitOrderV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current account symbol configuration.
     * @summary Symbol Configuration(USER_DATA)
     * @param {AccountApiUmfuturesGetSymbolConfigV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetSymbolConfigV1(requestParameters: AccountApiUmfuturesGetSymbolConfigV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetSymbolConfigV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get futures trade download link by Id
     * @summary Get Futures Trade Download Link by Id(USER_DATA)
     * @param {AccountApiUmfuturesGetTradeAsynIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetTradeAsynIdV1(requestParameters: AccountApiUmfuturesGetTradeAsynIdV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetTradeAsynIdV1(requestParameters.downloadId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get download id for futures trade history
     * @summary Get Download Id For Futures Trade History (USER_DATA)
     * @param {AccountApiUmfuturesGetTradeAsynV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public umfuturesGetTradeAsynV1(requestParameters: AccountApiUmfuturesGetTradeAsynV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).umfuturesGetTradeAsynV1(requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

