/* tslint:disable */
/* eslint-disable */
/**
 * Binance Algorithmic Trading API
 * OpenAPI specification for Binance exchange - Algo API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { AlgoCreateAlgoSpotNewOrderTwapV1Resp } from '../model';
// @ts-ignore
import type { AlgoDeleteAlgoSpotOrderV1Resp } from '../model';
// @ts-ignore
import type { AlgoGetAlgoSpotHistoricalOrdersV1Resp } from '../model';
// @ts-ignore
import type { AlgoGetAlgoSpotOpenOrdersV1Resp } from '../model';
// @ts-ignore
import type { AlgoGetAlgoSpotSubOrdersV1Resp } from '../model';
/**
 * SpotAlgoApi - axios parameter creator
 * @export
 */
export const SpotAlgoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Place a new spot TWAP order with Algo service.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {number} duration 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoCreateAlgoSpotNewOrderTwapV1: async (duration: number, quantity: string, side: string, symbol: string, timestamp: number, clientAlgoId?: string, limitPrice?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'duration' is not null or undefined
            assertParamExists('algoCreateAlgoSpotNewOrderTwapV1', 'duration', duration)
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('algoCreateAlgoSpotNewOrderTwapV1', 'quantity', quantity)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('algoCreateAlgoSpotNewOrderTwapV1', 'side', side)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('algoCreateAlgoSpotNewOrderTwapV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('algoCreateAlgoSpotNewOrderTwapV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/spot/newOrderTwap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (clientAlgoId !== undefined) { 
                localVarFormParams.set('clientAlgoId', clientAlgoId as any);
            }
    
            if (duration !== undefined) { 
                localVarFormParams.set('duration', duration as any);
            }
    
            if (limitPrice !== undefined) { 
                localVarFormParams.set('limitPrice', limitPrice as any);
            }
    
            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.set('side', side as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an open TWAP order
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId eg. 14511
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoDeleteAlgoSpotOrderV1: async (algoId: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('algoDeleteAlgoSpotOrderV1', 'algoId', algoId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('algoDeleteAlgoSpotOrderV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/spot/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all historical SPOT TWAP orders
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] Trading symbol eg. BTCUSDT
         * @param {string} [side] BUY or SELL
         * @param {number} [startTime] in milliseconds  eg.1641522717552
         * @param {number} [endTime] in milliseconds  eg.1641522526562
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoSpotHistoricalOrdersV1: async (timestamp: number, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('algoGetAlgoSpotHistoricalOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/spot/historicalOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all open SPOT TWAP orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoSpotOpenOrdersV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('algoGetAlgoSpotOpenOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/spot/openOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {number} algoId 
         * @param {number} timestamp 
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoSpotSubOrdersV1: async (algoId: number, timestamp: number, page?: number, pageSize?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('algoGetAlgoSpotSubOrdersV1', 'algoId', algoId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('algoGetAlgoSpotSubOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/spot/subOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpotAlgoApi - functional programming interface
 * @export
 */
export const SpotAlgoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpotAlgoApiAxiosParamCreator(configuration)
    return {
        /**
         * Place a new spot TWAP order with Algo service.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {number} duration 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async algoCreateAlgoSpotNewOrderTwapV1(duration: number, quantity: string, side: string, symbol: string, timestamp: number, clientAlgoId?: string, limitPrice?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgoCreateAlgoSpotNewOrderTwapV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.algoCreateAlgoSpotNewOrderTwapV1(duration, quantity, side, symbol, timestamp, clientAlgoId, limitPrice, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotAlgoApi.algoCreateAlgoSpotNewOrderTwapV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancel an open TWAP order
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId eg. 14511
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async algoDeleteAlgoSpotOrderV1(algoId: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgoDeleteAlgoSpotOrderV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.algoDeleteAlgoSpotOrderV1(algoId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotAlgoApi.algoDeleteAlgoSpotOrderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all historical SPOT TWAP orders
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] Trading symbol eg. BTCUSDT
         * @param {string} [side] BUY or SELL
         * @param {number} [startTime] in milliseconds  eg.1641522717552
         * @param {number} [endTime] in milliseconds  eg.1641522526562
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async algoGetAlgoSpotHistoricalOrdersV1(timestamp: number, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgoGetAlgoSpotHistoricalOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.algoGetAlgoSpotHistoricalOrdersV1(timestamp, symbol, side, startTime, endTime, page, pageSize, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotAlgoApi.algoGetAlgoSpotHistoricalOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all open SPOT TWAP orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async algoGetAlgoSpotOpenOrdersV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgoGetAlgoSpotOpenOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.algoGetAlgoSpotOpenOrdersV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotAlgoApi.algoGetAlgoSpotOpenOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {number} algoId 
         * @param {number} timestamp 
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async algoGetAlgoSpotSubOrdersV1(algoId: number, timestamp: number, page?: number, pageSize?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgoGetAlgoSpotSubOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.algoGetAlgoSpotSubOrdersV1(algoId, timestamp, page, pageSize, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotAlgoApi.algoGetAlgoSpotSubOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpotAlgoApi - factory interface
 * @export
 */
export const SpotAlgoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpotAlgoApiFp(configuration)
    return {
        /**
         * Place a new spot TWAP order with Algo service.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoCreateAlgoSpotNewOrderTwapV1(requestParameters: SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoCreateAlgoSpotNewOrderTwapV1Resp> {
            return localVarFp.algoCreateAlgoSpotNewOrderTwapV1(requestParameters.duration, requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.clientAlgoId, requestParameters.limitPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel an open TWAP order
         * @summary Cancel Algo Order(TRADE)
         * @param {SpotAlgoApiAlgoDeleteAlgoSpotOrderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoDeleteAlgoSpotOrderV1(requestParameters: SpotAlgoApiAlgoDeleteAlgoSpotOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoDeleteAlgoSpotOrderV1Resp> {
            return localVarFp.algoDeleteAlgoSpotOrderV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all historical SPOT TWAP orders
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoSpotHistoricalOrdersV1(requestParameters: SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoSpotHistoricalOrdersV1Resp> {
            return localVarFp.algoGetAlgoSpotHistoricalOrdersV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.side, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all open SPOT TWAP orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {SpotAlgoApiAlgoGetAlgoSpotOpenOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoSpotOpenOrdersV1(requestParameters: SpotAlgoApiAlgoGetAlgoSpotOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoSpotOpenOrdersV1Resp> {
            return localVarFp.algoGetAlgoSpotOpenOrdersV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoSpotSubOrdersV1(requestParameters: SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoSpotSubOrdersV1Resp> {
            return localVarFp.algoGetAlgoSpotSubOrdersV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpotAlgoApi - interface
 * @export
 * @interface SpotAlgoApi
 */
export interface SpotAlgoApiInterface {
    /**
     * Place a new spot TWAP order with Algo service.
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApiInterface
     */
    algoCreateAlgoSpotNewOrderTwapV1(requestParameters: SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoCreateAlgoSpotNewOrderTwapV1Resp>;

    /**
     * Cancel an open TWAP order
     * @summary Cancel Algo Order(TRADE)
     * @param {SpotAlgoApiAlgoDeleteAlgoSpotOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApiInterface
     */
    algoDeleteAlgoSpotOrderV1(requestParameters: SpotAlgoApiAlgoDeleteAlgoSpotOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoDeleteAlgoSpotOrderV1Resp>;

    /**
     * Get all historical SPOT TWAP orders
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApiInterface
     */
    algoGetAlgoSpotHistoricalOrdersV1(requestParameters: SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoSpotHistoricalOrdersV1Resp>;

    /**
     * Get all open SPOT TWAP orders
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {SpotAlgoApiAlgoGetAlgoSpotOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApiInterface
     */
    algoGetAlgoSpotOpenOrdersV1(requestParameters: SpotAlgoApiAlgoGetAlgoSpotOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoSpotOpenOrdersV1Resp>;

    /**
     * Get respective sub orders for a specified algoId
     * @summary Query Sub Orders(USER_DATA)
     * @param {SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApiInterface
     */
    algoGetAlgoSpotSubOrdersV1(requestParameters: SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoSpotSubOrdersV1Resp>;

}

/**
 * Request parameters for algoCreateAlgoSpotNewOrderTwapV1 operation in SpotAlgoApi.
 * @export
 * @interface SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1Request
 */
export interface SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1Request {
    /**
     * 
     * @type {number}
     * @memberof SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1
     */
    readonly duration: number

    /**
     * 
     * @type {string}
     * @memberof SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1
     */
    readonly quantity: string

    /**
     * 
     * @type {string}
     * @memberof SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1
     */
    readonly side: string

    /**
     * 
     * @type {string}
     * @memberof SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1
     */
    readonly clientAlgoId?: string

    /**
     * 
     * @type {string}
     * @memberof SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1
     */
    readonly limitPrice?: string
}

/**
 * Request parameters for algoDeleteAlgoSpotOrderV1 operation in SpotAlgoApi.
 * @export
 * @interface SpotAlgoApiAlgoDeleteAlgoSpotOrderV1Request
 */
export interface SpotAlgoApiAlgoDeleteAlgoSpotOrderV1Request {
    /**
     * eg. 14511
     * @type {number}
     * @memberof SpotAlgoApiAlgoDeleteAlgoSpotOrderV1
     */
    readonly algoId: number

    /**
     * 
     * @type {number}
     * @memberof SpotAlgoApiAlgoDeleteAlgoSpotOrderV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SpotAlgoApiAlgoDeleteAlgoSpotOrderV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for algoGetAlgoSpotHistoricalOrdersV1 operation in SpotAlgoApi.
 * @export
 * @interface SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1Request
 */
export interface SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1
     */
    readonly timestamp: number

    /**
     * Trading symbol eg. BTCUSDT
     * @type {string}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1
     */
    readonly symbol?: string

    /**
     * BUY or SELL
     * @type {string}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1
     */
    readonly side?: string

    /**
     * in milliseconds  eg.1641522717552
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1
     */
    readonly startTime?: number

    /**
     * in milliseconds  eg.1641522526562
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1
     */
    readonly endTime?: number

    /**
     * Default is 1
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1
     */
    readonly page?: number

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for algoGetAlgoSpotOpenOrdersV1 operation in SpotAlgoApi.
 * @export
 * @interface SpotAlgoApiAlgoGetAlgoSpotOpenOrdersV1Request
 */
export interface SpotAlgoApiAlgoGetAlgoSpotOpenOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotOpenOrdersV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotOpenOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for algoGetAlgoSpotSubOrdersV1 operation in SpotAlgoApi.
 * @export
 * @interface SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1Request
 */
export interface SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1
     */
    readonly algoId: number

    /**
     * 
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1
     */
    readonly timestamp: number

    /**
     * Default is 1
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1
     */
    readonly page?: number

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * SpotAlgoApi - object-oriented interface
 * @export
 * @class SpotAlgoApi
 * @extends {BaseAPI}
 */
export class SpotAlgoApi extends BaseAPI implements SpotAlgoApiInterface {
    /**
     * Place a new spot TWAP order with Algo service.
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApi
     */
    public algoCreateAlgoSpotNewOrderTwapV1(requestParameters: SpotAlgoApiAlgoCreateAlgoSpotNewOrderTwapV1Request, options?: RawAxiosRequestConfig) {
        return SpotAlgoApiFp(this.configuration).algoCreateAlgoSpotNewOrderTwapV1(requestParameters.duration, requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.clientAlgoId, requestParameters.limitPrice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel an open TWAP order
     * @summary Cancel Algo Order(TRADE)
     * @param {SpotAlgoApiAlgoDeleteAlgoSpotOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApi
     */
    public algoDeleteAlgoSpotOrderV1(requestParameters: SpotAlgoApiAlgoDeleteAlgoSpotOrderV1Request, options?: RawAxiosRequestConfig) {
        return SpotAlgoApiFp(this.configuration).algoDeleteAlgoSpotOrderV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all historical SPOT TWAP orders
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApi
     */
    public algoGetAlgoSpotHistoricalOrdersV1(requestParameters: SpotAlgoApiAlgoGetAlgoSpotHistoricalOrdersV1Request, options?: RawAxiosRequestConfig) {
        return SpotAlgoApiFp(this.configuration).algoGetAlgoSpotHistoricalOrdersV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.side, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all open SPOT TWAP orders
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {SpotAlgoApiAlgoGetAlgoSpotOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApi
     */
    public algoGetAlgoSpotOpenOrdersV1(requestParameters: SpotAlgoApiAlgoGetAlgoSpotOpenOrdersV1Request, options?: RawAxiosRequestConfig) {
        return SpotAlgoApiFp(this.configuration).algoGetAlgoSpotOpenOrdersV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get respective sub orders for a specified algoId
     * @summary Query Sub Orders(USER_DATA)
     * @param {SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApi
     */
    public algoGetAlgoSpotSubOrdersV1(requestParameters: SpotAlgoApiAlgoGetAlgoSpotSubOrdersV1Request, options?: RawAxiosRequestConfig) {
        return SpotAlgoApiFp(this.configuration).algoGetAlgoSpotSubOrdersV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

