/* tslint:disable */
/* eslint-disable */
/**
 * Binance Algorithmic Trading API
 * OpenAPI specification for Binance exchange - Algo API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { AlgoCreateAlgoFuturesNewOrderTwapV1Resp } from '../model';
// @ts-ignore
import type { AlgoCreateAlgoFuturesNewOrderVpV1Resp } from '../model';
// @ts-ignore
import type { AlgoDeleteAlgoFuturesOrderV1Resp } from '../model';
// @ts-ignore
import type { AlgoGetAlgoFuturesHistoricalOrdersV1Resp } from '../model';
// @ts-ignore
import type { AlgoGetAlgoFuturesOpenOrdersV1Resp } from '../model';
// @ts-ignore
import type { AlgoGetAlgoFuturesSubOrdersV1Resp } from '../model';
/**
 * FutureAlgoApi - axios parameter creator
 * @export
 */
export const FutureAlgoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Send in a Twap new order. Only support on USDⓈ-M Contracts.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {number} duration 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {string} [positionSide] 
         * @param {number} [recvWindow] 
         * @param {boolean} [reduceOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoCreateAlgoFuturesNewOrderTwapV1: async (duration: number, quantity: string, side: string, symbol: string, timestamp: number, clientAlgoId?: string, limitPrice?: string, positionSide?: string, recvWindow?: number, reduceOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'duration' is not null or undefined
            assertParamExists('algoCreateAlgoFuturesNewOrderTwapV1', 'duration', duration)
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('algoCreateAlgoFuturesNewOrderTwapV1', 'quantity', quantity)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('algoCreateAlgoFuturesNewOrderTwapV1', 'side', side)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('algoCreateAlgoFuturesNewOrderTwapV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('algoCreateAlgoFuturesNewOrderTwapV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/futures/newOrderTwap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (clientAlgoId !== undefined) { 
                localVarFormParams.set('clientAlgoId', clientAlgoId as any);
            }
    
            if (duration !== undefined) { 
                localVarFormParams.set('duration', duration as any);
            }
    
            if (limitPrice !== undefined) { 
                localVarFormParams.set('limitPrice', limitPrice as any);
            }
    
            if (positionSide !== undefined) { 
                localVarFormParams.set('positionSide', positionSide as any);
            }
    
            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (reduceOnly !== undefined) { 
                localVarFormParams.set('reduceOnly', reduceOnly as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.set('side', side as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send in a VP new order. Only support on USDⓈ-M Contracts.
         * @summary Volume Participation(VP) New Order (TRADE)
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} urgency 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {string} [positionSide] 
         * @param {number} [recvWindow] 
         * @param {boolean} [reduceOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoCreateAlgoFuturesNewOrderVpV1: async (quantity: string, side: string, symbol: string, timestamp: number, urgency: string, clientAlgoId?: string, limitPrice?: string, positionSide?: string, recvWindow?: number, reduceOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('algoCreateAlgoFuturesNewOrderVpV1', 'quantity', quantity)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('algoCreateAlgoFuturesNewOrderVpV1', 'side', side)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('algoCreateAlgoFuturesNewOrderVpV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('algoCreateAlgoFuturesNewOrderVpV1', 'timestamp', timestamp)
            // verify required parameter 'urgency' is not null or undefined
            assertParamExists('algoCreateAlgoFuturesNewOrderVpV1', 'urgency', urgency)
            const localVarPath = `/sapi/v1/algo/futures/newOrderVp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (clientAlgoId !== undefined) { 
                localVarFormParams.set('clientAlgoId', clientAlgoId as any);
            }
    
            if (limitPrice !== undefined) { 
                localVarFormParams.set('limitPrice', limitPrice as any);
            }
    
            if (positionSide !== undefined) { 
                localVarFormParams.set('positionSide', positionSide as any);
            }
    
            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (reduceOnly !== undefined) { 
                localVarFormParams.set('reduceOnly', reduceOnly as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.set('side', side as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (urgency !== undefined) { 
                localVarFormParams.set('urgency', urgency as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an active order.
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId eg. 14511
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoDeleteAlgoFuturesOrderV1: async (algoId: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('algoDeleteAlgoFuturesOrderV1', 'algoId', algoId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('algoDeleteAlgoFuturesOrderV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/futures/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Historical Algo Order
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] Trading symbol eg. BTCUSDT
         * @param {string} [side] BUY or SELL
         * @param {number} [startTime] in milliseconds  eg.1641522717552
         * @param {number} [endTime] in milliseconds  eg.1641522526562
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoFuturesHistoricalOrdersV1: async (timestamp: number, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('algoGetAlgoFuturesHistoricalOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/futures/historicalOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Current Algo Open Orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoFuturesOpenOrdersV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('algoGetAlgoFuturesOpenOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/futures/openOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {number} algoId 
         * @param {number} timestamp 
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoFuturesSubOrdersV1: async (algoId: number, timestamp: number, page?: number, pageSize?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('algoGetAlgoFuturesSubOrdersV1', 'algoId', algoId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('algoGetAlgoFuturesSubOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/futures/subOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FutureAlgoApi - functional programming interface
 * @export
 */
export const FutureAlgoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FutureAlgoApiAxiosParamCreator(configuration)
    return {
        /**
         * Send in a Twap new order. Only support on USDⓈ-M Contracts.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {number} duration 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {string} [positionSide] 
         * @param {number} [recvWindow] 
         * @param {boolean} [reduceOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async algoCreateAlgoFuturesNewOrderTwapV1(duration: number, quantity: string, side: string, symbol: string, timestamp: number, clientAlgoId?: string, limitPrice?: string, positionSide?: string, recvWindow?: number, reduceOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgoCreateAlgoFuturesNewOrderTwapV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.algoCreateAlgoFuturesNewOrderTwapV1(duration, quantity, side, symbol, timestamp, clientAlgoId, limitPrice, positionSide, recvWindow, reduceOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FutureAlgoApi.algoCreateAlgoFuturesNewOrderTwapV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send in a VP new order. Only support on USDⓈ-M Contracts.
         * @summary Volume Participation(VP) New Order (TRADE)
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} urgency 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {string} [positionSide] 
         * @param {number} [recvWindow] 
         * @param {boolean} [reduceOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async algoCreateAlgoFuturesNewOrderVpV1(quantity: string, side: string, symbol: string, timestamp: number, urgency: string, clientAlgoId?: string, limitPrice?: string, positionSide?: string, recvWindow?: number, reduceOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgoCreateAlgoFuturesNewOrderVpV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.algoCreateAlgoFuturesNewOrderVpV1(quantity, side, symbol, timestamp, urgency, clientAlgoId, limitPrice, positionSide, recvWindow, reduceOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FutureAlgoApi.algoCreateAlgoFuturesNewOrderVpV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancel an active order.
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId eg. 14511
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async algoDeleteAlgoFuturesOrderV1(algoId: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgoDeleteAlgoFuturesOrderV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.algoDeleteAlgoFuturesOrderV1(algoId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FutureAlgoApi.algoDeleteAlgoFuturesOrderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Historical Algo Order
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] Trading symbol eg. BTCUSDT
         * @param {string} [side] BUY or SELL
         * @param {number} [startTime] in milliseconds  eg.1641522717552
         * @param {number} [endTime] in milliseconds  eg.1641522526562
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async algoGetAlgoFuturesHistoricalOrdersV1(timestamp: number, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgoGetAlgoFuturesHistoricalOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.algoGetAlgoFuturesHistoricalOrdersV1(timestamp, symbol, side, startTime, endTime, page, pageSize, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FutureAlgoApi.algoGetAlgoFuturesHistoricalOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Current Algo Open Orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async algoGetAlgoFuturesOpenOrdersV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgoGetAlgoFuturesOpenOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.algoGetAlgoFuturesOpenOrdersV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FutureAlgoApi.algoGetAlgoFuturesOpenOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {number} algoId 
         * @param {number} timestamp 
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async algoGetAlgoFuturesSubOrdersV1(algoId: number, timestamp: number, page?: number, pageSize?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgoGetAlgoFuturesSubOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.algoGetAlgoFuturesSubOrdersV1(algoId, timestamp, page, pageSize, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FutureAlgoApi.algoGetAlgoFuturesSubOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FutureAlgoApi - factory interface
 * @export
 */
export const FutureAlgoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FutureAlgoApiFp(configuration)
    return {
        /**
         * Send in a Twap new order. Only support on USDⓈ-M Contracts.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoCreateAlgoFuturesNewOrderTwapV1(requestParameters: FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoCreateAlgoFuturesNewOrderTwapV1Resp> {
            return localVarFp.algoCreateAlgoFuturesNewOrderTwapV1(requestParameters.duration, requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.clientAlgoId, requestParameters.limitPrice, requestParameters.positionSide, requestParameters.recvWindow, requestParameters.reduceOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Send in a VP new order. Only support on USDⓈ-M Contracts.
         * @summary Volume Participation(VP) New Order (TRADE)
         * @param {FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoCreateAlgoFuturesNewOrderVpV1(requestParameters: FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoCreateAlgoFuturesNewOrderVpV1Resp> {
            return localVarFp.algoCreateAlgoFuturesNewOrderVpV1(requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.urgency, requestParameters.clientAlgoId, requestParameters.limitPrice, requestParameters.positionSide, requestParameters.recvWindow, requestParameters.reduceOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel an active order.
         * @summary Cancel Algo Order(TRADE)
         * @param {FutureAlgoApiAlgoDeleteAlgoFuturesOrderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoDeleteAlgoFuturesOrderV1(requestParameters: FutureAlgoApiAlgoDeleteAlgoFuturesOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoDeleteAlgoFuturesOrderV1Resp> {
            return localVarFp.algoDeleteAlgoFuturesOrderV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Historical Algo Order
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoFuturesHistoricalOrdersV1(requestParameters: FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoFuturesHistoricalOrdersV1Resp> {
            return localVarFp.algoGetAlgoFuturesHistoricalOrdersV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.side, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Current Algo Open Orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {FutureAlgoApiAlgoGetAlgoFuturesOpenOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoFuturesOpenOrdersV1(requestParameters: FutureAlgoApiAlgoGetAlgoFuturesOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoFuturesOpenOrdersV1Resp> {
            return localVarFp.algoGetAlgoFuturesOpenOrdersV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        algoGetAlgoFuturesSubOrdersV1(requestParameters: FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoFuturesSubOrdersV1Resp> {
            return localVarFp.algoGetAlgoFuturesSubOrdersV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FutureAlgoApi - interface
 * @export
 * @interface FutureAlgoApi
 */
export interface FutureAlgoApiInterface {
    /**
     * Send in a Twap new order. Only support on USDⓈ-M Contracts.
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApiInterface
     */
    algoCreateAlgoFuturesNewOrderTwapV1(requestParameters: FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoCreateAlgoFuturesNewOrderTwapV1Resp>;

    /**
     * Send in a VP new order. Only support on USDⓈ-M Contracts.
     * @summary Volume Participation(VP) New Order (TRADE)
     * @param {FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApiInterface
     */
    algoCreateAlgoFuturesNewOrderVpV1(requestParameters: FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoCreateAlgoFuturesNewOrderVpV1Resp>;

    /**
     * Cancel an active order.
     * @summary Cancel Algo Order(TRADE)
     * @param {FutureAlgoApiAlgoDeleteAlgoFuturesOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApiInterface
     */
    algoDeleteAlgoFuturesOrderV1(requestParameters: FutureAlgoApiAlgoDeleteAlgoFuturesOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoDeleteAlgoFuturesOrderV1Resp>;

    /**
     * Query Historical Algo Order
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApiInterface
     */
    algoGetAlgoFuturesHistoricalOrdersV1(requestParameters: FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoFuturesHistoricalOrdersV1Resp>;

    /**
     * Query Current Algo Open Orders
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {FutureAlgoApiAlgoGetAlgoFuturesOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApiInterface
     */
    algoGetAlgoFuturesOpenOrdersV1(requestParameters: FutureAlgoApiAlgoGetAlgoFuturesOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoFuturesOpenOrdersV1Resp>;

    /**
     * Get respective sub orders for a specified algoId
     * @summary Query Sub Orders(USER_DATA)
     * @param {FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApiInterface
     */
    algoGetAlgoFuturesSubOrdersV1(requestParameters: FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AlgoGetAlgoFuturesSubOrdersV1Resp>;

}

/**
 * Request parameters for algoCreateAlgoFuturesNewOrderTwapV1 operation in FutureAlgoApi.
 * @export
 * @interface FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1Request
 */
export interface FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1Request {
    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1
     */
    readonly duration: number

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1
     */
    readonly quantity: string

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1
     */
    readonly side: string

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1
     */
    readonly clientAlgoId?: string

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1
     */
    readonly limitPrice?: string

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1
     */
    readonly positionSide?: string

    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {boolean}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1
     */
    readonly reduceOnly?: boolean
}

/**
 * Request parameters for algoCreateAlgoFuturesNewOrderVpV1 operation in FutureAlgoApi.
 * @export
 * @interface FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1Request
 */
export interface FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1Request {
    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1
     */
    readonly quantity: string

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1
     */
    readonly side: string

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1
     */
    readonly urgency: string

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1
     */
    readonly clientAlgoId?: string

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1
     */
    readonly limitPrice?: string

    /**
     * 
     * @type {string}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1
     */
    readonly positionSide?: string

    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {boolean}
     * @memberof FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1
     */
    readonly reduceOnly?: boolean
}

/**
 * Request parameters for algoDeleteAlgoFuturesOrderV1 operation in FutureAlgoApi.
 * @export
 * @interface FutureAlgoApiAlgoDeleteAlgoFuturesOrderV1Request
 */
export interface FutureAlgoApiAlgoDeleteAlgoFuturesOrderV1Request {
    /**
     * eg. 14511
     * @type {number}
     * @memberof FutureAlgoApiAlgoDeleteAlgoFuturesOrderV1
     */
    readonly algoId: number

    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoDeleteAlgoFuturesOrderV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoDeleteAlgoFuturesOrderV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for algoGetAlgoFuturesHistoricalOrdersV1 operation in FutureAlgoApi.
 * @export
 * @interface FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1Request
 */
export interface FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1
     */
    readonly timestamp: number

    /**
     * Trading symbol eg. BTCUSDT
     * @type {string}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1
     */
    readonly symbol?: string

    /**
     * BUY or SELL
     * @type {string}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1
     */
    readonly side?: string

    /**
     * in milliseconds  eg.1641522717552
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1
     */
    readonly startTime?: number

    /**
     * in milliseconds  eg.1641522526562
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1
     */
    readonly endTime?: number

    /**
     * Default is 1
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1
     */
    readonly page?: number

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for algoGetAlgoFuturesOpenOrdersV1 operation in FutureAlgoApi.
 * @export
 * @interface FutureAlgoApiAlgoGetAlgoFuturesOpenOrdersV1Request
 */
export interface FutureAlgoApiAlgoGetAlgoFuturesOpenOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesOpenOrdersV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesOpenOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for algoGetAlgoFuturesSubOrdersV1 operation in FutureAlgoApi.
 * @export
 * @interface FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1Request
 */
export interface FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1
     */
    readonly algoId: number

    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1
     */
    readonly timestamp: number

    /**
     * Default is 1
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1
     */
    readonly page?: number

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * FutureAlgoApi - object-oriented interface
 * @export
 * @class FutureAlgoApi
 * @extends {BaseAPI}
 */
export class FutureAlgoApi extends BaseAPI implements FutureAlgoApiInterface {
    /**
     * Send in a Twap new order. Only support on USDⓈ-M Contracts.
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApi
     */
    public algoCreateAlgoFuturesNewOrderTwapV1(requestParameters: FutureAlgoApiAlgoCreateAlgoFuturesNewOrderTwapV1Request, options?: RawAxiosRequestConfig) {
        return FutureAlgoApiFp(this.configuration).algoCreateAlgoFuturesNewOrderTwapV1(requestParameters.duration, requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.clientAlgoId, requestParameters.limitPrice, requestParameters.positionSide, requestParameters.recvWindow, requestParameters.reduceOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send in a VP new order. Only support on USDⓈ-M Contracts.
     * @summary Volume Participation(VP) New Order (TRADE)
     * @param {FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApi
     */
    public algoCreateAlgoFuturesNewOrderVpV1(requestParameters: FutureAlgoApiAlgoCreateAlgoFuturesNewOrderVpV1Request, options?: RawAxiosRequestConfig) {
        return FutureAlgoApiFp(this.configuration).algoCreateAlgoFuturesNewOrderVpV1(requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.urgency, requestParameters.clientAlgoId, requestParameters.limitPrice, requestParameters.positionSide, requestParameters.recvWindow, requestParameters.reduceOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel an active order.
     * @summary Cancel Algo Order(TRADE)
     * @param {FutureAlgoApiAlgoDeleteAlgoFuturesOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApi
     */
    public algoDeleteAlgoFuturesOrderV1(requestParameters: FutureAlgoApiAlgoDeleteAlgoFuturesOrderV1Request, options?: RawAxiosRequestConfig) {
        return FutureAlgoApiFp(this.configuration).algoDeleteAlgoFuturesOrderV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Historical Algo Order
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApi
     */
    public algoGetAlgoFuturesHistoricalOrdersV1(requestParameters: FutureAlgoApiAlgoGetAlgoFuturesHistoricalOrdersV1Request, options?: RawAxiosRequestConfig) {
        return FutureAlgoApiFp(this.configuration).algoGetAlgoFuturesHistoricalOrdersV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.side, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Current Algo Open Orders
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {FutureAlgoApiAlgoGetAlgoFuturesOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApi
     */
    public algoGetAlgoFuturesOpenOrdersV1(requestParameters: FutureAlgoApiAlgoGetAlgoFuturesOpenOrdersV1Request, options?: RawAxiosRequestConfig) {
        return FutureAlgoApiFp(this.configuration).algoGetAlgoFuturesOpenOrdersV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get respective sub orders for a specified algoId
     * @summary Query Sub Orders(USER_DATA)
     * @param {FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FutureAlgoApi
     */
    public algoGetAlgoFuturesSubOrdersV1(requestParameters: FutureAlgoApiAlgoGetAlgoFuturesSubOrdersV1Request, options?: RawAxiosRequestConfig) {
        return FutureAlgoApiFp(this.configuration).algoGetAlgoFuturesSubOrdersV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

