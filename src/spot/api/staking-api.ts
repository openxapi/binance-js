/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreateEthStakingEthRedeemV1Resp } from '../model';
// @ts-ignore
import type { CreateEthStakingEthStakeV2Resp } from '../model';
// @ts-ignore
import type { CreateEthStakingWbethWrapV1Resp } from '../model';
// @ts-ignore
import type { CreateSolStakingSolClaimV1Resp } from '../model';
// @ts-ignore
import type { CreateSolStakingSolRedeemV1Resp } from '../model';
// @ts-ignore
import type { CreateSolStakingSolStakeV1Resp } from '../model';
// @ts-ignore
import type { GetEthStakingAccountV2Resp } from '../model';
// @ts-ignore
import type { GetEthStakingEthHistoryRateHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetEthStakingEthHistoryRedemptionHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetEthStakingEthHistoryRewardsHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetEthStakingEthHistoryStakingHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetEthStakingEthHistoryWbethRewardsHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetEthStakingEthQuotaV1Resp } from '../model';
// @ts-ignore
import type { GetEthStakingWbethHistoryUnwrapHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetEthStakingWbethHistoryWrapHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetSolStakingAccountV1Resp } from '../model';
// @ts-ignore
import type { GetSolStakingSolHistoryBnsolRewardsHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetSolStakingSolHistoryBoostRewardsHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetSolStakingSolHistoryRateHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetSolStakingSolHistoryRedemptionHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetSolStakingSolHistoryStakingHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetSolStakingSolHistoryUnclaimedRewardsV1RespItem } from '../model';
// @ts-ignore
import type { GetSolStakingSolQuotaV1Resp } from '../model';
/**
 * StakingApi - axios parameter creator
 * @export
 */
export const StakingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Redeem WBETH or BETH and get ETH
         * @summary Redeem ETH(TRADE)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEthStakingEthRedeemV1: async (amount: string, timestamp: number, asset?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createEthStakingEthRedeemV1', 'amount', amount)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createEthStakingEthRedeemV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/eth-staking/eth/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscribe ETH Staking
         * @summary Subscribe ETH Staking(TRADE)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEthStakingEthStakeV2: async (amount: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createEthStakingEthStakeV2', 'amount', amount)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createEthStakingEthStakeV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/eth-staking/eth/stake`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Wrap BETH
         * @summary Wrap BETH(TRADE)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEthStakingWbethWrapV1: async (amount: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createEthStakingWbethWrapV1', 'amount', amount)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createEthStakingWbethWrapV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/eth-staking/wbeth/wrap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Claim Boost APR Airdrop Rewards
         * @summary Claim Boost Rewards(TRADE)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolStakingSolClaimV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSolStakingSolClaimV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sol-staking/sol/claim`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeem BNSOL get SOL
         * @summary Redeem SOL(TRADE)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolStakingSolRedeemV1: async (amount: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createSolStakingSolRedeemV1', 'amount', amount)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSolStakingSolRedeemV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sol-staking/sol/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscribe SOL Staking
         * @summary Subscribe SOL Staking(TRADE)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolStakingSolStakeV1: async (amount: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createSolStakingSolStakeV1', 'amount', amount)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSolStakingSolStakeV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sol-staking/sol/stake`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ETH Staking account
         * @summary ETH Staking account(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingAccountV2: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getEthStakingAccountV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/eth-staking/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get WBETH Rate History
         * @summary Get WBETH Rate History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthHistoryRateHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getEthStakingEthHistoryRateHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/eth-staking/eth/history/rateHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ETH redemption history
         * @summary Get ETH redemption history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthHistoryRedemptionHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getEthStakingEthHistoryRedemptionHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/eth-staking/eth/history/redemptionHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get BETH rewards distribution history
         * @summary Get BETH rewards distribution history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthHistoryRewardsHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getEthStakingEthHistoryRewardsHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/eth-staking/eth/history/rewardsHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ETH staking history
         * @summary Get ETH staking history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthHistoryStakingHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getEthStakingEthHistoryStakingHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/eth-staking/eth/history/stakingHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get WBETH rewards history
         * @summary Get WBETH rewards history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthHistoryWbethRewardsHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getEthStakingEthHistoryWbethRewardsHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/eth-staking/eth/history/wbethRewardsHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current ETH staking quota
         * @summary Get current ETH staking quota(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthQuotaV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getEthStakingEthQuotaV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/eth-staking/eth/quota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get WBETH unwrap history
         * @summary Get WBETH unwrap history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingWbethHistoryUnwrapHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getEthStakingWbethHistoryUnwrapHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/eth-staking/wbeth/history/unwrapHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get WBETH wrap history
         * @summary Get WBETH wrap history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingWbethHistoryWrapHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getEthStakingWbethHistoryWrapHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/eth-staking/wbeth/history/wrapHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SOL Staking account
         * @summary SOL Staking account(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingAccountV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSolStakingAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sol-staking/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get BNSOL rewards history
         * @summary Get BNSOL rewards history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryBnsolRewardsHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSolStakingSolHistoryBnsolRewardsHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sol-staking/sol/history/bnsolRewardsHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Boost rewards history
         * @summary Get Boost Rewards History(USER_DATA)
         * @param {string} type &amp;#34;CLAIM&amp;#34;, &amp;#34;DISTRIBUTE&amp;#34;, default &amp;#34;CLAIM&amp;#34;
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryBoostRewardsHistoryV1: async (type: string, timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getSolStakingSolHistoryBoostRewardsHistoryV1', 'type', type)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSolStakingSolHistoryBoostRewardsHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sol-staking/sol/history/boostRewardsHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get BNSOL Rate History
         * @summary Get BNSOL Rate History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryRateHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSolStakingSolHistoryRateHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sol-staking/sol/history/rateHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SOL redemption history
         * @summary Get SOL redemption history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryRedemptionHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSolStakingSolHistoryRedemptionHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sol-staking/sol/history/redemptionHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SOL staking history
         * @summary Get SOL staking history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryStakingHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSolStakingSolHistoryStakingHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sol-staking/sol/history/stakingHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Unclaimed rewards
         * @summary Get Unclaimed Rewards(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryUnclaimedRewardsV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSolStakingSolHistoryUnclaimedRewardsV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sol-staking/sol/history/unclaimedRewards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SOL staking quota
         * @summary Get SOL staking quota details(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolQuotaV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSolStakingSolQuotaV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sol-staking/sol/quota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StakingApi - functional programming interface
 * @export
 */
export const StakingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StakingApiAxiosParamCreator(configuration)
    return {
        /**
         * Redeem WBETH or BETH and get ETH
         * @summary Redeem ETH(TRADE)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEthStakingEthRedeemV1(amount: string, timestamp: number, asset?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEthStakingEthRedeemV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEthStakingEthRedeemV1(amount, timestamp, asset, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.createEthStakingEthRedeemV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Subscribe ETH Staking
         * @summary Subscribe ETH Staking(TRADE)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEthStakingEthStakeV2(amount: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEthStakingEthStakeV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEthStakingEthStakeV2(amount, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.createEthStakingEthStakeV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Wrap BETH
         * @summary Wrap BETH(TRADE)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEthStakingWbethWrapV1(amount: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEthStakingWbethWrapV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEthStakingWbethWrapV1(amount, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.createEthStakingWbethWrapV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Claim Boost APR Airdrop Rewards
         * @summary Claim Boost Rewards(TRADE)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSolStakingSolClaimV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSolStakingSolClaimV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSolStakingSolClaimV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.createSolStakingSolClaimV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redeem BNSOL get SOL
         * @summary Redeem SOL(TRADE)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSolStakingSolRedeemV1(amount: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSolStakingSolRedeemV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSolStakingSolRedeemV1(amount, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.createSolStakingSolRedeemV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Subscribe SOL Staking
         * @summary Subscribe SOL Staking(TRADE)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSolStakingSolStakeV1(amount: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSolStakingSolStakeV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSolStakingSolStakeV1(amount, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.createSolStakingSolStakeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ETH Staking account
         * @summary ETH Staking account(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEthStakingAccountV2(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEthStakingAccountV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEthStakingAccountV2(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getEthStakingAccountV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get WBETH Rate History
         * @summary Get WBETH Rate History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEthStakingEthHistoryRateHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEthStakingEthHistoryRateHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEthStakingEthHistoryRateHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getEthStakingEthHistoryRateHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get ETH redemption history
         * @summary Get ETH redemption history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEthStakingEthHistoryRedemptionHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEthStakingEthHistoryRedemptionHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEthStakingEthHistoryRedemptionHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getEthStakingEthHistoryRedemptionHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get BETH rewards distribution history
         * @summary Get BETH rewards distribution history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEthStakingEthHistoryRewardsHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEthStakingEthHistoryRewardsHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEthStakingEthHistoryRewardsHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getEthStakingEthHistoryRewardsHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get ETH staking history
         * @summary Get ETH staking history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEthStakingEthHistoryStakingHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEthStakingEthHistoryStakingHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEthStakingEthHistoryStakingHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getEthStakingEthHistoryStakingHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get WBETH rewards history
         * @summary Get WBETH rewards history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEthStakingEthHistoryWbethRewardsHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEthStakingEthHistoryWbethRewardsHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEthStakingEthHistoryWbethRewardsHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getEthStakingEthHistoryWbethRewardsHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current ETH staking quota
         * @summary Get current ETH staking quota(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEthStakingEthQuotaV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEthStakingEthQuotaV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEthStakingEthQuotaV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getEthStakingEthQuotaV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get WBETH unwrap history
         * @summary Get WBETH unwrap history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEthStakingWbethHistoryUnwrapHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEthStakingWbethHistoryUnwrapHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEthStakingWbethHistoryUnwrapHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getEthStakingWbethHistoryUnwrapHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get WBETH wrap history
         * @summary Get WBETH wrap history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEthStakingWbethHistoryWrapHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEthStakingWbethHistoryWrapHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEthStakingWbethHistoryWrapHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getEthStakingWbethHistoryWrapHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * SOL Staking account
         * @summary SOL Staking account(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolStakingAccountV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSolStakingAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolStakingAccountV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getSolStakingAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get BNSOL rewards history
         * @summary Get BNSOL rewards history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolStakingSolHistoryBnsolRewardsHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSolStakingSolHistoryBnsolRewardsHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolStakingSolHistoryBnsolRewardsHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getSolStakingSolHistoryBnsolRewardsHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Boost rewards history
         * @summary Get Boost Rewards History(USER_DATA)
         * @param {string} type &amp;#34;CLAIM&amp;#34;, &amp;#34;DISTRIBUTE&amp;#34;, default &amp;#34;CLAIM&amp;#34;
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolStakingSolHistoryBoostRewardsHistoryV1(type: string, timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSolStakingSolHistoryBoostRewardsHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolStakingSolHistoryBoostRewardsHistoryV1(type, timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getSolStakingSolHistoryBoostRewardsHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get BNSOL Rate History
         * @summary Get BNSOL Rate History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolStakingSolHistoryRateHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSolStakingSolHistoryRateHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolStakingSolHistoryRateHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getSolStakingSolHistoryRateHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get SOL redemption history
         * @summary Get SOL redemption history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolStakingSolHistoryRedemptionHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSolStakingSolHistoryRedemptionHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolStakingSolHistoryRedemptionHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getSolStakingSolHistoryRedemptionHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get SOL staking history
         * @summary Get SOL staking history(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default: 1
         * @param {number} [size] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolStakingSolHistoryStakingHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSolStakingSolHistoryStakingHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolStakingSolHistoryStakingHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getSolStakingSolHistoryStakingHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Unclaimed rewards
         * @summary Get Unclaimed Rewards(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolStakingSolHistoryUnclaimedRewardsV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSolStakingSolHistoryUnclaimedRewardsV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolStakingSolHistoryUnclaimedRewardsV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getSolStakingSolHistoryUnclaimedRewardsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get SOL staking quota
         * @summary Get SOL staking quota details(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolStakingSolQuotaV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSolStakingSolQuotaV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolStakingSolQuotaV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StakingApi.getSolStakingSolQuotaV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StakingApi - factory interface
 * @export
 */
export const StakingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StakingApiFp(configuration)
    return {
        /**
         * Redeem WBETH or BETH and get ETH
         * @summary Redeem ETH(TRADE)
         * @param {StakingApiCreateEthStakingEthRedeemV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEthStakingEthRedeemV1(requestParameters: StakingApiCreateEthStakingEthRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateEthStakingEthRedeemV1Resp> {
            return localVarFp.createEthStakingEthRedeemV1(requestParameters.amount, requestParameters.timestamp, requestParameters.asset, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscribe ETH Staking
         * @summary Subscribe ETH Staking(TRADE)
         * @param {StakingApiCreateEthStakingEthStakeV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEthStakingEthStakeV2(requestParameters: StakingApiCreateEthStakingEthStakeV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateEthStakingEthStakeV2Resp> {
            return localVarFp.createEthStakingEthStakeV2(requestParameters.amount, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Wrap BETH
         * @summary Wrap BETH(TRADE)
         * @param {StakingApiCreateEthStakingWbethWrapV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEthStakingWbethWrapV1(requestParameters: StakingApiCreateEthStakingWbethWrapV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateEthStakingWbethWrapV1Resp> {
            return localVarFp.createEthStakingWbethWrapV1(requestParameters.amount, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Claim Boost APR Airdrop Rewards
         * @summary Claim Boost Rewards(TRADE)
         * @param {StakingApiCreateSolStakingSolClaimV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolStakingSolClaimV1(requestParameters: StakingApiCreateSolStakingSolClaimV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSolStakingSolClaimV1Resp> {
            return localVarFp.createSolStakingSolClaimV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeem BNSOL get SOL
         * @summary Redeem SOL(TRADE)
         * @param {StakingApiCreateSolStakingSolRedeemV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolStakingSolRedeemV1(requestParameters: StakingApiCreateSolStakingSolRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSolStakingSolRedeemV1Resp> {
            return localVarFp.createSolStakingSolRedeemV1(requestParameters.amount, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscribe SOL Staking
         * @summary Subscribe SOL Staking(TRADE)
         * @param {StakingApiCreateSolStakingSolStakeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolStakingSolStakeV1(requestParameters: StakingApiCreateSolStakingSolStakeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSolStakingSolStakeV1Resp> {
            return localVarFp.createSolStakingSolStakeV1(requestParameters.amount, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * ETH Staking account
         * @summary ETH Staking account(USER_DATA)
         * @param {StakingApiGetEthStakingAccountV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingAccountV2(requestParameters: StakingApiGetEthStakingAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingAccountV2Resp> {
            return localVarFp.getEthStakingAccountV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get WBETH Rate History
         * @summary Get WBETH Rate History(USER_DATA)
         * @param {StakingApiGetEthStakingEthHistoryRateHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthHistoryRateHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryRateHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthHistoryRateHistoryV1Resp> {
            return localVarFp.getEthStakingEthHistoryRateHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get ETH redemption history
         * @summary Get ETH redemption history(USER_DATA)
         * @param {StakingApiGetEthStakingEthHistoryRedemptionHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthHistoryRedemptionHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryRedemptionHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthHistoryRedemptionHistoryV1Resp> {
            return localVarFp.getEthStakingEthHistoryRedemptionHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get BETH rewards distribution history
         * @summary Get BETH rewards distribution history(USER_DATA)
         * @param {StakingApiGetEthStakingEthHistoryRewardsHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthHistoryRewardsHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryRewardsHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthHistoryRewardsHistoryV1Resp> {
            return localVarFp.getEthStakingEthHistoryRewardsHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get ETH staking history
         * @summary Get ETH staking history(USER_DATA)
         * @param {StakingApiGetEthStakingEthHistoryStakingHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthHistoryStakingHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryStakingHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthHistoryStakingHistoryV1Resp> {
            return localVarFp.getEthStakingEthHistoryStakingHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get WBETH rewards history
         * @summary Get WBETH rewards history(USER_DATA)
         * @param {StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthHistoryWbethRewardsHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthHistoryWbethRewardsHistoryV1Resp> {
            return localVarFp.getEthStakingEthHistoryWbethRewardsHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current ETH staking quota
         * @summary Get current ETH staking quota(USER_DATA)
         * @param {StakingApiGetEthStakingEthQuotaV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingEthQuotaV1(requestParameters: StakingApiGetEthStakingEthQuotaV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthQuotaV1Resp> {
            return localVarFp.getEthStakingEthQuotaV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get WBETH unwrap history
         * @summary Get WBETH unwrap history(USER_DATA)
         * @param {StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingWbethHistoryUnwrapHistoryV1(requestParameters: StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingWbethHistoryUnwrapHistoryV1Resp> {
            return localVarFp.getEthStakingWbethHistoryUnwrapHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get WBETH wrap history
         * @summary Get WBETH wrap history(USER_DATA)
         * @param {StakingApiGetEthStakingWbethHistoryWrapHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEthStakingWbethHistoryWrapHistoryV1(requestParameters: StakingApiGetEthStakingWbethHistoryWrapHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingWbethHistoryWrapHistoryV1Resp> {
            return localVarFp.getEthStakingWbethHistoryWrapHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * SOL Staking account
         * @summary SOL Staking account(USER_DATA)
         * @param {StakingApiGetSolStakingAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingAccountV1(requestParameters: StakingApiGetSolStakingAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingAccountV1Resp> {
            return localVarFp.getSolStakingAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get BNSOL rewards history
         * @summary Get BNSOL rewards history(USER_DATA)
         * @param {StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryBnsolRewardsHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolHistoryBnsolRewardsHistoryV1Resp> {
            return localVarFp.getSolStakingSolHistoryBnsolRewardsHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Boost rewards history
         * @summary Get Boost Rewards History(USER_DATA)
         * @param {StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryBoostRewardsHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolHistoryBoostRewardsHistoryV1Resp> {
            return localVarFp.getSolStakingSolHistoryBoostRewardsHistoryV1(requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get BNSOL Rate History
         * @summary Get BNSOL Rate History(USER_DATA)
         * @param {StakingApiGetSolStakingSolHistoryRateHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryRateHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryRateHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolHistoryRateHistoryV1Resp> {
            return localVarFp.getSolStakingSolHistoryRateHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get SOL redemption history
         * @summary Get SOL redemption history(USER_DATA)
         * @param {StakingApiGetSolStakingSolHistoryRedemptionHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryRedemptionHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryRedemptionHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolHistoryRedemptionHistoryV1Resp> {
            return localVarFp.getSolStakingSolHistoryRedemptionHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get SOL staking history
         * @summary Get SOL staking history(USER_DATA)
         * @param {StakingApiGetSolStakingSolHistoryStakingHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryStakingHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryStakingHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolHistoryStakingHistoryV1Resp> {
            return localVarFp.getSolStakingSolHistoryStakingHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Unclaimed rewards
         * @summary Get Unclaimed Rewards(USER_DATA)
         * @param {StakingApiGetSolStakingSolHistoryUnclaimedRewardsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolHistoryUnclaimedRewardsV1(requestParameters: StakingApiGetSolStakingSolHistoryUnclaimedRewardsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSolStakingSolHistoryUnclaimedRewardsV1RespItem>> {
            return localVarFp.getSolStakingSolHistoryUnclaimedRewardsV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get SOL staking quota
         * @summary Get SOL staking quota details(USER_DATA)
         * @param {StakingApiGetSolStakingSolQuotaV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolStakingSolQuotaV1(requestParameters: StakingApiGetSolStakingSolQuotaV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolQuotaV1Resp> {
            return localVarFp.getSolStakingSolQuotaV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StakingApi - interface
 * @export
 * @interface StakingApi
 */
export interface StakingApiInterface {
    /**
     * Redeem WBETH or BETH and get ETH
     * @summary Redeem ETH(TRADE)
     * @param {StakingApiCreateEthStakingEthRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    createEthStakingEthRedeemV1(requestParameters: StakingApiCreateEthStakingEthRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateEthStakingEthRedeemV1Resp>;

    /**
     * Subscribe ETH Staking
     * @summary Subscribe ETH Staking(TRADE)
     * @param {StakingApiCreateEthStakingEthStakeV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    createEthStakingEthStakeV2(requestParameters: StakingApiCreateEthStakingEthStakeV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateEthStakingEthStakeV2Resp>;

    /**
     * Wrap BETH
     * @summary Wrap BETH(TRADE)
     * @param {StakingApiCreateEthStakingWbethWrapV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    createEthStakingWbethWrapV1(requestParameters: StakingApiCreateEthStakingWbethWrapV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateEthStakingWbethWrapV1Resp>;

    /**
     * Claim Boost APR Airdrop Rewards
     * @summary Claim Boost Rewards(TRADE)
     * @param {StakingApiCreateSolStakingSolClaimV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    createSolStakingSolClaimV1(requestParameters: StakingApiCreateSolStakingSolClaimV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSolStakingSolClaimV1Resp>;

    /**
     * Redeem BNSOL get SOL
     * @summary Redeem SOL(TRADE)
     * @param {StakingApiCreateSolStakingSolRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    createSolStakingSolRedeemV1(requestParameters: StakingApiCreateSolStakingSolRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSolStakingSolRedeemV1Resp>;

    /**
     * Subscribe SOL Staking
     * @summary Subscribe SOL Staking(TRADE)
     * @param {StakingApiCreateSolStakingSolStakeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    createSolStakingSolStakeV1(requestParameters: StakingApiCreateSolStakingSolStakeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSolStakingSolStakeV1Resp>;

    /**
     * ETH Staking account
     * @summary ETH Staking account(USER_DATA)
     * @param {StakingApiGetEthStakingAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getEthStakingAccountV2(requestParameters: StakingApiGetEthStakingAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingAccountV2Resp>;

    /**
     * Get WBETH Rate History
     * @summary Get WBETH Rate History(USER_DATA)
     * @param {StakingApiGetEthStakingEthHistoryRateHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getEthStakingEthHistoryRateHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryRateHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthHistoryRateHistoryV1Resp>;

    /**
     * Get ETH redemption history
     * @summary Get ETH redemption history(USER_DATA)
     * @param {StakingApiGetEthStakingEthHistoryRedemptionHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getEthStakingEthHistoryRedemptionHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryRedemptionHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthHistoryRedemptionHistoryV1Resp>;

    /**
     * Get BETH rewards distribution history
     * @summary Get BETH rewards distribution history(USER_DATA)
     * @param {StakingApiGetEthStakingEthHistoryRewardsHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getEthStakingEthHistoryRewardsHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryRewardsHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthHistoryRewardsHistoryV1Resp>;

    /**
     * Get ETH staking history
     * @summary Get ETH staking history(USER_DATA)
     * @param {StakingApiGetEthStakingEthHistoryStakingHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getEthStakingEthHistoryStakingHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryStakingHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthHistoryStakingHistoryV1Resp>;

    /**
     * Get WBETH rewards history
     * @summary Get WBETH rewards history(USER_DATA)
     * @param {StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getEthStakingEthHistoryWbethRewardsHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthHistoryWbethRewardsHistoryV1Resp>;

    /**
     * Get current ETH staking quota
     * @summary Get current ETH staking quota(USER_DATA)
     * @param {StakingApiGetEthStakingEthQuotaV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getEthStakingEthQuotaV1(requestParameters: StakingApiGetEthStakingEthQuotaV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingEthQuotaV1Resp>;

    /**
     * Get WBETH unwrap history
     * @summary Get WBETH unwrap history(USER_DATA)
     * @param {StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getEthStakingWbethHistoryUnwrapHistoryV1(requestParameters: StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingWbethHistoryUnwrapHistoryV1Resp>;

    /**
     * Get WBETH wrap history
     * @summary Get WBETH wrap history(USER_DATA)
     * @param {StakingApiGetEthStakingWbethHistoryWrapHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getEthStakingWbethHistoryWrapHistoryV1(requestParameters: StakingApiGetEthStakingWbethHistoryWrapHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetEthStakingWbethHistoryWrapHistoryV1Resp>;

    /**
     * SOL Staking account
     * @summary SOL Staking account(USER_DATA)
     * @param {StakingApiGetSolStakingAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getSolStakingAccountV1(requestParameters: StakingApiGetSolStakingAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingAccountV1Resp>;

    /**
     * Get BNSOL rewards history
     * @summary Get BNSOL rewards history(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getSolStakingSolHistoryBnsolRewardsHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolHistoryBnsolRewardsHistoryV1Resp>;

    /**
     * Get Boost rewards history
     * @summary Get Boost Rewards History(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getSolStakingSolHistoryBoostRewardsHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolHistoryBoostRewardsHistoryV1Resp>;

    /**
     * Get BNSOL Rate History
     * @summary Get BNSOL Rate History(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryRateHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getSolStakingSolHistoryRateHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryRateHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolHistoryRateHistoryV1Resp>;

    /**
     * Get SOL redemption history
     * @summary Get SOL redemption history(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryRedemptionHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getSolStakingSolHistoryRedemptionHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryRedemptionHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolHistoryRedemptionHistoryV1Resp>;

    /**
     * Get SOL staking history
     * @summary Get SOL staking history(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryStakingHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getSolStakingSolHistoryStakingHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryStakingHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolHistoryStakingHistoryV1Resp>;

    /**
     * Get Unclaimed rewards
     * @summary Get Unclaimed Rewards(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryUnclaimedRewardsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getSolStakingSolHistoryUnclaimedRewardsV1(requestParameters: StakingApiGetSolStakingSolHistoryUnclaimedRewardsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSolStakingSolHistoryUnclaimedRewardsV1RespItem>>;

    /**
     * Get SOL staking quota
     * @summary Get SOL staking quota details(USER_DATA)
     * @param {StakingApiGetSolStakingSolQuotaV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getSolStakingSolQuotaV1(requestParameters: StakingApiGetSolStakingSolQuotaV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSolStakingSolQuotaV1Resp>;

}

/**
 * Request parameters for createEthStakingEthRedeemV1 operation in StakingApi.
 * @export
 * @interface StakingApiCreateEthStakingEthRedeemV1Request
 */
export interface StakingApiCreateEthStakingEthRedeemV1Request {
    /**
     * 
     * @type {string}
     * @memberof StakingApiCreateEthStakingEthRedeemV1
     */
    readonly amount: string

    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateEthStakingEthRedeemV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof StakingApiCreateEthStakingEthRedeemV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateEthStakingEthRedeemV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createEthStakingEthStakeV2 operation in StakingApi.
 * @export
 * @interface StakingApiCreateEthStakingEthStakeV2Request
 */
export interface StakingApiCreateEthStakingEthStakeV2Request {
    /**
     * 
     * @type {string}
     * @memberof StakingApiCreateEthStakingEthStakeV2
     */
    readonly amount: string

    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateEthStakingEthStakeV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateEthStakingEthStakeV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createEthStakingWbethWrapV1 operation in StakingApi.
 * @export
 * @interface StakingApiCreateEthStakingWbethWrapV1Request
 */
export interface StakingApiCreateEthStakingWbethWrapV1Request {
    /**
     * 
     * @type {string}
     * @memberof StakingApiCreateEthStakingWbethWrapV1
     */
    readonly amount: string

    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateEthStakingWbethWrapV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateEthStakingWbethWrapV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSolStakingSolClaimV1 operation in StakingApi.
 * @export
 * @interface StakingApiCreateSolStakingSolClaimV1Request
 */
export interface StakingApiCreateSolStakingSolClaimV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateSolStakingSolClaimV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateSolStakingSolClaimV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSolStakingSolRedeemV1 operation in StakingApi.
 * @export
 * @interface StakingApiCreateSolStakingSolRedeemV1Request
 */
export interface StakingApiCreateSolStakingSolRedeemV1Request {
    /**
     * 
     * @type {string}
     * @memberof StakingApiCreateSolStakingSolRedeemV1
     */
    readonly amount: string

    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateSolStakingSolRedeemV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateSolStakingSolRedeemV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSolStakingSolStakeV1 operation in StakingApi.
 * @export
 * @interface StakingApiCreateSolStakingSolStakeV1Request
 */
export interface StakingApiCreateSolStakingSolStakeV1Request {
    /**
     * 
     * @type {string}
     * @memberof StakingApiCreateSolStakingSolStakeV1
     */
    readonly amount: string

    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateSolStakingSolStakeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiCreateSolStakingSolStakeV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getEthStakingAccountV2 operation in StakingApi.
 * @export
 * @interface StakingApiGetEthStakingAccountV2Request
 */
export interface StakingApiGetEthStakingAccountV2Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingAccountV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingAccountV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getEthStakingEthHistoryRateHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetEthStakingEthHistoryRateHistoryV1Request
 */
export interface StakingApiGetEthStakingEthHistoryRateHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRateHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRateHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRateHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRateHistoryV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRateHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRateHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getEthStakingEthHistoryRedemptionHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetEthStakingEthHistoryRedemptionHistoryV1Request
 */
export interface StakingApiGetEthStakingEthHistoryRedemptionHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRedemptionHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRedemptionHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRedemptionHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default: 1
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRedemptionHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10, Max: 100
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRedemptionHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRedemptionHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getEthStakingEthHistoryRewardsHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetEthStakingEthHistoryRewardsHistoryV1Request
 */
export interface StakingApiGetEthStakingEthHistoryRewardsHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRewardsHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRewardsHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRewardsHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default: 1
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRewardsHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10, Max: 100
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRewardsHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryRewardsHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getEthStakingEthHistoryStakingHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetEthStakingEthHistoryStakingHistoryV1Request
 */
export interface StakingApiGetEthStakingEthHistoryStakingHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryStakingHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryStakingHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryStakingHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default: 1
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryStakingHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10, Max: 100
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryStakingHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryStakingHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getEthStakingEthHistoryWbethRewardsHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1Request
 */
export interface StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default: 1
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10, Max: 100
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getEthStakingEthQuotaV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetEthStakingEthQuotaV1Request
 */
export interface StakingApiGetEthStakingEthQuotaV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthQuotaV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingEthQuotaV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getEthStakingWbethHistoryUnwrapHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1Request
 */
export interface StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getEthStakingWbethHistoryWrapHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetEthStakingWbethHistoryWrapHistoryV1Request
 */
export interface StakingApiGetEthStakingWbethHistoryWrapHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryWrapHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryWrapHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryWrapHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryWrapHistoryV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryWrapHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetEthStakingWbethHistoryWrapHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSolStakingAccountV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetSolStakingAccountV1Request
 */
export interface StakingApiGetSolStakingAccountV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingAccountV1
     */
    readonly timestamp: number

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof StakingApiGetSolStakingAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSolStakingSolHistoryBnsolRewardsHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1Request
 */
export interface StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default: 1
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10, Max: 100
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSolStakingSolHistoryBoostRewardsHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1Request
 */
export interface StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1Request {
    /**
     * &amp;#34;CLAIM&amp;#34;, &amp;#34;DISTRIBUTE&amp;#34;, default &amp;#34;CLAIM&amp;#34;
     * @type {string}
     * @memberof StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1
     */
    readonly type: string

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default: 1
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10, Max: 100
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSolStakingSolHistoryRateHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetSolStakingSolHistoryRateHistoryV1Request
 */
export interface StakingApiGetSolStakingSolHistoryRateHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRateHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRateHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRateHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRateHistoryV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRateHistoryV1
     */
    readonly size?: number

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRateHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSolStakingSolHistoryRedemptionHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetSolStakingSolHistoryRedemptionHistoryV1Request
 */
export interface StakingApiGetSolStakingSolHistoryRedemptionHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRedemptionHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRedemptionHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRedemptionHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default: 1
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRedemptionHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10, Max: 100
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRedemptionHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryRedemptionHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSolStakingSolHistoryStakingHistoryV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetSolStakingSolHistoryStakingHistoryV1Request
 */
export interface StakingApiGetSolStakingSolHistoryStakingHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryStakingHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryStakingHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryStakingHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default: 1
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryStakingHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10, Max: 100
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryStakingHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryStakingHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSolStakingSolHistoryUnclaimedRewardsV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetSolStakingSolHistoryUnclaimedRewardsV1Request
 */
export interface StakingApiGetSolStakingSolHistoryUnclaimedRewardsV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryUnclaimedRewardsV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolHistoryUnclaimedRewardsV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSolStakingSolQuotaV1 operation in StakingApi.
 * @export
 * @interface StakingApiGetSolStakingSolQuotaV1Request
 */
export interface StakingApiGetSolStakingSolQuotaV1Request {
    /**
     * 
     * @type {number}
     * @memberof StakingApiGetSolStakingSolQuotaV1
     */
    readonly timestamp: number

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof StakingApiGetSolStakingSolQuotaV1
     */
    readonly recvWindow?: number
}

/**
 * StakingApi - object-oriented interface
 * @export
 * @class StakingApi
 * @extends {BaseAPI}
 */
export class StakingApi extends BaseAPI implements StakingApiInterface {
    /**
     * Redeem WBETH or BETH and get ETH
     * @summary Redeem ETH(TRADE)
     * @param {StakingApiCreateEthStakingEthRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public createEthStakingEthRedeemV1(requestParameters: StakingApiCreateEthStakingEthRedeemV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).createEthStakingEthRedeemV1(requestParameters.amount, requestParameters.timestamp, requestParameters.asset, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Subscribe ETH Staking
     * @summary Subscribe ETH Staking(TRADE)
     * @param {StakingApiCreateEthStakingEthStakeV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public createEthStakingEthStakeV2(requestParameters: StakingApiCreateEthStakingEthStakeV2Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).createEthStakingEthStakeV2(requestParameters.amount, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Wrap BETH
     * @summary Wrap BETH(TRADE)
     * @param {StakingApiCreateEthStakingWbethWrapV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public createEthStakingWbethWrapV1(requestParameters: StakingApiCreateEthStakingWbethWrapV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).createEthStakingWbethWrapV1(requestParameters.amount, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Claim Boost APR Airdrop Rewards
     * @summary Claim Boost Rewards(TRADE)
     * @param {StakingApiCreateSolStakingSolClaimV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public createSolStakingSolClaimV1(requestParameters: StakingApiCreateSolStakingSolClaimV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).createSolStakingSolClaimV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redeem BNSOL get SOL
     * @summary Redeem SOL(TRADE)
     * @param {StakingApiCreateSolStakingSolRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public createSolStakingSolRedeemV1(requestParameters: StakingApiCreateSolStakingSolRedeemV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).createSolStakingSolRedeemV1(requestParameters.amount, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Subscribe SOL Staking
     * @summary Subscribe SOL Staking(TRADE)
     * @param {StakingApiCreateSolStakingSolStakeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public createSolStakingSolStakeV1(requestParameters: StakingApiCreateSolStakingSolStakeV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).createSolStakingSolStakeV1(requestParameters.amount, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ETH Staking account
     * @summary ETH Staking account(USER_DATA)
     * @param {StakingApiGetEthStakingAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getEthStakingAccountV2(requestParameters: StakingApiGetEthStakingAccountV2Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getEthStakingAccountV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get WBETH Rate History
     * @summary Get WBETH Rate History(USER_DATA)
     * @param {StakingApiGetEthStakingEthHistoryRateHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getEthStakingEthHistoryRateHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryRateHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getEthStakingEthHistoryRateHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get ETH redemption history
     * @summary Get ETH redemption history(USER_DATA)
     * @param {StakingApiGetEthStakingEthHistoryRedemptionHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getEthStakingEthHistoryRedemptionHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryRedemptionHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getEthStakingEthHistoryRedemptionHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get BETH rewards distribution history
     * @summary Get BETH rewards distribution history(USER_DATA)
     * @param {StakingApiGetEthStakingEthHistoryRewardsHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getEthStakingEthHistoryRewardsHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryRewardsHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getEthStakingEthHistoryRewardsHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get ETH staking history
     * @summary Get ETH staking history(USER_DATA)
     * @param {StakingApiGetEthStakingEthHistoryStakingHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getEthStakingEthHistoryStakingHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryStakingHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getEthStakingEthHistoryStakingHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get WBETH rewards history
     * @summary Get WBETH rewards history(USER_DATA)
     * @param {StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getEthStakingEthHistoryWbethRewardsHistoryV1(requestParameters: StakingApiGetEthStakingEthHistoryWbethRewardsHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getEthStakingEthHistoryWbethRewardsHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current ETH staking quota
     * @summary Get current ETH staking quota(USER_DATA)
     * @param {StakingApiGetEthStakingEthQuotaV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getEthStakingEthQuotaV1(requestParameters: StakingApiGetEthStakingEthQuotaV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getEthStakingEthQuotaV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get WBETH unwrap history
     * @summary Get WBETH unwrap history(USER_DATA)
     * @param {StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getEthStakingWbethHistoryUnwrapHistoryV1(requestParameters: StakingApiGetEthStakingWbethHistoryUnwrapHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getEthStakingWbethHistoryUnwrapHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get WBETH wrap history
     * @summary Get WBETH wrap history(USER_DATA)
     * @param {StakingApiGetEthStakingWbethHistoryWrapHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getEthStakingWbethHistoryWrapHistoryV1(requestParameters: StakingApiGetEthStakingWbethHistoryWrapHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getEthStakingWbethHistoryWrapHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SOL Staking account
     * @summary SOL Staking account(USER_DATA)
     * @param {StakingApiGetSolStakingAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getSolStakingAccountV1(requestParameters: StakingApiGetSolStakingAccountV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getSolStakingAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get BNSOL rewards history
     * @summary Get BNSOL rewards history(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getSolStakingSolHistoryBnsolRewardsHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryBnsolRewardsHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getSolStakingSolHistoryBnsolRewardsHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Boost rewards history
     * @summary Get Boost Rewards History(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getSolStakingSolHistoryBoostRewardsHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryBoostRewardsHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getSolStakingSolHistoryBoostRewardsHistoryV1(requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get BNSOL Rate History
     * @summary Get BNSOL Rate History(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryRateHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getSolStakingSolHistoryRateHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryRateHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getSolStakingSolHistoryRateHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get SOL redemption history
     * @summary Get SOL redemption history(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryRedemptionHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getSolStakingSolHistoryRedemptionHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryRedemptionHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getSolStakingSolHistoryRedemptionHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get SOL staking history
     * @summary Get SOL staking history(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryStakingHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getSolStakingSolHistoryStakingHistoryV1(requestParameters: StakingApiGetSolStakingSolHistoryStakingHistoryV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getSolStakingSolHistoryStakingHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Unclaimed rewards
     * @summary Get Unclaimed Rewards(USER_DATA)
     * @param {StakingApiGetSolStakingSolHistoryUnclaimedRewardsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getSolStakingSolHistoryUnclaimedRewardsV1(requestParameters: StakingApiGetSolStakingSolHistoryUnclaimedRewardsV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getSolStakingSolHistoryUnclaimedRewardsV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get SOL staking quota
     * @summary Get SOL staking quota details(USER_DATA)
     * @param {StakingApiGetSolStakingSolQuotaV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public getSolStakingSolQuotaV1(requestParameters: StakingApiGetSolStakingSolQuotaV1Request, options?: RawAxiosRequestConfig) {
        return StakingApiFp(this.configuration).getSolStakingSolQuotaV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

