/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { GetFiatOrdersV1Resp } from '../model';
// @ts-ignore
import type { GetFiatPaymentsV1Resp } from '../model';
/**
 * FiatApi - axios parameter creator
 * @export
 */
export const FiatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Fiat Deposit/Withdraw History
         * @summary Get Fiat Deposit/Withdraw History (USER_DATA)
         * @param {string} transactionType 0-deposit,1-withdraw
         * @param {number} timestamp 
         * @param {number} [beginTime] 
         * @param {number} [endTime] 
         * @param {number} [page] default 1
         * @param {number} [rows] default 100, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiatOrdersV1: async (transactionType: string, timestamp: number, beginTime?: number, endTime?: number, page?: number, rows?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionType' is not null or undefined
            assertParamExists('getFiatOrdersV1', 'transactionType', transactionType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getFiatOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/fiat/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (transactionType !== undefined) {
                localVarQueryParameter['transactionType'] = transactionType;
            }

            if (beginTime !== undefined) {
                localVarQueryParameter['beginTime'] = beginTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (rows !== undefined) {
                localVarQueryParameter['rows'] = rows;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Fiat Deposit/Withdraw History
         * @summary Get Fiat Payments History (USER_DATA)
         * @param {string} transactionType 0-buy,1-sell
         * @param {number} timestamp 
         * @param {number} [beginTime] 
         * @param {number} [endTime] 
         * @param {number} [page] default 1
         * @param {number} [rows] default 100, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiatPaymentsV1: async (transactionType: string, timestamp: number, beginTime?: number, endTime?: number, page?: number, rows?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionType' is not null or undefined
            assertParamExists('getFiatPaymentsV1', 'transactionType', transactionType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getFiatPaymentsV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/fiat/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (transactionType !== undefined) {
                localVarQueryParameter['transactionType'] = transactionType;
            }

            if (beginTime !== undefined) {
                localVarQueryParameter['beginTime'] = beginTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (rows !== undefined) {
                localVarQueryParameter['rows'] = rows;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FiatApi - functional programming interface
 * @export
 */
export const FiatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FiatApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Fiat Deposit/Withdraw History
         * @summary Get Fiat Deposit/Withdraw History (USER_DATA)
         * @param {string} transactionType 0-deposit,1-withdraw
         * @param {number} timestamp 
         * @param {number} [beginTime] 
         * @param {number} [endTime] 
         * @param {number} [page] default 1
         * @param {number} [rows] default 100, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFiatOrdersV1(transactionType: string, timestamp: number, beginTime?: number, endTime?: number, page?: number, rows?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFiatOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFiatOrdersV1(transactionType, timestamp, beginTime, endTime, page, rows, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FiatApi.getFiatOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Fiat Deposit/Withdraw History
         * @summary Get Fiat Payments History (USER_DATA)
         * @param {string} transactionType 0-buy,1-sell
         * @param {number} timestamp 
         * @param {number} [beginTime] 
         * @param {number} [endTime] 
         * @param {number} [page] default 1
         * @param {number} [rows] default 100, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFiatPaymentsV1(transactionType: string, timestamp: number, beginTime?: number, endTime?: number, page?: number, rows?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFiatPaymentsV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFiatPaymentsV1(transactionType, timestamp, beginTime, endTime, page, rows, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FiatApi.getFiatPaymentsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FiatApi - factory interface
 * @export
 */
export const FiatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FiatApiFp(configuration)
    return {
        /**
         * Get Fiat Deposit/Withdraw History
         * @summary Get Fiat Deposit/Withdraw History (USER_DATA)
         * @param {FiatApiGetFiatOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiatOrdersV1(requestParameters: FiatApiGetFiatOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetFiatOrdersV1Resp> {
            return localVarFp.getFiatOrdersV1(requestParameters.transactionType, requestParameters.timestamp, requestParameters.beginTime, requestParameters.endTime, requestParameters.page, requestParameters.rows, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Fiat Deposit/Withdraw History
         * @summary Get Fiat Payments History (USER_DATA)
         * @param {FiatApiGetFiatPaymentsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiatPaymentsV1(requestParameters: FiatApiGetFiatPaymentsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetFiatPaymentsV1Resp> {
            return localVarFp.getFiatPaymentsV1(requestParameters.transactionType, requestParameters.timestamp, requestParameters.beginTime, requestParameters.endTime, requestParameters.page, requestParameters.rows, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FiatApi - interface
 * @export
 * @interface FiatApi
 */
export interface FiatApiInterface {
    /**
     * Get Fiat Deposit/Withdraw History
     * @summary Get Fiat Deposit/Withdraw History (USER_DATA)
     * @param {FiatApiGetFiatOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiatApiInterface
     */
    getFiatOrdersV1(requestParameters: FiatApiGetFiatOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetFiatOrdersV1Resp>;

    /**
     * Get Fiat Deposit/Withdraw History
     * @summary Get Fiat Payments History (USER_DATA)
     * @param {FiatApiGetFiatPaymentsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiatApiInterface
     */
    getFiatPaymentsV1(requestParameters: FiatApiGetFiatPaymentsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetFiatPaymentsV1Resp>;

}

/**
 * Request parameters for getFiatOrdersV1 operation in FiatApi.
 * @export
 * @interface FiatApiGetFiatOrdersV1Request
 */
export interface FiatApiGetFiatOrdersV1Request {
    /**
     * 0-deposit,1-withdraw
     * @type {string}
     * @memberof FiatApiGetFiatOrdersV1
     */
    readonly transactionType: string

    /**
     * 
     * @type {number}
     * @memberof FiatApiGetFiatOrdersV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof FiatApiGetFiatOrdersV1
     */
    readonly beginTime?: number

    /**
     * 
     * @type {number}
     * @memberof FiatApiGetFiatOrdersV1
     */
    readonly endTime?: number

    /**
     * default 1
     * @type {number}
     * @memberof FiatApiGetFiatOrdersV1
     */
    readonly page?: number

    /**
     * default 100, max 500
     * @type {number}
     * @memberof FiatApiGetFiatOrdersV1
     */
    readonly rows?: number

    /**
     * 
     * @type {number}
     * @memberof FiatApiGetFiatOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getFiatPaymentsV1 operation in FiatApi.
 * @export
 * @interface FiatApiGetFiatPaymentsV1Request
 */
export interface FiatApiGetFiatPaymentsV1Request {
    /**
     * 0-buy,1-sell
     * @type {string}
     * @memberof FiatApiGetFiatPaymentsV1
     */
    readonly transactionType: string

    /**
     * 
     * @type {number}
     * @memberof FiatApiGetFiatPaymentsV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof FiatApiGetFiatPaymentsV1
     */
    readonly beginTime?: number

    /**
     * 
     * @type {number}
     * @memberof FiatApiGetFiatPaymentsV1
     */
    readonly endTime?: number

    /**
     * default 1
     * @type {number}
     * @memberof FiatApiGetFiatPaymentsV1
     */
    readonly page?: number

    /**
     * default 100, max 500
     * @type {number}
     * @memberof FiatApiGetFiatPaymentsV1
     */
    readonly rows?: number

    /**
     * 
     * @type {number}
     * @memberof FiatApiGetFiatPaymentsV1
     */
    readonly recvWindow?: number
}

/**
 * FiatApi - object-oriented interface
 * @export
 * @class FiatApi
 * @extends {BaseAPI}
 */
export class FiatApi extends BaseAPI implements FiatApiInterface {
    /**
     * Get Fiat Deposit/Withdraw History
     * @summary Get Fiat Deposit/Withdraw History (USER_DATA)
     * @param {FiatApiGetFiatOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiatApi
     */
    public getFiatOrdersV1(requestParameters: FiatApiGetFiatOrdersV1Request, options?: RawAxiosRequestConfig) {
        return FiatApiFp(this.configuration).getFiatOrdersV1(requestParameters.transactionType, requestParameters.timestamp, requestParameters.beginTime, requestParameters.endTime, requestParameters.page, requestParameters.rows, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Fiat Deposit/Withdraw History
     * @summary Get Fiat Payments History (USER_DATA)
     * @param {FiatApiGetFiatPaymentsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiatApi
     */
    public getFiatPaymentsV1(requestParameters: FiatApiGetFiatPaymentsV1Request, options?: RawAxiosRequestConfig) {
        return FiatApiFp(this.configuration).getFiatPaymentsV1(requestParameters.transactionType, requestParameters.timestamp, requestParameters.beginTime, requestParameters.endTime, requestParameters.page, requestParameters.rows, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

