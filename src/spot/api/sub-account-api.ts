/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreateManagedSubaccountDepositV1Resp } from '../model';
// @ts-ignore
import type { CreateManagedSubaccountWithdrawV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountBlvtEnableV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountEoptionsEnableV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountFuturesEnableV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountFuturesInternalTransferV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountFuturesMovePositionV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountFuturesTransferV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountMarginEnableV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountMarginTransferV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountSubAccountApiIpRestrictionV2Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountTransferSubToMasterV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountTransferSubToSubV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountUniversalTransferV1Resp } from '../model';
// @ts-ignore
import type { CreateSubAccountVirtualSubAccountV1Resp } from '../model';
// @ts-ignore
import type { DeleteSubAccountSubAccountApiIpRestrictionIpListV1Resp } from '../model';
// @ts-ignore
import type { GetCapitalDepositSubAddressV1Resp } from '../model';
// @ts-ignore
import type { GetCapitalDepositSubHisrecV1RespItem } from '../model';
// @ts-ignore
import type { GetManagedSubaccountAccountSnapshotV1Resp } from '../model';
// @ts-ignore
import type { GetManagedSubaccountAssetV1RespItem } from '../model';
// @ts-ignore
import type { GetManagedSubaccountDepositAddressV1Resp } from '../model';
// @ts-ignore
import type { GetManagedSubaccountFetchFutureAssetV1Resp } from '../model';
// @ts-ignore
import type { GetManagedSubaccountInfoV1Resp } from '../model';
// @ts-ignore
import type { GetManagedSubaccountMarginAssetV1Resp } from '../model';
// @ts-ignore
import type { GetManagedSubaccountQueryTransLogForInvestorV1Resp } from '../model';
// @ts-ignore
import type { GetManagedSubaccountQueryTransLogForTradeParentV1Resp } from '../model';
// @ts-ignore
import type { GetManagedSubaccountQueryTransLogV1Resp } from '../model';
// @ts-ignore
import type { GetSubAccountAssetsV3Resp } from '../model';
// @ts-ignore
import type { GetSubAccountAssetsV4Resp } from '../model';
// @ts-ignore
import type { GetSubAccountFuturesAccountSummaryV1Resp } from '../model';
// @ts-ignore
import type { GetSubAccountFuturesAccountSummaryV2Resp } from '../model';
// @ts-ignore
import type { GetSubAccountFuturesAccountV1Resp } from '../model';
// @ts-ignore
import type { GetSubAccountFuturesAccountV2Resp } from '../model';
// @ts-ignore
import type { GetSubAccountFuturesInternalTransferV1Resp } from '../model';
// @ts-ignore
import type { GetSubAccountFuturesMovePositionV1Resp } from '../model';
// @ts-ignore
import type { GetSubAccountFuturesPositionRiskV1RespItem } from '../model';
// @ts-ignore
import type { GetSubAccountFuturesPositionRiskV2Resp } from '../model';
// @ts-ignore
import type { GetSubAccountListV1Resp } from '../model';
// @ts-ignore
import type { GetSubAccountMarginAccountSummaryV1Resp } from '../model';
// @ts-ignore
import type { GetSubAccountMarginAccountV1Resp } from '../model';
// @ts-ignore
import type { GetSubAccountSpotSummaryV1Resp } from '../model';
// @ts-ignore
import type { GetSubAccountStatusV1RespItem } from '../model';
// @ts-ignore
import type { GetSubAccountSubAccountApiIpRestrictionV1Resp } from '../model';
// @ts-ignore
import type { GetSubAccountSubTransferHistoryV1RespItem } from '../model';
// @ts-ignore
import type { GetSubAccountTransferSubUserHistoryV1RespItem } from '../model';
// @ts-ignore
import type { GetSubAccountUniversalTransferV1Resp } from '../model';
// @ts-ignore
import type { SubaccountGetSubAccountTransactionStatisticsV1Resp } from '../model';
/**
 * SubAccountApi - axios parameter creator
 * @export
 */
export const SubAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deposit Assets Into The Managed Sub-account
         * @summary Deposit Assets Into The Managed Sub-account(For Investor Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManagedSubaccountDepositV1: async (amount: string, asset: string, timestamp: number, toEmail: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createManagedSubaccountDepositV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createManagedSubaccountDepositV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createManagedSubaccountDepositV1', 'timestamp', timestamp)
            // verify required parameter 'toEmail' is not null or undefined
            assertParamExists('createManagedSubaccountDepositV1', 'toEmail', toEmail)
            const localVarPath = `/sapi/v1/managed-subaccount/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toEmail !== undefined) { 
                localVarFormParams.set('toEmail', toEmail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdrawl Assets From The Managed Sub-account
         * @summary Withdrawl Assets From The Managed Sub-account(For Investor Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromEmail 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {number} [transferDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManagedSubaccountWithdrawV1: async (amount: string, asset: string, fromEmail: string, timestamp: number, recvWindow?: number, transferDate?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createManagedSubaccountWithdrawV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createManagedSubaccountWithdrawV1', 'asset', asset)
            // verify required parameter 'fromEmail' is not null or undefined
            assertParamExists('createManagedSubaccountWithdrawV1', 'fromEmail', fromEmail)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createManagedSubaccountWithdrawV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (fromEmail !== undefined) { 
                localVarFormParams.set('fromEmail', fromEmail as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (transferDate !== undefined) { 
                localVarFormParams.set('transferDate', transferDate as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable Leverage Token for Sub-account
         * @summary Enable Leverage Token for Sub-account(For Master Account)
         * @param {string} email 
         * @param {boolean} enableBlvt 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountBlvtEnableV1: async (email: string, enableBlvt: boolean, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createSubAccountBlvtEnableV1', 'email', email)
            // verify required parameter 'enableBlvt' is not null or undefined
            assertParamExists('createSubAccountBlvtEnableV1', 'enableBlvt', enableBlvt)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountBlvtEnableV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/blvt/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (enableBlvt !== undefined) { 
                localVarFormParams.set('enableBlvt', enableBlvt as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable Options for Sub-account (For Master Account).
         * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountEoptionsEnableV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createSubAccountEoptionsEnableV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountEoptionsEnableV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/eoptions/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable Futures for Sub-account for Master Account
         * @summary Enable Futures for Sub-account(For Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountFuturesEnableV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createSubAccountFuturesEnableV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountFuturesEnableV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sub-account Futures Asset Transfer
         * @summary Sub-account Futures Asset Transfer(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromEmail 
         * @param {number} futuresType 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountFuturesInternalTransferV1: async (amount: string, asset: string, fromEmail: string, futuresType: number, timestamp: number, toEmail: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createSubAccountFuturesInternalTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createSubAccountFuturesInternalTransferV1', 'asset', asset)
            // verify required parameter 'fromEmail' is not null or undefined
            assertParamExists('createSubAccountFuturesInternalTransferV1', 'fromEmail', fromEmail)
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('createSubAccountFuturesInternalTransferV1', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountFuturesInternalTransferV1', 'timestamp', timestamp)
            // verify required parameter 'toEmail' is not null or undefined
            assertParamExists('createSubAccountFuturesInternalTransferV1', 'toEmail', toEmail)
            const localVarPath = `/sapi/v1/sub-account/futures/internalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (fromEmail !== undefined) { 
                localVarFormParams.set('fromEmail', fromEmail as any);
            }
    
            if (futuresType !== undefined) { 
                localVarFormParams.set('futuresType', futuresType as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toEmail !== undefined) { 
                localVarFormParams.set('toEmail', toEmail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Move position between sub-master, master-sub, or sub-sub accounts when necessary
         * @summary Move Position for Sub-account (For Master Account)
         * @param {string} fromUserEmail 
         * @param {Array<object>} orderArgs 
         * @param {string} productType 
         * @param {number} timestamp 
         * @param {string} toUserEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountFuturesMovePositionV1: async (fromUserEmail: string, orderArgs: Array<object>, productType: string, timestamp: number, toUserEmail: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromUserEmail' is not null or undefined
            assertParamExists('createSubAccountFuturesMovePositionV1', 'fromUserEmail', fromUserEmail)
            // verify required parameter 'orderArgs' is not null or undefined
            assertParamExists('createSubAccountFuturesMovePositionV1', 'orderArgs', orderArgs)
            // verify required parameter 'productType' is not null or undefined
            assertParamExists('createSubAccountFuturesMovePositionV1', 'productType', productType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountFuturesMovePositionV1', 'timestamp', timestamp)
            // verify required parameter 'toUserEmail' is not null or undefined
            assertParamExists('createSubAccountFuturesMovePositionV1', 'toUserEmail', toUserEmail)
            const localVarPath = `/sapi/v1/sub-account/futures/move-position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (fromUserEmail !== undefined) { 
                localVarFormParams.set('fromUserEmail', fromUserEmail as any);
            }
                if (orderArgs) {
                localVarFormParams.set('orderArgs', orderArgs.join(COLLECTION_FORMATS.csv));
            }

    
            if (productType !== undefined) { 
                localVarFormParams.set('productType', productType as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toUserEmail !== undefined) { 
                localVarFormParams.set('toUserEmail', toUserEmail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Futures Transfer for Sub-account
         * @summary Futures Transfer for Sub-account(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} type 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountFuturesTransferV1: async (amount: string, asset: string, email: string, timestamp: number, type: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createSubAccountFuturesTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createSubAccountFuturesTransferV1', 'asset', asset)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createSubAccountFuturesTransferV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountFuturesTransferV1', 'timestamp', timestamp)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('createSubAccountFuturesTransferV1', 'type', type)
            const localVarPath = `/sapi/v1/sub-account/futures/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable Margin for Sub-account
         * @summary Enable Margin for Sub-account(For Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountMarginEnableV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createSubAccountMarginEnableV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountMarginEnableV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/margin/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Margin Transfer for Sub-account
         * @summary Margin Transfer for Sub-account(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} type 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountMarginTransferV1: async (amount: string, asset: string, email: string, timestamp: number, type: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createSubAccountMarginTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createSubAccountMarginTransferV1', 'asset', asset)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createSubAccountMarginTransferV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountMarginTransferV1', 'timestamp', timestamp)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('createSubAccountMarginTransferV1', 'type', type)
            const localVarPath = `/sapi/v1/sub-account/margin/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add IP Restriction for Sub-Account API key
         * @summary Add IP Restriction for Sub-Account API key(For Master Account)
         * @param {string} email 
         * @param {string} status 
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {string} [ipAddress] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountSubAccountApiIpRestrictionV2: async (email: string, status: string, subAccountApiKey: string, timestamp: number, ipAddress?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createSubAccountSubAccountApiIpRestrictionV2', 'email', email)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('createSubAccountSubAccountApiIpRestrictionV2', 'status', status)
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists('createSubAccountSubAccountApiIpRestrictionV2', 'subAccountApiKey', subAccountApiKey)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountSubAccountApiIpRestrictionV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/sub-account/subAccountApi/ipRestriction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (ipAddress !== undefined) { 
                localVarFormParams.set('ipAddress', ipAddress as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.set('status', status as any);
            }
    
            if (subAccountApiKey !== undefined) { 
                localVarFormParams.set('subAccountApiKey', subAccountApiKey as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer to Master
         * @summary Transfer to Master(For Sub-account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountTransferSubToMasterV1: async (amount: string, asset: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createSubAccountTransferSubToMasterV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createSubAccountTransferSubToMasterV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountTransferSubToMasterV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/transfer/subToMaster`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer to Sub-account of Same Master
         * @summary Transfer to Sub-account of Same Master(For Sub-account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountTransferSubToSubV1: async (amount: string, asset: string, timestamp: number, toEmail: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createSubAccountTransferSubToSubV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createSubAccountTransferSubToSubV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountTransferSubToSubV1', 'timestamp', timestamp)
            // verify required parameter 'toEmail' is not null or undefined
            assertParamExists('createSubAccountTransferSubToSubV1', 'toEmail', toEmail)
            const localVarPath = `/sapi/v1/sub-account/transfer/subToSub`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toEmail !== undefined) { 
                localVarFormParams.set('toEmail', toEmail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Universal Transfer
         * @summary Universal Transfer(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromAccountType 
         * @param {number} timestamp 
         * @param {string} toAccountType 
         * @param {string} [clientTranId] 
         * @param {string} [fromEmail] 
         * @param {number} [recvWindow] 
         * @param {string} [symbol] 
         * @param {string} [toEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountUniversalTransferV1: async (amount: string, asset: string, fromAccountType: string, timestamp: number, toAccountType: string, clientTranId?: string, fromEmail?: string, recvWindow?: number, symbol?: string, toEmail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createSubAccountUniversalTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createSubAccountUniversalTransferV1', 'asset', asset)
            // verify required parameter 'fromAccountType' is not null or undefined
            assertParamExists('createSubAccountUniversalTransferV1', 'fromAccountType', fromAccountType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountUniversalTransferV1', 'timestamp', timestamp)
            // verify required parameter 'toAccountType' is not null or undefined
            assertParamExists('createSubAccountUniversalTransferV1', 'toAccountType', toAccountType)
            const localVarPath = `/sapi/v1/sub-account/universalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (clientTranId !== undefined) { 
                localVarFormParams.set('clientTranId', clientTranId as any);
            }
    
            if (fromAccountType !== undefined) { 
                localVarFormParams.set('fromAccountType', fromAccountType as any);
            }
    
            if (fromEmail !== undefined) { 
                localVarFormParams.set('fromEmail', fromEmail as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toAccountType !== undefined) { 
                localVarFormParams.set('toAccountType', toAccountType as any);
            }
    
            if (toEmail !== undefined) { 
                localVarFormParams.set('toEmail', toEmail as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Virtual Sub-account
         * @summary Create a Virtual Sub-account(For Master Account)
         * @param {string} subAccountString 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountVirtualSubAccountV1: async (subAccountString: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountString' is not null or undefined
            assertParamExists('createSubAccountVirtualSubAccountV1', 'subAccountString', subAccountString)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSubAccountVirtualSubAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/virtualSubAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (subAccountString !== undefined) { 
                localVarFormParams.set('subAccountString', subAccountString as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete IP List For a Sub-account API Key
         * @summary Delete IP List For a Sub-account API Key(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/api-management/Delete-IP-List-For-a-Sub-account-API-Key#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {string} [ipAddress] Can be added in batches, separated by commas
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubAccountSubAccountApiIpRestrictionIpListV1: async (email: string, subAccountApiKey: string, timestamp: number, ipAddress?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('deleteSubAccountSubAccountApiIpRestrictionIpListV1', 'email', email)
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists('deleteSubAccountSubAccountApiIpRestrictionIpListV1', 'subAccountApiKey', subAccountApiKey)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('deleteSubAccountSubAccountApiIpRestrictionIpListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (subAccountApiKey !== undefined) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (ipAddress !== undefined) {
                localVarQueryParameter['ipAddress'] = ipAddress;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch sub-account deposit address
         * @summary Get Sub-account Deposit Address(For Master Account)
         * @param {string} email Sub account email
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalDepositSubAddressV1: async (email: string, coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getCapitalDepositSubAddressV1', 'email', email)
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('getCapitalDepositSubAddressV1', 'coin', coin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getCapitalDepositSubAddressV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/deposit/subAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch sub-account deposit history
         * @summary Get Sub-account Deposit History(For Master Account)
         * @param {string} email Sub account email
         * @param {number} timestamp 
         * @param {string} [coin] 
         * @param {number} [status] 0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User confirm,1:success)
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] 
         * @param {number} [offset] default:0
         * @param {number} [recvWindow] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalDepositSubHisrecV1: async (email: string, timestamp: number, coin?: string, status?: number, startTime?: number, endTime?: number, limit?: number, offset?: number, recvWindow?: number, txId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getCapitalDepositSubHisrecV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getCapitalDepositSubHisrecV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/deposit/subHisrec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (txId !== undefined) {
                localVarQueryParameter['txId'] = txId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Managed Sub-account Snapshot
         * @summary Query Managed Sub-account Snapshot(For Investor Master Account)
         * @param {string} email 
         * @param {string} type &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;（cross）, &amp;#34;FUTURES&amp;#34;（UM）
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountAccountSnapshotV1: async (email: string, type: string, timestamp: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getManagedSubaccountAccountSnapshotV1', 'email', email)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getManagedSubaccountAccountSnapshotV1', 'type', type)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getManagedSubaccountAccountSnapshotV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/accountSnapshot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Managed Sub-account Asset Details
         * @summary Query Managed Sub-account Asset Details(For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountAssetV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getManagedSubaccountAssetV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getManagedSubaccountAssetV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get investor\'s managed sub-account deposit address.
         * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
         * @param {string} email Sub user email
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] networks can be found in &#x60;GET /sapi/v1/capital/deposit/address&#x60;
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountDepositAddressV1: async (email: string, coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getManagedSubaccountDepositAddressV1', 'email', email)
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('getManagedSubaccountDepositAddressV1', 'coin', coin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getManagedSubaccountDepositAddressV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/deposit/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Investor can use this api to query managed sub account futures asset details
         * @summary Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {string} [accountType] No input or input &amp;#34;USDT_FUTURE&amp;#34; to get UM Futures account details. Input &amp;#34;COIN_FUTURE&amp;#34; to get CM Futures account details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountFetchFutureAssetV1: async (email: string, accountType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getManagedSubaccountFetchFutureAssetV1', 'email', email)
            const localVarPath = `/sapi/v1/managed-subaccount/fetch-future-asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (accountType !== undefined) {
                localVarQueryParameter['accountType'] = accountType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get investor\'s managed sub-account list.
         * @summary Query Managed Sub-account List(For Investor)(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [email] Managed sub-account email
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 20, Max value: 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountInfoV1: async (timestamp: number, email?: string, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getManagedSubaccountInfoV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Investor can use this api to query managed sub account margin asset details
         * @summary Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {string} [accountType] No input or input &amp;#34;MARGIN&amp;#34; to get Cross Margin account details. Input &amp;#34;ISOLATED_MARGIN&amp;#34; to get Isolated Margin account details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountMarginAssetV1: async (email: string, accountType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getManagedSubaccountMarginAssetV1', 'email', email)
            const localVarPath = `/sapi/v1/managed-subaccount/marginAsset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (accountType !== undefined) {
                localVarQueryParameter['accountType'] = accountType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountQueryTransLogForInvestorV1: async (email: string, startTime: number, endTime: number, page: number, limit: number, transfers?: string, transferFunctionAccountType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogForInvestorV1', 'email', email)
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogForInvestorV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogForInvestorV1', 'endTime', endTime)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogForInvestorV1', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogForInvestorV1', 'limit', limit)
            const localVarPath = `/sapi/v1/managed-subaccount/queryTransLogForInvestor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountQueryTransLogForTradeParentV1: async (email: string, startTime: number, endTime: number, page: number, limit: number, transfers?: string, transferFunctionAccountType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogForTradeParentV1', 'email', email)
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogForTradeParentV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogForTradeParentV1', 'endTime', endTime)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogForTradeParentV1', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogForTradeParentV1', 'limit', limit)
            const localVarPath = `/sapi/v1/managed-subaccount/queryTransLogForTradeParent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {number} timestamp 
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountQueryTransLogV1: async (startTime: number, endTime: number, page: number, limit: number, timestamp: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogV1', 'endTime', endTime)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogV1', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogV1', 'limit', limit)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getManagedSubaccountQueryTransLogV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/managed-subaccount/query-trans-log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets(For Master Account)
         * @param {string} email Sub account email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountAssetsV3: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountAssetsV3', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountAssetsV3', 'timestamp', timestamp)
            const localVarPath = `/sapi/v3/sub-account/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
         * @param {string} email Sub Account Email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountAssetsV4: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountAssetsV4', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountAssetsV4', 'timestamp', timestamp)
            const localVarPath = `/sapi/v4/sub-account/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesAccountSummaryV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountFuturesAccountSummaryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/accountSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [page] default:1
         * @param {number} [limit] default:10, max:20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesAccountSummaryV2: async (futuresType: number, timestamp: number, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('getSubAccountFuturesAccountSummaryV2', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountFuturesAccountSummaryV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/sub-account/futures/accountSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesAccountV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountFuturesAccountV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountFuturesAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesAccountV2: async (email: string, futuresType: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountFuturesAccountV2', 'email', email)
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('getSubAccountFuturesAccountV2', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountFuturesAccountV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/sub-account/futures/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Sub-account Futures Asset Transfer History
         * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Query-Sub-account-Futures-Asset-Transfer-History#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT-margined Futures，2: Coin-margined Futures
         * @param {number} timestamp 
         * @param {number} [startTime] Cannot be earlier than 1 month ago
         * @param {number} [endTime] 
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 50, Max value: 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesInternalTransferV1: async (email: string, futuresType: number, timestamp: number, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountFuturesInternalTransferV1', 'email', email)
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('getSubAccountFuturesInternalTransferV1', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountFuturesInternalTransferV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/internalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query move position history
         * @summary Get Move Position History for Sub-account (For Master Account)
         * @param {string} symbol 
         * @param {number} page 
         * @param {number} row 
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesMovePositionV1: async (symbol: string, page: number, row: number, timestamp: number, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('getSubAccountFuturesMovePositionV1', 'symbol', symbol)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getSubAccountFuturesMovePositionV1', 'page', page)
            // verify required parameter 'row' is not null or undefined
            assertParamExists('getSubAccountFuturesMovePositionV1', 'row', row)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountFuturesMovePositionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/move-position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (row !== undefined) {
                localVarQueryParameter['row'] = row;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Futures Position-Risk of Sub-account
         * @summary Get Futures Position-Risk of Sub-account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesPositionRiskV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountFuturesPositionRiskV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountFuturesPositionRiskV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/futures/positionRisk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Futures Position-Risk of Sub-account V2
         * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesPositionRiskV2: async (email: string, futuresType: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountFuturesPositionRiskV2', 'email', email)
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('getSubAccountFuturesPositionRiskV2', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountFuturesPositionRiskV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/sub-account/futures/positionRisk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Sub-account List
         * @summary Query Sub-account List(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Query-Sub-account-List#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {string} [isFreeze] true or false
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountListV1: async (timestamp: number, email?: string, isFreeze?: string, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (isFreeze !== undefined) {
                localVarQueryParameter['isFreeze'] = isFreeze;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Summary of Sub-account\'s Margin Account
         * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountMarginAccountSummaryV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountMarginAccountSummaryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/margin/accountSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Detail on Sub-account\'s Margin Account
         * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Margin-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountMarginAccountV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountMarginAccountV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountMarginAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/margin/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get BTC valued asset summary of subaccounts.
         * @summary Query Sub-account Spot Assets Summary(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] Sub account email
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountSpotSummaryV1: async (timestamp: number, email?: string, page?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountSpotSummaryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/spotSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Sub-account\'s Status on Margin Or Futures
         * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Sub-accounts-Status-on-Margin-Or-Futures#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountStatusV1: async (timestamp: number, email?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountStatusV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get IP Restriction for a Sub-account API Key
         * @summary Get IP Restriction for a Sub-account API Key(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/api-management#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountSubAccountApiIpRestrictionV1: async (email: string, subAccountApiKey: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountSubAccountApiIpRestrictionV1', 'email', email)
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists('getSubAccountSubAccountApiIpRestrictionV1', 'subAccountApiKey', subAccountApiKey)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountSubAccountApiIpRestrictionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/subAccountApi/ipRestriction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (subAccountApiKey !== undefined) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Sub-account Spot Asset Transfer History
         * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
         * @param {number} timestamp 
         * @param {string} [fromEmail] 
         * @param {string} [toEmail] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountSubTransferHistoryV1: async (timestamp: number, fromEmail?: string, toEmail?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountSubTransferHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/sub/transfer/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromEmail !== undefined) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Sub-account Transaction statistics (For Master Account).
         * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
         * @param {string} email Sub user email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountTransactionStatisticsV1: async (email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountTransactionStatisticsV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountTransactionStatisticsV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/transaction-statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sub-account Transfer History
         * @summary Sub-account Transfer History(For Sub-account)
         * @param {number} timestamp 
         * @param {string} [asset] If not sent, result of all assets will be returned
         * @param {number} [type] 1: transfer in, 2: transfer out
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 500
         * @param {boolean} [returnFailHistory] Default &#x60;False&#x60;, return PROCESS and SUCCESS status history; If &#x60;True&#x60;,return PROCESS and SUCCESS and FAILURE status history
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountTransferSubUserHistoryV1: async (timestamp: number, asset?: string, type?: number, startTime?: number, endTime?: number, limit?: number, returnFailHistory?: boolean, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountTransferSubUserHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/transfer/subUserHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (returnFailHistory !== undefined) {
                localVarQueryParameter['returnFailHistory'] = returnFailHistory;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Universal Transfer History
         * @summary Query Universal Transfer History(For Master Account)
         * @param {number} timestamp 
         * @param {string} [fromEmail] 
         * @param {string} [toEmail] 
         * @param {string} [clientTranId] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500, Max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountUniversalTransferV1: async (timestamp: number, fromEmail?: string, toEmail?: string, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSubAccountUniversalTransferV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/sub-account/universalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromEmail !== undefined) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (clientTranId !== undefined) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubAccountApi - functional programming interface
 * @export
 */
export const SubAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Deposit Assets Into The Managed Sub-account
         * @summary Deposit Assets Into The Managed Sub-account(For Investor Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createManagedSubaccountDepositV1(amount: string, asset: string, timestamp: number, toEmail: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManagedSubaccountDepositV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createManagedSubaccountDepositV1(amount, asset, timestamp, toEmail, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createManagedSubaccountDepositV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Withdrawl Assets From The Managed Sub-account
         * @summary Withdrawl Assets From The Managed Sub-account(For Investor Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromEmail 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {number} [transferDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createManagedSubaccountWithdrawV1(amount: string, asset: string, fromEmail: string, timestamp: number, recvWindow?: number, transferDate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManagedSubaccountWithdrawV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createManagedSubaccountWithdrawV1(amount, asset, fromEmail, timestamp, recvWindow, transferDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createManagedSubaccountWithdrawV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable Leverage Token for Sub-account
         * @summary Enable Leverage Token for Sub-account(For Master Account)
         * @param {string} email 
         * @param {boolean} enableBlvt 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountBlvtEnableV1(email: string, enableBlvt: boolean, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountBlvtEnableV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountBlvtEnableV1(email, enableBlvt, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountBlvtEnableV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable Options for Sub-account (For Master Account).
         * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountEoptionsEnableV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountEoptionsEnableV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountEoptionsEnableV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountEoptionsEnableV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable Futures for Sub-account for Master Account
         * @summary Enable Futures for Sub-account(For Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountFuturesEnableV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountFuturesEnableV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountFuturesEnableV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountFuturesEnableV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sub-account Futures Asset Transfer
         * @summary Sub-account Futures Asset Transfer(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromEmail 
         * @param {number} futuresType 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountFuturesInternalTransferV1(amount: string, asset: string, fromEmail: string, futuresType: number, timestamp: number, toEmail: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountFuturesInternalTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountFuturesInternalTransferV1(amount, asset, fromEmail, futuresType, timestamp, toEmail, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountFuturesInternalTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Move position between sub-master, master-sub, or sub-sub accounts when necessary
         * @summary Move Position for Sub-account (For Master Account)
         * @param {string} fromUserEmail 
         * @param {Array<object>} orderArgs 
         * @param {string} productType 
         * @param {number} timestamp 
         * @param {string} toUserEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountFuturesMovePositionV1(fromUserEmail: string, orderArgs: Array<object>, productType: string, timestamp: number, toUserEmail: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountFuturesMovePositionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountFuturesMovePositionV1(fromUserEmail, orderArgs, productType, timestamp, toUserEmail, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountFuturesMovePositionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Futures Transfer for Sub-account
         * @summary Futures Transfer for Sub-account(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} type 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountFuturesTransferV1(amount: string, asset: string, email: string, timestamp: number, type: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountFuturesTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountFuturesTransferV1(amount, asset, email, timestamp, type, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountFuturesTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable Margin for Sub-account
         * @summary Enable Margin for Sub-account(For Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountMarginEnableV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountMarginEnableV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountMarginEnableV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountMarginEnableV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Margin Transfer for Sub-account
         * @summary Margin Transfer for Sub-account(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} type 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountMarginTransferV1(amount: string, asset: string, email: string, timestamp: number, type: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountMarginTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountMarginTransferV1(amount, asset, email, timestamp, type, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountMarginTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add IP Restriction for Sub-Account API key
         * @summary Add IP Restriction for Sub-Account API key(For Master Account)
         * @param {string} email 
         * @param {string} status 
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {string} [ipAddress] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountSubAccountApiIpRestrictionV2(email: string, status: string, subAccountApiKey: string, timestamp: number, ipAddress?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountSubAccountApiIpRestrictionV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountSubAccountApiIpRestrictionV2(email, status, subAccountApiKey, timestamp, ipAddress, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountSubAccountApiIpRestrictionV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfer to Master
         * @summary Transfer to Master(For Sub-account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountTransferSubToMasterV1(amount: string, asset: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountTransferSubToMasterV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountTransferSubToMasterV1(amount, asset, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountTransferSubToMasterV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfer to Sub-account of Same Master
         * @summary Transfer to Sub-account of Same Master(For Sub-account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} toEmail 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountTransferSubToSubV1(amount: string, asset: string, timestamp: number, toEmail: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountTransferSubToSubV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountTransferSubToSubV1(amount, asset, timestamp, toEmail, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountTransferSubToSubV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Universal Transfer
         * @summary Universal Transfer(For Master Account)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromAccountType 
         * @param {number} timestamp 
         * @param {string} toAccountType 
         * @param {string} [clientTranId] 
         * @param {string} [fromEmail] 
         * @param {number} [recvWindow] 
         * @param {string} [symbol] 
         * @param {string} [toEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountUniversalTransferV1(amount: string, asset: string, fromAccountType: string, timestamp: number, toAccountType: string, clientTranId?: string, fromEmail?: string, recvWindow?: number, symbol?: string, toEmail?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountUniversalTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountUniversalTransferV1(amount, asset, fromAccountType, timestamp, toAccountType, clientTranId, fromEmail, recvWindow, symbol, toEmail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountUniversalTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a Virtual Sub-account
         * @summary Create a Virtual Sub-account(For Master Account)
         * @param {string} subAccountString 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubAccountVirtualSubAccountV1(subAccountString: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubAccountVirtualSubAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubAccountVirtualSubAccountV1(subAccountString, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.createSubAccountVirtualSubAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete IP List For a Sub-account API Key
         * @summary Delete IP List For a Sub-account API Key(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/api-management/Delete-IP-List-For-a-Sub-account-API-Key#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {string} [ipAddress] Can be added in batches, separated by commas
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubAccountSubAccountApiIpRestrictionIpListV1(email: string, subAccountApiKey: string, timestamp: number, ipAddress?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteSubAccountSubAccountApiIpRestrictionIpListV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubAccountSubAccountApiIpRestrictionIpListV1(email, subAccountApiKey, timestamp, ipAddress, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.deleteSubAccountSubAccountApiIpRestrictionIpListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch sub-account deposit address
         * @summary Get Sub-account Deposit Address(For Master Account)
         * @param {string} email Sub account email
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCapitalDepositSubAddressV1(email: string, coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCapitalDepositSubAddressV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCapitalDepositSubAddressV1(email, coin, timestamp, network, amount, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getCapitalDepositSubAddressV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch sub-account deposit history
         * @summary Get Sub-account Deposit History(For Master Account)
         * @param {string} email Sub account email
         * @param {number} timestamp 
         * @param {string} [coin] 
         * @param {number} [status] 0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User confirm,1:success)
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] 
         * @param {number} [offset] default:0
         * @param {number} [recvWindow] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCapitalDepositSubHisrecV1(email: string, timestamp: number, coin?: string, status?: number, startTime?: number, endTime?: number, limit?: number, offset?: number, recvWindow?: number, txId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCapitalDepositSubHisrecV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCapitalDepositSubHisrecV1(email, timestamp, coin, status, startTime, endTime, limit, offset, recvWindow, txId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getCapitalDepositSubHisrecV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Managed Sub-account Snapshot
         * @summary Query Managed Sub-account Snapshot(For Investor Master Account)
         * @param {string} email 
         * @param {string} type &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;（cross）, &amp;#34;FUTURES&amp;#34;（UM）
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagedSubaccountAccountSnapshotV1(email: string, type: string, timestamp: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManagedSubaccountAccountSnapshotV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagedSubaccountAccountSnapshotV1(email, type, timestamp, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getManagedSubaccountAccountSnapshotV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Managed Sub-account Asset Details
         * @summary Query Managed Sub-account Asset Details(For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagedSubaccountAssetV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetManagedSubaccountAssetV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagedSubaccountAssetV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getManagedSubaccountAssetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get investor\'s managed sub-account deposit address.
         * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
         * @param {string} email Sub user email
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] networks can be found in &#x60;GET /sapi/v1/capital/deposit/address&#x60;
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagedSubaccountDepositAddressV1(email: string, coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManagedSubaccountDepositAddressV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagedSubaccountDepositAddressV1(email, coin, timestamp, network, amount, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getManagedSubaccountDepositAddressV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Investor can use this api to query managed sub account futures asset details
         * @summary Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {string} [accountType] No input or input &amp;#34;USDT_FUTURE&amp;#34; to get UM Futures account details. Input &amp;#34;COIN_FUTURE&amp;#34; to get CM Futures account details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagedSubaccountFetchFutureAssetV1(email: string, accountType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManagedSubaccountFetchFutureAssetV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagedSubaccountFetchFutureAssetV1(email, accountType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getManagedSubaccountFetchFutureAssetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get investor\'s managed sub-account list.
         * @summary Query Managed Sub-account List(For Investor)(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [email] Managed sub-account email
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 20, Max value: 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagedSubaccountInfoV1(timestamp: number, email?: string, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManagedSubaccountInfoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagedSubaccountInfoV1(timestamp, email, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getManagedSubaccountInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Investor can use this api to query managed sub account margin asset details
         * @summary Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {string} [accountType] No input or input &amp;#34;MARGIN&amp;#34; to get Cross Margin account details. Input &amp;#34;ISOLATED_MARGIN&amp;#34; to get Isolated Margin account details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagedSubaccountMarginAssetV1(email: string, accountType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManagedSubaccountMarginAssetV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagedSubaccountMarginAssetV1(email, accountType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getManagedSubaccountMarginAssetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagedSubaccountQueryTransLogForInvestorV1(email: string, startTime: number, endTime: number, page: number, limit: number, transfers?: string, transferFunctionAccountType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManagedSubaccountQueryTransLogForInvestorV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagedSubaccountQueryTransLogForInvestorV1(email, startTime, endTime, page, limit, transfers, transferFunctionAccountType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getManagedSubaccountQueryTransLogForInvestorV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
         * @param {string} email Managed Sub Account Email
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagedSubaccountQueryTransLogForTradeParentV1(email: string, startTime: number, endTime: number, page: number, limit: number, transfers?: string, transferFunctionAccountType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManagedSubaccountQueryTransLogForTradeParentV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagedSubaccountQueryTransLogForTradeParentV1(email, startTime, endTime, page, limit, transfers, transferFunctionAccountType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getManagedSubaccountQueryTransLogForTradeParentV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {number} timestamp 
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagedSubaccountQueryTransLogV1(startTime: number, endTime: number, page: number, limit: number, timestamp: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManagedSubaccountQueryTransLogV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagedSubaccountQueryTransLogV1(startTime, endTime, page, limit, timestamp, transfers, transferFunctionAccountType, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getManagedSubaccountQueryTransLogV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets(For Master Account)
         * @param {string} email Sub account email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountAssetsV3(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountAssetsV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountAssetsV3(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountAssetsV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
         * @param {string} email Sub Account Email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountAssetsV4(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountAssetsV4Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountAssetsV4(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountAssetsV4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountFuturesAccountSummaryV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountFuturesAccountSummaryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountFuturesAccountSummaryV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountFuturesAccountSummaryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [page] default:1
         * @param {number} [limit] default:10, max:20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountFuturesAccountSummaryV2(futuresType: number, timestamp: number, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountFuturesAccountSummaryV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountFuturesAccountSummaryV2(futuresType, timestamp, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountFuturesAccountSummaryV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountFuturesAccountV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountFuturesAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountFuturesAccountV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountFuturesAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountFuturesAccountV2(email: string, futuresType: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountFuturesAccountV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountFuturesAccountV2(email, futuresType, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountFuturesAccountV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Sub-account Futures Asset Transfer History
         * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Query-Sub-account-Futures-Asset-Transfer-History#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT-margined Futures，2: Coin-margined Futures
         * @param {number} timestamp 
         * @param {number} [startTime] Cannot be earlier than 1 month ago
         * @param {number} [endTime] 
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 50, Max value: 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountFuturesInternalTransferV1(email: string, futuresType: number, timestamp: number, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountFuturesInternalTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountFuturesInternalTransferV1(email, futuresType, timestamp, startTime, endTime, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountFuturesInternalTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query move position history
         * @summary Get Move Position History for Sub-account (For Master Account)
         * @param {string} symbol 
         * @param {number} page 
         * @param {number} row 
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountFuturesMovePositionV1(symbol: string, page: number, row: number, timestamp: number, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountFuturesMovePositionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountFuturesMovePositionV1(symbol, page, row, timestamp, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountFuturesMovePositionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Futures Position-Risk of Sub-account
         * @summary Get Futures Position-Risk of Sub-account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountFuturesPositionRiskV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSubAccountFuturesPositionRiskV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountFuturesPositionRiskV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountFuturesPositionRiskV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Futures Position-Risk of Sub-account V2
         * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} futuresType 1:USDT Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountFuturesPositionRiskV2(email: string, futuresType: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountFuturesPositionRiskV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountFuturesPositionRiskV2(email, futuresType, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountFuturesPositionRiskV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Sub-account List
         * @summary Query Sub-account List(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Query-Sub-account-List#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {string} [isFreeze] true or false
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountListV1(timestamp: number, email?: string, isFreeze?: string, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountListV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountListV1(timestamp, email, isFreeze, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Summary of Sub-account\'s Margin Account
         * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountMarginAccountSummaryV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountMarginAccountSummaryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountMarginAccountSummaryV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountMarginAccountSummaryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Detail on Sub-account\'s Margin Account
         * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Margin-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountMarginAccountV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountMarginAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountMarginAccountV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountMarginAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get BTC valued asset summary of subaccounts.
         * @summary Query Sub-account Spot Assets Summary(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] Sub account email
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountSpotSummaryV1(timestamp: number, email?: string, page?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountSpotSummaryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountSpotSummaryV1(timestamp, email, page, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountSpotSummaryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Sub-account\'s Status on Margin Or Futures
         * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
         * @param {number} timestamp 
         * @param {string} [email] &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Sub-accounts-Status-on-Margin-Or-Futures#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountStatusV1(timestamp: number, email?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSubAccountStatusV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountStatusV1(timestamp, email, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get IP Restriction for a Sub-account API Key
         * @summary Get IP Restriction for a Sub-account API Key(For Master Account)
         * @param {string} email &lt;a href&#x3D;\&quot;/docs/sub_account/api-management#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountSubAccountApiIpRestrictionV1(email: string, subAccountApiKey: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountSubAccountApiIpRestrictionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountSubAccountApiIpRestrictionV1(email, subAccountApiKey, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountSubAccountApiIpRestrictionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Sub-account Spot Asset Transfer History
         * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
         * @param {number} timestamp 
         * @param {string} [fromEmail] 
         * @param {string} [toEmail] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountSubTransferHistoryV1(timestamp: number, fromEmail?: string, toEmail?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSubAccountSubTransferHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountSubTransferHistoryV1(timestamp, fromEmail, toEmail, startTime, endTime, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountSubTransferHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Sub-account Transaction statistics (For Master Account).
         * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
         * @param {string} email Sub user email
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountTransactionStatisticsV1(email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubaccountGetSubAccountTransactionStatisticsV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountTransactionStatisticsV1(email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountTransactionStatisticsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sub-account Transfer History
         * @summary Sub-account Transfer History(For Sub-account)
         * @param {number} timestamp 
         * @param {string} [asset] If not sent, result of all assets will be returned
         * @param {number} [type] 1: transfer in, 2: transfer out
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 500
         * @param {boolean} [returnFailHistory] Default &#x60;False&#x60;, return PROCESS and SUCCESS status history; If &#x60;True&#x60;,return PROCESS and SUCCESS and FAILURE status history
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountTransferSubUserHistoryV1(timestamp: number, asset?: string, type?: number, startTime?: number, endTime?: number, limit?: number, returnFailHistory?: boolean, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSubAccountTransferSubUserHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountTransferSubUserHistoryV1(timestamp, asset, type, startTime, endTime, limit, returnFailHistory, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountTransferSubUserHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Universal Transfer History
         * @summary Query Universal Transfer History(For Master Account)
         * @param {number} timestamp 
         * @param {string} [fromEmail] 
         * @param {string} [toEmail] 
         * @param {string} [clientTranId] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500, Max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubAccountUniversalTransferV1(timestamp: number, fromEmail?: string, toEmail?: string, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubAccountUniversalTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubAccountUniversalTransferV1(timestamp, fromEmail, toEmail, clientTranId, startTime, endTime, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubAccountApi.getSubAccountUniversalTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubAccountApi - factory interface
 * @export
 */
export const SubAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubAccountApiFp(configuration)
    return {
        /**
         * Deposit Assets Into The Managed Sub-account
         * @summary Deposit Assets Into The Managed Sub-account(For Investor Master Account)
         * @param {SubAccountApiCreateManagedSubaccountDepositV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManagedSubaccountDepositV1(requestParameters: SubAccountApiCreateManagedSubaccountDepositV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateManagedSubaccountDepositV1Resp> {
            return localVarFp.createManagedSubaccountDepositV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Withdrawl Assets From The Managed Sub-account
         * @summary Withdrawl Assets From The Managed Sub-account(For Investor Master Account)
         * @param {SubAccountApiCreateManagedSubaccountWithdrawV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManagedSubaccountWithdrawV1(requestParameters: SubAccountApiCreateManagedSubaccountWithdrawV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateManagedSubaccountWithdrawV1Resp> {
            return localVarFp.createManagedSubaccountWithdrawV1(requestParameters.amount, requestParameters.asset, requestParameters.fromEmail, requestParameters.timestamp, requestParameters.recvWindow, requestParameters.transferDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable Leverage Token for Sub-account
         * @summary Enable Leverage Token for Sub-account(For Master Account)
         * @param {SubAccountApiCreateSubAccountBlvtEnableV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountBlvtEnableV1(requestParameters: SubAccountApiCreateSubAccountBlvtEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountBlvtEnableV1Resp> {
            return localVarFp.createSubAccountBlvtEnableV1(requestParameters.email, requestParameters.enableBlvt, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable Options for Sub-account (For Master Account).
         * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
         * @param {SubAccountApiCreateSubAccountEoptionsEnableV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountEoptionsEnableV1(requestParameters: SubAccountApiCreateSubAccountEoptionsEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountEoptionsEnableV1Resp> {
            return localVarFp.createSubAccountEoptionsEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable Futures for Sub-account for Master Account
         * @summary Enable Futures for Sub-account(For Master Account)
         * @param {SubAccountApiCreateSubAccountFuturesEnableV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountFuturesEnableV1(requestParameters: SubAccountApiCreateSubAccountFuturesEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountFuturesEnableV1Resp> {
            return localVarFp.createSubAccountFuturesEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Sub-account Futures Asset Transfer
         * @summary Sub-account Futures Asset Transfer(For Master Account)
         * @param {SubAccountApiCreateSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountFuturesInternalTransferV1(requestParameters: SubAccountApiCreateSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountFuturesInternalTransferV1Resp> {
            return localVarFp.createSubAccountFuturesInternalTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.fromEmail, requestParameters.futuresType, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Move position between sub-master, master-sub, or sub-sub accounts when necessary
         * @summary Move Position for Sub-account (For Master Account)
         * @param {SubAccountApiCreateSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountFuturesMovePositionV1(requestParameters: SubAccountApiCreateSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountFuturesMovePositionV1Resp> {
            return localVarFp.createSubAccountFuturesMovePositionV1(requestParameters.fromUserEmail, requestParameters.orderArgs, requestParameters.productType, requestParameters.timestamp, requestParameters.toUserEmail, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Futures Transfer for Sub-account
         * @summary Futures Transfer for Sub-account(For Master Account)
         * @param {SubAccountApiCreateSubAccountFuturesTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountFuturesTransferV1(requestParameters: SubAccountApiCreateSubAccountFuturesTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountFuturesTransferV1Resp> {
            return localVarFp.createSubAccountFuturesTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.email, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable Margin for Sub-account
         * @summary Enable Margin for Sub-account(For Master Account)
         * @param {SubAccountApiCreateSubAccountMarginEnableV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountMarginEnableV1(requestParameters: SubAccountApiCreateSubAccountMarginEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountMarginEnableV1Resp> {
            return localVarFp.createSubAccountMarginEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Margin Transfer for Sub-account
         * @summary Margin Transfer for Sub-account(For Master Account)
         * @param {SubAccountApiCreateSubAccountMarginTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountMarginTransferV1(requestParameters: SubAccountApiCreateSubAccountMarginTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountMarginTransferV1Resp> {
            return localVarFp.createSubAccountMarginTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.email, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Add IP Restriction for Sub-Account API key
         * @summary Add IP Restriction for Sub-Account API key(For Master Account)
         * @param {SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountSubAccountApiIpRestrictionV2(requestParameters: SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountSubAccountApiIpRestrictionV2Resp> {
            return localVarFp.createSubAccountSubAccountApiIpRestrictionV2(requestParameters.email, requestParameters.status, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.ipAddress, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer to Master
         * @summary Transfer to Master(For Sub-account)
         * @param {SubAccountApiCreateSubAccountTransferSubToMasterV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountTransferSubToMasterV1(requestParameters: SubAccountApiCreateSubAccountTransferSubToMasterV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountTransferSubToMasterV1Resp> {
            return localVarFp.createSubAccountTransferSubToMasterV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer to Sub-account of Same Master
         * @summary Transfer to Sub-account of Same Master(For Sub-account)
         * @param {SubAccountApiCreateSubAccountTransferSubToSubV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountTransferSubToSubV1(requestParameters: SubAccountApiCreateSubAccountTransferSubToSubV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountTransferSubToSubV1Resp> {
            return localVarFp.createSubAccountTransferSubToSubV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Universal Transfer
         * @summary Universal Transfer(For Master Account)
         * @param {SubAccountApiCreateSubAccountUniversalTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountUniversalTransferV1(requestParameters: SubAccountApiCreateSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountUniversalTransferV1Resp> {
            return localVarFp.createSubAccountUniversalTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.fromAccountType, requestParameters.timestamp, requestParameters.toAccountType, requestParameters.clientTranId, requestParameters.fromEmail, requestParameters.recvWindow, requestParameters.symbol, requestParameters.toEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Virtual Sub-account
         * @summary Create a Virtual Sub-account(For Master Account)
         * @param {SubAccountApiCreateSubAccountVirtualSubAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubAccountVirtualSubAccountV1(requestParameters: SubAccountApiCreateSubAccountVirtualSubAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountVirtualSubAccountV1Resp> {
            return localVarFp.createSubAccountVirtualSubAccountV1(requestParameters.subAccountString, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete IP List For a Sub-account API Key
         * @summary Delete IP List For a Sub-account API Key(For Master Account)
         * @param {SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubAccountSubAccountApiIpRestrictionIpListV1(requestParameters: SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DeleteSubAccountSubAccountApiIpRestrictionIpListV1Resp> {
            return localVarFp.deleteSubAccountSubAccountApiIpRestrictionIpListV1(requestParameters.email, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.ipAddress, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch sub-account deposit address
         * @summary Get Sub-account Deposit Address(For Master Account)
         * @param {SubAccountApiGetCapitalDepositSubAddressV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalDepositSubAddressV1(requestParameters: SubAccountApiGetCapitalDepositSubAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetCapitalDepositSubAddressV1Resp> {
            return localVarFp.getCapitalDepositSubAddressV1(requestParameters.email, requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch sub-account deposit history
         * @summary Get Sub-account Deposit History(For Master Account)
         * @param {SubAccountApiGetCapitalDepositSubHisrecV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalDepositSubHisrecV1(requestParameters: SubAccountApiGetCapitalDepositSubHisrecV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalDepositSubHisrecV1RespItem>> {
            return localVarFp.getCapitalDepositSubHisrecV1(requestParameters.email, requestParameters.timestamp, requestParameters.coin, requestParameters.status, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.offset, requestParameters.recvWindow, requestParameters.txId, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Managed Sub-account Snapshot
         * @summary Query Managed Sub-account Snapshot(For Investor Master Account)
         * @param {SubAccountApiGetManagedSubaccountAccountSnapshotV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountAccountSnapshotV1(requestParameters: SubAccountApiGetManagedSubaccountAccountSnapshotV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountAccountSnapshotV1Resp> {
            return localVarFp.getManagedSubaccountAccountSnapshotV1(requestParameters.email, requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Managed Sub-account Asset Details
         * @summary Query Managed Sub-account Asset Details(For Investor Master Account)
         * @param {SubAccountApiGetManagedSubaccountAssetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountAssetV1(requestParameters: SubAccountApiGetManagedSubaccountAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetManagedSubaccountAssetV1RespItem>> {
            return localVarFp.getManagedSubaccountAssetV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get investor\'s managed sub-account deposit address.
         * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
         * @param {SubAccountApiGetManagedSubaccountDepositAddressV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountDepositAddressV1(requestParameters: SubAccountApiGetManagedSubaccountDepositAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountDepositAddressV1Resp> {
            return localVarFp.getManagedSubaccountDepositAddressV1(requestParameters.email, requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Investor can use this api to query managed sub account futures asset details
         * @summary Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
         * @param {SubAccountApiGetManagedSubaccountFetchFutureAssetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountFetchFutureAssetV1(requestParameters: SubAccountApiGetManagedSubaccountFetchFutureAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountFetchFutureAssetV1Resp> {
            return localVarFp.getManagedSubaccountFetchFutureAssetV1(requestParameters.email, requestParameters.accountType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get investor\'s managed sub-account list.
         * @summary Query Managed Sub-account List(For Investor)(USER_DATA)
         * @param {SubAccountApiGetManagedSubaccountInfoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountInfoV1(requestParameters: SubAccountApiGetManagedSubaccountInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountInfoV1Resp> {
            return localVarFp.getManagedSubaccountInfoV1(requestParameters.timestamp, requestParameters.email, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Investor can use this api to query managed sub account margin asset details
         * @summary Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
         * @param {SubAccountApiGetManagedSubaccountMarginAssetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountMarginAssetV1(requestParameters: SubAccountApiGetManagedSubaccountMarginAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountMarginAssetV1Resp> {
            return localVarFp.getManagedSubaccountMarginAssetV1(requestParameters.email, requestParameters.accountType, options).then((request) => request(axios, basePath));
        },
        /**
         * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
         * @param {SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountQueryTransLogForInvestorV1(requestParameters: SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountQueryTransLogForInvestorV1Resp> {
            return localVarFp.getManagedSubaccountQueryTransLogForInvestorV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.transfers, requestParameters.transferFunctionAccountType, options).then((request) => request(axios, basePath));
        },
        /**
         * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
         * @summary Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
         * @param {SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountQueryTransLogForTradeParentV1(requestParameters: SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountQueryTransLogForTradeParentV1Resp> {
            return localVarFp.getManagedSubaccountQueryTransLogForTradeParentV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.transfers, requestParameters.transferFunctionAccountType, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
         * @param {SubAccountApiGetManagedSubaccountQueryTransLogV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagedSubaccountQueryTransLogV1(requestParameters: SubAccountApiGetManagedSubaccountQueryTransLogV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountQueryTransLogV1Resp> {
            return localVarFp.getManagedSubaccountQueryTransLogV1(requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.timestamp, requestParameters.transfers, requestParameters.transferFunctionAccountType, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets(For Master Account)
         * @param {SubAccountApiGetSubAccountAssetsV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountAssetsV3(requestParameters: SubAccountApiGetSubAccountAssetsV3Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountAssetsV3Resp> {
            return localVarFp.getSubAccountAssetsV3(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch sub-account assets
         * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
         * @param {SubAccountApiGetSubAccountAssetsV4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountAssetsV4(requestParameters: SubAccountApiGetSubAccountAssetsV4Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountAssetsV4Resp> {
            return localVarFp.getSubAccountAssetsV4(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
         * @param {SubAccountApiGetSubAccountFuturesAccountSummaryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesAccountSummaryV1(requestParameters: SubAccountApiGetSubAccountFuturesAccountSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesAccountSummaryV1Resp> {
            return localVarFp.getSubAccountFuturesAccountSummaryV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Summary of Sub-account\'s Futures Account
         * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
         * @param {SubAccountApiGetSubAccountFuturesAccountSummaryV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesAccountSummaryV2(requestParameters: SubAccountApiGetSubAccountFuturesAccountSummaryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesAccountSummaryV2Resp> {
            return localVarFp.getSubAccountFuturesAccountSummaryV2(requestParameters.futuresType, requestParameters.timestamp, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
         * @param {SubAccountApiGetSubAccountFuturesAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesAccountV1(requestParameters: SubAccountApiGetSubAccountFuturesAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesAccountV1Resp> {
            return localVarFp.getSubAccountFuturesAccountV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Detail on Sub-account\'s Futures Account
         * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
         * @param {SubAccountApiGetSubAccountFuturesAccountV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesAccountV2(requestParameters: SubAccountApiGetSubAccountFuturesAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesAccountV2Resp> {
            return localVarFp.getSubAccountFuturesAccountV2(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Sub-account Futures Asset Transfer History
         * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
         * @param {SubAccountApiGetSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesInternalTransferV1(requestParameters: SubAccountApiGetSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesInternalTransferV1Resp> {
            return localVarFp.getSubAccountFuturesInternalTransferV1(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query move position history
         * @summary Get Move Position History for Sub-account (For Master Account)
         * @param {SubAccountApiGetSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesMovePositionV1(requestParameters: SubAccountApiGetSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesMovePositionV1Resp> {
            return localVarFp.getSubAccountFuturesMovePositionV1(requestParameters.symbol, requestParameters.page, requestParameters.row, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Futures Position-Risk of Sub-account
         * @summary Get Futures Position-Risk of Sub-account(For Master Account)
         * @param {SubAccountApiGetSubAccountFuturesPositionRiskV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesPositionRiskV1(requestParameters: SubAccountApiGetSubAccountFuturesPositionRiskV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSubAccountFuturesPositionRiskV1RespItem>> {
            return localVarFp.getSubAccountFuturesPositionRiskV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Futures Position-Risk of Sub-account V2
         * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
         * @param {SubAccountApiGetSubAccountFuturesPositionRiskV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountFuturesPositionRiskV2(requestParameters: SubAccountApiGetSubAccountFuturesPositionRiskV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesPositionRiskV2Resp> {
            return localVarFp.getSubAccountFuturesPositionRiskV2(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Sub-account List
         * @summary Query Sub-account List(For Master Account)
         * @param {SubAccountApiGetSubAccountListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountListV1(requestParameters: SubAccountApiGetSubAccountListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountListV1Resp> {
            return localVarFp.getSubAccountListV1(requestParameters.timestamp, requestParameters.email, requestParameters.isFreeze, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Summary of Sub-account\'s Margin Account
         * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
         * @param {SubAccountApiGetSubAccountMarginAccountSummaryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountMarginAccountSummaryV1(requestParameters: SubAccountApiGetSubAccountMarginAccountSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountMarginAccountSummaryV1Resp> {
            return localVarFp.getSubAccountMarginAccountSummaryV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Detail on Sub-account\'s Margin Account
         * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
         * @param {SubAccountApiGetSubAccountMarginAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountMarginAccountV1(requestParameters: SubAccountApiGetSubAccountMarginAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountMarginAccountV1Resp> {
            return localVarFp.getSubAccountMarginAccountV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get BTC valued asset summary of subaccounts.
         * @summary Query Sub-account Spot Assets Summary(For Master Account)
         * @param {SubAccountApiGetSubAccountSpotSummaryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountSpotSummaryV1(requestParameters: SubAccountApiGetSubAccountSpotSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountSpotSummaryV1Resp> {
            return localVarFp.getSubAccountSpotSummaryV1(requestParameters.timestamp, requestParameters.email, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Sub-account\'s Status on Margin Or Futures
         * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
         * @param {SubAccountApiGetSubAccountStatusV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountStatusV1(requestParameters: SubAccountApiGetSubAccountStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSubAccountStatusV1RespItem>> {
            return localVarFp.getSubAccountStatusV1(requestParameters.timestamp, requestParameters.email, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get IP Restriction for a Sub-account API Key
         * @summary Get IP Restriction for a Sub-account API Key(For Master Account)
         * @param {SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountSubAccountApiIpRestrictionV1(requestParameters: SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountSubAccountApiIpRestrictionV1Resp> {
            return localVarFp.getSubAccountSubAccountApiIpRestrictionV1(requestParameters.email, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Sub-account Spot Asset Transfer History
         * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
         * @param {SubAccountApiGetSubAccountSubTransferHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountSubTransferHistoryV1(requestParameters: SubAccountApiGetSubAccountSubTransferHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSubAccountSubTransferHistoryV1RespItem>> {
            return localVarFp.getSubAccountSubTransferHistoryV1(requestParameters.timestamp, requestParameters.fromEmail, requestParameters.toEmail, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Sub-account Transaction statistics (For Master Account).
         * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
         * @param {SubAccountApiGetSubAccountTransactionStatisticsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountTransactionStatisticsV1(requestParameters: SubAccountApiGetSubAccountTransactionStatisticsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountTransactionStatisticsV1Resp> {
            return localVarFp.getSubAccountTransactionStatisticsV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Sub-account Transfer History
         * @summary Sub-account Transfer History(For Sub-account)
         * @param {SubAccountApiGetSubAccountTransferSubUserHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountTransferSubUserHistoryV1(requestParameters: SubAccountApiGetSubAccountTransferSubUserHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSubAccountTransferSubUserHistoryV1RespItem>> {
            return localVarFp.getSubAccountTransferSubUserHistoryV1(requestParameters.timestamp, requestParameters.asset, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.returnFailHistory, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Universal Transfer History
         * @summary Query Universal Transfer History(For Master Account)
         * @param {SubAccountApiGetSubAccountUniversalTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubAccountUniversalTransferV1(requestParameters: SubAccountApiGetSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountUniversalTransferV1Resp> {
            return localVarFp.getSubAccountUniversalTransferV1(requestParameters.timestamp, requestParameters.fromEmail, requestParameters.toEmail, requestParameters.clientTranId, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubAccountApi - interface
 * @export
 * @interface SubAccountApi
 */
export interface SubAccountApiInterface {
    /**
     * Deposit Assets Into The Managed Sub-account
     * @summary Deposit Assets Into The Managed Sub-account(For Investor Master Account)
     * @param {SubAccountApiCreateManagedSubaccountDepositV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createManagedSubaccountDepositV1(requestParameters: SubAccountApiCreateManagedSubaccountDepositV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateManagedSubaccountDepositV1Resp>;

    /**
     * Withdrawl Assets From The Managed Sub-account
     * @summary Withdrawl Assets From The Managed Sub-account(For Investor Master Account)
     * @param {SubAccountApiCreateManagedSubaccountWithdrawV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createManagedSubaccountWithdrawV1(requestParameters: SubAccountApiCreateManagedSubaccountWithdrawV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateManagedSubaccountWithdrawV1Resp>;

    /**
     * Enable Leverage Token for Sub-account
     * @summary Enable Leverage Token for Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountBlvtEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountBlvtEnableV1(requestParameters: SubAccountApiCreateSubAccountBlvtEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountBlvtEnableV1Resp>;

    /**
     * Enable Options for Sub-account (For Master Account).
     * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
     * @param {SubAccountApiCreateSubAccountEoptionsEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountEoptionsEnableV1(requestParameters: SubAccountApiCreateSubAccountEoptionsEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountEoptionsEnableV1Resp>;

    /**
     * Enable Futures for Sub-account for Master Account
     * @summary Enable Futures for Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountFuturesEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountFuturesEnableV1(requestParameters: SubAccountApiCreateSubAccountFuturesEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountFuturesEnableV1Resp>;

    /**
     * Sub-account Futures Asset Transfer
     * @summary Sub-account Futures Asset Transfer(For Master Account)
     * @param {SubAccountApiCreateSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountFuturesInternalTransferV1(requestParameters: SubAccountApiCreateSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountFuturesInternalTransferV1Resp>;

    /**
     * Move position between sub-master, master-sub, or sub-sub accounts when necessary
     * @summary Move Position for Sub-account (For Master Account)
     * @param {SubAccountApiCreateSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountFuturesMovePositionV1(requestParameters: SubAccountApiCreateSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountFuturesMovePositionV1Resp>;

    /**
     * Futures Transfer for Sub-account
     * @summary Futures Transfer for Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountFuturesTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountFuturesTransferV1(requestParameters: SubAccountApiCreateSubAccountFuturesTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountFuturesTransferV1Resp>;

    /**
     * Enable Margin for Sub-account
     * @summary Enable Margin for Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountMarginEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountMarginEnableV1(requestParameters: SubAccountApiCreateSubAccountMarginEnableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountMarginEnableV1Resp>;

    /**
     * Margin Transfer for Sub-account
     * @summary Margin Transfer for Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountMarginTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountMarginTransferV1(requestParameters: SubAccountApiCreateSubAccountMarginTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountMarginTransferV1Resp>;

    /**
     * Add IP Restriction for Sub-Account API key
     * @summary Add IP Restriction for Sub-Account API key(For Master Account)
     * @param {SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountSubAccountApiIpRestrictionV2(requestParameters: SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountSubAccountApiIpRestrictionV2Resp>;

    /**
     * Transfer to Master
     * @summary Transfer to Master(For Sub-account)
     * @param {SubAccountApiCreateSubAccountTransferSubToMasterV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountTransferSubToMasterV1(requestParameters: SubAccountApiCreateSubAccountTransferSubToMasterV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountTransferSubToMasterV1Resp>;

    /**
     * Transfer to Sub-account of Same Master
     * @summary Transfer to Sub-account of Same Master(For Sub-account)
     * @param {SubAccountApiCreateSubAccountTransferSubToSubV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountTransferSubToSubV1(requestParameters: SubAccountApiCreateSubAccountTransferSubToSubV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountTransferSubToSubV1Resp>;

    /**
     * Universal Transfer
     * @summary Universal Transfer(For Master Account)
     * @param {SubAccountApiCreateSubAccountUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountUniversalTransferV1(requestParameters: SubAccountApiCreateSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountUniversalTransferV1Resp>;

    /**
     * Create a Virtual Sub-account
     * @summary Create a Virtual Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountVirtualSubAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    createSubAccountVirtualSubAccountV1(requestParameters: SubAccountApiCreateSubAccountVirtualSubAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubAccountVirtualSubAccountV1Resp>;

    /**
     * Delete IP List For a Sub-account API Key
     * @summary Delete IP List For a Sub-account API Key(For Master Account)
     * @param {SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    deleteSubAccountSubAccountApiIpRestrictionIpListV1(requestParameters: SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DeleteSubAccountSubAccountApiIpRestrictionIpListV1Resp>;

    /**
     * Fetch sub-account deposit address
     * @summary Get Sub-account Deposit Address(For Master Account)
     * @param {SubAccountApiGetCapitalDepositSubAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getCapitalDepositSubAddressV1(requestParameters: SubAccountApiGetCapitalDepositSubAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetCapitalDepositSubAddressV1Resp>;

    /**
     * Fetch sub-account deposit history
     * @summary Get Sub-account Deposit History(For Master Account)
     * @param {SubAccountApiGetCapitalDepositSubHisrecV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getCapitalDepositSubHisrecV1(requestParameters: SubAccountApiGetCapitalDepositSubHisrecV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalDepositSubHisrecV1RespItem>>;

    /**
     * Query Managed Sub-account Snapshot
     * @summary Query Managed Sub-account Snapshot(For Investor Master Account)
     * @param {SubAccountApiGetManagedSubaccountAccountSnapshotV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getManagedSubaccountAccountSnapshotV1(requestParameters: SubAccountApiGetManagedSubaccountAccountSnapshotV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountAccountSnapshotV1Resp>;

    /**
     * Query Managed Sub-account Asset Details
     * @summary Query Managed Sub-account Asset Details(For Investor Master Account)
     * @param {SubAccountApiGetManagedSubaccountAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getManagedSubaccountAssetV1(requestParameters: SubAccountApiGetManagedSubaccountAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetManagedSubaccountAssetV1RespItem>>;

    /**
     * Get investor\'s managed sub-account deposit address.
     * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountDepositAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getManagedSubaccountDepositAddressV1(requestParameters: SubAccountApiGetManagedSubaccountDepositAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountDepositAddressV1Resp>;

    /**
     * Investor can use this api to query managed sub account futures asset details
     * @summary Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountFetchFutureAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getManagedSubaccountFetchFutureAssetV1(requestParameters: SubAccountApiGetManagedSubaccountFetchFutureAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountFetchFutureAssetV1Resp>;

    /**
     * Get investor\'s managed sub-account list.
     * @summary Query Managed Sub-account List(For Investor)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getManagedSubaccountInfoV1(requestParameters: SubAccountApiGetManagedSubaccountInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountInfoV1Resp>;

    /**
     * Investor can use this api to query managed sub account margin asset details
     * @summary Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountMarginAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getManagedSubaccountMarginAssetV1(requestParameters: SubAccountApiGetManagedSubaccountMarginAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountMarginAssetV1Resp>;

    /**
     * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
     * @summary Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getManagedSubaccountQueryTransLogForInvestorV1(requestParameters: SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountQueryTransLogForInvestorV1Resp>;

    /**
     * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
     * @summary Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getManagedSubaccountQueryTransLogForTradeParentV1(requestParameters: SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountQueryTransLogForTradeParentV1Resp>;

    /**
     * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
     * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountQueryTransLogV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getManagedSubaccountQueryTransLogV1(requestParameters: SubAccountApiGetManagedSubaccountQueryTransLogV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetManagedSubaccountQueryTransLogV1Resp>;

    /**
     * Fetch sub-account assets
     * @summary Query Sub-account Assets(For Master Account)
     * @param {SubAccountApiGetSubAccountAssetsV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountAssetsV3(requestParameters: SubAccountApiGetSubAccountAssetsV3Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountAssetsV3Resp>;

    /**
     * Fetch sub-account assets
     * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
     * @param {SubAccountApiGetSubAccountAssetsV4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountAssetsV4(requestParameters: SubAccountApiGetSubAccountAssetsV4Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountAssetsV4Resp>;

    /**
     * Get Summary of Sub-account\'s Futures Account
     * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesAccountSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountFuturesAccountSummaryV1(requestParameters: SubAccountApiGetSubAccountFuturesAccountSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesAccountSummaryV1Resp>;

    /**
     * Get Summary of Sub-account\'s Futures Account
     * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesAccountSummaryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountFuturesAccountSummaryV2(requestParameters: SubAccountApiGetSubAccountFuturesAccountSummaryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesAccountSummaryV2Resp>;

    /**
     * Get Detail on Sub-account\'s Futures Account
     * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountFuturesAccountV1(requestParameters: SubAccountApiGetSubAccountFuturesAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesAccountV1Resp>;

    /**
     * Get Detail on Sub-account\'s Futures Account
     * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountFuturesAccountV2(requestParameters: SubAccountApiGetSubAccountFuturesAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesAccountV2Resp>;

    /**
     * Query Sub-account Futures Asset Transfer History
     * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountFuturesInternalTransferV1(requestParameters: SubAccountApiGetSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesInternalTransferV1Resp>;

    /**
     * Query move position history
     * @summary Get Move Position History for Sub-account (For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountFuturesMovePositionV1(requestParameters: SubAccountApiGetSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesMovePositionV1Resp>;

    /**
     * Get Futures Position-Risk of Sub-account
     * @summary Get Futures Position-Risk of Sub-account(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesPositionRiskV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountFuturesPositionRiskV1(requestParameters: SubAccountApiGetSubAccountFuturesPositionRiskV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSubAccountFuturesPositionRiskV1RespItem>>;

    /**
     * Get Futures Position-Risk of Sub-account V2
     * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesPositionRiskV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountFuturesPositionRiskV2(requestParameters: SubAccountApiGetSubAccountFuturesPositionRiskV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountFuturesPositionRiskV2Resp>;

    /**
     * Query Sub-account List
     * @summary Query Sub-account List(For Master Account)
     * @param {SubAccountApiGetSubAccountListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountListV1(requestParameters: SubAccountApiGetSubAccountListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountListV1Resp>;

    /**
     * Get Summary of Sub-account\'s Margin Account
     * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
     * @param {SubAccountApiGetSubAccountMarginAccountSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountMarginAccountSummaryV1(requestParameters: SubAccountApiGetSubAccountMarginAccountSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountMarginAccountSummaryV1Resp>;

    /**
     * Get Detail on Sub-account\'s Margin Account
     * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
     * @param {SubAccountApiGetSubAccountMarginAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountMarginAccountV1(requestParameters: SubAccountApiGetSubAccountMarginAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountMarginAccountV1Resp>;

    /**
     * Get BTC valued asset summary of subaccounts.
     * @summary Query Sub-account Spot Assets Summary(For Master Account)
     * @param {SubAccountApiGetSubAccountSpotSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountSpotSummaryV1(requestParameters: SubAccountApiGetSubAccountSpotSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountSpotSummaryV1Resp>;

    /**
     * Get Sub-account\'s Status on Margin Or Futures
     * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
     * @param {SubAccountApiGetSubAccountStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountStatusV1(requestParameters: SubAccountApiGetSubAccountStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSubAccountStatusV1RespItem>>;

    /**
     * Get IP Restriction for a Sub-account API Key
     * @summary Get IP Restriction for a Sub-account API Key(For Master Account)
     * @param {SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountSubAccountApiIpRestrictionV1(requestParameters: SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountSubAccountApiIpRestrictionV1Resp>;

    /**
     * Query Sub-account Spot Asset Transfer History
     * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
     * @param {SubAccountApiGetSubAccountSubTransferHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountSubTransferHistoryV1(requestParameters: SubAccountApiGetSubAccountSubTransferHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSubAccountSubTransferHistoryV1RespItem>>;

    /**
     * Query Sub-account Transaction statistics (For Master Account).
     * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
     * @param {SubAccountApiGetSubAccountTransactionStatisticsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountTransactionStatisticsV1(requestParameters: SubAccountApiGetSubAccountTransactionStatisticsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SubaccountGetSubAccountTransactionStatisticsV1Resp>;

    /**
     * Sub-account Transfer History
     * @summary Sub-account Transfer History(For Sub-account)
     * @param {SubAccountApiGetSubAccountTransferSubUserHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountTransferSubUserHistoryV1(requestParameters: SubAccountApiGetSubAccountTransferSubUserHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSubAccountTransferSubUserHistoryV1RespItem>>;

    /**
     * Query Universal Transfer History
     * @summary Query Universal Transfer History(For Master Account)
     * @param {SubAccountApiGetSubAccountUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApiInterface
     */
    getSubAccountUniversalTransferV1(requestParameters: SubAccountApiGetSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSubAccountUniversalTransferV1Resp>;

}

/**
 * Request parameters for createManagedSubaccountDepositV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateManagedSubaccountDepositV1Request
 */
export interface SubAccountApiCreateManagedSubaccountDepositV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateManagedSubaccountDepositV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateManagedSubaccountDepositV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateManagedSubaccountDepositV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateManagedSubaccountDepositV1
     */
    readonly toEmail: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateManagedSubaccountDepositV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createManagedSubaccountWithdrawV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateManagedSubaccountWithdrawV1Request
 */
export interface SubAccountApiCreateManagedSubaccountWithdrawV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateManagedSubaccountWithdrawV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateManagedSubaccountWithdrawV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateManagedSubaccountWithdrawV1
     */
    readonly fromEmail: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateManagedSubaccountWithdrawV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateManagedSubaccountWithdrawV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateManagedSubaccountWithdrawV1
     */
    readonly transferDate?: number
}

/**
 * Request parameters for createSubAccountBlvtEnableV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountBlvtEnableV1Request
 */
export interface SubAccountApiCreateSubAccountBlvtEnableV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountBlvtEnableV1
     */
    readonly email: string

    /**
     * 
     * @type {boolean}
     * @memberof SubAccountApiCreateSubAccountBlvtEnableV1
     */
    readonly enableBlvt: boolean

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountBlvtEnableV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountBlvtEnableV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSubAccountEoptionsEnableV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountEoptionsEnableV1Request
 */
export interface SubAccountApiCreateSubAccountEoptionsEnableV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountEoptionsEnableV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountEoptionsEnableV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountEoptionsEnableV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSubAccountFuturesEnableV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountFuturesEnableV1Request
 */
export interface SubAccountApiCreateSubAccountFuturesEnableV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountFuturesEnableV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountFuturesEnableV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountFuturesEnableV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSubAccountFuturesInternalTransferV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountFuturesInternalTransferV1Request
 */
export interface SubAccountApiCreateSubAccountFuturesInternalTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountFuturesInternalTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountFuturesInternalTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountFuturesInternalTransferV1
     */
    readonly fromEmail: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountFuturesInternalTransferV1
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountFuturesInternalTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountFuturesInternalTransferV1
     */
    readonly toEmail: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountFuturesInternalTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSubAccountFuturesMovePositionV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountFuturesMovePositionV1Request
 */
export interface SubAccountApiCreateSubAccountFuturesMovePositionV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountFuturesMovePositionV1
     */
    readonly fromUserEmail: string

    /**
     * 
     * @type {Array<object>}
     * @memberof SubAccountApiCreateSubAccountFuturesMovePositionV1
     */
    readonly orderArgs: Array<object>

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountFuturesMovePositionV1
     */
    readonly productType: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountFuturesMovePositionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountFuturesMovePositionV1
     */
    readonly toUserEmail: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountFuturesMovePositionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSubAccountFuturesTransferV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountFuturesTransferV1Request
 */
export interface SubAccountApiCreateSubAccountFuturesTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountFuturesTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountFuturesTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountFuturesTransferV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountFuturesTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountFuturesTransferV1
     */
    readonly type: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountFuturesTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSubAccountMarginEnableV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountMarginEnableV1Request
 */
export interface SubAccountApiCreateSubAccountMarginEnableV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountMarginEnableV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountMarginEnableV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountMarginEnableV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSubAccountMarginTransferV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountMarginTransferV1Request
 */
export interface SubAccountApiCreateSubAccountMarginTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountMarginTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountMarginTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountMarginTransferV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountMarginTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountMarginTransferV1
     */
    readonly type: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountMarginTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSubAccountSubAccountApiIpRestrictionV2 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2Request
 */
export interface SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2
     */
    readonly email: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2
     */
    readonly status: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2
     */
    readonly subAccountApiKey: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2
     */
    readonly ipAddress?: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSubAccountTransferSubToMasterV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountTransferSubToMasterV1Request
 */
export interface SubAccountApiCreateSubAccountTransferSubToMasterV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountTransferSubToMasterV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountTransferSubToMasterV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountTransferSubToMasterV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountTransferSubToMasterV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSubAccountTransferSubToSubV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountTransferSubToSubV1Request
 */
export interface SubAccountApiCreateSubAccountTransferSubToSubV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountTransferSubToSubV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountTransferSubToSubV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountTransferSubToSubV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountTransferSubToSubV1
     */
    readonly toEmail: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountTransferSubToSubV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSubAccountUniversalTransferV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountUniversalTransferV1Request
 */
export interface SubAccountApiCreateSubAccountUniversalTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountUniversalTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountUniversalTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountUniversalTransferV1
     */
    readonly fromAccountType: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountUniversalTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountUniversalTransferV1
     */
    readonly toAccountType: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountUniversalTransferV1
     */
    readonly clientTranId?: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountUniversalTransferV1
     */
    readonly fromEmail?: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountUniversalTransferV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountUniversalTransferV1
     */
    readonly symbol?: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountUniversalTransferV1
     */
    readonly toEmail?: string
}

/**
 * Request parameters for createSubAccountVirtualSubAccountV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiCreateSubAccountVirtualSubAccountV1Request
 */
export interface SubAccountApiCreateSubAccountVirtualSubAccountV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiCreateSubAccountVirtualSubAccountV1
     */
    readonly subAccountString: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountVirtualSubAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiCreateSubAccountVirtualSubAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for deleteSubAccountSubAccountApiIpRestrictionIpListV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1Request
 */
export interface SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/api-management/Delete-IP-List-For-a-Sub-account-API-Key#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1
     */
    readonly email: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1
     */
    readonly subAccountApiKey: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1
     */
    readonly timestamp: number

    /**
     * Can be added in batches, separated by commas
     * @type {string}
     * @memberof SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1
     */
    readonly ipAddress?: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getCapitalDepositSubAddressV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetCapitalDepositSubAddressV1Request
 */
export interface SubAccountApiGetCapitalDepositSubAddressV1Request {
    /**
     * Sub account email
     * @type {string}
     * @memberof SubAccountApiGetCapitalDepositSubAddressV1
     */
    readonly email: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetCapitalDepositSubAddressV1
     */
    readonly coin: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetCapitalDepositSubAddressV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetCapitalDepositSubAddressV1
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetCapitalDepositSubAddressV1
     */
    readonly amount?: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetCapitalDepositSubAddressV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getCapitalDepositSubHisrecV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetCapitalDepositSubHisrecV1Request
 */
export interface SubAccountApiGetCapitalDepositSubHisrecV1Request {
    /**
     * Sub account email
     * @type {string}
     * @memberof SubAccountApiGetCapitalDepositSubHisrecV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetCapitalDepositSubHisrecV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetCapitalDepositSubHisrecV1
     */
    readonly coin?: string

    /**
     * 0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User confirm,1:success)
     * @type {number}
     * @memberof SubAccountApiGetCapitalDepositSubHisrecV1
     */
    readonly status?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetCapitalDepositSubHisrecV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetCapitalDepositSubHisrecV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetCapitalDepositSubHisrecV1
     */
    readonly limit?: number

    /**
     * default:0
     * @type {number}
     * @memberof SubAccountApiGetCapitalDepositSubHisrecV1
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetCapitalDepositSubHisrecV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetCapitalDepositSubHisrecV1
     */
    readonly txId?: string
}

/**
 * Request parameters for getManagedSubaccountAccountSnapshotV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetManagedSubaccountAccountSnapshotV1Request
 */
export interface SubAccountApiGetManagedSubaccountAccountSnapshotV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountAccountSnapshotV1
     */
    readonly email: string

    /**
     * &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;（cross）, &amp;#34;FUTURES&amp;#34;（UM）
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountAccountSnapshotV1
     */
    readonly type: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountAccountSnapshotV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountAccountSnapshotV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountAccountSnapshotV1
     */
    readonly endTime?: number

    /**
     * min 7, max 30, default 7
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountAccountSnapshotV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountAccountSnapshotV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getManagedSubaccountAssetV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetManagedSubaccountAssetV1Request
 */
export interface SubAccountApiGetManagedSubaccountAssetV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountAssetV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountAssetV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountAssetV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getManagedSubaccountDepositAddressV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetManagedSubaccountDepositAddressV1Request
 */
export interface SubAccountApiGetManagedSubaccountDepositAddressV1Request {
    /**
     * Sub user email
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountDepositAddressV1
     */
    readonly email: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountDepositAddressV1
     */
    readonly coin: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountDepositAddressV1
     */
    readonly timestamp: number

    /**
     * networks can be found in &#x60;GET /sapi/v1/capital/deposit/address&#x60;
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountDepositAddressV1
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountDepositAddressV1
     */
    readonly amount?: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountDepositAddressV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getManagedSubaccountFetchFutureAssetV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetManagedSubaccountFetchFutureAssetV1Request
 */
export interface SubAccountApiGetManagedSubaccountFetchFutureAssetV1Request {
    /**
     * Managed Sub Account Email
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountFetchFutureAssetV1
     */
    readonly email: string

    /**
     * No input or input &amp;#34;USDT_FUTURE&amp;#34; to get UM Futures account details. Input &amp;#34;COIN_FUTURE&amp;#34; to get CM Futures account details.
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountFetchFutureAssetV1
     */
    readonly accountType?: string
}

/**
 * Request parameters for getManagedSubaccountInfoV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetManagedSubaccountInfoV1Request
 */
export interface SubAccountApiGetManagedSubaccountInfoV1Request {
    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountInfoV1
     */
    readonly timestamp: number

    /**
     * Managed sub-account email
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountInfoV1
     */
    readonly email?: string

    /**
     * Default value: 1
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountInfoV1
     */
    readonly page?: number

    /**
     * Default value: 20, Max value: 20
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountInfoV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountInfoV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getManagedSubaccountMarginAssetV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetManagedSubaccountMarginAssetV1Request
 */
export interface SubAccountApiGetManagedSubaccountMarginAssetV1Request {
    /**
     * Managed Sub Account Email
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountMarginAssetV1
     */
    readonly email: string

    /**
     * No input or input &amp;#34;MARGIN&amp;#34; to get Cross Margin account details. Input &amp;#34;ISOLATED_MARGIN&amp;#34; to get Isolated Margin account details.
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountMarginAssetV1
     */
    readonly accountType?: string
}

/**
 * Request parameters for getManagedSubaccountQueryTransLogForInvestorV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1Request
 */
export interface SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1Request {
    /**
     * Managed Sub Account Email
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly email: string

    /**
     * Start Time
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly startTime: number

    /**
     * End Time (The start time and end time interval cannot exceed half a year)
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly endTime: number

    /**
     * Page
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly page: number

    /**
     * Limit (Max: 500)
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly limit: number

    /**
     * Transfer Direction (FROM/TO)
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly transfers?: string

    /**
     * Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1
     */
    readonly transferFunctionAccountType?: string
}

/**
 * Request parameters for getManagedSubaccountQueryTransLogForTradeParentV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1Request
 */
export interface SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1Request {
    /**
     * Managed Sub Account Email
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly email: string

    /**
     * Start Time
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly startTime: number

    /**
     * End Time (The start time and end time interval cannot exceed half a year)
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly endTime: number

    /**
     * Page
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly page: number

    /**
     * Limit (Max: 500)
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly limit: number

    /**
     * Transfer Direction (FROM/TO)
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly transfers?: string

    /**
     * Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1
     */
    readonly transferFunctionAccountType?: string
}

/**
 * Request parameters for getManagedSubaccountQueryTransLogV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetManagedSubaccountQueryTransLogV1Request
 */
export interface SubAccountApiGetManagedSubaccountQueryTransLogV1Request {
    /**
     * Start Time
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogV1
     */
    readonly startTime: number

    /**
     * End Time (The start time and end time interval cannot exceed half a year)
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogV1
     */
    readonly endTime: number

    /**
     * Page
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogV1
     */
    readonly page: number

    /**
     * Limit (Max: 500)
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogV1
     */
    readonly limit: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogV1
     */
    readonly timestamp: number

    /**
     * Transfer Direction (FROM/TO)
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogV1
     */
    readonly transfers?: string

    /**
     * Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
     * @type {string}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogV1
     */
    readonly transferFunctionAccountType?: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetManagedSubaccountQueryTransLogV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountAssetsV3 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountAssetsV3Request
 */
export interface SubAccountApiGetSubAccountAssetsV3Request {
    /**
     * Sub account email
     * @type {string}
     * @memberof SubAccountApiGetSubAccountAssetsV3
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountAssetsV3
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountAssetsV3
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountAssetsV4 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountAssetsV4Request
 */
export interface SubAccountApiGetSubAccountAssetsV4Request {
    /**
     * Sub Account Email
     * @type {string}
     * @memberof SubAccountApiGetSubAccountAssetsV4
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountAssetsV4
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountAssetsV4
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountFuturesAccountSummaryV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountFuturesAccountSummaryV1Request
 */
export interface SubAccountApiGetSubAccountFuturesAccountSummaryV1Request {
    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountSummaryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountSummaryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountFuturesAccountSummaryV2 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountFuturesAccountSummaryV2Request
 */
export interface SubAccountApiGetSubAccountFuturesAccountSummaryV2Request {
    /**
     * 1:USDT Margined Futures, 2:COIN Margined Futures
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountSummaryV2
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountSummaryV2
     */
    readonly timestamp: number

    /**
     * default:1
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountSummaryV2
     */
    readonly page?: number

    /**
     * default:10, max:20
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountSummaryV2
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountSummaryV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountFuturesAccountV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountFuturesAccountV1Request
 */
export interface SubAccountApiGetSubAccountFuturesAccountV1Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof SubAccountApiGetSubAccountFuturesAccountV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountFuturesAccountV2 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountFuturesAccountV2Request
 */
export interface SubAccountApiGetSubAccountFuturesAccountV2Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof SubAccountApiGetSubAccountFuturesAccountV2
     */
    readonly email: string

    /**
     * 1:USDT Margined Futures, 2:COIN Margined Futures
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountV2
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesAccountV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountFuturesInternalTransferV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountFuturesInternalTransferV1Request
 */
export interface SubAccountApiGetSubAccountFuturesInternalTransferV1Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Query-Sub-account-Futures-Asset-Transfer-History#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof SubAccountApiGetSubAccountFuturesInternalTransferV1
     */
    readonly email: string

    /**
     * 1:USDT-margined Futures，2: Coin-margined Futures
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesInternalTransferV1
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesInternalTransferV1
     */
    readonly timestamp: number

    /**
     * Cannot be earlier than 1 month ago
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesInternalTransferV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesInternalTransferV1
     */
    readonly endTime?: number

    /**
     * Default value: 1
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesInternalTransferV1
     */
    readonly page?: number

    /**
     * Default value: 50, Max value: 500
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesInternalTransferV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesInternalTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountFuturesMovePositionV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountFuturesMovePositionV1Request
 */
export interface SubAccountApiGetSubAccountFuturesMovePositionV1Request {
    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetSubAccountFuturesMovePositionV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesMovePositionV1
     */
    readonly page: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesMovePositionV1
     */
    readonly row: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesMovePositionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesMovePositionV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesMovePositionV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesMovePositionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountFuturesPositionRiskV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountFuturesPositionRiskV1Request
 */
export interface SubAccountApiGetSubAccountFuturesPositionRiskV1Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof SubAccountApiGetSubAccountFuturesPositionRiskV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesPositionRiskV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesPositionRiskV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountFuturesPositionRiskV2 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountFuturesPositionRiskV2Request
 */
export interface SubAccountApiGetSubAccountFuturesPositionRiskV2Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account-V2#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof SubAccountApiGetSubAccountFuturesPositionRiskV2
     */
    readonly email: string

    /**
     * 1:USDT Margined Futures, 2:COIN Margined Futures
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesPositionRiskV2
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesPositionRiskV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountFuturesPositionRiskV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountListV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountListV1Request
 */
export interface SubAccountApiGetSubAccountListV1Request {
    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountListV1
     */
    readonly timestamp: number

    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Query-Sub-account-List#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof SubAccountApiGetSubAccountListV1
     */
    readonly email?: string

    /**
     * true or false
     * @type {string}
     * @memberof SubAccountApiGetSubAccountListV1
     */
    readonly isFreeze?: string

    /**
     * Default value: 1
     * @type {number}
     * @memberof SubAccountApiGetSubAccountListV1
     */
    readonly page?: number

    /**
     * Default value: 1, Max value: 200
     * @type {number}
     * @memberof SubAccountApiGetSubAccountListV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountMarginAccountSummaryV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountMarginAccountSummaryV1Request
 */
export interface SubAccountApiGetSubAccountMarginAccountSummaryV1Request {
    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountMarginAccountSummaryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountMarginAccountSummaryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountMarginAccountV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountMarginAccountV1Request
 */
export interface SubAccountApiGetSubAccountMarginAccountV1Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Margin-Account#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof SubAccountApiGetSubAccountMarginAccountV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountMarginAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountMarginAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountSpotSummaryV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountSpotSummaryV1Request
 */
export interface SubAccountApiGetSubAccountSpotSummaryV1Request {
    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSpotSummaryV1
     */
    readonly timestamp: number

    /**
     * Sub account email
     * @type {string}
     * @memberof SubAccountApiGetSubAccountSpotSummaryV1
     */
    readonly email?: string

    /**
     * default 1
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSpotSummaryV1
     */
    readonly page?: number

    /**
     * default 10, max 20
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSpotSummaryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSpotSummaryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountStatusV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountStatusV1Request
 */
export interface SubAccountApiGetSubAccountStatusV1Request {
    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountStatusV1
     */
    readonly timestamp: number

    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/account-management/Get-Sub-accounts-Status-on-Margin-Or-Futures#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof SubAccountApiGetSubAccountStatusV1
     */
    readonly email?: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountStatusV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountSubAccountApiIpRestrictionV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1Request
 */
export interface SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1Request {
    /**
     * &lt;a href&#x3D;\&quot;/docs/sub_account/api-management#email-address\&quot;&gt;Sub-account email&lt;/a&gt;
     * @type {string}
     * @memberof SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1
     */
    readonly email: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1
     */
    readonly subAccountApiKey: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountSubTransferHistoryV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountSubTransferHistoryV1Request
 */
export interface SubAccountApiGetSubAccountSubTransferHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSubTransferHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetSubAccountSubTransferHistoryV1
     */
    readonly fromEmail?: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetSubAccountSubTransferHistoryV1
     */
    readonly toEmail?: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSubTransferHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSubTransferHistoryV1
     */
    readonly endTime?: number

    /**
     * Default value: 1
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSubTransferHistoryV1
     */
    readonly page?: number

    /**
     * Default value: 500
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSubTransferHistoryV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountSubTransferHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountTransactionStatisticsV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountTransactionStatisticsV1Request
 */
export interface SubAccountApiGetSubAccountTransactionStatisticsV1Request {
    /**
     * Sub user email
     * @type {string}
     * @memberof SubAccountApiGetSubAccountTransactionStatisticsV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountTransactionStatisticsV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountTransactionStatisticsV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountTransferSubUserHistoryV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountTransferSubUserHistoryV1Request
 */
export interface SubAccountApiGetSubAccountTransferSubUserHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountTransferSubUserHistoryV1
     */
    readonly timestamp: number

    /**
     * If not sent, result of all assets will be returned
     * @type {string}
     * @memberof SubAccountApiGetSubAccountTransferSubUserHistoryV1
     */
    readonly asset?: string

    /**
     * 1: transfer in, 2: transfer out
     * @type {number}
     * @memberof SubAccountApiGetSubAccountTransferSubUserHistoryV1
     */
    readonly type?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountTransferSubUserHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountTransferSubUserHistoryV1
     */
    readonly endTime?: number

    /**
     * Default 500
     * @type {number}
     * @memberof SubAccountApiGetSubAccountTransferSubUserHistoryV1
     */
    readonly limit?: number

    /**
     * Default &#x60;False&#x60;, return PROCESS and SUCCESS status history; If &#x60;True&#x60;,return PROCESS and SUCCESS and FAILURE status history
     * @type {boolean}
     * @memberof SubAccountApiGetSubAccountTransferSubUserHistoryV1
     */
    readonly returnFailHistory?: boolean

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountTransferSubUserHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSubAccountUniversalTransferV1 operation in SubAccountApi.
 * @export
 * @interface SubAccountApiGetSubAccountUniversalTransferV1Request
 */
export interface SubAccountApiGetSubAccountUniversalTransferV1Request {
    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountUniversalTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetSubAccountUniversalTransferV1
     */
    readonly fromEmail?: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetSubAccountUniversalTransferV1
     */
    readonly toEmail?: string

    /**
     * 
     * @type {string}
     * @memberof SubAccountApiGetSubAccountUniversalTransferV1
     */
    readonly clientTranId?: string

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountUniversalTransferV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountUniversalTransferV1
     */
    readonly endTime?: number

    /**
     * Default 1
     * @type {number}
     * @memberof SubAccountApiGetSubAccountUniversalTransferV1
     */
    readonly page?: number

    /**
     * Default 500, Max 500
     * @type {number}
     * @memberof SubAccountApiGetSubAccountUniversalTransferV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof SubAccountApiGetSubAccountUniversalTransferV1
     */
    readonly recvWindow?: number
}

/**
 * SubAccountApi - object-oriented interface
 * @export
 * @class SubAccountApi
 * @extends {BaseAPI}
 */
export class SubAccountApi extends BaseAPI implements SubAccountApiInterface {
    /**
     * Deposit Assets Into The Managed Sub-account
     * @summary Deposit Assets Into The Managed Sub-account(For Investor Master Account)
     * @param {SubAccountApiCreateManagedSubaccountDepositV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createManagedSubaccountDepositV1(requestParameters: SubAccountApiCreateManagedSubaccountDepositV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createManagedSubaccountDepositV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Withdrawl Assets From The Managed Sub-account
     * @summary Withdrawl Assets From The Managed Sub-account(For Investor Master Account)
     * @param {SubAccountApiCreateManagedSubaccountWithdrawV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createManagedSubaccountWithdrawV1(requestParameters: SubAccountApiCreateManagedSubaccountWithdrawV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createManagedSubaccountWithdrawV1(requestParameters.amount, requestParameters.asset, requestParameters.fromEmail, requestParameters.timestamp, requestParameters.recvWindow, requestParameters.transferDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable Leverage Token for Sub-account
     * @summary Enable Leverage Token for Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountBlvtEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountBlvtEnableV1(requestParameters: SubAccountApiCreateSubAccountBlvtEnableV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountBlvtEnableV1(requestParameters.email, requestParameters.enableBlvt, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable Options for Sub-account (For Master Account).
     * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
     * @param {SubAccountApiCreateSubAccountEoptionsEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountEoptionsEnableV1(requestParameters: SubAccountApiCreateSubAccountEoptionsEnableV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountEoptionsEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable Futures for Sub-account for Master Account
     * @summary Enable Futures for Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountFuturesEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountFuturesEnableV1(requestParameters: SubAccountApiCreateSubAccountFuturesEnableV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountFuturesEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sub-account Futures Asset Transfer
     * @summary Sub-account Futures Asset Transfer(For Master Account)
     * @param {SubAccountApiCreateSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountFuturesInternalTransferV1(requestParameters: SubAccountApiCreateSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountFuturesInternalTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.fromEmail, requestParameters.futuresType, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Move position between sub-master, master-sub, or sub-sub accounts when necessary
     * @summary Move Position for Sub-account (For Master Account)
     * @param {SubAccountApiCreateSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountFuturesMovePositionV1(requestParameters: SubAccountApiCreateSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountFuturesMovePositionV1(requestParameters.fromUserEmail, requestParameters.orderArgs, requestParameters.productType, requestParameters.timestamp, requestParameters.toUserEmail, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Futures Transfer for Sub-account
     * @summary Futures Transfer for Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountFuturesTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountFuturesTransferV1(requestParameters: SubAccountApiCreateSubAccountFuturesTransferV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountFuturesTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.email, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable Margin for Sub-account
     * @summary Enable Margin for Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountMarginEnableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountMarginEnableV1(requestParameters: SubAccountApiCreateSubAccountMarginEnableV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountMarginEnableV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Margin Transfer for Sub-account
     * @summary Margin Transfer for Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountMarginTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountMarginTransferV1(requestParameters: SubAccountApiCreateSubAccountMarginTransferV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountMarginTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.email, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add IP Restriction for Sub-Account API key
     * @summary Add IP Restriction for Sub-Account API key(For Master Account)
     * @param {SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountSubAccountApiIpRestrictionV2(requestParameters: SubAccountApiCreateSubAccountSubAccountApiIpRestrictionV2Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountSubAccountApiIpRestrictionV2(requestParameters.email, requestParameters.status, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.ipAddress, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer to Master
     * @summary Transfer to Master(For Sub-account)
     * @param {SubAccountApiCreateSubAccountTransferSubToMasterV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountTransferSubToMasterV1(requestParameters: SubAccountApiCreateSubAccountTransferSubToMasterV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountTransferSubToMasterV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer to Sub-account of Same Master
     * @summary Transfer to Sub-account of Same Master(For Sub-account)
     * @param {SubAccountApiCreateSubAccountTransferSubToSubV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountTransferSubToSubV1(requestParameters: SubAccountApiCreateSubAccountTransferSubToSubV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountTransferSubToSubV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.toEmail, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Universal Transfer
     * @summary Universal Transfer(For Master Account)
     * @param {SubAccountApiCreateSubAccountUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountUniversalTransferV1(requestParameters: SubAccountApiCreateSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountUniversalTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.fromAccountType, requestParameters.timestamp, requestParameters.toAccountType, requestParameters.clientTranId, requestParameters.fromEmail, requestParameters.recvWindow, requestParameters.symbol, requestParameters.toEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Virtual Sub-account
     * @summary Create a Virtual Sub-account(For Master Account)
     * @param {SubAccountApiCreateSubAccountVirtualSubAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public createSubAccountVirtualSubAccountV1(requestParameters: SubAccountApiCreateSubAccountVirtualSubAccountV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).createSubAccountVirtualSubAccountV1(requestParameters.subAccountString, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete IP List For a Sub-account API Key
     * @summary Delete IP List For a Sub-account API Key(For Master Account)
     * @param {SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public deleteSubAccountSubAccountApiIpRestrictionIpListV1(requestParameters: SubAccountApiDeleteSubAccountSubAccountApiIpRestrictionIpListV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).deleteSubAccountSubAccountApiIpRestrictionIpListV1(requestParameters.email, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.ipAddress, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch sub-account deposit address
     * @summary Get Sub-account Deposit Address(For Master Account)
     * @param {SubAccountApiGetCapitalDepositSubAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getCapitalDepositSubAddressV1(requestParameters: SubAccountApiGetCapitalDepositSubAddressV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getCapitalDepositSubAddressV1(requestParameters.email, requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch sub-account deposit history
     * @summary Get Sub-account Deposit History(For Master Account)
     * @param {SubAccountApiGetCapitalDepositSubHisrecV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getCapitalDepositSubHisrecV1(requestParameters: SubAccountApiGetCapitalDepositSubHisrecV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getCapitalDepositSubHisrecV1(requestParameters.email, requestParameters.timestamp, requestParameters.coin, requestParameters.status, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.offset, requestParameters.recvWindow, requestParameters.txId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Managed Sub-account Snapshot
     * @summary Query Managed Sub-account Snapshot(For Investor Master Account)
     * @param {SubAccountApiGetManagedSubaccountAccountSnapshotV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getManagedSubaccountAccountSnapshotV1(requestParameters: SubAccountApiGetManagedSubaccountAccountSnapshotV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getManagedSubaccountAccountSnapshotV1(requestParameters.email, requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Managed Sub-account Asset Details
     * @summary Query Managed Sub-account Asset Details(For Investor Master Account)
     * @param {SubAccountApiGetManagedSubaccountAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getManagedSubaccountAssetV1(requestParameters: SubAccountApiGetManagedSubaccountAssetV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getManagedSubaccountAssetV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get investor\'s managed sub-account deposit address.
     * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountDepositAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getManagedSubaccountDepositAddressV1(requestParameters: SubAccountApiGetManagedSubaccountDepositAddressV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getManagedSubaccountDepositAddressV1(requestParameters.email, requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Investor can use this api to query managed sub account futures asset details
     * @summary Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountFetchFutureAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getManagedSubaccountFetchFutureAssetV1(requestParameters: SubAccountApiGetManagedSubaccountFetchFutureAssetV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getManagedSubaccountFetchFutureAssetV1(requestParameters.email, requestParameters.accountType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get investor\'s managed sub-account list.
     * @summary Query Managed Sub-account List(For Investor)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getManagedSubaccountInfoV1(requestParameters: SubAccountApiGetManagedSubaccountInfoV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getManagedSubaccountInfoV1(requestParameters.timestamp, requestParameters.email, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Investor can use this api to query managed sub account margin asset details
     * @summary Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountMarginAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getManagedSubaccountMarginAssetV1(requestParameters: SubAccountApiGetManagedSubaccountMarginAssetV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getManagedSubaccountMarginAssetV1(requestParameters.email, requestParameters.accountType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
     * @summary Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getManagedSubaccountQueryTransLogForInvestorV1(requestParameters: SubAccountApiGetManagedSubaccountQueryTransLogForInvestorV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getManagedSubaccountQueryTransLogForInvestorV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.transfers, requestParameters.transferFunctionAccountType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team. Please refer to link
     * @summary Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getManagedSubaccountQueryTransLogForTradeParentV1(requestParameters: SubAccountApiGetManagedSubaccountQueryTransLogForTradeParentV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getManagedSubaccountQueryTransLogForTradeParentV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.transfers, requestParameters.transferFunctionAccountType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
     * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
     * @param {SubAccountApiGetManagedSubaccountQueryTransLogV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getManagedSubaccountQueryTransLogV1(requestParameters: SubAccountApiGetManagedSubaccountQueryTransLogV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getManagedSubaccountQueryTransLogV1(requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.timestamp, requestParameters.transfers, requestParameters.transferFunctionAccountType, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch sub-account assets
     * @summary Query Sub-account Assets(For Master Account)
     * @param {SubAccountApiGetSubAccountAssetsV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountAssetsV3(requestParameters: SubAccountApiGetSubAccountAssetsV3Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountAssetsV3(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch sub-account assets
     * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
     * @param {SubAccountApiGetSubAccountAssetsV4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountAssetsV4(requestParameters: SubAccountApiGetSubAccountAssetsV4Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountAssetsV4(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Summary of Sub-account\'s Futures Account
     * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesAccountSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountFuturesAccountSummaryV1(requestParameters: SubAccountApiGetSubAccountFuturesAccountSummaryV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountFuturesAccountSummaryV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Summary of Sub-account\'s Futures Account
     * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesAccountSummaryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountFuturesAccountSummaryV2(requestParameters: SubAccountApiGetSubAccountFuturesAccountSummaryV2Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountFuturesAccountSummaryV2(requestParameters.futuresType, requestParameters.timestamp, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Detail on Sub-account\'s Futures Account
     * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountFuturesAccountV1(requestParameters: SubAccountApiGetSubAccountFuturesAccountV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountFuturesAccountV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Detail on Sub-account\'s Futures Account
     * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountFuturesAccountV2(requestParameters: SubAccountApiGetSubAccountFuturesAccountV2Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountFuturesAccountV2(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Sub-account Futures Asset Transfer History
     * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesInternalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountFuturesInternalTransferV1(requestParameters: SubAccountApiGetSubAccountFuturesInternalTransferV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountFuturesInternalTransferV1(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query move position history
     * @summary Get Move Position History for Sub-account (For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesMovePositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountFuturesMovePositionV1(requestParameters: SubAccountApiGetSubAccountFuturesMovePositionV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountFuturesMovePositionV1(requestParameters.symbol, requestParameters.page, requestParameters.row, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Futures Position-Risk of Sub-account
     * @summary Get Futures Position-Risk of Sub-account(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesPositionRiskV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountFuturesPositionRiskV1(requestParameters: SubAccountApiGetSubAccountFuturesPositionRiskV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountFuturesPositionRiskV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Futures Position-Risk of Sub-account V2
     * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
     * @param {SubAccountApiGetSubAccountFuturesPositionRiskV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountFuturesPositionRiskV2(requestParameters: SubAccountApiGetSubAccountFuturesPositionRiskV2Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountFuturesPositionRiskV2(requestParameters.email, requestParameters.futuresType, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Sub-account List
     * @summary Query Sub-account List(For Master Account)
     * @param {SubAccountApiGetSubAccountListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountListV1(requestParameters: SubAccountApiGetSubAccountListV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountListV1(requestParameters.timestamp, requestParameters.email, requestParameters.isFreeze, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Summary of Sub-account\'s Margin Account
     * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
     * @param {SubAccountApiGetSubAccountMarginAccountSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountMarginAccountSummaryV1(requestParameters: SubAccountApiGetSubAccountMarginAccountSummaryV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountMarginAccountSummaryV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Detail on Sub-account\'s Margin Account
     * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
     * @param {SubAccountApiGetSubAccountMarginAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountMarginAccountV1(requestParameters: SubAccountApiGetSubAccountMarginAccountV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountMarginAccountV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get BTC valued asset summary of subaccounts.
     * @summary Query Sub-account Spot Assets Summary(For Master Account)
     * @param {SubAccountApiGetSubAccountSpotSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountSpotSummaryV1(requestParameters: SubAccountApiGetSubAccountSpotSummaryV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountSpotSummaryV1(requestParameters.timestamp, requestParameters.email, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Sub-account\'s Status on Margin Or Futures
     * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
     * @param {SubAccountApiGetSubAccountStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountStatusV1(requestParameters: SubAccountApiGetSubAccountStatusV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountStatusV1(requestParameters.timestamp, requestParameters.email, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get IP Restriction for a Sub-account API Key
     * @summary Get IP Restriction for a Sub-account API Key(For Master Account)
     * @param {SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountSubAccountApiIpRestrictionV1(requestParameters: SubAccountApiGetSubAccountSubAccountApiIpRestrictionV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountSubAccountApiIpRestrictionV1(requestParameters.email, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Sub-account Spot Asset Transfer History
     * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
     * @param {SubAccountApiGetSubAccountSubTransferHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountSubTransferHistoryV1(requestParameters: SubAccountApiGetSubAccountSubTransferHistoryV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountSubTransferHistoryV1(requestParameters.timestamp, requestParameters.fromEmail, requestParameters.toEmail, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Sub-account Transaction statistics (For Master Account).
     * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
     * @param {SubAccountApiGetSubAccountTransactionStatisticsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountTransactionStatisticsV1(requestParameters: SubAccountApiGetSubAccountTransactionStatisticsV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountTransactionStatisticsV1(requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sub-account Transfer History
     * @summary Sub-account Transfer History(For Sub-account)
     * @param {SubAccountApiGetSubAccountTransferSubUserHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountTransferSubUserHistoryV1(requestParameters: SubAccountApiGetSubAccountTransferSubUserHistoryV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountTransferSubUserHistoryV1(requestParameters.timestamp, requestParameters.asset, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.returnFailHistory, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Universal Transfer History
     * @summary Query Universal Transfer History(For Master Account)
     * @param {SubAccountApiGetSubAccountUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public getSubAccountUniversalTransferV1(requestParameters: SubAccountApiGetSubAccountUniversalTransferV1Request, options?: RawAxiosRequestConfig) {
        return SubAccountApiFp(this.configuration).getSubAccountUniversalTransferV1(requestParameters.timestamp, requestParameters.fromEmail, requestParameters.toEmail, requestParameters.clientTranId, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

