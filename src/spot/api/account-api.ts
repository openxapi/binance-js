/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { SpotGetAccountCommissionV3Resp } from '../model';
// @ts-ignore
import type { SpotGetAccountV3Resp } from '../model';
// @ts-ignore
import type { SpotGetMyAllocationsV3RespItem } from '../model';
// @ts-ignore
import type { SpotGetMyPreventedMatchesV3RespItem } from '../model';
// @ts-ignore
import type { SpotGetMyTradesV3RespItem } from '../model';
// @ts-ignore
import type { SpotGetRateLimitOrderV3RespItem } from '../model';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get current account commission rates.
         * @summary Query Commission Rates (USER_DATA)
         * @param {string} symbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetAccountCommissionV3: async (symbol: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetAccountCommissionV3', 'symbol', symbol)
            const localVarPath = `/api/v3/account/commission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current account information.
         * @summary Account information (USER_DATA)
         * @param {number} timestamp 
         * @param {boolean} [omitZeroBalances] When set to &#x60;true&#x60;, emits only the non-zero balances of an account. &lt;br/&gt;Default value: &#x60;false&#x60;
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetAccountV3: async (timestamp: number, omitZeroBalances?: boolean, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('spotGetAccountV3', 'timestamp', timestamp)
            const localVarPath = `/api/v3/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (omitZeroBalances !== undefined) {
                localVarQueryParameter['omitZeroBalances'] = omitZeroBalances;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves allocations resulting from SOR order placement.
         * @summary Query Allocations (USER_DATA)
         * @param {string} symbol 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [fromAllocationId] 
         * @param {number} [limit] Default 500;Max 1000
         * @param {number} [orderId] 
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;.
         * @param {number} [timestamp] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetMyAllocationsV3: async (symbol: string, startTime?: number, endTime?: number, fromAllocationId?: number, limit?: number, orderId?: number, recvWindow?: number, timestamp?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetMyAllocationsV3', 'symbol', symbol)
            const localVarPath = `/api/v3/myAllocations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (fromAllocationId !== undefined) {
                localVarQueryParameter['fromAllocationId'] = fromAllocationId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays the list of orders that were expired due to STP. These are the combinations supported: - symbol + preventedMatchId - symbol + orderId - symbol + orderId + fromPreventedMatchId (limit will default to 500) - symbol + orderId + fromPreventedMatchId + limit
         * @summary Query Prevented Matches (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [preventedMatchId] 
         * @param {number} [orderId] 
         * @param {number} [fromPreventedMatchId] 
         * @param {number} [limit] Default: &#x60;500&#x60;; Max: &#x60;1000&#x60;
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetMyPreventedMatchesV3: async (symbol: string, timestamp: number, preventedMatchId?: number, orderId?: number, fromPreventedMatchId?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetMyPreventedMatchesV3', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('spotGetMyPreventedMatchesV3', 'timestamp', timestamp)
            const localVarPath = `/api/v3/myPreventedMatches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (preventedMatchId !== undefined) {
                localVarQueryParameter['preventedMatchId'] = preventedMatchId;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (fromPreventedMatchId !== undefined) {
                localVarQueryParameter['fromPreventedMatchId'] = fromPreventedMatchId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get trades for a specific account and symbol.
         * @summary Account trade list (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [orderId] This can only be used in combination with &#x60;symbol&#x60;.
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [fromId] TradeId to fetch from. Default gets most recent trades.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetMyTradesV3: async (symbol: string, timestamp: number, orderId?: number, startTime?: number, endTime?: number, fromId?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetMyTradesV3', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('spotGetMyTradesV3', 'timestamp', timestamp)
            const localVarPath = `/api/v3/myTrades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['fromId'] = fromId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays the user\'s unfilled order count for all intervals.
         * @summary Query Unfilled Order Count (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetRateLimitOrderV3: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('spotGetRateLimitOrderV3', 'timestamp', timestamp)
            const localVarPath = `/api/v3/rateLimit/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Get current account commission rates.
         * @summary Query Commission Rates (USER_DATA)
         * @param {string} symbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetAccountCommissionV3(symbol: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpotGetAccountCommissionV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetAccountCommissionV3(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.spotGetAccountCommissionV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current account information.
         * @summary Account information (USER_DATA)
         * @param {number} timestamp 
         * @param {boolean} [omitZeroBalances] When set to &#x60;true&#x60;, emits only the non-zero balances of an account. &lt;br/&gt;Default value: &#x60;false&#x60;
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetAccountV3(timestamp: number, omitZeroBalances?: boolean, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpotGetAccountV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetAccountV3(timestamp, omitZeroBalances, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.spotGetAccountV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves allocations resulting from SOR order placement.
         * @summary Query Allocations (USER_DATA)
         * @param {string} symbol 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [fromAllocationId] 
         * @param {number} [limit] Default 500;Max 1000
         * @param {number} [orderId] 
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;.
         * @param {number} [timestamp] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetMyAllocationsV3(symbol: string, startTime?: number, endTime?: number, fromAllocationId?: number, limit?: number, orderId?: number, recvWindow?: number, timestamp?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SpotGetMyAllocationsV3RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetMyAllocationsV3(symbol, startTime, endTime, fromAllocationId, limit, orderId, recvWindow, timestamp, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.spotGetMyAllocationsV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Displays the list of orders that were expired due to STP. These are the combinations supported: - symbol + preventedMatchId - symbol + orderId - symbol + orderId + fromPreventedMatchId (limit will default to 500) - symbol + orderId + fromPreventedMatchId + limit
         * @summary Query Prevented Matches (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [preventedMatchId] 
         * @param {number} [orderId] 
         * @param {number} [fromPreventedMatchId] 
         * @param {number} [limit] Default: &#x60;500&#x60;; Max: &#x60;1000&#x60;
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetMyPreventedMatchesV3(symbol: string, timestamp: number, preventedMatchId?: number, orderId?: number, fromPreventedMatchId?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SpotGetMyPreventedMatchesV3RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetMyPreventedMatchesV3(symbol, timestamp, preventedMatchId, orderId, fromPreventedMatchId, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.spotGetMyPreventedMatchesV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get trades for a specific account and symbol.
         * @summary Account trade list (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [orderId] This can only be used in combination with &#x60;symbol&#x60;.
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [fromId] TradeId to fetch from. Default gets most recent trades.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetMyTradesV3(symbol: string, timestamp: number, orderId?: number, startTime?: number, endTime?: number, fromId?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SpotGetMyTradesV3RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetMyTradesV3(symbol, timestamp, orderId, startTime, endTime, fromId, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.spotGetMyTradesV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Displays the user\'s unfilled order count for all intervals.
         * @summary Query Unfilled Order Count (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetRateLimitOrderV3(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SpotGetRateLimitOrderV3RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetRateLimitOrderV3(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.spotGetRateLimitOrderV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * Get current account commission rates.
         * @summary Query Commission Rates (USER_DATA)
         * @param {AccountApiSpotGetAccountCommissionV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetAccountCommissionV3(requestParameters: AccountApiSpotGetAccountCommissionV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetAccountCommissionV3Resp> {
            return localVarFp.spotGetAccountCommissionV3(requestParameters.symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current account information.
         * @summary Account information (USER_DATA)
         * @param {AccountApiSpotGetAccountV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetAccountV3(requestParameters: AccountApiSpotGetAccountV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetAccountV3Resp> {
            return localVarFp.spotGetAccountV3(requestParameters.timestamp, requestParameters.omitZeroBalances, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves allocations resulting from SOR order placement.
         * @summary Query Allocations (USER_DATA)
         * @param {AccountApiSpotGetMyAllocationsV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetMyAllocationsV3(requestParameters: AccountApiSpotGetMyAllocationsV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetMyAllocationsV3RespItem>> {
            return localVarFp.spotGetMyAllocationsV3(requestParameters.symbol, requestParameters.startTime, requestParameters.endTime, requestParameters.fromAllocationId, requestParameters.limit, requestParameters.orderId, requestParameters.recvWindow, requestParameters.timestamp, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays the list of orders that were expired due to STP. These are the combinations supported: - symbol + preventedMatchId - symbol + orderId - symbol + orderId + fromPreventedMatchId (limit will default to 500) - symbol + orderId + fromPreventedMatchId + limit
         * @summary Query Prevented Matches (USER_DATA)
         * @param {AccountApiSpotGetMyPreventedMatchesV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetMyPreventedMatchesV3(requestParameters: AccountApiSpotGetMyPreventedMatchesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetMyPreventedMatchesV3RespItem>> {
            return localVarFp.spotGetMyPreventedMatchesV3(requestParameters.symbol, requestParameters.timestamp, requestParameters.preventedMatchId, requestParameters.orderId, requestParameters.fromPreventedMatchId, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get trades for a specific account and symbol.
         * @summary Account trade list (USER_DATA)
         * @param {AccountApiSpotGetMyTradesV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetMyTradesV3(requestParameters: AccountApiSpotGetMyTradesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetMyTradesV3RespItem>> {
            return localVarFp.spotGetMyTradesV3(requestParameters.symbol, requestParameters.timestamp, requestParameters.orderId, requestParameters.startTime, requestParameters.endTime, requestParameters.fromId, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays the user\'s unfilled order count for all intervals.
         * @summary Query Unfilled Order Count (USER_DATA)
         * @param {AccountApiSpotGetRateLimitOrderV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetRateLimitOrderV3(requestParameters: AccountApiSpotGetRateLimitOrderV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetRateLimitOrderV3RespItem>> {
            return localVarFp.spotGetRateLimitOrderV3(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - interface
 * @export
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Get current account commission rates.
     * @summary Query Commission Rates (USER_DATA)
     * @param {AccountApiSpotGetAccountCommissionV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    spotGetAccountCommissionV3(requestParameters: AccountApiSpotGetAccountCommissionV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetAccountCommissionV3Resp>;

    /**
     * Get current account information.
     * @summary Account information (USER_DATA)
     * @param {AccountApiSpotGetAccountV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    spotGetAccountV3(requestParameters: AccountApiSpotGetAccountV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetAccountV3Resp>;

    /**
     * Retrieves allocations resulting from SOR order placement.
     * @summary Query Allocations (USER_DATA)
     * @param {AccountApiSpotGetMyAllocationsV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    spotGetMyAllocationsV3(requestParameters: AccountApiSpotGetMyAllocationsV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetMyAllocationsV3RespItem>>;

    /**
     * Displays the list of orders that were expired due to STP. These are the combinations supported: - symbol + preventedMatchId - symbol + orderId - symbol + orderId + fromPreventedMatchId (limit will default to 500) - symbol + orderId + fromPreventedMatchId + limit
     * @summary Query Prevented Matches (USER_DATA)
     * @param {AccountApiSpotGetMyPreventedMatchesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    spotGetMyPreventedMatchesV3(requestParameters: AccountApiSpotGetMyPreventedMatchesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetMyPreventedMatchesV3RespItem>>;

    /**
     * Get trades for a specific account and symbol.
     * @summary Account trade list (USER_DATA)
     * @param {AccountApiSpotGetMyTradesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    spotGetMyTradesV3(requestParameters: AccountApiSpotGetMyTradesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetMyTradesV3RespItem>>;

    /**
     * Displays the user\'s unfilled order count for all intervals.
     * @summary Query Unfilled Order Count (USER_DATA)
     * @param {AccountApiSpotGetRateLimitOrderV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    spotGetRateLimitOrderV3(requestParameters: AccountApiSpotGetRateLimitOrderV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetRateLimitOrderV3RespItem>>;

}

/**
 * Request parameters for spotGetAccountCommissionV3 operation in AccountApi.
 * @export
 * @interface AccountApiSpotGetAccountCommissionV3Request
 */
export interface AccountApiSpotGetAccountCommissionV3Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiSpotGetAccountCommissionV3
     */
    readonly symbol: string
}

/**
 * Request parameters for spotGetAccountV3 operation in AccountApi.
 * @export
 * @interface AccountApiSpotGetAccountV3Request
 */
export interface AccountApiSpotGetAccountV3Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetAccountV3
     */
    readonly timestamp: number

    /**
     * When set to &#x60;true&#x60;, emits only the non-zero balances of an account. &lt;br/&gt;Default value: &#x60;false&#x60;
     * @type {boolean}
     * @memberof AccountApiSpotGetAccountV3
     */
    readonly omitZeroBalances?: boolean

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof AccountApiSpotGetAccountV3
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for spotGetMyAllocationsV3 operation in AccountApi.
 * @export
 * @interface AccountApiSpotGetMyAllocationsV3Request
 */
export interface AccountApiSpotGetMyAllocationsV3Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiSpotGetMyAllocationsV3
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyAllocationsV3
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyAllocationsV3
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyAllocationsV3
     */
    readonly fromAllocationId?: number

    /**
     * Default 500;Max 1000
     * @type {number}
     * @memberof AccountApiSpotGetMyAllocationsV3
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyAllocationsV3
     */
    readonly orderId?: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;.
     * @type {number}
     * @memberof AccountApiSpotGetMyAllocationsV3
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyAllocationsV3
     */
    readonly timestamp?: number
}

/**
 * Request parameters for spotGetMyPreventedMatchesV3 operation in AccountApi.
 * @export
 * @interface AccountApiSpotGetMyPreventedMatchesV3Request
 */
export interface AccountApiSpotGetMyPreventedMatchesV3Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiSpotGetMyPreventedMatchesV3
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyPreventedMatchesV3
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyPreventedMatchesV3
     */
    readonly preventedMatchId?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyPreventedMatchesV3
     */
    readonly orderId?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyPreventedMatchesV3
     */
    readonly fromPreventedMatchId?: number

    /**
     * Default: &#x60;500&#x60;; Max: &#x60;1000&#x60;
     * @type {number}
     * @memberof AccountApiSpotGetMyPreventedMatchesV3
     */
    readonly limit?: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof AccountApiSpotGetMyPreventedMatchesV3
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for spotGetMyTradesV3 operation in AccountApi.
 * @export
 * @interface AccountApiSpotGetMyTradesV3Request
 */
export interface AccountApiSpotGetMyTradesV3Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiSpotGetMyTradesV3
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyTradesV3
     */
    readonly timestamp: number

    /**
     * This can only be used in combination with &#x60;symbol&#x60;.
     * @type {number}
     * @memberof AccountApiSpotGetMyTradesV3
     */
    readonly orderId?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyTradesV3
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetMyTradesV3
     */
    readonly endTime?: number

    /**
     * TradeId to fetch from. Default gets most recent trades.
     * @type {number}
     * @memberof AccountApiSpotGetMyTradesV3
     */
    readonly fromId?: number

    /**
     * Default 500; max 1000.
     * @type {number}
     * @memberof AccountApiSpotGetMyTradesV3
     */
    readonly limit?: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof AccountApiSpotGetMyTradesV3
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for spotGetRateLimitOrderV3 operation in AccountApi.
 * @export
 * @interface AccountApiSpotGetRateLimitOrderV3Request
 */
export interface AccountApiSpotGetRateLimitOrderV3Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiSpotGetRateLimitOrderV3
     */
    readonly timestamp: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof AccountApiSpotGetRateLimitOrderV3
     */
    readonly recvWindow?: number
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI implements AccountApiInterface {
    /**
     * Get current account commission rates.
     * @summary Query Commission Rates (USER_DATA)
     * @param {AccountApiSpotGetAccountCommissionV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public spotGetAccountCommissionV3(requestParameters: AccountApiSpotGetAccountCommissionV3Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).spotGetAccountCommissionV3(requestParameters.symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current account information.
     * @summary Account information (USER_DATA)
     * @param {AccountApiSpotGetAccountV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public spotGetAccountV3(requestParameters: AccountApiSpotGetAccountV3Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).spotGetAccountV3(requestParameters.timestamp, requestParameters.omitZeroBalances, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves allocations resulting from SOR order placement.
     * @summary Query Allocations (USER_DATA)
     * @param {AccountApiSpotGetMyAllocationsV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public spotGetMyAllocationsV3(requestParameters: AccountApiSpotGetMyAllocationsV3Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).spotGetMyAllocationsV3(requestParameters.symbol, requestParameters.startTime, requestParameters.endTime, requestParameters.fromAllocationId, requestParameters.limit, requestParameters.orderId, requestParameters.recvWindow, requestParameters.timestamp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays the list of orders that were expired due to STP. These are the combinations supported: - symbol + preventedMatchId - symbol + orderId - symbol + orderId + fromPreventedMatchId (limit will default to 500) - symbol + orderId + fromPreventedMatchId + limit
     * @summary Query Prevented Matches (USER_DATA)
     * @param {AccountApiSpotGetMyPreventedMatchesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public spotGetMyPreventedMatchesV3(requestParameters: AccountApiSpotGetMyPreventedMatchesV3Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).spotGetMyPreventedMatchesV3(requestParameters.symbol, requestParameters.timestamp, requestParameters.preventedMatchId, requestParameters.orderId, requestParameters.fromPreventedMatchId, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get trades for a specific account and symbol.
     * @summary Account trade list (USER_DATA)
     * @param {AccountApiSpotGetMyTradesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public spotGetMyTradesV3(requestParameters: AccountApiSpotGetMyTradesV3Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).spotGetMyTradesV3(requestParameters.symbol, requestParameters.timestamp, requestParameters.orderId, requestParameters.startTime, requestParameters.endTime, requestParameters.fromId, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays the user\'s unfilled order count for all intervals.
     * @summary Query Unfilled Order Count (USER_DATA)
     * @param {AccountApiSpotGetRateLimitOrderV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public spotGetRateLimitOrderV3(requestParameters: AccountApiSpotGetRateLimitOrderV3Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).spotGetRateLimitOrderV3(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

