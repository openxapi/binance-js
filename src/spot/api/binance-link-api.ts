/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreateApiReferralCustomizationV1Resp } from '../model';
// @ts-ignore
import type { CreateApiReferralUserCustomizationV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerSubAccountApiCommissionCoinFuturesV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerSubAccountApiCommissionFuturesV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerSubAccountApiCommissionV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerSubAccountApiIpRestrictionV2Resp } from '../model';
// @ts-ignore
import type { CreateBrokerSubAccountApiPermissionUniversalTransferV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerSubAccountApiPermissionV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerSubAccountApiV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerSubAccountBnbBurnMarginInterestV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerSubAccountBnbBurnSpotV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerSubAccountFuturesV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerSubAccountV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerTransferFuturesV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerTransferV1Resp } from '../model';
// @ts-ignore
import type { CreateBrokerUniversalTransferV1Resp } from '../model';
// @ts-ignore
import type { DeleteBrokerSubAccountApiIpRestrictionIpListV1Resp } from '../model';
// @ts-ignore
import type { ExchangelinkGetBrokerSubAccountFuturesSummaryV3Resp } from '../model';
// @ts-ignore
import type { GetApiReferralCustomizationV1RespItem } from '../model';
// @ts-ignore
import type { GetApiReferralIfNewUserV1Resp } from '../model';
// @ts-ignore
import type { GetApiReferralKickbackRecentRecordV1RespItem } from '../model';
// @ts-ignore
import type { GetApiReferralRebateRecentRecordV1RespItem } from '../model';
// @ts-ignore
import type { GetApiReferralUserCustomizationV1Resp } from '../model';
// @ts-ignore
import type { GetBrokerInfoV1Resp } from '../model';
// @ts-ignore
import type { GetBrokerRebateFuturesRecentRecordV1RespItem } from '../model';
// @ts-ignore
import type { GetBrokerRebateRecentRecordV1RespItem } from '../model';
// @ts-ignore
import type { GetBrokerSubAccountApiCommissionCoinFuturesV1RespItem } from '../model';
// @ts-ignore
import type { GetBrokerSubAccountApiCommissionFuturesV1RespItem } from '../model';
// @ts-ignore
import type { GetBrokerSubAccountApiIpRestrictionV1Resp } from '../model';
// @ts-ignore
import type { GetBrokerSubAccountApiV1RespItem } from '../model';
// @ts-ignore
import type { GetBrokerSubAccountBnbBurnStatusV1Resp } from '../model';
// @ts-ignore
import type { GetBrokerSubAccountDepositHistV1RespItem } from '../model';
// @ts-ignore
import type { GetBrokerSubAccountDepositHistV2RespItem } from '../model';
// @ts-ignore
import type { GetBrokerSubAccountMarginSummaryV1Resp } from '../model';
// @ts-ignore
import type { GetBrokerSubAccountSpotSummaryV1Resp } from '../model';
// @ts-ignore
import type { GetBrokerSubAccountV1RespItem } from '../model';
// @ts-ignore
import type { GetBrokerTransferFuturesV1Resp } from '../model';
// @ts-ignore
import type { GetBrokerTransferV1RespItem } from '../model';
// @ts-ignore
import type { GetBrokerUniversalTransferV1RespItem } from '../model';
/**
 * BinanceLinkApi - axios parameter creator
 * @export
 */
export const BinanceLinkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * - CustomerId must be unique - For the same email, the customerId will be modified in real time
         * @summary Customize Id For Client (USER DATA) （For Partner）
         * @param {string} customerId 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiReferralCustomizationV1: async (customerId: string, email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('createApiReferralCustomizationV1', 'customerId', customerId)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createApiReferralCustomizationV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createApiReferralCustomizationV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/apiReferral/customization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (customerId !== undefined) { 
                localVarFormParams.set('customerId', customerId as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - CustomerId must be unique for each apiAgent
         * @summary Customize Id For Client  (USER DATA)(For client)
         * @param {string} apiAgentCode 
         * @param {string} customerId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiReferralUserCustomizationV1: async (apiAgentCode: string, customerId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAgentCode' is not null or undefined
            assertParamExists('createApiReferralUserCustomizationV1', 'apiAgentCode', apiAgentCode)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('createApiReferralUserCustomizationV1', 'customerId', customerId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createApiReferralUserCustomizationV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/apiReferral/userCustomization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (apiAgentCode !== undefined) { 
                localVarFormParams.set('apiAgentCode', apiAgentCode as any);
            }
    
            if (customerId !== undefined) { 
                localVarFormParams.set('customerId', customerId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This request will change the COIN-Ⓜ futures commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint. The sub-account\'s COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
         * @summary Change Sub Account COIN-Ⓜ Futures Commission Adjustment
         * @param {number} makerAdjustment 
         * @param {string} pair 
         * @param {string} subAccountId 
         * @param {number} takerAdjustment 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiCommissionCoinFuturesV1: async (makerAdjustment: number, pair: string, subAccountId: string, takerAdjustment: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'makerAdjustment' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionCoinFuturesV1', 'makerAdjustment', makerAdjustment)
            // verify required parameter 'pair' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionCoinFuturesV1', 'pair', pair)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionCoinFuturesV1', 'subAccountId', subAccountId)
            // verify required parameter 'takerAdjustment' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionCoinFuturesV1', 'takerAdjustment', takerAdjustment)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionCoinFuturesV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi/commission/coinFutures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (makerAdjustment !== undefined) { 
                localVarFormParams.set('makerAdjustment', makerAdjustment as any);
            }
    
            if (pair !== undefined) { 
                localVarFormParams.set('pair', pair as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (takerAdjustment !== undefined) { 
                localVarFormParams.set('takerAdjustment', takerAdjustment as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This request will change the USDT-Ⓜ futures commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint. The sub-account\'s USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
         * @summary Change Sub Account USDT-Ⓜ Futures Commission Adjustment
         * @param {number} makerAdjustment 
         * @param {string} subAccountId 
         * @param {string} symbol 
         * @param {number} takerAdjustment 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiCommissionFuturesV1: async (makerAdjustment: number, subAccountId: string, symbol: string, takerAdjustment: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'makerAdjustment' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionFuturesV1', 'makerAdjustment', makerAdjustment)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionFuturesV1', 'subAccountId', subAccountId)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionFuturesV1', 'symbol', symbol)
            // verify required parameter 'takerAdjustment' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionFuturesV1', 'takerAdjustment', takerAdjustment)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionFuturesV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi/commission/futures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (makerAdjustment !== undefined) { 
                localVarFormParams.set('makerAdjustment', makerAdjustment as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (takerAdjustment !== undefined) { 
                localVarFormParams.set('takerAdjustment', takerAdjustment as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This request will change the commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint.
         * @summary Change Sub Account Commission
         * @param {number} makerCommission 
         * @param {string} subAccountId 
         * @param {number} takerCommission 
         * @param {number} timestamp 
         * @param {number} [marginMakerCommission] 
         * @param {number} [marginTakerCommission] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiCommissionV1: async (makerCommission: number, subAccountId: string, takerCommission: number, timestamp: number, marginMakerCommission?: number, marginTakerCommission?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'makerCommission' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionV1', 'makerCommission', makerCommission)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionV1', 'subAccountId', subAccountId)
            // verify required parameter 'takerCommission' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionV1', 'takerCommission', takerCommission)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerSubAccountApiCommissionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi/commission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (makerCommission !== undefined) { 
                localVarFormParams.set('makerCommission', makerCommission as any);
            }
    
            if (marginMakerCommission !== undefined) { 
                localVarFormParams.set('marginMakerCommission', marginMakerCommission as any);
            }
    
            if (marginTakerCommission !== undefined) { 
                localVarFormParams.set('marginTakerCommission', marginTakerCommission as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (takerCommission !== undefined) { 
                localVarFormParams.set('takerCommission', takerCommission as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update IP Restriction for Sub-Account API key (For Master Account)
         * @param {string} status 
         * @param {string} subAccountApiKey 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [ipAddress] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiIpRestrictionV2: async (status: string, subAccountApiKey: string, subAccountId: string, timestamp: number, ipAddress?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('createBrokerSubAccountApiIpRestrictionV2', 'status', status)
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists('createBrokerSubAccountApiIpRestrictionV2', 'subAccountApiKey', subAccountApiKey)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('createBrokerSubAccountApiIpRestrictionV2', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerSubAccountApiIpRestrictionV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/broker/subAccountApi/ipRestriction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (ipAddress !== undefined) { 
                localVarFormParams.set('ipAddress', ipAddress as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.set('status', status as any);
            }
    
            if (subAccountApiKey !== undefined) { 
                localVarFormParams.set('subAccountApiKey', subAccountApiKey as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Caution: - This request will enable the api permission for a sub account to use POST /sapi/v1/asset/transferendpoint. - You need to enable \"trade\" option for the api key which requests this endpoint.
         * @summary Enable Universal Transfer Permission For Sub Account Api Key
         * @param {string} canUniversalTransfer 
         * @param {string} subAccountApiKey 
         * @param {number} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiPermissionUniversalTransferV1: async (canUniversalTransfer: string, subAccountApiKey: string, subAccountId: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'canUniversalTransfer' is not null or undefined
            assertParamExists('createBrokerSubAccountApiPermissionUniversalTransferV1', 'canUniversalTransfer', canUniversalTransfer)
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists('createBrokerSubAccountApiPermissionUniversalTransferV1', 'subAccountApiKey', subAccountApiKey)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('createBrokerSubAccountApiPermissionUniversalTransferV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerSubAccountApiPermissionUniversalTransferV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi/permission/universalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (canUniversalTransfer !== undefined) { 
                localVarFormParams.set('canUniversalTransfer', canUniversalTransfer as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (subAccountApiKey !== undefined) { 
                localVarFormParams.set('subAccountApiKey', subAccountApiKey as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Caution: - This request will change the api permission for a sub account. - You need to enable \"trade\" option for the api key which requests this endpoint. - Sub account should be enable margin before its api-key\'s marginTrade being enabled. - Sub account should be enable futures before its api-key\'s futuresTrade being enabled.
         * @summary Change Sub Account Api Permission
         * @param {string} canTrade 
         * @param {string} futuresTrade 
         * @param {string} marginTrade 
         * @param {string} subAccountApiKey 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiPermissionV1: async (canTrade: string, futuresTrade: string, marginTrade: string, subAccountApiKey: string, subAccountId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'canTrade' is not null or undefined
            assertParamExists('createBrokerSubAccountApiPermissionV1', 'canTrade', canTrade)
            // verify required parameter 'futuresTrade' is not null or undefined
            assertParamExists('createBrokerSubAccountApiPermissionV1', 'futuresTrade', futuresTrade)
            // verify required parameter 'marginTrade' is not null or undefined
            assertParamExists('createBrokerSubAccountApiPermissionV1', 'marginTrade', marginTrade)
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists('createBrokerSubAccountApiPermissionV1', 'subAccountApiKey', subAccountApiKey)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('createBrokerSubAccountApiPermissionV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerSubAccountApiPermissionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi/permission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (canTrade !== undefined) { 
                localVarFormParams.set('canTrade', canTrade as any);
            }
    
            if (futuresTrade !== undefined) { 
                localVarFormParams.set('futuresTrade', futuresTrade as any);
            }
    
            if (marginTrade !== undefined) { 
                localVarFormParams.set('marginTrade', marginTrade as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (subAccountApiKey !== undefined) { 
                localVarFormParams.set('subAccountApiKey', subAccountApiKey as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Caution: - This request will generate a api key for a sub account. - You need to enable \"trade\" option for the api key which requests this endpoint - Sub account should be enable margin before its api-key\'s marginTrade being enabled - Sub account should be enable futures before its api-key\'s futuresTrade being enabled - You can only create 1 api key for each sub account per second
         * @summary Create Api Key for Sub Account
         * @param {string} canTrade 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [futuresTrade] 
         * @param {string} [marginTrade] 
         * @param {string} [publicKey] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiV1: async (canTrade: string, subAccountId: string, timestamp: number, futuresTrade?: string, marginTrade?: string, publicKey?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'canTrade' is not null or undefined
            assertParamExists('createBrokerSubAccountApiV1', 'canTrade', canTrade)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('createBrokerSubAccountApiV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerSubAccountApiV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (canTrade !== undefined) { 
                localVarFormParams.set('canTrade', canTrade as any);
            }
    
            if (futuresTrade !== undefined) { 
                localVarFormParams.set('futuresTrade', futuresTrade as any);
            }
    
            if (marginTrade !== undefined) { 
                localVarFormParams.set('marginTrade', marginTrade as any);
            }
    
            if (publicKey !== undefined) { 
                localVarFormParams.set('publicKey', publicKey as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - Subaccount must be enabled margin before using this switch
         * @summary Enable Or Disable BNB Burn for Sub Account Margin Interest
         * @param {string} interestBNBBurn 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountBnbBurnMarginInterestV1: async (interestBNBBurn: string, subAccountId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'interestBNBBurn' is not null or undefined
            assertParamExists('createBrokerSubAccountBnbBurnMarginInterestV1', 'interestBNBBurn', interestBNBBurn)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('createBrokerSubAccountBnbBurnMarginInterestV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerSubAccountBnbBurnMarginInterestV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccount/bnbBurn/marginInterest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (interestBNBBurn !== undefined) { 
                localVarFormParams.set('interestBNBBurn', interestBNBBurn as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable Or Disable BNB Burn for Sub Account SPOT and MARGIN
         * @param {string} spotBNBBurn 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountBnbBurnSpotV1: async (spotBNBBurn: string, subAccountId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spotBNBBurn' is not null or undefined
            assertParamExists('createBrokerSubAccountBnbBurnSpotV1', 'spotBNBBurn', spotBNBBurn)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('createBrokerSubAccountBnbBurnSpotV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerSubAccountBnbBurnSpotV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccount/bnbBurn/spot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (spotBNBBurn !== undefined) { 
                localVarFormParams.set('spotBNBBurn', spotBNBBurn as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable Futures for Sub Account
         * @param {string} futures 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountFuturesV1: async (futures: string, subAccountId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'futures' is not null or undefined
            assertParamExists('createBrokerSubAccountFuturesV1', 'futures', futures)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('createBrokerSubAccountFuturesV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerSubAccountFuturesV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccount/futures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (futures !== undefined) { 
                localVarFormParams.set('futures', futures as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To create a link sub-account
         * @summary Create a Sub Account
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {string} [tag] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountV1: async (timestamp: number, recvWindow?: number, tag?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerSubAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (tag !== undefined) { 
                localVarFormParams.set('tag', tag as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent. - Each master account could transfer 5000 times/min
         * @summary Sub Account Transfer（FUTURES）
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} futuresType 
         * @param {number} timestamp 
         * @param {string} [clientTranId] 
         * @param {string} [fromId] 
         * @param {number} [recvWindow] 
         * @param {string} [toId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerTransferFuturesV1: async (amount: string, asset: string, futuresType: number, timestamp: number, clientTranId?: string, fromId?: string, recvWindow?: number, toId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createBrokerTransferFuturesV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createBrokerTransferFuturesV1', 'asset', asset)
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('createBrokerTransferFuturesV1', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerTransferFuturesV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/transfer/futures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (clientTranId !== undefined) { 
                localVarFormParams.set('clientTranId', clientTranId as any);
            }
    
            if (fromId !== undefined) { 
                localVarFormParams.set('fromId', fromId as any);
            }
    
            if (futuresType !== undefined) { 
                localVarFormParams.set('futuresType', futuresType as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toId !== undefined) { 
                localVarFormParams.set('toId', toId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent.
         * @summary Sub Account Transfer（SPOT）
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} [clientTranId] 
         * @param {string} [fromId] 
         * @param {number} [recvWindow] 
         * @param {string} [toId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerTransferV1: async (amount: string, asset: string, timestamp: number, clientTranId?: string, fromId?: string, recvWindow?: number, toId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createBrokerTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createBrokerTransferV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerTransferV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (clientTranId !== undefined) { 
                localVarFormParams.set('clientTranId', clientTranId as any);
            }
    
            if (fromId !== undefined) { 
                localVarFormParams.set('fromId', fromId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toId !== undefined) { 
                localVarFormParams.set('toId', toId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent. - Transfer between futures acount is not supported.
         * @summary Universal Transfer
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromAccountType 
         * @param {number} timestamp 
         * @param {string} toAccountType 
         * @param {string} [clientTranId] 
         * @param {string} [fromId] 
         * @param {number} [recvWindow] 
         * @param {string} [toId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerUniversalTransferV1: async (amount: string, asset: string, fromAccountType: string, timestamp: number, toAccountType: string, clientTranId?: string, fromId?: string, recvWindow?: number, toId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createBrokerUniversalTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createBrokerUniversalTransferV1', 'asset', asset)
            // verify required parameter 'fromAccountType' is not null or undefined
            assertParamExists('createBrokerUniversalTransferV1', 'fromAccountType', fromAccountType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBrokerUniversalTransferV1', 'timestamp', timestamp)
            // verify required parameter 'toAccountType' is not null or undefined
            assertParamExists('createBrokerUniversalTransferV1', 'toAccountType', toAccountType)
            const localVarPath = `/sapi/v1/broker/universalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (clientTranId !== undefined) { 
                localVarFormParams.set('clientTranId', clientTranId as any);
            }
    
            if (fromAccountType !== undefined) { 
                localVarFormParams.set('fromAccountType', fromAccountType as any);
            }
    
            if (fromId !== undefined) { 
                localVarFormParams.set('fromId', fromId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toAccountType !== undefined) { 
                localVarFormParams.set('toAccountType', toAccountType as any);
            }
    
            if (toId !== undefined) { 
                localVarFormParams.set('toId', toId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete IP Restriction for Sub Account Api Key
         * @param {string} subAccountId 
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {string} [ipAddress] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrokerSubAccountApiIpRestrictionIpListV1: async (subAccountId: string, subAccountApiKey: string, timestamp: number, ipAddress?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('deleteBrokerSubAccountApiIpRestrictionIpListV1', 'subAccountId', subAccountId)
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists('deleteBrokerSubAccountApiIpRestrictionIpListV1', 'subAccountApiKey', subAccountApiKey)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('deleteBrokerSubAccountApiIpRestrictionIpListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi/ipRestriction/ipList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (subAccountApiKey !== undefined) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (ipAddress !== undefined) {
                localVarQueryParameter['ipAddress'] = ipAddress;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Caution: - This request will delete a api key for a sub account - You need to enable \"trade\" option for the api key which requests this endpoint - You can only delete 1 api key for each sub account per second
         * @summary Delete Sub Account Api Key
         * @param {string} subAccountId 
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrokerSubAccountApiV1: async (subAccountId: string, subAccountApiKey: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('deleteBrokerSubAccountApiV1', 'subAccountId', subAccountId)
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists('deleteBrokerSubAccountApiV1', 'subAccountApiKey', subAccountApiKey)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('deleteBrokerSubAccountApiV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (subAccountApiKey !== undefined) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Sub Account
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrokerSubAccountV1: async (subAccountId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('deleteBrokerSubAccountV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('deleteBrokerSubAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - CustomerId and email can not be sent at the same time
         * @summary Get Client Email Customized Id (USER DATA) （For Partner）
         * @param {number} timestamp 
         * @param {string} [customerId] 
         * @param {string} [email] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralCustomizationV1: async (timestamp: number, customerId?: string, email?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralCustomizationV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/apiReferral/customization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query Client If The New User (USER  DATA)
         * @param {string} apiAgentCode brokerId
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralIfNewUserV1: async (apiAgentCode: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAgentCode' is not null or undefined
            assertParamExists('getApiReferralIfNewUserV1', 'apiAgentCode', apiAgentCode)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralIfNewUserV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/apiReferral/ifNewUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiAgentCode !== undefined) {
                localVarQueryParameter['apiAgentCode'] = apiAgentCode;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - Only get the latest history of past 7 days.
         * @summary Query Rebate Recent Record(For Client)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 500, max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralKickbackRecentRecordV1: async (timestamp: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralKickbackRecentRecordV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/apiReferral/kickback/recentRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - startTime and endTime must be both specified or both omitted. - When both omitted it returns last 7 days. - When both specified the span has to be within 7 days.
         * @summary Query Rebate Recent Record （USER DATA）(For Partner)
         * @param {number} startTime 
         * @param {number} endTime 
         * @param {number} limit max 500
         * @param {number} timestamp 
         * @param {string} [customerId] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralRebateRecentRecordV1: async (startTime: number, endTime: number, limit: number, timestamp: number, customerId?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getApiReferralRebateRecentRecordV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getApiReferralRebateRecentRecordV1', 'endTime', endTime)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getApiReferralRebateRecentRecordV1', 'limit', limit)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralRebateRecentRecordV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/apiReferral/rebate/recentRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - CustomerId must be unique
         * @summary Get User’s Customize Id (USER DATA)
         * @param {string} apiAgentCode brokerId
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralUserCustomizationV1: async (apiAgentCode: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAgentCode' is not null or undefined
            assertParamExists('getApiReferralUserCustomizationV1', 'apiAgentCode', apiAgentCode)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralUserCustomizationV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/apiReferral/userCustomization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (apiAgentCode !== undefined) {
                localVarQueryParameter['apiAgentCode'] = apiAgentCode;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Link Account Information
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerInfoV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerInfoV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - If filterResult = TRUE, rebates not from its own sub accounts will be filtered out in response.
         * @summary Query Broker Futures Commission Rebate Record
         * @param {number} futuresType 1:USDT Futures, 2: Coin Futures
         * @param {number} startTime 
         * @param {number} endTime 
         * @param {number} timestamp 
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 100
         * @param {boolean} [filterResult] TRUE or FALSE. Default: FALSE
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerRebateFuturesRecentRecordV1: async (futuresType: number, startTime: number, endTime: number, timestamp: number, page?: number, size?: number, filterResult?: boolean, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('getBrokerRebateFuturesRecentRecordV1', 'futuresType', futuresType)
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getBrokerRebateFuturesRecentRecordV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getBrokerRebateFuturesRecentRecordV1', 'endTime', endTime)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerRebateFuturesRecentRecordV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/rebate/futures/recentRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (filterResult !== undefined) {
                localVarQueryParameter['filterResult'] = filterResult;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - The query time period must be less than 7 days (default as the recent 7 days).
         * @summary Query Broker Commission Rebate Recent Record（Spot）
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {number} [startTime] Default: 7 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [page] default 1
         * @param {number} [size] default 500，max500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerRebateRecentRecordV1: async (timestamp: number, subAccountId?: string, startTime?: number, endTime?: number, page?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerRebateRecentRecordV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/rebate/recentRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - The sub-account\'s COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment. - If symbol not sent, commission adjustment of all symbols will be returned. - If futures disabled, it is not allowed to set subaccount\'s COIN-Ⓜ futures commission adjustment on any symbol. - Different symbols have the same commission for the same pair
         * @summary Query Sub Account COIN-Ⓜ Futures Commission Adjustment
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [pair] BTCUSD
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountApiCommissionCoinFuturesV1: async (subAccountId: string, timestamp: number, pair?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('getBrokerSubAccountApiCommissionCoinFuturesV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerSubAccountApiCommissionCoinFuturesV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi/commission/coinFutures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (pair !== undefined) {
                localVarQueryParameter['pair'] = pair;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The sub-account\'s USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
         * @summary Query Sub Account USDT-Ⓜ Futures Commission Adjustment
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountApiCommissionFuturesV1: async (subAccountId: string, timestamp: number, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('getBrokerSubAccountApiCommissionFuturesV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerSubAccountApiCommissionFuturesV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi/commission/futures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get IP Restriction for Sub Account Api Key
         * @param {string} subAccountId 
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountApiIpRestrictionV1: async (subAccountId: string, subAccountApiKey: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('getBrokerSubAccountApiIpRestrictionV1', 'subAccountId', subAccountId)
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists('getBrokerSubAccountApiIpRestrictionV1', 'subAccountApiKey', subAccountApiKey)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerSubAccountApiIpRestrictionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi/ipRestriction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (subAccountApiKey !== undefined) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Caution: - You need to enable \"trade\" option for the api key which requests this endpoint
         * @summary Query Sub Account Api Key
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [subAccountApiKey] 
         * @param {number} [page] default 1
         * @param {number} [size] default 500, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountApiV1: async (subAccountId: string, timestamp: number, subAccountApiKey?: string, page?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('getBrokerSubAccountApiV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerSubAccountApiV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccountApi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (subAccountApiKey !== undefined) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get BNB Burn Status for Sub Account
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountBnbBurnStatusV1: async (subAccountId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('getBrokerSubAccountBnbBurnStatusV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerSubAccountBnbBurnStatusV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccount/bnbBurn/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - The query time period must be less than 7 days( default as the recent 7 days).
         * @summary Get Sub Account Deposit History
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {string} [coin] 
         * @param {number} [status] 0(0:pending,6: credited but cannot withdraw, 1:success)
         * @param {number} [startTime] Default: 7 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [limit] Default：500
         * @param {number} [offset] Default：0
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountDepositHistV1: async (timestamp: number, subAccountId?: string, coin?: string, status?: number, startTime?: number, endTime?: number, limit?: number, offset?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerSubAccountDepositHistV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccount/depositHist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Sub Account Deposit History V2
         * @param {string} depositId 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [limit] Default：500
         * @param {number} [offset] Default：0
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountDepositHistV2: async (depositId: string, subAccountId: string, timestamp: number, limit?: number, offset?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'depositId' is not null or undefined
            assertParamExists('getBrokerSubAccountDepositHistV2', 'depositId', depositId)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('getBrokerSubAccountDepositHistV2', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerSubAccountDepositHistV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/broker/subAccount/depositHist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (depositId !== undefined) {
                localVarQueryParameter['depositId'] = depositId;
            }

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query Sub Account Futures Asset info (V3)
         * @param {number} futuresType 1:USD Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountFuturesSummaryV3: async (futuresType: number, timestamp: number, subAccountId?: string, page?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('getBrokerSubAccountFuturesSummaryV3', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerSubAccountFuturesSummaryV3', 'timestamp', timestamp)
            const localVarPath = `/sapi/v3/broker/subAccount/futuresSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - If subaccountId is not sent, the size must be sent
         * @summary Query Sub Account Margin Asset info
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountMarginSummaryV1: async (timestamp: number, subAccountId?: string, page?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerSubAccountMarginSummaryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccount/marginSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - If subaccountId is not sent, the size must be sent - Requests per UID are limited to 60 requests per minute
         * @summary Query Sub Account Spot Asset info
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountSpotSummaryV1: async (timestamp: number, subAccountId?: string, page?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerSubAccountSpotSummaryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccount/spotSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query Sub Account
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {number} [page] default 1
         * @param {number} [size] default 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountV1: async (timestamp: number, subAccountId?: string, page?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerSubAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/subAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - Only get the latest history of past 30 days.
         * @summary Query Sub Account Transfer History（FUTURES）
         * @param {string} subAccountId 
         * @param {number} futuresType 1:USDT Futures,2: COIN Futures
         * @param {number} timestamp 
         * @param {string} [clientTranId] 
         * @param {number} [startTime] default 30 days records
         * @param {number} [endTime] default 30 days records
         * @param {number} [page] default 1
         * @param {number} [limit] default 50, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerTransferFuturesV1: async (subAccountId: string, futuresType: number, timestamp: number, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('getBrokerTransferFuturesV1', 'subAccountId', subAccountId)
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('getBrokerTransferFuturesV1', 'futuresType', futuresType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerTransferFuturesV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/transfer/futures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subAccountId !== undefined) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (clientTranId !== undefined) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Caution: - If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE. - If showAllStatus is false, the status in response will show three types: INIT,PROCESS,SUCCESS. - Either fromId or toId must be sent. Return fromId equal master account by default. Query scope is limited to 100 days: - Both startTime and endTime are provided: If it exceeds, the endTime will be re-calculated 100 days after the startTime. - Neither startTime nor endTime are provided: Calculate 100 days before today. - endTime is not provided: Calculate 100 days after startTime. - startTime is not provided: Calculate 100 days before endTime.
         * @summary Query Sub Account Transfer History（SPOT）
         * @param {number} timestamp 
         * @param {string} [fromId] 
         * @param {string} [toId] 
         * @param {string} [clientTranId] client transfer id
         * @param {string} [showAllStatus] true or false, default: false
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] 
         * @param {number} [limit] default 500, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerTransferV1: async (timestamp: number, fromId?: string, toId?: string, clientTranId?: string, showAllStatus?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerTransferV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromId !== undefined) {
                localVarQueryParameter['fromId'] = fromId;
            }

            if (toId !== undefined) {
                localVarQueryParameter['toId'] = toId;
            }

            if (clientTranId !== undefined) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (showAllStatus !== undefined) {
                localVarQueryParameter['showAllStatus'] = showAllStatus;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Caution: - Either fromId or toId must be sent. - If either fromId or toId is the master account itself, it will not return in response. - If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE. Query scope is limited to 100 days: - Both startTime and endTime are provided: If it exceeds, the endTime will be re-calculated 100 days after the startTime. - Neither startTime nor endTime are provided: Calculate 30 days before today. - endTime is not provided: Calculate as Current time. - startTime is not provided: Calculate 30 days before endTime.
         * @summary Query Universal Transfer History
         * @param {number} timestamp 
         * @param {string} [fromId] 
         * @param {string} [toId] 
         * @param {string} [clientTranId] client transfer id
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] default 1
         * @param {number} [limit] default 500, max 500
         * @param {boolean} [showAllStatus] TRUE or FALSE
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerUniversalTransferV1: async (timestamp: number, fromId?: string, toId?: string, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, showAllStatus?: boolean, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getBrokerUniversalTransferV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/broker/universalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromId !== undefined) {
                localVarQueryParameter['fromId'] = fromId;
            }

            if (toId !== undefined) {
                localVarQueryParameter['toId'] = toId;
            }

            if (clientTranId !== undefined) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (showAllStatus !== undefined) {
                localVarQueryParameter['showAllStatus'] = showAllStatus;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BinanceLinkApi - functional programming interface
 * @export
 */
export const BinanceLinkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BinanceLinkApiAxiosParamCreator(configuration)
    return {
        /**
         * - CustomerId must be unique - For the same email, the customerId will be modified in real time
         * @summary Customize Id For Client (USER DATA) （For Partner）
         * @param {string} customerId 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiReferralCustomizationV1(customerId: string, email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateApiReferralCustomizationV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiReferralCustomizationV1(customerId, email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createApiReferralCustomizationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - CustomerId must be unique for each apiAgent
         * @summary Customize Id For Client  (USER DATA)(For client)
         * @param {string} apiAgentCode 
         * @param {string} customerId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiReferralUserCustomizationV1(apiAgentCode: string, customerId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateApiReferralUserCustomizationV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiReferralUserCustomizationV1(apiAgentCode, customerId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createApiReferralUserCustomizationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This request will change the COIN-Ⓜ futures commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint. The sub-account\'s COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
         * @summary Change Sub Account COIN-Ⓜ Futures Commission Adjustment
         * @param {number} makerAdjustment 
         * @param {string} pair 
         * @param {string} subAccountId 
         * @param {number} takerAdjustment 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerSubAccountApiCommissionCoinFuturesV1(makerAdjustment: number, pair: string, subAccountId: string, takerAdjustment: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerSubAccountApiCommissionCoinFuturesV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerSubAccountApiCommissionCoinFuturesV1(makerAdjustment, pair, subAccountId, takerAdjustment, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerSubAccountApiCommissionCoinFuturesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This request will change the USDT-Ⓜ futures commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint. The sub-account\'s USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
         * @summary Change Sub Account USDT-Ⓜ Futures Commission Adjustment
         * @param {number} makerAdjustment 
         * @param {string} subAccountId 
         * @param {string} symbol 
         * @param {number} takerAdjustment 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerSubAccountApiCommissionFuturesV1(makerAdjustment: number, subAccountId: string, symbol: string, takerAdjustment: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerSubAccountApiCommissionFuturesV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerSubAccountApiCommissionFuturesV1(makerAdjustment, subAccountId, symbol, takerAdjustment, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerSubAccountApiCommissionFuturesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This request will change the commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint.
         * @summary Change Sub Account Commission
         * @param {number} makerCommission 
         * @param {string} subAccountId 
         * @param {number} takerCommission 
         * @param {number} timestamp 
         * @param {number} [marginMakerCommission] 
         * @param {number} [marginTakerCommission] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerSubAccountApiCommissionV1(makerCommission: number, subAccountId: string, takerCommission: number, timestamp: number, marginMakerCommission?: number, marginTakerCommission?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerSubAccountApiCommissionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerSubAccountApiCommissionV1(makerCommission, subAccountId, takerCommission, timestamp, marginMakerCommission, marginTakerCommission, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerSubAccountApiCommissionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update IP Restriction for Sub-Account API key (For Master Account)
         * @param {string} status 
         * @param {string} subAccountApiKey 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [ipAddress] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerSubAccountApiIpRestrictionV2(status: string, subAccountApiKey: string, subAccountId: string, timestamp: number, ipAddress?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerSubAccountApiIpRestrictionV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerSubAccountApiIpRestrictionV2(status, subAccountApiKey, subAccountId, timestamp, ipAddress, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerSubAccountApiIpRestrictionV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Caution: - This request will enable the api permission for a sub account to use POST /sapi/v1/asset/transferendpoint. - You need to enable \"trade\" option for the api key which requests this endpoint.
         * @summary Enable Universal Transfer Permission For Sub Account Api Key
         * @param {string} canUniversalTransfer 
         * @param {string} subAccountApiKey 
         * @param {number} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerSubAccountApiPermissionUniversalTransferV1(canUniversalTransfer: string, subAccountApiKey: string, subAccountId: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerSubAccountApiPermissionUniversalTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerSubAccountApiPermissionUniversalTransferV1(canUniversalTransfer, subAccountApiKey, subAccountId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerSubAccountApiPermissionUniversalTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Caution: - This request will change the api permission for a sub account. - You need to enable \"trade\" option for the api key which requests this endpoint. - Sub account should be enable margin before its api-key\'s marginTrade being enabled. - Sub account should be enable futures before its api-key\'s futuresTrade being enabled.
         * @summary Change Sub Account Api Permission
         * @param {string} canTrade 
         * @param {string} futuresTrade 
         * @param {string} marginTrade 
         * @param {string} subAccountApiKey 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerSubAccountApiPermissionV1(canTrade: string, futuresTrade: string, marginTrade: string, subAccountApiKey: string, subAccountId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerSubAccountApiPermissionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerSubAccountApiPermissionV1(canTrade, futuresTrade, marginTrade, subAccountApiKey, subAccountId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerSubAccountApiPermissionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Caution: - This request will generate a api key for a sub account. - You need to enable \"trade\" option for the api key which requests this endpoint - Sub account should be enable margin before its api-key\'s marginTrade being enabled - Sub account should be enable futures before its api-key\'s futuresTrade being enabled - You can only create 1 api key for each sub account per second
         * @summary Create Api Key for Sub Account
         * @param {string} canTrade 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [futuresTrade] 
         * @param {string} [marginTrade] 
         * @param {string} [publicKey] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerSubAccountApiV1(canTrade: string, subAccountId: string, timestamp: number, futuresTrade?: string, marginTrade?: string, publicKey?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerSubAccountApiV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerSubAccountApiV1(canTrade, subAccountId, timestamp, futuresTrade, marginTrade, publicKey, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerSubAccountApiV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - Subaccount must be enabled margin before using this switch
         * @summary Enable Or Disable BNB Burn for Sub Account Margin Interest
         * @param {string} interestBNBBurn 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerSubAccountBnbBurnMarginInterestV1(interestBNBBurn: string, subAccountId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerSubAccountBnbBurnMarginInterestV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerSubAccountBnbBurnMarginInterestV1(interestBNBBurn, subAccountId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerSubAccountBnbBurnMarginInterestV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Enable Or Disable BNB Burn for Sub Account SPOT and MARGIN
         * @param {string} spotBNBBurn 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerSubAccountBnbBurnSpotV1(spotBNBBurn: string, subAccountId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerSubAccountBnbBurnSpotV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerSubAccountBnbBurnSpotV1(spotBNBBurn, subAccountId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerSubAccountBnbBurnSpotV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Enable Futures for Sub Account
         * @param {string} futures 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerSubAccountFuturesV1(futures: string, subAccountId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerSubAccountFuturesV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerSubAccountFuturesV1(futures, subAccountId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerSubAccountFuturesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * To create a link sub-account
         * @summary Create a Sub Account
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {string} [tag] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerSubAccountV1(timestamp: number, recvWindow?: number, tag?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerSubAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerSubAccountV1(timestamp, recvWindow, tag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerSubAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent. - Each master account could transfer 5000 times/min
         * @summary Sub Account Transfer（FUTURES）
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} futuresType 
         * @param {number} timestamp 
         * @param {string} [clientTranId] 
         * @param {string} [fromId] 
         * @param {number} [recvWindow] 
         * @param {string} [toId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerTransferFuturesV1(amount: string, asset: string, futuresType: number, timestamp: number, clientTranId?: string, fromId?: string, recvWindow?: number, toId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerTransferFuturesV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerTransferFuturesV1(amount, asset, futuresType, timestamp, clientTranId, fromId, recvWindow, toId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerTransferFuturesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent.
         * @summary Sub Account Transfer（SPOT）
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} [clientTranId] 
         * @param {string} [fromId] 
         * @param {number} [recvWindow] 
         * @param {string} [toId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerTransferV1(amount: string, asset: string, timestamp: number, clientTranId?: string, fromId?: string, recvWindow?: number, toId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerTransferV1(amount, asset, timestamp, clientTranId, fromId, recvWindow, toId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent. - Transfer between futures acount is not supported.
         * @summary Universal Transfer
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} fromAccountType 
         * @param {number} timestamp 
         * @param {string} toAccountType 
         * @param {string} [clientTranId] 
         * @param {string} [fromId] 
         * @param {number} [recvWindow] 
         * @param {string} [toId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrokerUniversalTransferV1(amount: string, asset: string, fromAccountType: string, timestamp: number, toAccountType: string, clientTranId?: string, fromId?: string, recvWindow?: number, toId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBrokerUniversalTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrokerUniversalTransferV1(amount, asset, fromAccountType, timestamp, toAccountType, clientTranId, fromId, recvWindow, toId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createBrokerUniversalTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete IP Restriction for Sub Account Api Key
         * @param {string} subAccountId 
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {string} [ipAddress] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrokerSubAccountApiIpRestrictionIpListV1(subAccountId: string, subAccountApiKey: string, timestamp: number, ipAddress?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteBrokerSubAccountApiIpRestrictionIpListV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrokerSubAccountApiIpRestrictionIpListV1(subAccountId, subAccountApiKey, timestamp, ipAddress, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.deleteBrokerSubAccountApiIpRestrictionIpListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Caution: - This request will delete a api key for a sub account - You need to enable \"trade\" option for the api key which requests this endpoint - You can only delete 1 api key for each sub account per second
         * @summary Delete Sub Account Api Key
         * @param {string} subAccountId 
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrokerSubAccountApiV1(subAccountId: string, subAccountApiKey: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrokerSubAccountApiV1(subAccountId, subAccountApiKey, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.deleteBrokerSubAccountApiV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Sub Account
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrokerSubAccountV1(subAccountId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrokerSubAccountV1(subAccountId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.deleteBrokerSubAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - CustomerId and email can not be sent at the same time
         * @summary Get Client Email Customized Id (USER DATA) （For Partner）
         * @param {number} timestamp 
         * @param {string} [customerId] 
         * @param {string} [email] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralCustomizationV1(timestamp: number, customerId?: string, email?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetApiReferralCustomizationV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralCustomizationV1(timestamp, customerId, email, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralCustomizationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Query Client If The New User (USER  DATA)
         * @param {string} apiAgentCode brokerId
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralIfNewUserV1(apiAgentCode: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiReferralIfNewUserV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralIfNewUserV1(apiAgentCode, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralIfNewUserV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - Only get the latest history of past 7 days.
         * @summary Query Rebate Recent Record(For Client)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 500, max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralKickbackRecentRecordV1(timestamp: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetApiReferralKickbackRecentRecordV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralKickbackRecentRecordV1(timestamp, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralKickbackRecentRecordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - startTime and endTime must be both specified or both omitted. - When both omitted it returns last 7 days. - When both specified the span has to be within 7 days.
         * @summary Query Rebate Recent Record （USER DATA）(For Partner)
         * @param {number} startTime 
         * @param {number} endTime 
         * @param {number} limit max 500
         * @param {number} timestamp 
         * @param {string} [customerId] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralRebateRecentRecordV1(startTime: number, endTime: number, limit: number, timestamp: number, customerId?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetApiReferralRebateRecentRecordV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralRebateRecentRecordV1(startTime, endTime, limit, timestamp, customerId, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralRebateRecentRecordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - CustomerId must be unique
         * @summary Get User’s Customize Id (USER DATA)
         * @param {string} apiAgentCode brokerId
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralUserCustomizationV1(apiAgentCode: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiReferralUserCustomizationV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralUserCustomizationV1(apiAgentCode, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralUserCustomizationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Link Account Information
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerInfoV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBrokerInfoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerInfoV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - If filterResult = TRUE, rebates not from its own sub accounts will be filtered out in response.
         * @summary Query Broker Futures Commission Rebate Record
         * @param {number} futuresType 1:USDT Futures, 2: Coin Futures
         * @param {number} startTime 
         * @param {number} endTime 
         * @param {number} timestamp 
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 100
         * @param {boolean} [filterResult] TRUE or FALSE. Default: FALSE
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerRebateFuturesRecentRecordV1(futuresType: number, startTime: number, endTime: number, timestamp: number, page?: number, size?: number, filterResult?: boolean, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrokerRebateFuturesRecentRecordV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerRebateFuturesRecentRecordV1(futuresType, startTime, endTime, timestamp, page, size, filterResult, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerRebateFuturesRecentRecordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - The query time period must be less than 7 days (default as the recent 7 days).
         * @summary Query Broker Commission Rebate Recent Record（Spot）
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {number} [startTime] Default: 7 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [page] default 1
         * @param {number} [size] default 500，max500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerRebateRecentRecordV1(timestamp: number, subAccountId?: string, startTime?: number, endTime?: number, page?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrokerRebateRecentRecordV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerRebateRecentRecordV1(timestamp, subAccountId, startTime, endTime, page, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerRebateRecentRecordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - The sub-account\'s COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment. - If symbol not sent, commission adjustment of all symbols will be returned. - If futures disabled, it is not allowed to set subaccount\'s COIN-Ⓜ futures commission adjustment on any symbol. - Different symbols have the same commission for the same pair
         * @summary Query Sub Account COIN-Ⓜ Futures Commission Adjustment
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [pair] BTCUSD
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerSubAccountApiCommissionCoinFuturesV1(subAccountId: string, timestamp: number, pair?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrokerSubAccountApiCommissionCoinFuturesV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerSubAccountApiCommissionCoinFuturesV1(subAccountId, timestamp, pair, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerSubAccountApiCommissionCoinFuturesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The sub-account\'s USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
         * @summary Query Sub Account USDT-Ⓜ Futures Commission Adjustment
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerSubAccountApiCommissionFuturesV1(subAccountId: string, timestamp: number, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrokerSubAccountApiCommissionFuturesV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerSubAccountApiCommissionFuturesV1(subAccountId, timestamp, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerSubAccountApiCommissionFuturesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get IP Restriction for Sub Account Api Key
         * @param {string} subAccountId 
         * @param {string} subAccountApiKey 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerSubAccountApiIpRestrictionV1(subAccountId: string, subAccountApiKey: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBrokerSubAccountApiIpRestrictionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerSubAccountApiIpRestrictionV1(subAccountId, subAccountApiKey, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerSubAccountApiIpRestrictionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Caution: - You need to enable \"trade\" option for the api key which requests this endpoint
         * @summary Query Sub Account Api Key
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [subAccountApiKey] 
         * @param {number} [page] default 1
         * @param {number} [size] default 500, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerSubAccountApiV1(subAccountId: string, timestamp: number, subAccountApiKey?: string, page?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrokerSubAccountApiV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerSubAccountApiV1(subAccountId, timestamp, subAccountApiKey, page, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerSubAccountApiV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get BNB Burn Status for Sub Account
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerSubAccountBnbBurnStatusV1(subAccountId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBrokerSubAccountBnbBurnStatusV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerSubAccountBnbBurnStatusV1(subAccountId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerSubAccountBnbBurnStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - The query time period must be less than 7 days( default as the recent 7 days).
         * @summary Get Sub Account Deposit History
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {string} [coin] 
         * @param {number} [status] 0(0:pending,6: credited but cannot withdraw, 1:success)
         * @param {number} [startTime] Default: 7 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [limit] Default：500
         * @param {number} [offset] Default：0
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerSubAccountDepositHistV1(timestamp: number, subAccountId?: string, coin?: string, status?: number, startTime?: number, endTime?: number, limit?: number, offset?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrokerSubAccountDepositHistV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerSubAccountDepositHistV1(timestamp, subAccountId, coin, status, startTime, endTime, limit, offset, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerSubAccountDepositHistV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Sub Account Deposit History V2
         * @param {string} depositId 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {number} [limit] Default：500
         * @param {number} [offset] Default：0
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerSubAccountDepositHistV2(depositId: string, subAccountId: string, timestamp: number, limit?: number, offset?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrokerSubAccountDepositHistV2RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerSubAccountDepositHistV2(depositId, subAccountId, timestamp, limit, offset, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerSubAccountDepositHistV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Query Sub Account Futures Asset info (V3)
         * @param {number} futuresType 1:USD Margined Futures, 2:COIN Margined Futures
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerSubAccountFuturesSummaryV3(futuresType: number, timestamp: number, subAccountId?: string, page?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangelinkGetBrokerSubAccountFuturesSummaryV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerSubAccountFuturesSummaryV3(futuresType, timestamp, subAccountId, page, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerSubAccountFuturesSummaryV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - If subaccountId is not sent, the size must be sent
         * @summary Query Sub Account Margin Asset info
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerSubAccountMarginSummaryV1(timestamp: number, subAccountId?: string, page?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBrokerSubAccountMarginSummaryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerSubAccountMarginSummaryV1(timestamp, subAccountId, page, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerSubAccountMarginSummaryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - If subaccountId is not sent, the size must be sent - Requests per UID are limited to 60 requests per minute
         * @summary Query Sub Account Spot Asset info
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {number} [page] default 1
         * @param {number} [size] default 10, max 20
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerSubAccountSpotSummaryV1(timestamp: number, subAccountId?: string, page?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBrokerSubAccountSpotSummaryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerSubAccountSpotSummaryV1(timestamp, subAccountId, page, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerSubAccountSpotSummaryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Query Sub Account
         * @param {number} timestamp 
         * @param {string} [subAccountId] 
         * @param {number} [page] default 1
         * @param {number} [size] default 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerSubAccountV1(timestamp: number, subAccountId?: string, page?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrokerSubAccountV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerSubAccountV1(timestamp, subAccountId, page, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerSubAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - Only get the latest history of past 30 days.
         * @summary Query Sub Account Transfer History（FUTURES）
         * @param {string} subAccountId 
         * @param {number} futuresType 1:USDT Futures,2: COIN Futures
         * @param {number} timestamp 
         * @param {string} [clientTranId] 
         * @param {number} [startTime] default 30 days records
         * @param {number} [endTime] default 30 days records
         * @param {number} [page] default 1
         * @param {number} [limit] default 50, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerTransferFuturesV1(subAccountId: string, futuresType: number, timestamp: number, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBrokerTransferFuturesV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerTransferFuturesV1(subAccountId, futuresType, timestamp, clientTranId, startTime, endTime, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerTransferFuturesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Caution: - If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE. - If showAllStatus is false, the status in response will show three types: INIT,PROCESS,SUCCESS. - Either fromId or toId must be sent. Return fromId equal master account by default. Query scope is limited to 100 days: - Both startTime and endTime are provided: If it exceeds, the endTime will be re-calculated 100 days after the startTime. - Neither startTime nor endTime are provided: Calculate 100 days before today. - endTime is not provided: Calculate 100 days after startTime. - startTime is not provided: Calculate 100 days before endTime.
         * @summary Query Sub Account Transfer History（SPOT）
         * @param {number} timestamp 
         * @param {string} [fromId] 
         * @param {string} [toId] 
         * @param {string} [clientTranId] client transfer id
         * @param {string} [showAllStatus] true or false, default: false
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] 
         * @param {number} [limit] default 500, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerTransferV1(timestamp: number, fromId?: string, toId?: string, clientTranId?: string, showAllStatus?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrokerTransferV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerTransferV1(timestamp, fromId, toId, clientTranId, showAllStatus, startTime, endTime, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Caution: - Either fromId or toId must be sent. - If either fromId or toId is the master account itself, it will not return in response. - If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE. Query scope is limited to 100 days: - Both startTime and endTime are provided: If it exceeds, the endTime will be re-calculated 100 days after the startTime. - Neither startTime nor endTime are provided: Calculate 30 days before today. - endTime is not provided: Calculate as Current time. - startTime is not provided: Calculate 30 days before endTime.
         * @summary Query Universal Transfer History
         * @param {number} timestamp 
         * @param {string} [fromId] 
         * @param {string} [toId] 
         * @param {string} [clientTranId] client transfer id
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [page] default 1
         * @param {number} [limit] default 500, max 500
         * @param {boolean} [showAllStatus] TRUE or FALSE
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrokerUniversalTransferV1(timestamp: number, fromId?: string, toId?: string, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, showAllStatus?: boolean, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBrokerUniversalTransferV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrokerUniversalTransferV1(timestamp, fromId, toId, clientTranId, startTime, endTime, page, limit, showAllStatus, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getBrokerUniversalTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BinanceLinkApi - factory interface
 * @export
 */
export const BinanceLinkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BinanceLinkApiFp(configuration)
    return {
        /**
         * - CustomerId must be unique - For the same email, the customerId will be modified in real time
         * @summary Customize Id For Client (USER DATA) （For Partner）
         * @param {BinanceLinkApiCreateApiReferralCustomizationV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiReferralCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateApiReferralCustomizationV1Resp> {
            return localVarFp.createApiReferralCustomizationV1(requestParameters.customerId, requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - CustomerId must be unique for each apiAgent
         * @summary Customize Id For Client  (USER DATA)(For client)
         * @param {BinanceLinkApiCreateApiReferralUserCustomizationV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateApiReferralUserCustomizationV1Resp> {
            return localVarFp.createApiReferralUserCustomizationV1(requestParameters.apiAgentCode, requestParameters.customerId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * This request will change the COIN-Ⓜ futures commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint. The sub-account\'s COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
         * @summary Change Sub Account COIN-Ⓜ Futures Commission Adjustment
         * @param {BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiCommissionCoinFuturesV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiCommissionCoinFuturesV1Resp> {
            return localVarFp.createBrokerSubAccountApiCommissionCoinFuturesV1(requestParameters.makerAdjustment, requestParameters.pair, requestParameters.subAccountId, requestParameters.takerAdjustment, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * This request will change the USDT-Ⓜ futures commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint. The sub-account\'s USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
         * @summary Change Sub Account USDT-Ⓜ Futures Commission Adjustment
         * @param {BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiCommissionFuturesV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiCommissionFuturesV1Resp> {
            return localVarFp.createBrokerSubAccountApiCommissionFuturesV1(requestParameters.makerAdjustment, requestParameters.subAccountId, requestParameters.symbol, requestParameters.takerAdjustment, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * This request will change the commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint.
         * @summary Change Sub Account Commission
         * @param {BinanceLinkApiCreateBrokerSubAccountApiCommissionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiCommissionV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiCommissionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiCommissionV1Resp> {
            return localVarFp.createBrokerSubAccountApiCommissionV1(requestParameters.makerCommission, requestParameters.subAccountId, requestParameters.takerCommission, requestParameters.timestamp, requestParameters.marginMakerCommission, requestParameters.marginTakerCommission, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update IP Restriction for Sub-Account API key (For Master Account)
         * @param {BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiIpRestrictionV2(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiIpRestrictionV2Resp> {
            return localVarFp.createBrokerSubAccountApiIpRestrictionV2(requestParameters.status, requestParameters.subAccountApiKey, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.ipAddress, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Caution: - This request will enable the api permission for a sub account to use POST /sapi/v1/asset/transferendpoint. - You need to enable \"trade\" option for the api key which requests this endpoint.
         * @summary Enable Universal Transfer Permission For Sub Account Api Key
         * @param {BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiPermissionUniversalTransferV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiPermissionUniversalTransferV1Resp> {
            return localVarFp.createBrokerSubAccountApiPermissionUniversalTransferV1(requestParameters.canUniversalTransfer, requestParameters.subAccountApiKey, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Caution: - This request will change the api permission for a sub account. - You need to enable \"trade\" option for the api key which requests this endpoint. - Sub account should be enable margin before its api-key\'s marginTrade being enabled. - Sub account should be enable futures before its api-key\'s futuresTrade being enabled.
         * @summary Change Sub Account Api Permission
         * @param {BinanceLinkApiCreateBrokerSubAccountApiPermissionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiPermissionV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiPermissionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiPermissionV1Resp> {
            return localVarFp.createBrokerSubAccountApiPermissionV1(requestParameters.canTrade, requestParameters.futuresTrade, requestParameters.marginTrade, requestParameters.subAccountApiKey, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Caution: - This request will generate a api key for a sub account. - You need to enable \"trade\" option for the api key which requests this endpoint - Sub account should be enable margin before its api-key\'s marginTrade being enabled - Sub account should be enable futures before its api-key\'s futuresTrade being enabled - You can only create 1 api key for each sub account per second
         * @summary Create Api Key for Sub Account
         * @param {BinanceLinkApiCreateBrokerSubAccountApiV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountApiV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiV1Resp> {
            return localVarFp.createBrokerSubAccountApiV1(requestParameters.canTrade, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.futuresTrade, requestParameters.marginTrade, requestParameters.publicKey, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - Subaccount must be enabled margin before using this switch
         * @summary Enable Or Disable BNB Burn for Sub Account Margin Interest
         * @param {BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountBnbBurnMarginInterestV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountBnbBurnMarginInterestV1Resp> {
            return localVarFp.createBrokerSubAccountBnbBurnMarginInterestV1(requestParameters.interestBNBBurn, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable Or Disable BNB Burn for Sub Account SPOT and MARGIN
         * @param {BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountBnbBurnSpotV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountBnbBurnSpotV1Resp> {
            return localVarFp.createBrokerSubAccountBnbBurnSpotV1(requestParameters.spotBNBBurn, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable Futures for Sub Account
         * @param {BinanceLinkApiCreateBrokerSubAccountFuturesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountFuturesV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountFuturesV1Resp> {
            return localVarFp.createBrokerSubAccountFuturesV1(requestParameters.futures, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * To create a link sub-account
         * @summary Create a Sub Account
         * @param {BinanceLinkApiCreateBrokerSubAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerSubAccountV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountV1Resp> {
            return localVarFp.createBrokerSubAccountV1(requestParameters.timestamp, requestParameters.recvWindow, requestParameters.tag, options).then((request) => request(axios, basePath));
        },
        /**
         * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent. - Each master account could transfer 5000 times/min
         * @summary Sub Account Transfer（FUTURES）
         * @param {BinanceLinkApiCreateBrokerTransferFuturesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerTransferFuturesV1(requestParameters: BinanceLinkApiCreateBrokerTransferFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerTransferFuturesV1Resp> {
            return localVarFp.createBrokerTransferFuturesV1(requestParameters.amount, requestParameters.asset, requestParameters.futuresType, requestParameters.timestamp, requestParameters.clientTranId, requestParameters.fromId, requestParameters.recvWindow, requestParameters.toId, options).then((request) => request(axios, basePath));
        },
        /**
         * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent.
         * @summary Sub Account Transfer（SPOT）
         * @param {BinanceLinkApiCreateBrokerTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerTransferV1(requestParameters: BinanceLinkApiCreateBrokerTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerTransferV1Resp> {
            return localVarFp.createBrokerTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.clientTranId, requestParameters.fromId, requestParameters.recvWindow, requestParameters.toId, options).then((request) => request(axios, basePath));
        },
        /**
         * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent. - Transfer between futures acount is not supported.
         * @summary Universal Transfer
         * @param {BinanceLinkApiCreateBrokerUniversalTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrokerUniversalTransferV1(requestParameters: BinanceLinkApiCreateBrokerUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerUniversalTransferV1Resp> {
            return localVarFp.createBrokerUniversalTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.fromAccountType, requestParameters.timestamp, requestParameters.toAccountType, requestParameters.clientTranId, requestParameters.fromId, requestParameters.recvWindow, requestParameters.toId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete IP Restriction for Sub Account Api Key
         * @param {BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrokerSubAccountApiIpRestrictionIpListV1(requestParameters: BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DeleteBrokerSubAccountApiIpRestrictionIpListV1Resp> {
            return localVarFp.deleteBrokerSubAccountApiIpRestrictionIpListV1(requestParameters.subAccountId, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.ipAddress, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Caution: - This request will delete a api key for a sub account - You need to enable \"trade\" option for the api key which requests this endpoint - You can only delete 1 api key for each sub account per second
         * @summary Delete Sub Account Api Key
         * @param {BinanceLinkApiDeleteBrokerSubAccountApiV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrokerSubAccountApiV1(requestParameters: BinanceLinkApiDeleteBrokerSubAccountApiV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteBrokerSubAccountApiV1(requestParameters.subAccountId, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Sub Account
         * @param {BinanceLinkApiDeleteBrokerSubAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrokerSubAccountV1(requestParameters: BinanceLinkApiDeleteBrokerSubAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteBrokerSubAccountV1(requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - CustomerId and email can not be sent at the same time
         * @summary Get Client Email Customized Id (USER DATA) （For Partner）
         * @param {BinanceLinkApiGetApiReferralCustomizationV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralCustomizationV1RespItem>> {
            return localVarFp.getApiReferralCustomizationV1(requestParameters.timestamp, requestParameters.customerId, requestParameters.email, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query Client If The New User (USER  DATA)
         * @param {BinanceLinkApiGetApiReferralIfNewUserV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralIfNewUserV1(requestParameters: BinanceLinkApiGetApiReferralIfNewUserV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralIfNewUserV1Resp> {
            return localVarFp.getApiReferralIfNewUserV1(requestParameters.apiAgentCode, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - Only get the latest history of past 7 days.
         * @summary Query Rebate Recent Record(For Client)
         * @param {BinanceLinkApiGetApiReferralKickbackRecentRecordV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralKickbackRecentRecordV1(requestParameters: BinanceLinkApiGetApiReferralKickbackRecentRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralKickbackRecentRecordV1RespItem>> {
            return localVarFp.getApiReferralKickbackRecentRecordV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - startTime and endTime must be both specified or both omitted. - When both omitted it returns last 7 days. - When both specified the span has to be within 7 days.
         * @summary Query Rebate Recent Record （USER DATA）(For Partner)
         * @param {BinanceLinkApiGetApiReferralRebateRecentRecordV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralRebateRecentRecordV1(requestParameters: BinanceLinkApiGetApiReferralRebateRecentRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralRebateRecentRecordV1RespItem>> {
            return localVarFp.getApiReferralRebateRecentRecordV1(requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.timestamp, requestParameters.customerId, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - CustomerId must be unique
         * @summary Get User’s Customize Id (USER DATA)
         * @param {BinanceLinkApiGetApiReferralUserCustomizationV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralUserCustomizationV1Resp> {
            return localVarFp.getApiReferralUserCustomizationV1(requestParameters.apiAgentCode, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Link Account Information
         * @param {BinanceLinkApiGetBrokerInfoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerInfoV1(requestParameters: BinanceLinkApiGetBrokerInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerInfoV1Resp> {
            return localVarFp.getBrokerInfoV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - If filterResult = TRUE, rebates not from its own sub accounts will be filtered out in response.
         * @summary Query Broker Futures Commission Rebate Record
         * @param {BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerRebateFuturesRecentRecordV1(requestParameters: BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerRebateFuturesRecentRecordV1RespItem>> {
            return localVarFp.getBrokerRebateFuturesRecentRecordV1(requestParameters.futuresType, requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.page, requestParameters.size, requestParameters.filterResult, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - The query time period must be less than 7 days (default as the recent 7 days).
         * @summary Query Broker Commission Rebate Recent Record（Spot）
         * @param {BinanceLinkApiGetBrokerRebateRecentRecordV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerRebateRecentRecordV1(requestParameters: BinanceLinkApiGetBrokerRebateRecentRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerRebateRecentRecordV1RespItem>> {
            return localVarFp.getBrokerRebateRecentRecordV1(requestParameters.timestamp, requestParameters.subAccountId, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - The sub-account\'s COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment. - If symbol not sent, commission adjustment of all symbols will be returned. - If futures disabled, it is not allowed to set subaccount\'s COIN-Ⓜ futures commission adjustment on any symbol. - Different symbols have the same commission for the same pair
         * @summary Query Sub Account COIN-Ⓜ Futures Commission Adjustment
         * @param {BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountApiCommissionCoinFuturesV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountApiCommissionCoinFuturesV1RespItem>> {
            return localVarFp.getBrokerSubAccountApiCommissionCoinFuturesV1(requestParameters.subAccountId, requestParameters.timestamp, requestParameters.pair, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * The sub-account\'s USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
         * @summary Query Sub Account USDT-Ⓜ Futures Commission Adjustment
         * @param {BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountApiCommissionFuturesV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountApiCommissionFuturesV1RespItem>> {
            return localVarFp.getBrokerSubAccountApiCommissionFuturesV1(requestParameters.subAccountId, requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get IP Restriction for Sub Account Api Key
         * @param {BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountApiIpRestrictionV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerSubAccountApiIpRestrictionV1Resp> {
            return localVarFp.getBrokerSubAccountApiIpRestrictionV1(requestParameters.subAccountId, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Caution: - You need to enable \"trade\" option for the api key which requests this endpoint
         * @summary Query Sub Account Api Key
         * @param {BinanceLinkApiGetBrokerSubAccountApiV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountApiV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountApiV1RespItem>> {
            return localVarFp.getBrokerSubAccountApiV1(requestParameters.subAccountId, requestParameters.timestamp, requestParameters.subAccountApiKey, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get BNB Burn Status for Sub Account
         * @param {BinanceLinkApiGetBrokerSubAccountBnbBurnStatusV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountBnbBurnStatusV1(requestParameters: BinanceLinkApiGetBrokerSubAccountBnbBurnStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerSubAccountBnbBurnStatusV1Resp> {
            return localVarFp.getBrokerSubAccountBnbBurnStatusV1(requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - The query time period must be less than 7 days( default as the recent 7 days).
         * @summary Get Sub Account Deposit History
         * @param {BinanceLinkApiGetBrokerSubAccountDepositHistV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountDepositHistV1(requestParameters: BinanceLinkApiGetBrokerSubAccountDepositHistV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountDepositHistV1RespItem>> {
            return localVarFp.getBrokerSubAccountDepositHistV1(requestParameters.timestamp, requestParameters.subAccountId, requestParameters.coin, requestParameters.status, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.offset, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Sub Account Deposit History V2
         * @param {BinanceLinkApiGetBrokerSubAccountDepositHistV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountDepositHistV2(requestParameters: BinanceLinkApiGetBrokerSubAccountDepositHistV2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountDepositHistV2RespItem>> {
            return localVarFp.getBrokerSubAccountDepositHistV2(requestParameters.depositId, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.limit, requestParameters.offset, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query Sub Account Futures Asset info (V3)
         * @param {BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountFuturesSummaryV3(requestParameters: BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3Request, options?: RawAxiosRequestConfig): AxiosPromise<ExchangelinkGetBrokerSubAccountFuturesSummaryV3Resp> {
            return localVarFp.getBrokerSubAccountFuturesSummaryV3(requestParameters.futuresType, requestParameters.timestamp, requestParameters.subAccountId, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - If subaccountId is not sent, the size must be sent
         * @summary Query Sub Account Margin Asset info
         * @param {BinanceLinkApiGetBrokerSubAccountMarginSummaryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountMarginSummaryV1(requestParameters: BinanceLinkApiGetBrokerSubAccountMarginSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerSubAccountMarginSummaryV1Resp> {
            return localVarFp.getBrokerSubAccountMarginSummaryV1(requestParameters.timestamp, requestParameters.subAccountId, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - If subaccountId is not sent, the size must be sent - Requests per UID are limited to 60 requests per minute
         * @summary Query Sub Account Spot Asset info
         * @param {BinanceLinkApiGetBrokerSubAccountSpotSummaryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountSpotSummaryV1(requestParameters: BinanceLinkApiGetBrokerSubAccountSpotSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerSubAccountSpotSummaryV1Resp> {
            return localVarFp.getBrokerSubAccountSpotSummaryV1(requestParameters.timestamp, requestParameters.subAccountId, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query Sub Account
         * @param {BinanceLinkApiGetBrokerSubAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerSubAccountV1(requestParameters: BinanceLinkApiGetBrokerSubAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountV1RespItem>> {
            return localVarFp.getBrokerSubAccountV1(requestParameters.timestamp, requestParameters.subAccountId, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - Only get the latest history of past 30 days.
         * @summary Query Sub Account Transfer History（FUTURES）
         * @param {BinanceLinkApiGetBrokerTransferFuturesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerTransferFuturesV1(requestParameters: BinanceLinkApiGetBrokerTransferFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerTransferFuturesV1Resp> {
            return localVarFp.getBrokerTransferFuturesV1(requestParameters.subAccountId, requestParameters.futuresType, requestParameters.timestamp, requestParameters.clientTranId, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Caution: - If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE. - If showAllStatus is false, the status in response will show three types: INIT,PROCESS,SUCCESS. - Either fromId or toId must be sent. Return fromId equal master account by default. Query scope is limited to 100 days: - Both startTime and endTime are provided: If it exceeds, the endTime will be re-calculated 100 days after the startTime. - Neither startTime nor endTime are provided: Calculate 100 days before today. - endTime is not provided: Calculate 100 days after startTime. - startTime is not provided: Calculate 100 days before endTime.
         * @summary Query Sub Account Transfer History（SPOT）
         * @param {BinanceLinkApiGetBrokerTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerTransferV1(requestParameters: BinanceLinkApiGetBrokerTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerTransferV1RespItem>> {
            return localVarFp.getBrokerTransferV1(requestParameters.timestamp, requestParameters.fromId, requestParameters.toId, requestParameters.clientTranId, requestParameters.showAllStatus, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Caution: - Either fromId or toId must be sent. - If either fromId or toId is the master account itself, it will not return in response. - If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE. Query scope is limited to 100 days: - Both startTime and endTime are provided: If it exceeds, the endTime will be re-calculated 100 days after the startTime. - Neither startTime nor endTime are provided: Calculate 30 days before today. - endTime is not provided: Calculate as Current time. - startTime is not provided: Calculate 30 days before endTime.
         * @summary Query Universal Transfer History
         * @param {BinanceLinkApiGetBrokerUniversalTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrokerUniversalTransferV1(requestParameters: BinanceLinkApiGetBrokerUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerUniversalTransferV1RespItem>> {
            return localVarFp.getBrokerUniversalTransferV1(requestParameters.timestamp, requestParameters.fromId, requestParameters.toId, requestParameters.clientTranId, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.showAllStatus, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BinanceLinkApi - interface
 * @export
 * @interface BinanceLinkApi
 */
export interface BinanceLinkApiInterface {
    /**
     * - CustomerId must be unique - For the same email, the customerId will be modified in real time
     * @summary Customize Id For Client (USER DATA) （For Partner）
     * @param {BinanceLinkApiCreateApiReferralCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createApiReferralCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateApiReferralCustomizationV1Resp>;

    /**
     * - CustomerId must be unique for each apiAgent
     * @summary Customize Id For Client  (USER DATA)(For client)
     * @param {BinanceLinkApiCreateApiReferralUserCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateApiReferralUserCustomizationV1Resp>;

    /**
     * This request will change the COIN-Ⓜ futures commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint. The sub-account\'s COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
     * @summary Change Sub Account COIN-Ⓜ Futures Commission Adjustment
     * @param {BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerSubAccountApiCommissionCoinFuturesV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiCommissionCoinFuturesV1Resp>;

    /**
     * This request will change the USDT-Ⓜ futures commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint. The sub-account\'s USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
     * @summary Change Sub Account USDT-Ⓜ Futures Commission Adjustment
     * @param {BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerSubAccountApiCommissionFuturesV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiCommissionFuturesV1Resp>;

    /**
     * This request will change the commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint.
     * @summary Change Sub Account Commission
     * @param {BinanceLinkApiCreateBrokerSubAccountApiCommissionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerSubAccountApiCommissionV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiCommissionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiCommissionV1Resp>;

    /**
     * 
     * @summary Update IP Restriction for Sub-Account API key (For Master Account)
     * @param {BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerSubAccountApiIpRestrictionV2(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiIpRestrictionV2Resp>;

    /**
     * Caution: - This request will enable the api permission for a sub account to use POST /sapi/v1/asset/transferendpoint. - You need to enable \"trade\" option for the api key which requests this endpoint.
     * @summary Enable Universal Transfer Permission For Sub Account Api Key
     * @param {BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerSubAccountApiPermissionUniversalTransferV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiPermissionUniversalTransferV1Resp>;

    /**
     * Caution: - This request will change the api permission for a sub account. - You need to enable \"trade\" option for the api key which requests this endpoint. - Sub account should be enable margin before its api-key\'s marginTrade being enabled. - Sub account should be enable futures before its api-key\'s futuresTrade being enabled.
     * @summary Change Sub Account Api Permission
     * @param {BinanceLinkApiCreateBrokerSubAccountApiPermissionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerSubAccountApiPermissionV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiPermissionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiPermissionV1Resp>;

    /**
     * Caution: - This request will generate a api key for a sub account. - You need to enable \"trade\" option for the api key which requests this endpoint - Sub account should be enable margin before its api-key\'s marginTrade being enabled - Sub account should be enable futures before its api-key\'s futuresTrade being enabled - You can only create 1 api key for each sub account per second
     * @summary Create Api Key for Sub Account
     * @param {BinanceLinkApiCreateBrokerSubAccountApiV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerSubAccountApiV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountApiV1Resp>;

    /**
     * - Subaccount must be enabled margin before using this switch
     * @summary Enable Or Disable BNB Burn for Sub Account Margin Interest
     * @param {BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerSubAccountBnbBurnMarginInterestV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountBnbBurnMarginInterestV1Resp>;

    /**
     * 
     * @summary Enable Or Disable BNB Burn for Sub Account SPOT and MARGIN
     * @param {BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerSubAccountBnbBurnSpotV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountBnbBurnSpotV1Resp>;

    /**
     * 
     * @summary Enable Futures for Sub Account
     * @param {BinanceLinkApiCreateBrokerSubAccountFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerSubAccountFuturesV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountFuturesV1Resp>;

    /**
     * To create a link sub-account
     * @summary Create a Sub Account
     * @param {BinanceLinkApiCreateBrokerSubAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerSubAccountV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerSubAccountV1Resp>;

    /**
     * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent. - Each master account could transfer 5000 times/min
     * @summary Sub Account Transfer（FUTURES）
     * @param {BinanceLinkApiCreateBrokerTransferFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerTransferFuturesV1(requestParameters: BinanceLinkApiCreateBrokerTransferFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerTransferFuturesV1Resp>;

    /**
     * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent.
     * @summary Sub Account Transfer（SPOT）
     * @param {BinanceLinkApiCreateBrokerTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerTransferV1(requestParameters: BinanceLinkApiCreateBrokerTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerTransferV1Resp>;

    /**
     * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent. - Transfer between futures acount is not supported.
     * @summary Universal Transfer
     * @param {BinanceLinkApiCreateBrokerUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createBrokerUniversalTransferV1(requestParameters: BinanceLinkApiCreateBrokerUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBrokerUniversalTransferV1Resp>;

    /**
     * 
     * @summary Delete IP Restriction for Sub Account Api Key
     * @param {BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    deleteBrokerSubAccountApiIpRestrictionIpListV1(requestParameters: BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DeleteBrokerSubAccountApiIpRestrictionIpListV1Resp>;

    /**
     * Caution: - This request will delete a api key for a sub account - You need to enable \"trade\" option for the api key which requests this endpoint - You can only delete 1 api key for each sub account per second
     * @summary Delete Sub Account Api Key
     * @param {BinanceLinkApiDeleteBrokerSubAccountApiV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    deleteBrokerSubAccountApiV1(requestParameters: BinanceLinkApiDeleteBrokerSubAccountApiV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Delete Sub Account
     * @param {BinanceLinkApiDeleteBrokerSubAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    deleteBrokerSubAccountV1(requestParameters: BinanceLinkApiDeleteBrokerSubAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * - CustomerId and email can not be sent at the same time
     * @summary Get Client Email Customized Id (USER DATA) （For Partner）
     * @param {BinanceLinkApiGetApiReferralCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralCustomizationV1RespItem>>;

    /**
     * 
     * @summary Query Client If The New User (USER  DATA)
     * @param {BinanceLinkApiGetApiReferralIfNewUserV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralIfNewUserV1(requestParameters: BinanceLinkApiGetApiReferralIfNewUserV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralIfNewUserV1Resp>;

    /**
     * - Only get the latest history of past 7 days.
     * @summary Query Rebate Recent Record(For Client)
     * @param {BinanceLinkApiGetApiReferralKickbackRecentRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralKickbackRecentRecordV1(requestParameters: BinanceLinkApiGetApiReferralKickbackRecentRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralKickbackRecentRecordV1RespItem>>;

    /**
     * - startTime and endTime must be both specified or both omitted. - When both omitted it returns last 7 days. - When both specified the span has to be within 7 days.
     * @summary Query Rebate Recent Record （USER DATA）(For Partner)
     * @param {BinanceLinkApiGetApiReferralRebateRecentRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralRebateRecentRecordV1(requestParameters: BinanceLinkApiGetApiReferralRebateRecentRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralRebateRecentRecordV1RespItem>>;

    /**
     * - CustomerId must be unique
     * @summary Get User’s Customize Id (USER DATA)
     * @param {BinanceLinkApiGetApiReferralUserCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralUserCustomizationV1Resp>;

    /**
     * 
     * @summary Link Account Information
     * @param {BinanceLinkApiGetBrokerInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerInfoV1(requestParameters: BinanceLinkApiGetBrokerInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerInfoV1Resp>;

    /**
     * - If filterResult = TRUE, rebates not from its own sub accounts will be filtered out in response.
     * @summary Query Broker Futures Commission Rebate Record
     * @param {BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerRebateFuturesRecentRecordV1(requestParameters: BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerRebateFuturesRecentRecordV1RespItem>>;

    /**
     * - The query time period must be less than 7 days (default as the recent 7 days).
     * @summary Query Broker Commission Rebate Recent Record（Spot）
     * @param {BinanceLinkApiGetBrokerRebateRecentRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerRebateRecentRecordV1(requestParameters: BinanceLinkApiGetBrokerRebateRecentRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerRebateRecentRecordV1RespItem>>;

    /**
     * - The sub-account\'s COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment. - If symbol not sent, commission adjustment of all symbols will be returned. - If futures disabled, it is not allowed to set subaccount\'s COIN-Ⓜ futures commission adjustment on any symbol. - Different symbols have the same commission for the same pair
     * @summary Query Sub Account COIN-Ⓜ Futures Commission Adjustment
     * @param {BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerSubAccountApiCommissionCoinFuturesV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountApiCommissionCoinFuturesV1RespItem>>;

    /**
     * The sub-account\'s USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
     * @summary Query Sub Account USDT-Ⓜ Futures Commission Adjustment
     * @param {BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerSubAccountApiCommissionFuturesV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountApiCommissionFuturesV1RespItem>>;

    /**
     * 
     * @summary Get IP Restriction for Sub Account Api Key
     * @param {BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerSubAccountApiIpRestrictionV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerSubAccountApiIpRestrictionV1Resp>;

    /**
     * Caution: - You need to enable \"trade\" option for the api key which requests this endpoint
     * @summary Query Sub Account Api Key
     * @param {BinanceLinkApiGetBrokerSubAccountApiV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerSubAccountApiV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountApiV1RespItem>>;

    /**
     * 
     * @summary Get BNB Burn Status for Sub Account
     * @param {BinanceLinkApiGetBrokerSubAccountBnbBurnStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerSubAccountBnbBurnStatusV1(requestParameters: BinanceLinkApiGetBrokerSubAccountBnbBurnStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerSubAccountBnbBurnStatusV1Resp>;

    /**
     * - The query time period must be less than 7 days( default as the recent 7 days).
     * @summary Get Sub Account Deposit History
     * @param {BinanceLinkApiGetBrokerSubAccountDepositHistV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerSubAccountDepositHistV1(requestParameters: BinanceLinkApiGetBrokerSubAccountDepositHistV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountDepositHistV1RespItem>>;

    /**
     * 
     * @summary Get Sub Account Deposit History V2
     * @param {BinanceLinkApiGetBrokerSubAccountDepositHistV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerSubAccountDepositHistV2(requestParameters: BinanceLinkApiGetBrokerSubAccountDepositHistV2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountDepositHistV2RespItem>>;

    /**
     * 
     * @summary Query Sub Account Futures Asset info (V3)
     * @param {BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerSubAccountFuturesSummaryV3(requestParameters: BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3Request, options?: RawAxiosRequestConfig): AxiosPromise<ExchangelinkGetBrokerSubAccountFuturesSummaryV3Resp>;

    /**
     * - If subaccountId is not sent, the size must be sent
     * @summary Query Sub Account Margin Asset info
     * @param {BinanceLinkApiGetBrokerSubAccountMarginSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerSubAccountMarginSummaryV1(requestParameters: BinanceLinkApiGetBrokerSubAccountMarginSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerSubAccountMarginSummaryV1Resp>;

    /**
     * - If subaccountId is not sent, the size must be sent - Requests per UID are limited to 60 requests per minute
     * @summary Query Sub Account Spot Asset info
     * @param {BinanceLinkApiGetBrokerSubAccountSpotSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerSubAccountSpotSummaryV1(requestParameters: BinanceLinkApiGetBrokerSubAccountSpotSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerSubAccountSpotSummaryV1Resp>;

    /**
     * 
     * @summary Query Sub Account
     * @param {BinanceLinkApiGetBrokerSubAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerSubAccountV1(requestParameters: BinanceLinkApiGetBrokerSubAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerSubAccountV1RespItem>>;

    /**
     * - Only get the latest history of past 30 days.
     * @summary Query Sub Account Transfer History（FUTURES）
     * @param {BinanceLinkApiGetBrokerTransferFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerTransferFuturesV1(requestParameters: BinanceLinkApiGetBrokerTransferFuturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetBrokerTransferFuturesV1Resp>;

    /**
     * Caution: - If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE. - If showAllStatus is false, the status in response will show three types: INIT,PROCESS,SUCCESS. - Either fromId or toId must be sent. Return fromId equal master account by default. Query scope is limited to 100 days: - Both startTime and endTime are provided: If it exceeds, the endTime will be re-calculated 100 days after the startTime. - Neither startTime nor endTime are provided: Calculate 100 days before today. - endTime is not provided: Calculate 100 days after startTime. - startTime is not provided: Calculate 100 days before endTime.
     * @summary Query Sub Account Transfer History（SPOT）
     * @param {BinanceLinkApiGetBrokerTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerTransferV1(requestParameters: BinanceLinkApiGetBrokerTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerTransferV1RespItem>>;

    /**
     * Caution: - Either fromId or toId must be sent. - If either fromId or toId is the master account itself, it will not return in response. - If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE. Query scope is limited to 100 days: - Both startTime and endTime are provided: If it exceeds, the endTime will be re-calculated 100 days after the startTime. - Neither startTime nor endTime are provided: Calculate 30 days before today. - endTime is not provided: Calculate as Current time. - startTime is not provided: Calculate 30 days before endTime.
     * @summary Query Universal Transfer History
     * @param {BinanceLinkApiGetBrokerUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getBrokerUniversalTransferV1(requestParameters: BinanceLinkApiGetBrokerUniversalTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBrokerUniversalTransferV1RespItem>>;

}

/**
 * Request parameters for createApiReferralCustomizationV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateApiReferralCustomizationV1Request
 */
export interface BinanceLinkApiCreateApiReferralCustomizationV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateApiReferralCustomizationV1
     */
    readonly customerId: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateApiReferralCustomizationV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateApiReferralCustomizationV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateApiReferralCustomizationV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createApiReferralUserCustomizationV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateApiReferralUserCustomizationV1Request
 */
export interface BinanceLinkApiCreateApiReferralUserCustomizationV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationV1
     */
    readonly apiAgentCode: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationV1
     */
    readonly customerId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createBrokerSubAccountApiCommissionCoinFuturesV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1Request
 */
export interface BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1
     */
    readonly makerAdjustment: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1
     */
    readonly pair: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1
     */
    readonly takerAdjustment: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createBrokerSubAccountApiCommissionFuturesV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1Request
 */
export interface BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1
     */
    readonly makerAdjustment: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1
     */
    readonly takerAdjustment: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createBrokerSubAccountApiCommissionV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerSubAccountApiCommissionV1Request
 */
export interface BinanceLinkApiCreateBrokerSubAccountApiCommissionV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionV1
     */
    readonly makerCommission: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionV1
     */
    readonly takerCommission: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionV1
     */
    readonly marginMakerCommission?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionV1
     */
    readonly marginTakerCommission?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiCommissionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createBrokerSubAccountApiIpRestrictionV2 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2Request
 */
export interface BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2
     */
    readonly status: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2
     */
    readonly subAccountApiKey: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2
     */
    readonly ipAddress?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createBrokerSubAccountApiPermissionUniversalTransferV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1Request
 */
export interface BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1
     */
    readonly canUniversalTransfer: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1
     */
    readonly subAccountApiKey: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1
     */
    readonly subAccountId: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createBrokerSubAccountApiPermissionV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerSubAccountApiPermissionV1Request
 */
export interface BinanceLinkApiCreateBrokerSubAccountApiPermissionV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionV1
     */
    readonly canTrade: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionV1
     */
    readonly futuresTrade: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionV1
     */
    readonly marginTrade: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionV1
     */
    readonly subAccountApiKey: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiPermissionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createBrokerSubAccountApiV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerSubAccountApiV1Request
 */
export interface BinanceLinkApiCreateBrokerSubAccountApiV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiV1
     */
    readonly canTrade: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiV1
     */
    readonly futuresTrade?: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiV1
     */
    readonly marginTrade?: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiV1
     */
    readonly publicKey?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountApiV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createBrokerSubAccountBnbBurnMarginInterestV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1Request
 */
export interface BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1
     */
    readonly interestBNBBurn: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createBrokerSubAccountBnbBurnSpotV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1Request
 */
export interface BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1
     */
    readonly spotBNBBurn: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createBrokerSubAccountFuturesV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerSubAccountFuturesV1Request
 */
export interface BinanceLinkApiCreateBrokerSubAccountFuturesV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountFuturesV1
     */
    readonly futures: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountFuturesV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountFuturesV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountFuturesV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createBrokerSubAccountV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerSubAccountV1Request
 */
export interface BinanceLinkApiCreateBrokerSubAccountV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerSubAccountV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerSubAccountV1
     */
    readonly tag?: string
}

/**
 * Request parameters for createBrokerTransferFuturesV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerTransferFuturesV1Request
 */
export interface BinanceLinkApiCreateBrokerTransferFuturesV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerTransferFuturesV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerTransferFuturesV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerTransferFuturesV1
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerTransferFuturesV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerTransferFuturesV1
     */
    readonly clientTranId?: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerTransferFuturesV1
     */
    readonly fromId?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerTransferFuturesV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerTransferFuturesV1
     */
    readonly toId?: string
}

/**
 * Request parameters for createBrokerTransferV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerTransferV1Request
 */
export interface BinanceLinkApiCreateBrokerTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerTransferV1
     */
    readonly clientTranId?: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerTransferV1
     */
    readonly fromId?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerTransferV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerTransferV1
     */
    readonly toId?: string
}

/**
 * Request parameters for createBrokerUniversalTransferV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateBrokerUniversalTransferV1Request
 */
export interface BinanceLinkApiCreateBrokerUniversalTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerUniversalTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerUniversalTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerUniversalTransferV1
     */
    readonly fromAccountType: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerUniversalTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerUniversalTransferV1
     */
    readonly toAccountType: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerUniversalTransferV1
     */
    readonly clientTranId?: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerUniversalTransferV1
     */
    readonly fromId?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateBrokerUniversalTransferV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateBrokerUniversalTransferV1
     */
    readonly toId?: string
}

/**
 * Request parameters for deleteBrokerSubAccountApiIpRestrictionIpListV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1Request
 */
export interface BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1
     */
    readonly subAccountApiKey: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1
     */
    readonly ipAddress?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for deleteBrokerSubAccountApiV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiDeleteBrokerSubAccountApiV1Request
 */
export interface BinanceLinkApiDeleteBrokerSubAccountApiV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountApiV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountApiV1
     */
    readonly subAccountApiKey: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountApiV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountApiV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for deleteBrokerSubAccountV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiDeleteBrokerSubAccountV1Request
 */
export interface BinanceLinkApiDeleteBrokerSubAccountV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiDeleteBrokerSubAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralCustomizationV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralCustomizationV1Request
 */
export interface BinanceLinkApiGetApiReferralCustomizationV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralCustomizationV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralCustomizationV1
     */
    readonly customerId?: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralCustomizationV1
     */
    readonly email?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralCustomizationV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralIfNewUserV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralIfNewUserV1Request
 */
export interface BinanceLinkApiGetApiReferralIfNewUserV1Request {
    /**
     * brokerId
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralIfNewUserV1
     */
    readonly apiAgentCode: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralIfNewUserV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralIfNewUserV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralKickbackRecentRecordV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralKickbackRecentRecordV1Request
 */
export interface BinanceLinkApiGetApiReferralKickbackRecentRecordV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralKickbackRecentRecordV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralKickbackRecentRecordV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralKickbackRecentRecordV1
     */
    readonly endTime?: number

    /**
     * Default 500, max 1000
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralKickbackRecentRecordV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralKickbackRecentRecordV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralRebateRecentRecordV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralRebateRecentRecordV1Request
 */
export interface BinanceLinkApiGetApiReferralRebateRecentRecordV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralRebateRecentRecordV1
     */
    readonly startTime: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralRebateRecentRecordV1
     */
    readonly endTime: number

    /**
     * max 500
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralRebateRecentRecordV1
     */
    readonly limit: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralRebateRecentRecordV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralRebateRecentRecordV1
     */
    readonly customerId?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralRebateRecentRecordV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralUserCustomizationV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralUserCustomizationV1Request
 */
export interface BinanceLinkApiGetApiReferralUserCustomizationV1Request {
    /**
     * brokerId
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralUserCustomizationV1
     */
    readonly apiAgentCode: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralUserCustomizationV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralUserCustomizationV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerInfoV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerInfoV1Request
 */
export interface BinanceLinkApiGetBrokerInfoV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerInfoV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerInfoV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerRebateFuturesRecentRecordV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1Request
 */
export interface BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1Request {
    /**
     * 1:USDT Futures, 2: Coin Futures
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1
     */
    readonly startTime: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1
     */
    readonly endTime: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1
     */
    readonly timestamp: number

    /**
     * default 1
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1
     */
    readonly page?: number

    /**
     * default 10, max 100
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1
     */
    readonly size?: number

    /**
     * TRUE or FALSE. Default: FALSE
     * @type {boolean}
     * @memberof BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1
     */
    readonly filterResult?: boolean

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerRebateRecentRecordV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerRebateRecentRecordV1Request
 */
export interface BinanceLinkApiGetBrokerRebateRecentRecordV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateRecentRecordV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerRebateRecentRecordV1
     */
    readonly subAccountId?: string

    /**
     * Default: 7 days from current timestamp
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateRecentRecordV1
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateRecentRecordV1
     */
    readonly endTime?: number

    /**
     * default 1
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateRecentRecordV1
     */
    readonly page?: number

    /**
     * default 500，max500
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateRecentRecordV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerRebateRecentRecordV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerSubAccountApiCommissionCoinFuturesV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1Request
 */
export interface BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1
     */
    readonly timestamp: number

    /**
     * BTCUSD
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1
     */
    readonly pair?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerSubAccountApiCommissionFuturesV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1Request
 */
export interface BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1
     */
    readonly symbol?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerSubAccountApiIpRestrictionV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1Request
 */
export interface BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1
     */
    readonly subAccountApiKey: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerSubAccountApiV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerSubAccountApiV1Request
 */
export interface BinanceLinkApiGetBrokerSubAccountApiV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiV1
     */
    readonly subAccountApiKey?: string

    /**
     * default 1
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiV1
     */
    readonly page?: number

    /**
     * default 500, max 500
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountApiV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerSubAccountBnbBurnStatusV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerSubAccountBnbBurnStatusV1Request
 */
export interface BinanceLinkApiGetBrokerSubAccountBnbBurnStatusV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountBnbBurnStatusV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountBnbBurnStatusV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountBnbBurnStatusV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerSubAccountDepositHistV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerSubAccountDepositHistV1Request
 */
export interface BinanceLinkApiGetBrokerSubAccountDepositHistV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV1
     */
    readonly subAccountId?: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV1
     */
    readonly coin?: string

    /**
     * 0(0:pending,6: credited but cannot withdraw, 1:success)
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV1
     */
    readonly status?: number

    /**
     * Default: 7 days from current timestamp
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV1
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV1
     */
    readonly endTime?: number

    /**
     * Default：500
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV1
     */
    readonly limit?: number

    /**
     * Default：0
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV1
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerSubAccountDepositHistV2 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerSubAccountDepositHistV2Request
 */
export interface BinanceLinkApiGetBrokerSubAccountDepositHistV2Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV2
     */
    readonly depositId: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV2
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV2
     */
    readonly timestamp: number

    /**
     * Default：500
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV2
     */
    readonly limit?: number

    /**
     * Default：0
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV2
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountDepositHistV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerSubAccountFuturesSummaryV3 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3Request
 */
export interface BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3Request {
    /**
     * 1:USD Margined Futures, 2:COIN Margined Futures
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3
     */
    readonly subAccountId?: string

    /**
     * default 1
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3
     */
    readonly page?: number

    /**
     * default 10, max 20
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerSubAccountMarginSummaryV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerSubAccountMarginSummaryV1Request
 */
export interface BinanceLinkApiGetBrokerSubAccountMarginSummaryV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountMarginSummaryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountMarginSummaryV1
     */
    readonly subAccountId?: string

    /**
     * default 1
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountMarginSummaryV1
     */
    readonly page?: number

    /**
     * default 10, max 20
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountMarginSummaryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountMarginSummaryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerSubAccountSpotSummaryV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerSubAccountSpotSummaryV1Request
 */
export interface BinanceLinkApiGetBrokerSubAccountSpotSummaryV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountSpotSummaryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountSpotSummaryV1
     */
    readonly subAccountId?: string

    /**
     * default 1
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountSpotSummaryV1
     */
    readonly page?: number

    /**
     * default 10, max 20
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountSpotSummaryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountSpotSummaryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerSubAccountV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerSubAccountV1Request
 */
export interface BinanceLinkApiGetBrokerSubAccountV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerSubAccountV1
     */
    readonly subAccountId?: string

    /**
     * default 1
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountV1
     */
    readonly page?: number

    /**
     * default 500
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerSubAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerTransferFuturesV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerTransferFuturesV1Request
 */
export interface BinanceLinkApiGetBrokerTransferFuturesV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerTransferFuturesV1
     */
    readonly subAccountId: string

    /**
     * 1:USDT Futures,2: COIN Futures
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferFuturesV1
     */
    readonly futuresType: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferFuturesV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerTransferFuturesV1
     */
    readonly clientTranId?: string

    /**
     * default 30 days records
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferFuturesV1
     */
    readonly startTime?: number

    /**
     * default 30 days records
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferFuturesV1
     */
    readonly endTime?: number

    /**
     * default 1
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferFuturesV1
     */
    readonly page?: number

    /**
     * default 50, max 500
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferFuturesV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferFuturesV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerTransferV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerTransferV1Request
 */
export interface BinanceLinkApiGetBrokerTransferV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerTransferV1
     */
    readonly fromId?: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerTransferV1
     */
    readonly toId?: string

    /**
     * client transfer id
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerTransferV1
     */
    readonly clientTranId?: string

    /**
     * true or false, default: false
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerTransferV1
     */
    readonly showAllStatus?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferV1
     */
    readonly page?: number

    /**
     * default 500, max 500
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getBrokerUniversalTransferV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetBrokerUniversalTransferV1Request
 */
export interface BinanceLinkApiGetBrokerUniversalTransferV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerUniversalTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerUniversalTransferV1
     */
    readonly fromId?: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerUniversalTransferV1
     */
    readonly toId?: string

    /**
     * client transfer id
     * @type {string}
     * @memberof BinanceLinkApiGetBrokerUniversalTransferV1
     */
    readonly clientTranId?: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerUniversalTransferV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerUniversalTransferV1
     */
    readonly endTime?: number

    /**
     * default 1
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerUniversalTransferV1
     */
    readonly page?: number

    /**
     * default 500, max 500
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerUniversalTransferV1
     */
    readonly limit?: number

    /**
     * TRUE or FALSE
     * @type {boolean}
     * @memberof BinanceLinkApiGetBrokerUniversalTransferV1
     */
    readonly showAllStatus?: boolean

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetBrokerUniversalTransferV1
     */
    readonly recvWindow?: number
}

/**
 * BinanceLinkApi - object-oriented interface
 * @export
 * @class BinanceLinkApi
 * @extends {BaseAPI}
 */
export class BinanceLinkApi extends BaseAPI implements BinanceLinkApiInterface {
    /**
     * - CustomerId must be unique - For the same email, the customerId will be modified in real time
     * @summary Customize Id For Client (USER DATA) （For Partner）
     * @param {BinanceLinkApiCreateApiReferralCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createApiReferralCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createApiReferralCustomizationV1(requestParameters.customerId, requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - CustomerId must be unique for each apiAgent
     * @summary Customize Id For Client  (USER DATA)(For client)
     * @param {BinanceLinkApiCreateApiReferralUserCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createApiReferralUserCustomizationV1(requestParameters.apiAgentCode, requestParameters.customerId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This request will change the COIN-Ⓜ futures commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint. The sub-account\'s COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
     * @summary Change Sub Account COIN-Ⓜ Futures Commission Adjustment
     * @param {BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerSubAccountApiCommissionCoinFuturesV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiCommissionCoinFuturesV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerSubAccountApiCommissionCoinFuturesV1(requestParameters.makerAdjustment, requestParameters.pair, requestParameters.subAccountId, requestParameters.takerAdjustment, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This request will change the USDT-Ⓜ futures commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint. The sub-account\'s USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
     * @summary Change Sub Account USDT-Ⓜ Futures Commission Adjustment
     * @param {BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerSubAccountApiCommissionFuturesV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiCommissionFuturesV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerSubAccountApiCommissionFuturesV1(requestParameters.makerAdjustment, requestParameters.subAccountId, requestParameters.symbol, requestParameters.takerAdjustment, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This request will change the commission for a sub account. You need to enable \"trade\" option for the api key which requests this endpoint.
     * @summary Change Sub Account Commission
     * @param {BinanceLinkApiCreateBrokerSubAccountApiCommissionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerSubAccountApiCommissionV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiCommissionV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerSubAccountApiCommissionV1(requestParameters.makerCommission, requestParameters.subAccountId, requestParameters.takerCommission, requestParameters.timestamp, requestParameters.marginMakerCommission, requestParameters.marginTakerCommission, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update IP Restriction for Sub-Account API key (For Master Account)
     * @param {BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerSubAccountApiIpRestrictionV2(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiIpRestrictionV2Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerSubAccountApiIpRestrictionV2(requestParameters.status, requestParameters.subAccountApiKey, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.ipAddress, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Caution: - This request will enable the api permission for a sub account to use POST /sapi/v1/asset/transferendpoint. - You need to enable \"trade\" option for the api key which requests this endpoint.
     * @summary Enable Universal Transfer Permission For Sub Account Api Key
     * @param {BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerSubAccountApiPermissionUniversalTransferV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiPermissionUniversalTransferV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerSubAccountApiPermissionUniversalTransferV1(requestParameters.canUniversalTransfer, requestParameters.subAccountApiKey, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Caution: - This request will change the api permission for a sub account. - You need to enable \"trade\" option for the api key which requests this endpoint. - Sub account should be enable margin before its api-key\'s marginTrade being enabled. - Sub account should be enable futures before its api-key\'s futuresTrade being enabled.
     * @summary Change Sub Account Api Permission
     * @param {BinanceLinkApiCreateBrokerSubAccountApiPermissionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerSubAccountApiPermissionV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiPermissionV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerSubAccountApiPermissionV1(requestParameters.canTrade, requestParameters.futuresTrade, requestParameters.marginTrade, requestParameters.subAccountApiKey, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Caution: - This request will generate a api key for a sub account. - You need to enable \"trade\" option for the api key which requests this endpoint - Sub account should be enable margin before its api-key\'s marginTrade being enabled - Sub account should be enable futures before its api-key\'s futuresTrade being enabled - You can only create 1 api key for each sub account per second
     * @summary Create Api Key for Sub Account
     * @param {BinanceLinkApiCreateBrokerSubAccountApiV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerSubAccountApiV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountApiV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerSubAccountApiV1(requestParameters.canTrade, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.futuresTrade, requestParameters.marginTrade, requestParameters.publicKey, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - Subaccount must be enabled margin before using this switch
     * @summary Enable Or Disable BNB Burn for Sub Account Margin Interest
     * @param {BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerSubAccountBnbBurnMarginInterestV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountBnbBurnMarginInterestV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerSubAccountBnbBurnMarginInterestV1(requestParameters.interestBNBBurn, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable Or Disable BNB Burn for Sub Account SPOT and MARGIN
     * @param {BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerSubAccountBnbBurnSpotV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountBnbBurnSpotV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerSubAccountBnbBurnSpotV1(requestParameters.spotBNBBurn, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable Futures for Sub Account
     * @param {BinanceLinkApiCreateBrokerSubAccountFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerSubAccountFuturesV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountFuturesV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerSubAccountFuturesV1(requestParameters.futures, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To create a link sub-account
     * @summary Create a Sub Account
     * @param {BinanceLinkApiCreateBrokerSubAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerSubAccountV1(requestParameters: BinanceLinkApiCreateBrokerSubAccountV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerSubAccountV1(requestParameters.timestamp, requestParameters.recvWindow, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent. - Each master account could transfer 5000 times/min
     * @summary Sub Account Transfer（FUTURES）
     * @param {BinanceLinkApiCreateBrokerTransferFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerTransferFuturesV1(requestParameters: BinanceLinkApiCreateBrokerTransferFuturesV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerTransferFuturesV1(requestParameters.amount, requestParameters.asset, requestParameters.futuresType, requestParameters.timestamp, requestParameters.clientTranId, requestParameters.fromId, requestParameters.recvWindow, requestParameters.toId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent.
     * @summary Sub Account Transfer（SPOT）
     * @param {BinanceLinkApiCreateBrokerTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerTransferV1(requestParameters: BinanceLinkApiCreateBrokerTransferV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.clientTranId, requestParameters.fromId, requestParameters.recvWindow, requestParameters.toId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Caution: - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account if fromId not sent. - Transfer to master account if toId not sent. - Transfer between futures acount is not supported.
     * @summary Universal Transfer
     * @param {BinanceLinkApiCreateBrokerUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createBrokerUniversalTransferV1(requestParameters: BinanceLinkApiCreateBrokerUniversalTransferV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createBrokerUniversalTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.fromAccountType, requestParameters.timestamp, requestParameters.toAccountType, requestParameters.clientTranId, requestParameters.fromId, requestParameters.recvWindow, requestParameters.toId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete IP Restriction for Sub Account Api Key
     * @param {BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public deleteBrokerSubAccountApiIpRestrictionIpListV1(requestParameters: BinanceLinkApiDeleteBrokerSubAccountApiIpRestrictionIpListV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).deleteBrokerSubAccountApiIpRestrictionIpListV1(requestParameters.subAccountId, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.ipAddress, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Caution: - This request will delete a api key for a sub account - You need to enable \"trade\" option for the api key which requests this endpoint - You can only delete 1 api key for each sub account per second
     * @summary Delete Sub Account Api Key
     * @param {BinanceLinkApiDeleteBrokerSubAccountApiV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public deleteBrokerSubAccountApiV1(requestParameters: BinanceLinkApiDeleteBrokerSubAccountApiV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).deleteBrokerSubAccountApiV1(requestParameters.subAccountId, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Sub Account
     * @param {BinanceLinkApiDeleteBrokerSubAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public deleteBrokerSubAccountV1(requestParameters: BinanceLinkApiDeleteBrokerSubAccountV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).deleteBrokerSubAccountV1(requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - CustomerId and email can not be sent at the same time
     * @summary Get Client Email Customized Id (USER DATA) （For Partner）
     * @param {BinanceLinkApiGetApiReferralCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralCustomizationV1(requestParameters.timestamp, requestParameters.customerId, requestParameters.email, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query Client If The New User (USER  DATA)
     * @param {BinanceLinkApiGetApiReferralIfNewUserV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralIfNewUserV1(requestParameters: BinanceLinkApiGetApiReferralIfNewUserV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralIfNewUserV1(requestParameters.apiAgentCode, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - Only get the latest history of past 7 days.
     * @summary Query Rebate Recent Record(For Client)
     * @param {BinanceLinkApiGetApiReferralKickbackRecentRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralKickbackRecentRecordV1(requestParameters: BinanceLinkApiGetApiReferralKickbackRecentRecordV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralKickbackRecentRecordV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - startTime and endTime must be both specified or both omitted. - When both omitted it returns last 7 days. - When both specified the span has to be within 7 days.
     * @summary Query Rebate Recent Record （USER DATA）(For Partner)
     * @param {BinanceLinkApiGetApiReferralRebateRecentRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralRebateRecentRecordV1(requestParameters: BinanceLinkApiGetApiReferralRebateRecentRecordV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralRebateRecentRecordV1(requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.timestamp, requestParameters.customerId, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - CustomerId must be unique
     * @summary Get User’s Customize Id (USER DATA)
     * @param {BinanceLinkApiGetApiReferralUserCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralUserCustomizationV1(requestParameters.apiAgentCode, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Link Account Information
     * @param {BinanceLinkApiGetBrokerInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerInfoV1(requestParameters: BinanceLinkApiGetBrokerInfoV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerInfoV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - If filterResult = TRUE, rebates not from its own sub accounts will be filtered out in response.
     * @summary Query Broker Futures Commission Rebate Record
     * @param {BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerRebateFuturesRecentRecordV1(requestParameters: BinanceLinkApiGetBrokerRebateFuturesRecentRecordV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerRebateFuturesRecentRecordV1(requestParameters.futuresType, requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.page, requestParameters.size, requestParameters.filterResult, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - The query time period must be less than 7 days (default as the recent 7 days).
     * @summary Query Broker Commission Rebate Recent Record（Spot）
     * @param {BinanceLinkApiGetBrokerRebateRecentRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerRebateRecentRecordV1(requestParameters: BinanceLinkApiGetBrokerRebateRecentRecordV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerRebateRecentRecordV1(requestParameters.timestamp, requestParameters.subAccountId, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - The sub-account\'s COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment. - If symbol not sent, commission adjustment of all symbols will be returned. - If futures disabled, it is not allowed to set subaccount\'s COIN-Ⓜ futures commission adjustment on any symbol. - Different symbols have the same commission for the same pair
     * @summary Query Sub Account COIN-Ⓜ Futures Commission Adjustment
     * @param {BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerSubAccountApiCommissionCoinFuturesV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiCommissionCoinFuturesV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerSubAccountApiCommissionCoinFuturesV1(requestParameters.subAccountId, requestParameters.timestamp, requestParameters.pair, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The sub-account\'s USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account\'s fee tier plus the commission adjustment.
     * @summary Query Sub Account USDT-Ⓜ Futures Commission Adjustment
     * @param {BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerSubAccountApiCommissionFuturesV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiCommissionFuturesV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerSubAccountApiCommissionFuturesV1(requestParameters.subAccountId, requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get IP Restriction for Sub Account Api Key
     * @param {BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerSubAccountApiIpRestrictionV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiIpRestrictionV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerSubAccountApiIpRestrictionV1(requestParameters.subAccountId, requestParameters.subAccountApiKey, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Caution: - You need to enable \"trade\" option for the api key which requests this endpoint
     * @summary Query Sub Account Api Key
     * @param {BinanceLinkApiGetBrokerSubAccountApiV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerSubAccountApiV1(requestParameters: BinanceLinkApiGetBrokerSubAccountApiV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerSubAccountApiV1(requestParameters.subAccountId, requestParameters.timestamp, requestParameters.subAccountApiKey, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get BNB Burn Status for Sub Account
     * @param {BinanceLinkApiGetBrokerSubAccountBnbBurnStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerSubAccountBnbBurnStatusV1(requestParameters: BinanceLinkApiGetBrokerSubAccountBnbBurnStatusV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerSubAccountBnbBurnStatusV1(requestParameters.subAccountId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - The query time period must be less than 7 days( default as the recent 7 days).
     * @summary Get Sub Account Deposit History
     * @param {BinanceLinkApiGetBrokerSubAccountDepositHistV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerSubAccountDepositHistV1(requestParameters: BinanceLinkApiGetBrokerSubAccountDepositHistV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerSubAccountDepositHistV1(requestParameters.timestamp, requestParameters.subAccountId, requestParameters.coin, requestParameters.status, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.offset, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Sub Account Deposit History V2
     * @param {BinanceLinkApiGetBrokerSubAccountDepositHistV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerSubAccountDepositHistV2(requestParameters: BinanceLinkApiGetBrokerSubAccountDepositHistV2Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerSubAccountDepositHistV2(requestParameters.depositId, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.limit, requestParameters.offset, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query Sub Account Futures Asset info (V3)
     * @param {BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerSubAccountFuturesSummaryV3(requestParameters: BinanceLinkApiGetBrokerSubAccountFuturesSummaryV3Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerSubAccountFuturesSummaryV3(requestParameters.futuresType, requestParameters.timestamp, requestParameters.subAccountId, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - If subaccountId is not sent, the size must be sent
     * @summary Query Sub Account Margin Asset info
     * @param {BinanceLinkApiGetBrokerSubAccountMarginSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerSubAccountMarginSummaryV1(requestParameters: BinanceLinkApiGetBrokerSubAccountMarginSummaryV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerSubAccountMarginSummaryV1(requestParameters.timestamp, requestParameters.subAccountId, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - If subaccountId is not sent, the size must be sent - Requests per UID are limited to 60 requests per minute
     * @summary Query Sub Account Spot Asset info
     * @param {BinanceLinkApiGetBrokerSubAccountSpotSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerSubAccountSpotSummaryV1(requestParameters: BinanceLinkApiGetBrokerSubAccountSpotSummaryV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerSubAccountSpotSummaryV1(requestParameters.timestamp, requestParameters.subAccountId, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query Sub Account
     * @param {BinanceLinkApiGetBrokerSubAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerSubAccountV1(requestParameters: BinanceLinkApiGetBrokerSubAccountV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerSubAccountV1(requestParameters.timestamp, requestParameters.subAccountId, requestParameters.page, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - Only get the latest history of past 30 days.
     * @summary Query Sub Account Transfer History（FUTURES）
     * @param {BinanceLinkApiGetBrokerTransferFuturesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerTransferFuturesV1(requestParameters: BinanceLinkApiGetBrokerTransferFuturesV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerTransferFuturesV1(requestParameters.subAccountId, requestParameters.futuresType, requestParameters.timestamp, requestParameters.clientTranId, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Caution: - If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE. - If showAllStatus is false, the status in response will show three types: INIT,PROCESS,SUCCESS. - Either fromId or toId must be sent. Return fromId equal master account by default. Query scope is limited to 100 days: - Both startTime and endTime are provided: If it exceeds, the endTime will be re-calculated 100 days after the startTime. - Neither startTime nor endTime are provided: Calculate 100 days before today. - endTime is not provided: Calculate 100 days after startTime. - startTime is not provided: Calculate 100 days before endTime.
     * @summary Query Sub Account Transfer History（SPOT）
     * @param {BinanceLinkApiGetBrokerTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerTransferV1(requestParameters: BinanceLinkApiGetBrokerTransferV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerTransferV1(requestParameters.timestamp, requestParameters.fromId, requestParameters.toId, requestParameters.clientTranId, requestParameters.showAllStatus, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Caution: - Either fromId or toId must be sent. - If either fromId or toId is the master account itself, it will not return in response. - If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE. Query scope is limited to 100 days: - Both startTime and endTime are provided: If it exceeds, the endTime will be re-calculated 100 days after the startTime. - Neither startTime nor endTime are provided: Calculate 30 days before today. - endTime is not provided: Calculate as Current time. - startTime is not provided: Calculate 30 days before endTime.
     * @summary Query Universal Transfer History
     * @param {BinanceLinkApiGetBrokerUniversalTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getBrokerUniversalTransferV1(requestParameters: BinanceLinkApiGetBrokerUniversalTransferV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getBrokerUniversalTransferV1(requestParameters.timestamp, requestParameters.fromId, requestParameters.toId, requestParameters.clientTranId, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.limit, requestParameters.showAllStatus, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

