/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreatePortfolioAssetCollectionV1Resp } from '../model';
// @ts-ignore
import type { CreatePortfolioAutoCollectionV1Resp } from '../model';
// @ts-ignore
import type { CreatePortfolioBnbTransferV1Resp } from '../model';
// @ts-ignore
import type { CreatePortfolioMintV1Resp } from '../model';
// @ts-ignore
import type { CreatePortfolioRedeemV1Resp } from '../model';
// @ts-ignore
import type { CreatePortfolioRepayFuturesNegativeBalanceV1Resp } from '../model';
// @ts-ignore
import type { CreatePortfolioRepayFuturesSwitchV1Resp } from '../model';
// @ts-ignore
import type { CreatePortfolioRepayV1Resp } from '../model';
// @ts-ignore
import type { GetPortfolioAccountV1Resp } from '../model';
// @ts-ignore
import type { GetPortfolioAssetIndexPriceV1RespItem } from '../model';
// @ts-ignore
import type { GetPortfolioBalanceV1RespItem } from '../model';
// @ts-ignore
import type { GetPortfolioCollateralRateV1RespItem } from '../model';
// @ts-ignore
import type { GetPortfolioCollateralRateV2RespItem } from '../model';
// @ts-ignore
import type { GetPortfolioInterestHistoryV1RespItem } from '../model';
// @ts-ignore
import type { GetPortfolioMarginAssetLeverageV1RespItem } from '../model';
// @ts-ignore
import type { GetPortfolioPmLoanHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetPortfolioPmLoanV1Resp } from '../model';
// @ts-ignore
import type { GetPortfolioRepayFuturesSwitchV1Resp } from '../model';
/**
 * PortfolioMarginProApi - axios parameter creator
 * @export
 */
export const PortfolioMarginProApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Transfers specific asset from Futures Account to Margin account
         * @summary Fund Collection by Asset(USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioAssetCollectionV1: async (asset: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createPortfolioAssetCollectionV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createPortfolioAssetCollectionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/asset-collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfers all assets from Futures Account to Margin account
         * @summary Fund Auto-collection(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioAutoCollectionV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createPortfolioAutoCollectionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/auto-collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * BNB transfer can be between Margin Account and USDM Account
         * @summary BNB transfer(USER_DATA)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {string} transferSide 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioBnbTransferV1: async (amount: string, timestamp: number, transferSide: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createPortfolioBnbTransferV1', 'amount', amount)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createPortfolioBnbTransferV1', 'timestamp', timestamp)
            // verify required parameter 'transferSide' is not null or undefined
            assertParamExists('createPortfolioBnbTransferV1', 'transferSide', transferSide)
            const localVarPath = `/sapi/v1/portfolio/bnb-transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (transferSide !== undefined) { 
                localVarFormParams.set('transferSide', transferSide as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mint BFUSD for all types of Portfolio Margin account
         * @summary Mint BFUSD for Portfolio Margin(TRADE)
         * @param {string} amount 
         * @param {string} fromAsset 
         * @param {string} targetAsset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioMintV1: async (amount: string, fromAsset: string, targetAsset: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createPortfolioMintV1', 'amount', amount)
            // verify required parameter 'fromAsset' is not null or undefined
            assertParamExists('createPortfolioMintV1', 'fromAsset', fromAsset)
            // verify required parameter 'targetAsset' is not null or undefined
            assertParamExists('createPortfolioMintV1', 'targetAsset', targetAsset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createPortfolioMintV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/mint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (fromAsset !== undefined) { 
                localVarFormParams.set('fromAsset', fromAsset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (targetAsset !== undefined) { 
                localVarFormParams.set('targetAsset', targetAsset as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeem BFUSD for all types of Portfolio Margin account
         * @summary Redeem BFUSD for Portfolio Margin(TRADE)
         * @param {string} amount 
         * @param {string} fromAsset 
         * @param {string} targetAsset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioRedeemV1: async (amount: string, fromAsset: string, targetAsset: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createPortfolioRedeemV1', 'amount', amount)
            // verify required parameter 'fromAsset' is not null or undefined
            assertParamExists('createPortfolioRedeemV1', 'fromAsset', fromAsset)
            // verify required parameter 'targetAsset' is not null or undefined
            assertParamExists('createPortfolioRedeemV1', 'targetAsset', targetAsset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createPortfolioRedeemV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (fromAsset !== undefined) { 
                localVarFormParams.set('fromAsset', fromAsset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (targetAsset !== undefined) { 
                localVarFormParams.set('targetAsset', targetAsset as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Repay futures Negative Balance
         * @summary Repay futures Negative Balance(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [from] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioRepayFuturesNegativeBalanceV1: async (timestamp: number, from?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createPortfolioRepayFuturesNegativeBalanceV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/repay-futures-negative-balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (from !== undefined) { 
                localVarFormParams.set('from', from as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change Auto-repay-futures Status
         * @summary Change Auto-repay-futures Status(TRADE)
         * @param {string} autoRepay 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioRepayFuturesSwitchV1: async (autoRepay: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'autoRepay' is not null or undefined
            assertParamExists('createPortfolioRepayFuturesSwitchV1', 'autoRepay', autoRepay)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createPortfolioRepayFuturesSwitchV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/repay-futures-switch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (autoRepay !== undefined) { 
                localVarFormParams.set('autoRepay', autoRepay as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Repay Portfolio Margin Pro Bankruptcy Loan
         * @summary Portfolio Margin Pro Bankruptcy Loan Repay
         * @param {number} timestamp 
         * @param {string} [from] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioRepayV1: async (timestamp: number, from?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createPortfolioRepayV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (from !== undefined) { 
                localVarFormParams.set('from', from as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Portfolio Margin Pro Account Info
         * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioAccountV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getPortfolioAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
         * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioAccountV2: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getPortfolioAccountV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/portfolio/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Portfolio Margin Asset Index Price
         * @summary Query Portfolio Margin Asset Index Price (MARKET_DATA)
         * @param {string} [asset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioAssetIndexPriceV1: async (asset?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/portfolio/asset-index-price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Portfolio Margin Pro account balance
         * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioBalanceV1: async (timestamp: number, asset?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getPortfolioBalanceV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Portfolio Margin Collateral Rate
         * @summary Portfolio Margin Collateral Rate(MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioCollateralRateV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/portfolio/collateralRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Portfolio Margin PRO Tiered Collateral Rate
         * @summary Portfolio Margin Pro Tiered Collateral Rate(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioCollateralRateV2: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getPortfolioCollateralRateV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/portfolio/collateralRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query interest history of negative balance for portfolio margin.
         * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioInterestHistoryV1: async (timestamp: number, asset?: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getPortfolioInterestHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/interest-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Portfolio Margin Asset Leverage
         * @summary Get Portfolio Margin Asset Leverage(USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioMarginAssetLeverageV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/portfolio/margin-asset-leverage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query repay history of pmloan for portfolio margin pro.
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioPmLoanHistoryV1: async (timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getPortfolioPmLoanHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/pmLoan-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Portfolio Margin Pro Bankruptcy Loan Amount
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioPmLoanV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getPortfolioPmLoanV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/pmLoan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Auto-repay-futures Status
         * @summary Get Auto-repay-futures Status(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioRepayFuturesSwitchV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getPortfolioRepayFuturesSwitchV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/portfolio/repay-futures-switch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfolioMarginProApi - functional programming interface
 * @export
 */
export const PortfolioMarginProApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfolioMarginProApiAxiosParamCreator(configuration)
    return {
        /**
         * Transfers specific asset from Futures Account to Margin account
         * @summary Fund Collection by Asset(USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPortfolioAssetCollectionV1(asset: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePortfolioAssetCollectionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPortfolioAssetCollectionV1(asset, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.createPortfolioAssetCollectionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfers all assets from Futures Account to Margin account
         * @summary Fund Auto-collection(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPortfolioAutoCollectionV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePortfolioAutoCollectionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPortfolioAutoCollectionV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.createPortfolioAutoCollectionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * BNB transfer can be between Margin Account and USDM Account
         * @summary BNB transfer(USER_DATA)
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {string} transferSide 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPortfolioBnbTransferV1(amount: string, timestamp: number, transferSide: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePortfolioBnbTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPortfolioBnbTransferV1(amount, timestamp, transferSide, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.createPortfolioBnbTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Mint BFUSD for all types of Portfolio Margin account
         * @summary Mint BFUSD for Portfolio Margin(TRADE)
         * @param {string} amount 
         * @param {string} fromAsset 
         * @param {string} targetAsset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPortfolioMintV1(amount: string, fromAsset: string, targetAsset: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePortfolioMintV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPortfolioMintV1(amount, fromAsset, targetAsset, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.createPortfolioMintV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redeem BFUSD for all types of Portfolio Margin account
         * @summary Redeem BFUSD for Portfolio Margin(TRADE)
         * @param {string} amount 
         * @param {string} fromAsset 
         * @param {string} targetAsset 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPortfolioRedeemV1(amount: string, fromAsset: string, targetAsset: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePortfolioRedeemV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPortfolioRedeemV1(amount, fromAsset, targetAsset, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.createPortfolioRedeemV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Repay futures Negative Balance
         * @summary Repay futures Negative Balance(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [from] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPortfolioRepayFuturesNegativeBalanceV1(timestamp: number, from?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePortfolioRepayFuturesNegativeBalanceV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPortfolioRepayFuturesNegativeBalanceV1(timestamp, from, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.createPortfolioRepayFuturesNegativeBalanceV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change Auto-repay-futures Status
         * @summary Change Auto-repay-futures Status(TRADE)
         * @param {string} autoRepay 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPortfolioRepayFuturesSwitchV1(autoRepay: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePortfolioRepayFuturesSwitchV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPortfolioRepayFuturesSwitchV1(autoRepay, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.createPortfolioRepayFuturesSwitchV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Repay Portfolio Margin Pro Bankruptcy Loan
         * @summary Portfolio Margin Pro Bankruptcy Loan Repay
         * @param {number} timestamp 
         * @param {string} [from] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPortfolioRepayV1(timestamp: number, from?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePortfolioRepayV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPortfolioRepayV1(timestamp, from, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.createPortfolioRepayV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Portfolio Margin Pro Account Info
         * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioAccountV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPortfolioAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioAccountV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.getPortfolioAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
         * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioAccountV2(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioAccountV2(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.getPortfolioAccountV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Portfolio Margin Asset Index Price
         * @summary Query Portfolio Margin Asset Index Price (MARKET_DATA)
         * @param {string} [asset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioAssetIndexPriceV1(asset?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPortfolioAssetIndexPriceV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioAssetIndexPriceV1(asset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.getPortfolioAssetIndexPriceV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Portfolio Margin Pro account balance
         * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioBalanceV1(timestamp: number, asset?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPortfolioBalanceV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioBalanceV1(timestamp, asset, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.getPortfolioBalanceV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Portfolio Margin Collateral Rate
         * @summary Portfolio Margin Collateral Rate(MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioCollateralRateV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPortfolioCollateralRateV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioCollateralRateV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.getPortfolioCollateralRateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Portfolio Margin PRO Tiered Collateral Rate
         * @summary Portfolio Margin Pro Tiered Collateral Rate(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioCollateralRateV2(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPortfolioCollateralRateV2RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioCollateralRateV2(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.getPortfolioCollateralRateV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query interest history of negative balance for portfolio margin.
         * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioInterestHistoryV1(timestamp: number, asset?: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPortfolioInterestHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioInterestHistoryV1(timestamp, asset, startTime, endTime, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.getPortfolioInterestHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Portfolio Margin Asset Leverage
         * @summary Get Portfolio Margin Asset Leverage(USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioMarginAssetLeverageV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPortfolioMarginAssetLeverageV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioMarginAssetLeverageV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.getPortfolioMarginAssetLeverageV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query repay history of pmloan for portfolio margin pro.
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioPmLoanHistoryV1(timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPortfolioPmLoanHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioPmLoanHistoryV1(timestamp, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.getPortfolioPmLoanHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Portfolio Margin Pro Bankruptcy Loan Amount
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioPmLoanV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPortfolioPmLoanV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioPmLoanV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.getPortfolioPmLoanV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Auto-repay-futures Status
         * @summary Get Auto-repay-futures Status(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioRepayFuturesSwitchV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPortfolioRepayFuturesSwitchV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioRepayFuturesSwitchV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioMarginProApi.getPortfolioRepayFuturesSwitchV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PortfolioMarginProApi - factory interface
 * @export
 */
export const PortfolioMarginProApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfolioMarginProApiFp(configuration)
    return {
        /**
         * Transfers specific asset from Futures Account to Margin account
         * @summary Fund Collection by Asset(USER_DATA)
         * @param {PortfolioMarginProApiCreatePortfolioAssetCollectionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioAssetCollectionV1(requestParameters: PortfolioMarginProApiCreatePortfolioAssetCollectionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioAssetCollectionV1Resp> {
            return localVarFp.createPortfolioAssetCollectionV1(requestParameters.asset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfers all assets from Futures Account to Margin account
         * @summary Fund Auto-collection(USER_DATA)
         * @param {PortfolioMarginProApiCreatePortfolioAutoCollectionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioAutoCollectionV1(requestParameters: PortfolioMarginProApiCreatePortfolioAutoCollectionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioAutoCollectionV1Resp> {
            return localVarFp.createPortfolioAutoCollectionV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * BNB transfer can be between Margin Account and USDM Account
         * @summary BNB transfer(USER_DATA)
         * @param {PortfolioMarginProApiCreatePortfolioBnbTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioBnbTransferV1(requestParameters: PortfolioMarginProApiCreatePortfolioBnbTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioBnbTransferV1Resp> {
            return localVarFp.createPortfolioBnbTransferV1(requestParameters.amount, requestParameters.timestamp, requestParameters.transferSide, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Mint BFUSD for all types of Portfolio Margin account
         * @summary Mint BFUSD for Portfolio Margin(TRADE)
         * @param {PortfolioMarginProApiCreatePortfolioMintV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioMintV1(requestParameters: PortfolioMarginProApiCreatePortfolioMintV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioMintV1Resp> {
            return localVarFp.createPortfolioMintV1(requestParameters.amount, requestParameters.fromAsset, requestParameters.targetAsset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeem BFUSD for all types of Portfolio Margin account
         * @summary Redeem BFUSD for Portfolio Margin(TRADE)
         * @param {PortfolioMarginProApiCreatePortfolioRedeemV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioRedeemV1(requestParameters: PortfolioMarginProApiCreatePortfolioRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioRedeemV1Resp> {
            return localVarFp.createPortfolioRedeemV1(requestParameters.amount, requestParameters.fromAsset, requestParameters.targetAsset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Repay futures Negative Balance
         * @summary Repay futures Negative Balance(USER_DATA)
         * @param {PortfolioMarginProApiCreatePortfolioRepayFuturesNegativeBalanceV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioRepayFuturesNegativeBalanceV1(requestParameters: PortfolioMarginProApiCreatePortfolioRepayFuturesNegativeBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioRepayFuturesNegativeBalanceV1Resp> {
            return localVarFp.createPortfolioRepayFuturesNegativeBalanceV1(requestParameters.timestamp, requestParameters.from, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Change Auto-repay-futures Status
         * @summary Change Auto-repay-futures Status(TRADE)
         * @param {PortfolioMarginProApiCreatePortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioRepayFuturesSwitchV1(requestParameters: PortfolioMarginProApiCreatePortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioRepayFuturesSwitchV1Resp> {
            return localVarFp.createPortfolioRepayFuturesSwitchV1(requestParameters.autoRepay, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Repay Portfolio Margin Pro Bankruptcy Loan
         * @summary Portfolio Margin Pro Bankruptcy Loan Repay
         * @param {PortfolioMarginProApiCreatePortfolioRepayV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortfolioRepayV1(requestParameters: PortfolioMarginProApiCreatePortfolioRepayV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioRepayV1Resp> {
            return localVarFp.createPortfolioRepayV1(requestParameters.timestamp, requestParameters.from, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Portfolio Margin Pro Account Info
         * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
         * @param {PortfolioMarginProApiGetPortfolioAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioAccountV1(requestParameters: PortfolioMarginProApiGetPortfolioAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPortfolioAccountV1Resp> {
            return localVarFp.getPortfolioAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
         * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
         * @param {PortfolioMarginProApiGetPortfolioAccountV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioAccountV2(requestParameters: PortfolioMarginProApiGetPortfolioAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPortfolioAccountV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Portfolio Margin Asset Index Price
         * @summary Query Portfolio Margin Asset Index Price (MARKET_DATA)
         * @param {PortfolioMarginProApiGetPortfolioAssetIndexPriceV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioAssetIndexPriceV1(requestParameters: PortfolioMarginProApiGetPortfolioAssetIndexPriceV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioAssetIndexPriceV1RespItem>> {
            return localVarFp.getPortfolioAssetIndexPriceV1(requestParameters.asset, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Portfolio Margin Pro account balance
         * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
         * @param {PortfolioMarginProApiGetPortfolioBalanceV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioBalanceV1(requestParameters: PortfolioMarginProApiGetPortfolioBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioBalanceV1RespItem>> {
            return localVarFp.getPortfolioBalanceV1(requestParameters.timestamp, requestParameters.asset, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Portfolio Margin Collateral Rate
         * @summary Portfolio Margin Collateral Rate(MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioCollateralRateV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioCollateralRateV1RespItem>> {
            return localVarFp.getPortfolioCollateralRateV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Portfolio Margin PRO Tiered Collateral Rate
         * @summary Portfolio Margin Pro Tiered Collateral Rate(USER_DATA)
         * @param {PortfolioMarginProApiGetPortfolioCollateralRateV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioCollateralRateV2(requestParameters: PortfolioMarginProApiGetPortfolioCollateralRateV2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioCollateralRateV2RespItem>> {
            return localVarFp.getPortfolioCollateralRateV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query interest history of negative balance for portfolio margin.
         * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
         * @param {PortfolioMarginProApiGetPortfolioInterestHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioInterestHistoryV1(requestParameters: PortfolioMarginProApiGetPortfolioInterestHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioInterestHistoryV1RespItem>> {
            return localVarFp.getPortfolioInterestHistoryV1(requestParameters.timestamp, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Portfolio Margin Asset Leverage
         * @summary Get Portfolio Margin Asset Leverage(USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioMarginAssetLeverageV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioMarginAssetLeverageV1RespItem>> {
            return localVarFp.getPortfolioMarginAssetLeverageV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Query repay history of pmloan for portfolio margin pro.
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
         * @param {PortfolioMarginProApiGetPortfolioPmLoanHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioPmLoanHistoryV1(requestParameters: PortfolioMarginProApiGetPortfolioPmLoanHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPortfolioPmLoanHistoryV1Resp> {
            return localVarFp.getPortfolioPmLoanHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Portfolio Margin Pro Bankruptcy Loan Amount
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
         * @param {PortfolioMarginProApiGetPortfolioPmLoanV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioPmLoanV1(requestParameters: PortfolioMarginProApiGetPortfolioPmLoanV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPortfolioPmLoanV1Resp> {
            return localVarFp.getPortfolioPmLoanV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Auto-repay-futures Status
         * @summary Get Auto-repay-futures Status(USER_DATA)
         * @param {PortfolioMarginProApiGetPortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioRepayFuturesSwitchV1(requestParameters: PortfolioMarginProApiGetPortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPortfolioRepayFuturesSwitchV1Resp> {
            return localVarFp.getPortfolioRepayFuturesSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PortfolioMarginProApi - interface
 * @export
 * @interface PortfolioMarginProApi
 */
export interface PortfolioMarginProApiInterface {
    /**
     * Transfers specific asset from Futures Account to Margin account
     * @summary Fund Collection by Asset(USER_DATA)
     * @param {PortfolioMarginProApiCreatePortfolioAssetCollectionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    createPortfolioAssetCollectionV1(requestParameters: PortfolioMarginProApiCreatePortfolioAssetCollectionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioAssetCollectionV1Resp>;

    /**
     * Transfers all assets from Futures Account to Margin account
     * @summary Fund Auto-collection(USER_DATA)
     * @param {PortfolioMarginProApiCreatePortfolioAutoCollectionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    createPortfolioAutoCollectionV1(requestParameters: PortfolioMarginProApiCreatePortfolioAutoCollectionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioAutoCollectionV1Resp>;

    /**
     * BNB transfer can be between Margin Account and USDM Account
     * @summary BNB transfer(USER_DATA)
     * @param {PortfolioMarginProApiCreatePortfolioBnbTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    createPortfolioBnbTransferV1(requestParameters: PortfolioMarginProApiCreatePortfolioBnbTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioBnbTransferV1Resp>;

    /**
     * Mint BFUSD for all types of Portfolio Margin account
     * @summary Mint BFUSD for Portfolio Margin(TRADE)
     * @param {PortfolioMarginProApiCreatePortfolioMintV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    createPortfolioMintV1(requestParameters: PortfolioMarginProApiCreatePortfolioMintV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioMintV1Resp>;

    /**
     * Redeem BFUSD for all types of Portfolio Margin account
     * @summary Redeem BFUSD for Portfolio Margin(TRADE)
     * @param {PortfolioMarginProApiCreatePortfolioRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    createPortfolioRedeemV1(requestParameters: PortfolioMarginProApiCreatePortfolioRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioRedeemV1Resp>;

    /**
     * Repay futures Negative Balance
     * @summary Repay futures Negative Balance(USER_DATA)
     * @param {PortfolioMarginProApiCreatePortfolioRepayFuturesNegativeBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    createPortfolioRepayFuturesNegativeBalanceV1(requestParameters: PortfolioMarginProApiCreatePortfolioRepayFuturesNegativeBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioRepayFuturesNegativeBalanceV1Resp>;

    /**
     * Change Auto-repay-futures Status
     * @summary Change Auto-repay-futures Status(TRADE)
     * @param {PortfolioMarginProApiCreatePortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    createPortfolioRepayFuturesSwitchV1(requestParameters: PortfolioMarginProApiCreatePortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioRepayFuturesSwitchV1Resp>;

    /**
     * Repay Portfolio Margin Pro Bankruptcy Loan
     * @summary Portfolio Margin Pro Bankruptcy Loan Repay
     * @param {PortfolioMarginProApiCreatePortfolioRepayV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    createPortfolioRepayV1(requestParameters: PortfolioMarginProApiCreatePortfolioRepayV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePortfolioRepayV1Resp>;

    /**
     * Get Portfolio Margin Pro Account Info
     * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    getPortfolioAccountV1(requestParameters: PortfolioMarginProApiGetPortfolioAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPortfolioAccountV1Resp>;

    /**
     * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
     * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    getPortfolioAccountV2(requestParameters: PortfolioMarginProApiGetPortfolioAccountV2Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Query Portfolio Margin Asset Index Price
     * @summary Query Portfolio Margin Asset Index Price (MARKET_DATA)
     * @param {PortfolioMarginProApiGetPortfolioAssetIndexPriceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    getPortfolioAssetIndexPriceV1(requestParameters?: PortfolioMarginProApiGetPortfolioAssetIndexPriceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioAssetIndexPriceV1RespItem>>;

    /**
     * Query Portfolio Margin Pro account balance
     * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    getPortfolioBalanceV1(requestParameters: PortfolioMarginProApiGetPortfolioBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioBalanceV1RespItem>>;

    /**
     * Portfolio Margin Collateral Rate
     * @summary Portfolio Margin Collateral Rate(MARKET_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    getPortfolioCollateralRateV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioCollateralRateV1RespItem>>;

    /**
     * Portfolio Margin PRO Tiered Collateral Rate
     * @summary Portfolio Margin Pro Tiered Collateral Rate(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioCollateralRateV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    getPortfolioCollateralRateV2(requestParameters: PortfolioMarginProApiGetPortfolioCollateralRateV2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioCollateralRateV2RespItem>>;

    /**
     * Query interest history of negative balance for portfolio margin.
     * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioInterestHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    getPortfolioInterestHistoryV1(requestParameters: PortfolioMarginProApiGetPortfolioInterestHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioInterestHistoryV1RespItem>>;

    /**
     * Get Portfolio Margin Asset Leverage
     * @summary Get Portfolio Margin Asset Leverage(USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    getPortfolioMarginAssetLeverageV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetPortfolioMarginAssetLeverageV1RespItem>>;

    /**
     * Query repay history of pmloan for portfolio margin pro.
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioPmLoanHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    getPortfolioPmLoanHistoryV1(requestParameters: PortfolioMarginProApiGetPortfolioPmLoanHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPortfolioPmLoanHistoryV1Resp>;

    /**
     * Query Portfolio Margin Pro Bankruptcy Loan Amount
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioPmLoanV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    getPortfolioPmLoanV1(requestParameters: PortfolioMarginProApiGetPortfolioPmLoanV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPortfolioPmLoanV1Resp>;

    /**
     * Query Auto-repay-futures Status
     * @summary Get Auto-repay-futures Status(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApiInterface
     */
    getPortfolioRepayFuturesSwitchV1(requestParameters: PortfolioMarginProApiGetPortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPortfolioRepayFuturesSwitchV1Resp>;

}

/**
 * Request parameters for createPortfolioAssetCollectionV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiCreatePortfolioAssetCollectionV1Request
 */
export interface PortfolioMarginProApiCreatePortfolioAssetCollectionV1Request {
    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioAssetCollectionV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioAssetCollectionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioAssetCollectionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createPortfolioAutoCollectionV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiCreatePortfolioAutoCollectionV1Request
 */
export interface PortfolioMarginProApiCreatePortfolioAutoCollectionV1Request {
    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioAutoCollectionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioAutoCollectionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createPortfolioBnbTransferV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiCreatePortfolioBnbTransferV1Request
 */
export interface PortfolioMarginProApiCreatePortfolioBnbTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioBnbTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioBnbTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioBnbTransferV1
     */
    readonly transferSide: string

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioBnbTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createPortfolioMintV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiCreatePortfolioMintV1Request
 */
export interface PortfolioMarginProApiCreatePortfolioMintV1Request {
    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioMintV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioMintV1
     */
    readonly fromAsset: string

    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioMintV1
     */
    readonly targetAsset: string

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioMintV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioMintV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createPortfolioRedeemV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiCreatePortfolioRedeemV1Request
 */
export interface PortfolioMarginProApiCreatePortfolioRedeemV1Request {
    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioRedeemV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioRedeemV1
     */
    readonly fromAsset: string

    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioRedeemV1
     */
    readonly targetAsset: string

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioRedeemV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioRedeemV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createPortfolioRepayFuturesNegativeBalanceV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiCreatePortfolioRepayFuturesNegativeBalanceV1Request
 */
export interface PortfolioMarginProApiCreatePortfolioRepayFuturesNegativeBalanceV1Request {
    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioRepayFuturesNegativeBalanceV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioRepayFuturesNegativeBalanceV1
     */
    readonly from?: string

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioRepayFuturesNegativeBalanceV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createPortfolioRepayFuturesSwitchV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiCreatePortfolioRepayFuturesSwitchV1Request
 */
export interface PortfolioMarginProApiCreatePortfolioRepayFuturesSwitchV1Request {
    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioRepayFuturesSwitchV1
     */
    readonly autoRepay: string

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioRepayFuturesSwitchV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioRepayFuturesSwitchV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createPortfolioRepayV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiCreatePortfolioRepayV1Request
 */
export interface PortfolioMarginProApiCreatePortfolioRepayV1Request {
    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioRepayV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiCreatePortfolioRepayV1
     */
    readonly from?: string

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiCreatePortfolioRepayV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getPortfolioAccountV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiGetPortfolioAccountV1Request
 */
export interface PortfolioMarginProApiGetPortfolioAccountV1Request {
    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getPortfolioAccountV2 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiGetPortfolioAccountV2Request
 */
export interface PortfolioMarginProApiGetPortfolioAccountV2Request {
    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioAccountV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioAccountV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getPortfolioAssetIndexPriceV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiGetPortfolioAssetIndexPriceV1Request
 */
export interface PortfolioMarginProApiGetPortfolioAssetIndexPriceV1Request {
    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiGetPortfolioAssetIndexPriceV1
     */
    readonly asset?: string
}

/**
 * Request parameters for getPortfolioBalanceV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiGetPortfolioBalanceV1Request
 */
export interface PortfolioMarginProApiGetPortfolioBalanceV1Request {
    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioBalanceV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiGetPortfolioBalanceV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioBalanceV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getPortfolioCollateralRateV2 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiGetPortfolioCollateralRateV2Request
 */
export interface PortfolioMarginProApiGetPortfolioCollateralRateV2Request {
    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioCollateralRateV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioCollateralRateV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getPortfolioInterestHistoryV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiGetPortfolioInterestHistoryV1Request
 */
export interface PortfolioMarginProApiGetPortfolioInterestHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioInterestHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof PortfolioMarginProApiGetPortfolioInterestHistoryV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioInterestHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioInterestHistoryV1
     */
    readonly endTime?: number

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioInterestHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioInterestHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getPortfolioPmLoanHistoryV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiGetPortfolioPmLoanHistoryV1Request
 */
export interface PortfolioMarginProApiGetPortfolioPmLoanHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioPmLoanHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioPmLoanHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioPmLoanHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioPmLoanHistoryV1
     */
    readonly current?: number

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioPmLoanHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioPmLoanHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getPortfolioPmLoanV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiGetPortfolioPmLoanV1Request
 */
export interface PortfolioMarginProApiGetPortfolioPmLoanV1Request {
    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioPmLoanV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioPmLoanV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getPortfolioRepayFuturesSwitchV1 operation in PortfolioMarginProApi.
 * @export
 * @interface PortfolioMarginProApiGetPortfolioRepayFuturesSwitchV1Request
 */
export interface PortfolioMarginProApiGetPortfolioRepayFuturesSwitchV1Request {
    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioRepayFuturesSwitchV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof PortfolioMarginProApiGetPortfolioRepayFuturesSwitchV1
     */
    readonly recvWindow?: number
}

/**
 * PortfolioMarginProApi - object-oriented interface
 * @export
 * @class PortfolioMarginProApi
 * @extends {BaseAPI}
 */
export class PortfolioMarginProApi extends BaseAPI implements PortfolioMarginProApiInterface {
    /**
     * Transfers specific asset from Futures Account to Margin account
     * @summary Fund Collection by Asset(USER_DATA)
     * @param {PortfolioMarginProApiCreatePortfolioAssetCollectionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public createPortfolioAssetCollectionV1(requestParameters: PortfolioMarginProApiCreatePortfolioAssetCollectionV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).createPortfolioAssetCollectionV1(requestParameters.asset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfers all assets from Futures Account to Margin account
     * @summary Fund Auto-collection(USER_DATA)
     * @param {PortfolioMarginProApiCreatePortfolioAutoCollectionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public createPortfolioAutoCollectionV1(requestParameters: PortfolioMarginProApiCreatePortfolioAutoCollectionV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).createPortfolioAutoCollectionV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * BNB transfer can be between Margin Account and USDM Account
     * @summary BNB transfer(USER_DATA)
     * @param {PortfolioMarginProApiCreatePortfolioBnbTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public createPortfolioBnbTransferV1(requestParameters: PortfolioMarginProApiCreatePortfolioBnbTransferV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).createPortfolioBnbTransferV1(requestParameters.amount, requestParameters.timestamp, requestParameters.transferSide, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mint BFUSD for all types of Portfolio Margin account
     * @summary Mint BFUSD for Portfolio Margin(TRADE)
     * @param {PortfolioMarginProApiCreatePortfolioMintV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public createPortfolioMintV1(requestParameters: PortfolioMarginProApiCreatePortfolioMintV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).createPortfolioMintV1(requestParameters.amount, requestParameters.fromAsset, requestParameters.targetAsset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redeem BFUSD for all types of Portfolio Margin account
     * @summary Redeem BFUSD for Portfolio Margin(TRADE)
     * @param {PortfolioMarginProApiCreatePortfolioRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public createPortfolioRedeemV1(requestParameters: PortfolioMarginProApiCreatePortfolioRedeemV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).createPortfolioRedeemV1(requestParameters.amount, requestParameters.fromAsset, requestParameters.targetAsset, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Repay futures Negative Balance
     * @summary Repay futures Negative Balance(USER_DATA)
     * @param {PortfolioMarginProApiCreatePortfolioRepayFuturesNegativeBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public createPortfolioRepayFuturesNegativeBalanceV1(requestParameters: PortfolioMarginProApiCreatePortfolioRepayFuturesNegativeBalanceV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).createPortfolioRepayFuturesNegativeBalanceV1(requestParameters.timestamp, requestParameters.from, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change Auto-repay-futures Status
     * @summary Change Auto-repay-futures Status(TRADE)
     * @param {PortfolioMarginProApiCreatePortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public createPortfolioRepayFuturesSwitchV1(requestParameters: PortfolioMarginProApiCreatePortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).createPortfolioRepayFuturesSwitchV1(requestParameters.autoRepay, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Repay Portfolio Margin Pro Bankruptcy Loan
     * @summary Portfolio Margin Pro Bankruptcy Loan Repay
     * @param {PortfolioMarginProApiCreatePortfolioRepayV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public createPortfolioRepayV1(requestParameters: PortfolioMarginProApiCreatePortfolioRepayV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).createPortfolioRepayV1(requestParameters.timestamp, requestParameters.from, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Portfolio Margin Pro Account Info
     * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public getPortfolioAccountV1(requestParameters: PortfolioMarginProApiGetPortfolioAccountV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).getPortfolioAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
     * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioAccountV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public getPortfolioAccountV2(requestParameters: PortfolioMarginProApiGetPortfolioAccountV2Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).getPortfolioAccountV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Portfolio Margin Asset Index Price
     * @summary Query Portfolio Margin Asset Index Price (MARKET_DATA)
     * @param {PortfolioMarginProApiGetPortfolioAssetIndexPriceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public getPortfolioAssetIndexPriceV1(requestParameters: PortfolioMarginProApiGetPortfolioAssetIndexPriceV1Request = {}, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).getPortfolioAssetIndexPriceV1(requestParameters.asset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Portfolio Margin Pro account balance
     * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public getPortfolioBalanceV1(requestParameters: PortfolioMarginProApiGetPortfolioBalanceV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).getPortfolioBalanceV1(requestParameters.timestamp, requestParameters.asset, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Portfolio Margin Collateral Rate
     * @summary Portfolio Margin Collateral Rate(MARKET_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public getPortfolioCollateralRateV1(options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).getPortfolioCollateralRateV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Portfolio Margin PRO Tiered Collateral Rate
     * @summary Portfolio Margin Pro Tiered Collateral Rate(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioCollateralRateV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public getPortfolioCollateralRateV2(requestParameters: PortfolioMarginProApiGetPortfolioCollateralRateV2Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).getPortfolioCollateralRateV2(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query interest history of negative balance for portfolio margin.
     * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioInterestHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public getPortfolioInterestHistoryV1(requestParameters: PortfolioMarginProApiGetPortfolioInterestHistoryV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).getPortfolioInterestHistoryV1(requestParameters.timestamp, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Portfolio Margin Asset Leverage
     * @summary Get Portfolio Margin Asset Leverage(USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public getPortfolioMarginAssetLeverageV1(options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).getPortfolioMarginAssetLeverageV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query repay history of pmloan for portfolio margin pro.
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioPmLoanHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public getPortfolioPmLoanHistoryV1(requestParameters: PortfolioMarginProApiGetPortfolioPmLoanHistoryV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).getPortfolioPmLoanHistoryV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Portfolio Margin Pro Bankruptcy Loan Amount
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioPmLoanV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public getPortfolioPmLoanV1(requestParameters: PortfolioMarginProApiGetPortfolioPmLoanV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).getPortfolioPmLoanV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Auto-repay-futures Status
     * @summary Get Auto-repay-futures Status(USER_DATA)
     * @param {PortfolioMarginProApiGetPortfolioRepayFuturesSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginProApi
     */
    public getPortfolioRepayFuturesSwitchV1(requestParameters: PortfolioMarginProApiGetPortfolioRepayFuturesSwitchV1Request, options?: RawAxiosRequestConfig) {
        return PortfolioMarginProApiFp(this.configuration).getPortfolioRepayFuturesSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

