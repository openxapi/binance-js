/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreateSimpleEarnFlexibleRedeemV1Resp } from '../model';
// @ts-ignore
import type { CreateSimpleEarnFlexibleSetAutoSubscribeV1Resp } from '../model';
// @ts-ignore
import type { CreateSimpleEarnFlexibleSubscribeV1Resp } from '../model';
// @ts-ignore
import type { CreateSimpleEarnLockedRedeemV1Resp } from '../model';
// @ts-ignore
import type { CreateSimpleEarnLockedSetAutoSubscribeV1Resp } from '../model';
// @ts-ignore
import type { CreateSimpleEarnLockedSetRedeemOptionV1Resp } from '../model';
// @ts-ignore
import type { CreateSimpleEarnLockedSubscribeV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnAccountV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnFlexibleHistoryCollateralRecordV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnFlexibleHistoryRateHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnFlexibleHistoryRedemptionRecordV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnFlexibleHistoryRewardsRecordV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnFlexibleHistorySubscriptionRecordV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnFlexibleListV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnFlexiblePersonalLeftQuotaV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnFlexiblePositionV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnFlexibleSubscriptionPreviewV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnLockedHistoryRedemptionRecordV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnLockedHistoryRewardsRecordV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnLockedHistorySubscriptionRecordV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnLockedListV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnLockedPersonalLeftQuotaV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnLockedPositionV1Resp } from '../model';
// @ts-ignore
import type { GetSimpleEarnLockedSubscriptionPreviewV1RespItem } from '../model';
/**
 * SimpleEarnApi - axios parameter creator
 * @export
 */
export const SimpleEarnApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Redeem Flexible Product
         * @summary Redeem Flexible Product(TRADE)
         * @param {string} productId 
         * @param {number} timestamp 
         * @param {string} [amount] 
         * @param {string} [destAccount] 
         * @param {number} [recvWindow] 
         * @param {boolean} [redeemAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnFlexibleRedeemV1: async (productId: string, timestamp: number, amount?: string, destAccount?: string, recvWindow?: number, redeemAll?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('createSimpleEarnFlexibleRedeemV1', 'productId', productId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSimpleEarnFlexibleRedeemV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/flexible/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (destAccount !== undefined) { 
                localVarFormParams.set('destAccount', destAccount as any);
            }
    
            if (productId !== undefined) { 
                localVarFormParams.set('productId', productId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (redeemAll !== undefined) { 
                localVarFormParams.set('redeemAll', redeemAll as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set Flexible Auto Subscribe
         * @summary Set Flexible Auto Subscribe(USER_DATA)
         * @param {boolean} autoSubscribe 
         * @param {string} productId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnFlexibleSetAutoSubscribeV1: async (autoSubscribe: boolean, productId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'autoSubscribe' is not null or undefined
            assertParamExists('createSimpleEarnFlexibleSetAutoSubscribeV1', 'autoSubscribe', autoSubscribe)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('createSimpleEarnFlexibleSetAutoSubscribeV1', 'productId', productId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSimpleEarnFlexibleSetAutoSubscribeV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/flexible/setAutoSubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (autoSubscribe !== undefined) { 
                localVarFormParams.set('autoSubscribe', autoSubscribe as any);
            }
    
            if (productId !== undefined) { 
                localVarFormParams.set('productId', productId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscribe Flexible Product
         * @summary Subscribe Flexible Product(TRADE)
         * @param {string} amount 
         * @param {string} productId 
         * @param {number} timestamp 
         * @param {boolean} [autoSubscribe] 
         * @param {number} [recvWindow] 
         * @param {string} [sourceAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnFlexibleSubscribeV1: async (amount: string, productId: string, timestamp: number, autoSubscribe?: boolean, recvWindow?: number, sourceAccount?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createSimpleEarnFlexibleSubscribeV1', 'amount', amount)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('createSimpleEarnFlexibleSubscribeV1', 'productId', productId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSimpleEarnFlexibleSubscribeV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/flexible/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (autoSubscribe !== undefined) { 
                localVarFormParams.set('autoSubscribe', autoSubscribe as any);
            }
    
            if (productId !== undefined) { 
                localVarFormParams.set('productId', productId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (sourceAccount !== undefined) { 
                localVarFormParams.set('sourceAccount', sourceAccount as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeem Locked Product
         * @summary Redeem Locked Product(TRADE)
         * @param {number} positionId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnLockedRedeemV1: async (positionId: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('createSimpleEarnLockedRedeemV1', 'positionId', positionId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSimpleEarnLockedRedeemV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/locked/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (positionId !== undefined) { 
                localVarFormParams.set('positionId', positionId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set locked auto subscribe
         * @summary Set Locked Auto Subscribe(USER_DATA)
         * @param {boolean} autoSubscribe 
         * @param {number} positionId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnLockedSetAutoSubscribeV1: async (autoSubscribe: boolean, positionId: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'autoSubscribe' is not null or undefined
            assertParamExists('createSimpleEarnLockedSetAutoSubscribeV1', 'autoSubscribe', autoSubscribe)
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('createSimpleEarnLockedSetAutoSubscribeV1', 'positionId', positionId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSimpleEarnLockedSetAutoSubscribeV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/locked/setAutoSubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (autoSubscribe !== undefined) { 
                localVarFormParams.set('autoSubscribe', autoSubscribe as any);
            }
    
            if (positionId !== undefined) { 
                localVarFormParams.set('positionId', positionId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set redeem option for Locked product
         * @summary Set Locked Product Redeem Option(USER_DATA)
         * @param {string} positionId 
         * @param {string} redeemTo 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnLockedSetRedeemOptionV1: async (positionId: string, redeemTo: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('createSimpleEarnLockedSetRedeemOptionV1', 'positionId', positionId)
            // verify required parameter 'redeemTo' is not null or undefined
            assertParamExists('createSimpleEarnLockedSetRedeemOptionV1', 'redeemTo', redeemTo)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSimpleEarnLockedSetRedeemOptionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/locked/setRedeemOption`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (positionId !== undefined) { 
                localVarFormParams.set('positionId', positionId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (redeemTo !== undefined) { 
                localVarFormParams.set('redeemTo', redeemTo as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscribe Locked Product
         * @summary Subscribe Locked Product(TRADE)
         * @param {string} amount 
         * @param {string} projectId 
         * @param {number} timestamp 
         * @param {boolean} [autoSubscribe] 
         * @param {number} [recvWindow] 
         * @param {string} [redeemTo] 
         * @param {string} [sourceAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnLockedSubscribeV1: async (amount: string, projectId: string, timestamp: number, autoSubscribe?: boolean, recvWindow?: number, redeemTo?: string, sourceAccount?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createSimpleEarnLockedSubscribeV1', 'amount', amount)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createSimpleEarnLockedSubscribeV1', 'projectId', projectId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createSimpleEarnLockedSubscribeV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/locked/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (autoSubscribe !== undefined) { 
                localVarFormParams.set('autoSubscribe', autoSubscribe as any);
            }
    
            if (projectId !== undefined) { 
                localVarFormParams.set('projectId', projectId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (redeemTo !== undefined) { 
                localVarFormParams.set('redeemTo', redeemTo as any);
            }
    
            if (sourceAccount !== undefined) { 
                localVarFormParams.set('sourceAccount', sourceAccount as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Simple Account query
         * @summary Simple Account(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnAccountV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Collateral Record
         * @summary Get Collateral Record(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [productId] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleHistoryCollateralRecordV1: async (timestamp: number, productId?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnFlexibleHistoryCollateralRecordV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/flexible/history/collateralRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Rate History
         * @summary Get Rate History(USER_DATA)
         * @param {string} productId 
         * @param {number} timestamp 
         * @param {string} [aprPeriod] &amp;#34;DAY&amp;#34;,&amp;#34;YEAR&amp;#34;,default&amp;#34;DAY&amp;#34;
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleHistoryRateHistoryV1: async (productId: string, timestamp: number, aprPeriod?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getSimpleEarnFlexibleHistoryRateHistoryV1', 'productId', productId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnFlexibleHistoryRateHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/flexible/history/rateHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (aprPeriod !== undefined) {
                localVarQueryParameter['aprPeriod'] = aprPeriod;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Flexible Redemption Record
         * @summary Get Flexible Redemption Record(USER_DATA)
         * @param {string} [productId] 
         * @param {string} [redeemId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleHistoryRedemptionRecordV1: async (productId?: string, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/simple-earn/flexible/history/redemptionRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (redeemId !== undefined) {
                localVarQueryParameter['redeemId'] = redeemId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Flexible Rewards History
         * @summary Get Flexible Rewards History(USER_DATA)
         * @param {string} type &#x60;Bonus&#x60; - Bonus tiered APR, &#x60;REALTIME&#x60; Real-time APR, &#x60;REWARDS&#x60; Historical rewards,&#x60;ALL&#x60;(set to default)
         * @param {number} timestamp 
         * @param {string} [productId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleHistoryRewardsRecordV1: async (type: string, timestamp: number, productId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getSimpleEarnFlexibleHistoryRewardsRecordV1', 'type', type)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnFlexibleHistoryRewardsRecordV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/flexible/history/rewardsRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Flexible Subscription Record
         * @summary Get Flexible Subscription Record(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [productId] 
         * @param {string} [purchaseId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleHistorySubscriptionRecordV1: async (timestamp: number, productId?: string, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnFlexibleHistorySubscriptionRecordV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/flexible/history/subscriptionRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (purchaseId !== undefined) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get available Simple Earn flexible product list
         * @summary Get Simple Earn Flexible Product List(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleListV1: async (timestamp: number, asset?: string, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnFlexibleListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/flexible/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Flexible Personal Left Quota
         * @summary Get Flexible Personal Left Quota(USER_DATA)
         * @param {string} productId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexiblePersonalLeftQuotaV1: async (productId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getSimpleEarnFlexiblePersonalLeftQuotaV1', 'productId', productId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnFlexiblePersonalLeftQuotaV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/flexible/personalLeftQuota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Flexible Product Position
         * @summary Get Flexible Product Position(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [productId] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexiblePositionV1: async (timestamp: number, asset?: string, productId?: string, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnFlexiblePositionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/flexible/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Flexible Subscription Preview
         * @summary Get Flexible Subscription Preview(USER_DATA)
         * @param {string} productId 
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleSubscriptionPreviewV1: async (productId: string, amount: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getSimpleEarnFlexibleSubscriptionPreviewV1', 'productId', productId)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('getSimpleEarnFlexibleSubscriptionPreviewV1', 'amount', amount)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnFlexibleSubscriptionPreviewV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/flexible/subscriptionPreview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Locked Redemption Record
         * @summary Get Locked Redemption Record(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [positionId] 
         * @param {string} [redeemId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedHistoryRedemptionRecordV1: async (timestamp: number, positionId?: number, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnLockedHistoryRedemptionRecordV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/locked/history/redemptionRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (redeemId !== undefined) {
                localVarQueryParameter['redeemId'] = redeemId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Locked Rewards History
         * @summary Get Locked Rewards History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [positionId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1, Default:1, Max: 1,000
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedHistoryRewardsRecordV1: async (timestamp: number, positionId?: number, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnLockedHistoryRewardsRecordV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/locked/history/rewardsRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Locked Subscription Record
         * @summary Get Locked Subscription Record(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [purchaseId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedHistorySubscriptionRecordV1: async (timestamp: number, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnLockedHistorySubscriptionRecordV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/locked/history/subscriptionRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (purchaseId !== undefined) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Simple Earn Locked Product List
         * @summary Get Simple Earn Locked Product List(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedListV1: async (timestamp: number, asset?: string, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnLockedListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/locked/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Locked Personal Left Quota
         * @summary Get Locked Personal Left Quota(USER_DATA)
         * @param {string} projectId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedPersonalLeftQuotaV1: async (projectId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSimpleEarnLockedPersonalLeftQuotaV1', 'projectId', projectId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnLockedPersonalLeftQuotaV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/locked/personalLeftQuota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Locked Product Position
         * @summary Get Locked Product Position
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [positionId] 
         * @param {string} [projectId] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedPositionV1: async (timestamp: number, asset?: string, positionId?: number, projectId?: string, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnLockedPositionV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/locked/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Locked Subscription Preview
         * @summary Get Locked Subscription Preview(USER_DATA)
         * @param {string} projectId 
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedSubscriptionPreviewV1: async (projectId: string, amount: string, timestamp: number, autoSubscribe?: boolean, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSimpleEarnLockedSubscriptionPreviewV1', 'projectId', projectId)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('getSimpleEarnLockedSubscriptionPreviewV1', 'amount', amount)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSimpleEarnLockedSubscriptionPreviewV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/simple-earn/locked/subscriptionPreview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SimpleEarnApi - functional programming interface
 * @export
 */
export const SimpleEarnApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SimpleEarnApiAxiosParamCreator(configuration)
    return {
        /**
         * Redeem Flexible Product
         * @summary Redeem Flexible Product(TRADE)
         * @param {string} productId 
         * @param {number} timestamp 
         * @param {string} [amount] 
         * @param {string} [destAccount] 
         * @param {number} [recvWindow] 
         * @param {boolean} [redeemAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSimpleEarnFlexibleRedeemV1(productId: string, timestamp: number, amount?: string, destAccount?: string, recvWindow?: number, redeemAll?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSimpleEarnFlexibleRedeemV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSimpleEarnFlexibleRedeemV1(productId, timestamp, amount, destAccount, recvWindow, redeemAll, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.createSimpleEarnFlexibleRedeemV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set Flexible Auto Subscribe
         * @summary Set Flexible Auto Subscribe(USER_DATA)
         * @param {boolean} autoSubscribe 
         * @param {string} productId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSimpleEarnFlexibleSetAutoSubscribeV1(autoSubscribe: boolean, productId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSimpleEarnFlexibleSetAutoSubscribeV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSimpleEarnFlexibleSetAutoSubscribeV1(autoSubscribe, productId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.createSimpleEarnFlexibleSetAutoSubscribeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Subscribe Flexible Product
         * @summary Subscribe Flexible Product(TRADE)
         * @param {string} amount 
         * @param {string} productId 
         * @param {number} timestamp 
         * @param {boolean} [autoSubscribe] 
         * @param {number} [recvWindow] 
         * @param {string} [sourceAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSimpleEarnFlexibleSubscribeV1(amount: string, productId: string, timestamp: number, autoSubscribe?: boolean, recvWindow?: number, sourceAccount?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSimpleEarnFlexibleSubscribeV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSimpleEarnFlexibleSubscribeV1(amount, productId, timestamp, autoSubscribe, recvWindow, sourceAccount, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.createSimpleEarnFlexibleSubscribeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redeem Locked Product
         * @summary Redeem Locked Product(TRADE)
         * @param {number} positionId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSimpleEarnLockedRedeemV1(positionId: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSimpleEarnLockedRedeemV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSimpleEarnLockedRedeemV1(positionId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.createSimpleEarnLockedRedeemV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set locked auto subscribe
         * @summary Set Locked Auto Subscribe(USER_DATA)
         * @param {boolean} autoSubscribe 
         * @param {number} positionId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSimpleEarnLockedSetAutoSubscribeV1(autoSubscribe: boolean, positionId: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSimpleEarnLockedSetAutoSubscribeV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSimpleEarnLockedSetAutoSubscribeV1(autoSubscribe, positionId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.createSimpleEarnLockedSetAutoSubscribeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set redeem option for Locked product
         * @summary Set Locked Product Redeem Option(USER_DATA)
         * @param {string} positionId 
         * @param {string} redeemTo 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSimpleEarnLockedSetRedeemOptionV1(positionId: string, redeemTo: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSimpleEarnLockedSetRedeemOptionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSimpleEarnLockedSetRedeemOptionV1(positionId, redeemTo, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.createSimpleEarnLockedSetRedeemOptionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Subscribe Locked Product
         * @summary Subscribe Locked Product(TRADE)
         * @param {string} amount 
         * @param {string} projectId 
         * @param {number} timestamp 
         * @param {boolean} [autoSubscribe] 
         * @param {number} [recvWindow] 
         * @param {string} [redeemTo] 
         * @param {string} [sourceAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSimpleEarnLockedSubscribeV1(amount: string, projectId: string, timestamp: number, autoSubscribe?: boolean, recvWindow?: number, redeemTo?: string, sourceAccount?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSimpleEarnLockedSubscribeV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSimpleEarnLockedSubscribeV1(amount, projectId, timestamp, autoSubscribe, recvWindow, redeemTo, sourceAccount, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.createSimpleEarnLockedSubscribeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Simple Account query
         * @summary Simple Account(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnAccountV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnAccountV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Collateral Record
         * @summary Get Collateral Record(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [productId] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnFlexibleHistoryCollateralRecordV1(timestamp: number, productId?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnFlexibleHistoryCollateralRecordV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnFlexibleHistoryCollateralRecordV1(timestamp, productId, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnFlexibleHistoryCollateralRecordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Rate History
         * @summary Get Rate History(USER_DATA)
         * @param {string} productId 
         * @param {number} timestamp 
         * @param {string} [aprPeriod] &amp;#34;DAY&amp;#34;,&amp;#34;YEAR&amp;#34;,default&amp;#34;DAY&amp;#34;
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnFlexibleHistoryRateHistoryV1(productId: string, timestamp: number, aprPeriod?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnFlexibleHistoryRateHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnFlexibleHistoryRateHistoryV1(productId, timestamp, aprPeriod, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnFlexibleHistoryRateHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Flexible Redemption Record
         * @summary Get Flexible Redemption Record(USER_DATA)
         * @param {string} [productId] 
         * @param {string} [redeemId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnFlexibleHistoryRedemptionRecordV1(productId?: string, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnFlexibleHistoryRedemptionRecordV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnFlexibleHistoryRedemptionRecordV1(productId, redeemId, asset, startTime, endTime, current, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnFlexibleHistoryRedemptionRecordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Flexible Rewards History
         * @summary Get Flexible Rewards History(USER_DATA)
         * @param {string} type &#x60;Bonus&#x60; - Bonus tiered APR, &#x60;REALTIME&#x60; Real-time APR, &#x60;REWARDS&#x60; Historical rewards,&#x60;ALL&#x60;(set to default)
         * @param {number} timestamp 
         * @param {string} [productId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnFlexibleHistoryRewardsRecordV1(type: string, timestamp: number, productId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnFlexibleHistoryRewardsRecordV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnFlexibleHistoryRewardsRecordV1(type, timestamp, productId, asset, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnFlexibleHistoryRewardsRecordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Flexible Subscription Record
         * @summary Get Flexible Subscription Record(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [productId] 
         * @param {string} [purchaseId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnFlexibleHistorySubscriptionRecordV1(timestamp: number, productId?: string, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnFlexibleHistorySubscriptionRecordV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnFlexibleHistorySubscriptionRecordV1(timestamp, productId, purchaseId, asset, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnFlexibleHistorySubscriptionRecordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get available Simple Earn flexible product list
         * @summary Get Simple Earn Flexible Product List(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnFlexibleListV1(timestamp: number, asset?: string, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnFlexibleListV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnFlexibleListV1(timestamp, asset, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnFlexibleListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Flexible Personal Left Quota
         * @summary Get Flexible Personal Left Quota(USER_DATA)
         * @param {string} productId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnFlexiblePersonalLeftQuotaV1(productId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnFlexiblePersonalLeftQuotaV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnFlexiblePersonalLeftQuotaV1(productId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnFlexiblePersonalLeftQuotaV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Flexible Product Position
         * @summary Get Flexible Product Position(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [productId] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnFlexiblePositionV1(timestamp: number, asset?: string, productId?: string, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnFlexiblePositionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnFlexiblePositionV1(timestamp, asset, productId, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnFlexiblePositionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Flexible Subscription Preview
         * @summary Get Flexible Subscription Preview(USER_DATA)
         * @param {string} productId 
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnFlexibleSubscriptionPreviewV1(productId: string, amount: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnFlexibleSubscriptionPreviewV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnFlexibleSubscriptionPreviewV1(productId, amount, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnFlexibleSubscriptionPreviewV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Locked Redemption Record
         * @summary Get Locked Redemption Record(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [positionId] 
         * @param {string} [redeemId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnLockedHistoryRedemptionRecordV1(timestamp: number, positionId?: number, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnLockedHistoryRedemptionRecordV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnLockedHistoryRedemptionRecordV1(timestamp, positionId, redeemId, asset, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnLockedHistoryRedemptionRecordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Locked Rewards History
         * @summary Get Locked Rewards History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [positionId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1, Default:1, Max: 1,000
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnLockedHistoryRewardsRecordV1(timestamp: number, positionId?: number, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnLockedHistoryRewardsRecordV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnLockedHistoryRewardsRecordV1(timestamp, positionId, asset, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnLockedHistoryRewardsRecordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Locked Subscription Record
         * @summary Get Locked Subscription Record(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [purchaseId] 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnLockedHistorySubscriptionRecordV1(timestamp: number, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnLockedHistorySubscriptionRecordV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnLockedHistorySubscriptionRecordV1(timestamp, purchaseId, asset, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnLockedHistorySubscriptionRecordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Simple Earn Locked Product List
         * @summary Get Simple Earn Locked Product List(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnLockedListV1(timestamp: number, asset?: string, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnLockedListV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnLockedListV1(timestamp, asset, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnLockedListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Locked Personal Left Quota
         * @summary Get Locked Personal Left Quota(USER_DATA)
         * @param {string} projectId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnLockedPersonalLeftQuotaV1(projectId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnLockedPersonalLeftQuotaV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnLockedPersonalLeftQuotaV1(projectId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnLockedPersonalLeftQuotaV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Locked Product Position
         * @summary Get Locked Product Position
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [positionId] 
         * @param {string} [projectId] 
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnLockedPositionV1(timestamp: number, asset?: string, positionId?: number, projectId?: string, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimpleEarnLockedPositionV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnLockedPositionV1(timestamp, asset, positionId, projectId, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnLockedPositionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Locked Subscription Preview
         * @summary Get Locked Subscription Preview(USER_DATA)
         * @param {string} projectId 
         * @param {string} amount 
         * @param {number} timestamp 
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimpleEarnLockedSubscriptionPreviewV1(projectId: string, amount: string, timestamp: number, autoSubscribe?: boolean, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSimpleEarnLockedSubscriptionPreviewV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimpleEarnLockedSubscriptionPreviewV1(projectId, amount, timestamp, autoSubscribe, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimpleEarnApi.getSimpleEarnLockedSubscriptionPreviewV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SimpleEarnApi - factory interface
 * @export
 */
export const SimpleEarnApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SimpleEarnApiFp(configuration)
    return {
        /**
         * Redeem Flexible Product
         * @summary Redeem Flexible Product(TRADE)
         * @param {SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnFlexibleRedeemV1(requestParameters: SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnFlexibleRedeemV1Resp> {
            return localVarFp.createSimpleEarnFlexibleRedeemV1(requestParameters.productId, requestParameters.timestamp, requestParameters.amount, requestParameters.destAccount, requestParameters.recvWindow, requestParameters.redeemAll, options).then((request) => request(axios, basePath));
        },
        /**
         * Set Flexible Auto Subscribe
         * @summary Set Flexible Auto Subscribe(USER_DATA)
         * @param {SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnFlexibleSetAutoSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnFlexibleSetAutoSubscribeV1Resp> {
            return localVarFp.createSimpleEarnFlexibleSetAutoSubscribeV1(requestParameters.autoSubscribe, requestParameters.productId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscribe Flexible Product
         * @summary Subscribe Flexible Product(TRADE)
         * @param {SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnFlexibleSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnFlexibleSubscribeV1Resp> {
            return localVarFp.createSimpleEarnFlexibleSubscribeV1(requestParameters.amount, requestParameters.productId, requestParameters.timestamp, requestParameters.autoSubscribe, requestParameters.recvWindow, requestParameters.sourceAccount, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeem Locked Product
         * @summary Redeem Locked Product(TRADE)
         * @param {SimpleEarnApiCreateSimpleEarnLockedRedeemV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnLockedRedeemV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnLockedRedeemV1Resp> {
            return localVarFp.createSimpleEarnLockedRedeemV1(requestParameters.positionId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Set locked auto subscribe
         * @summary Set Locked Auto Subscribe(USER_DATA)
         * @param {SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnLockedSetAutoSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnLockedSetAutoSubscribeV1Resp> {
            return localVarFp.createSimpleEarnLockedSetAutoSubscribeV1(requestParameters.autoSubscribe, requestParameters.positionId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Set redeem option for Locked product
         * @summary Set Locked Product Redeem Option(USER_DATA)
         * @param {SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnLockedSetRedeemOptionV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnLockedSetRedeemOptionV1Resp> {
            return localVarFp.createSimpleEarnLockedSetRedeemOptionV1(requestParameters.positionId, requestParameters.redeemTo, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscribe Locked Product
         * @summary Subscribe Locked Product(TRADE)
         * @param {SimpleEarnApiCreateSimpleEarnLockedSubscribeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimpleEarnLockedSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedSubscribeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnLockedSubscribeV1Resp> {
            return localVarFp.createSimpleEarnLockedSubscribeV1(requestParameters.amount, requestParameters.projectId, requestParameters.timestamp, requestParameters.autoSubscribe, requestParameters.recvWindow, requestParameters.redeemTo, requestParameters.sourceAccount, options).then((request) => request(axios, basePath));
        },
        /**
         * Simple Account query
         * @summary Simple Account(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnAccountV1(requestParameters: SimpleEarnApiGetSimpleEarnAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnAccountV1Resp> {
            return localVarFp.getSimpleEarnAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Collateral Record
         * @summary Get Collateral Record(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleHistoryCollateralRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleHistoryCollateralRecordV1Resp> {
            return localVarFp.getSimpleEarnFlexibleHistoryCollateralRecordV1(requestParameters.timestamp, requestParameters.productId, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Rate History
         * @summary Get Rate History(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleHistoryRateHistoryV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleHistoryRateHistoryV1Resp> {
            return localVarFp.getSimpleEarnFlexibleHistoryRateHistoryV1(requestParameters.productId, requestParameters.timestamp, requestParameters.aprPeriod, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Flexible Redemption Record
         * @summary Get Flexible Redemption Record(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleHistoryRedemptionRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleHistoryRedemptionRecordV1Resp> {
            return localVarFp.getSimpleEarnFlexibleHistoryRedemptionRecordV1(requestParameters.productId, requestParameters.redeemId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Flexible Rewards History
         * @summary Get Flexible Rewards History(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleHistoryRewardsRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleHistoryRewardsRecordV1Resp> {
            return localVarFp.getSimpleEarnFlexibleHistoryRewardsRecordV1(requestParameters.type, requestParameters.timestamp, requestParameters.productId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Flexible Subscription Record
         * @summary Get Flexible Subscription Record(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleHistorySubscriptionRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleHistorySubscriptionRecordV1Resp> {
            return localVarFp.getSimpleEarnFlexibleHistorySubscriptionRecordV1(requestParameters.timestamp, requestParameters.productId, requestParameters.purchaseId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get available Simple Earn flexible product list
         * @summary Get Simple Earn Flexible Product List(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnFlexibleListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleListV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleListV1Resp> {
            return localVarFp.getSimpleEarnFlexibleListV1(requestParameters.timestamp, requestParameters.asset, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Flexible Personal Left Quota
         * @summary Get Flexible Personal Left Quota(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnFlexiblePersonalLeftQuotaV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexiblePersonalLeftQuotaV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexiblePersonalLeftQuotaV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexiblePersonalLeftQuotaV1Resp> {
            return localVarFp.getSimpleEarnFlexiblePersonalLeftQuotaV1(requestParameters.productId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Flexible Product Position
         * @summary Get Flexible Product Position(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnFlexiblePositionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexiblePositionV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexiblePositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexiblePositionV1Resp> {
            return localVarFp.getSimpleEarnFlexiblePositionV1(requestParameters.timestamp, requestParameters.asset, requestParameters.productId, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Flexible Subscription Preview
         * @summary Get Flexible Subscription Preview(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleSubscriptionPreviewV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleSubscriptionPreviewV1Resp> {
            return localVarFp.getSimpleEarnFlexibleSubscriptionPreviewV1(requestParameters.productId, requestParameters.amount, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Locked Redemption Record
         * @summary Get Locked Redemption Record(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedHistoryRedemptionRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedHistoryRedemptionRecordV1Resp> {
            return localVarFp.getSimpleEarnLockedHistoryRedemptionRecordV1(requestParameters.timestamp, requestParameters.positionId, requestParameters.redeemId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Locked Rewards History
         * @summary Get Locked Rewards History(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedHistoryRewardsRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedHistoryRewardsRecordV1Resp> {
            return localVarFp.getSimpleEarnLockedHistoryRewardsRecordV1(requestParameters.timestamp, requestParameters.positionId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Locked Subscription Record
         * @summary Get Locked Subscription Record(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedHistorySubscriptionRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedHistorySubscriptionRecordV1Resp> {
            return localVarFp.getSimpleEarnLockedHistorySubscriptionRecordV1(requestParameters.timestamp, requestParameters.purchaseId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Simple Earn Locked Product List
         * @summary Get Simple Earn Locked Product List(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnLockedListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedListV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedListV1Resp> {
            return localVarFp.getSimpleEarnLockedListV1(requestParameters.timestamp, requestParameters.asset, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Locked Personal Left Quota
         * @summary Get Locked Personal Left Quota(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnLockedPersonalLeftQuotaV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedPersonalLeftQuotaV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedPersonalLeftQuotaV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedPersonalLeftQuotaV1Resp> {
            return localVarFp.getSimpleEarnLockedPersonalLeftQuotaV1(requestParameters.projectId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Locked Product Position
         * @summary Get Locked Product Position
         * @param {SimpleEarnApiGetSimpleEarnLockedPositionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedPositionV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedPositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedPositionV1Resp> {
            return localVarFp.getSimpleEarnLockedPositionV1(requestParameters.timestamp, requestParameters.asset, requestParameters.positionId, requestParameters.projectId, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Locked Subscription Preview
         * @summary Get Locked Subscription Preview(USER_DATA)
         * @param {SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimpleEarnLockedSubscriptionPreviewV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSimpleEarnLockedSubscriptionPreviewV1RespItem>> {
            return localVarFp.getSimpleEarnLockedSubscriptionPreviewV1(requestParameters.projectId, requestParameters.amount, requestParameters.timestamp, requestParameters.autoSubscribe, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SimpleEarnApi - interface
 * @export
 * @interface SimpleEarnApi
 */
export interface SimpleEarnApiInterface {
    /**
     * Redeem Flexible Product
     * @summary Redeem Flexible Product(TRADE)
     * @param {SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    createSimpleEarnFlexibleRedeemV1(requestParameters: SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnFlexibleRedeemV1Resp>;

    /**
     * Set Flexible Auto Subscribe
     * @summary Set Flexible Auto Subscribe(USER_DATA)
     * @param {SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    createSimpleEarnFlexibleSetAutoSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnFlexibleSetAutoSubscribeV1Resp>;

    /**
     * Subscribe Flexible Product
     * @summary Subscribe Flexible Product(TRADE)
     * @param {SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    createSimpleEarnFlexibleSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnFlexibleSubscribeV1Resp>;

    /**
     * Redeem Locked Product
     * @summary Redeem Locked Product(TRADE)
     * @param {SimpleEarnApiCreateSimpleEarnLockedRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    createSimpleEarnLockedRedeemV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedRedeemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnLockedRedeemV1Resp>;

    /**
     * Set locked auto subscribe
     * @summary Set Locked Auto Subscribe(USER_DATA)
     * @param {SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    createSimpleEarnLockedSetAutoSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnLockedSetAutoSubscribeV1Resp>;

    /**
     * Set redeem option for Locked product
     * @summary Set Locked Product Redeem Option(USER_DATA)
     * @param {SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    createSimpleEarnLockedSetRedeemOptionV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnLockedSetRedeemOptionV1Resp>;

    /**
     * Subscribe Locked Product
     * @summary Subscribe Locked Product(TRADE)
     * @param {SimpleEarnApiCreateSimpleEarnLockedSubscribeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    createSimpleEarnLockedSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedSubscribeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateSimpleEarnLockedSubscribeV1Resp>;

    /**
     * Simple Account query
     * @summary Simple Account(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnAccountV1(requestParameters: SimpleEarnApiGetSimpleEarnAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnAccountV1Resp>;

    /**
     * Get Collateral Record
     * @summary Get Collateral Record(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnFlexibleHistoryCollateralRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleHistoryCollateralRecordV1Resp>;

    /**
     * Get Rate History
     * @summary Get Rate History(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnFlexibleHistoryRateHistoryV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleHistoryRateHistoryV1Resp>;

    /**
     * Get Flexible Redemption Record
     * @summary Get Flexible Redemption Record(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnFlexibleHistoryRedemptionRecordV1(requestParameters?: SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleHistoryRedemptionRecordV1Resp>;

    /**
     * Get Flexible Rewards History
     * @summary Get Flexible Rewards History(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnFlexibleHistoryRewardsRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleHistoryRewardsRecordV1Resp>;

    /**
     * Get Flexible Subscription Record
     * @summary Get Flexible Subscription Record(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnFlexibleHistorySubscriptionRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleHistorySubscriptionRecordV1Resp>;

    /**
     * Get available Simple Earn flexible product list
     * @summary Get Simple Earn Flexible Product List(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnFlexibleListV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleListV1Resp>;

    /**
     * Get Flexible Personal Left Quota
     * @summary Get Flexible Personal Left Quota(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexiblePersonalLeftQuotaV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnFlexiblePersonalLeftQuotaV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexiblePersonalLeftQuotaV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexiblePersonalLeftQuotaV1Resp>;

    /**
     * Get Flexible Product Position
     * @summary Get Flexible Product Position(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexiblePositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnFlexiblePositionV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexiblePositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexiblePositionV1Resp>;

    /**
     * Get Flexible Subscription Preview
     * @summary Get Flexible Subscription Preview(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnFlexibleSubscriptionPreviewV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnFlexibleSubscriptionPreviewV1Resp>;

    /**
     * Get Locked Redemption Record
     * @summary Get Locked Redemption Record(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnLockedHistoryRedemptionRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedHistoryRedemptionRecordV1Resp>;

    /**
     * Get Locked Rewards History
     * @summary Get Locked Rewards History(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnLockedHistoryRewardsRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedHistoryRewardsRecordV1Resp>;

    /**
     * Get Locked Subscription Record
     * @summary Get Locked Subscription Record(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnLockedHistorySubscriptionRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedHistorySubscriptionRecordV1Resp>;

    /**
     * Get Simple Earn Locked Product List
     * @summary Get Simple Earn Locked Product List(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnLockedListV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedListV1Resp>;

    /**
     * Get Locked Personal Left Quota
     * @summary Get Locked Personal Left Quota(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedPersonalLeftQuotaV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnLockedPersonalLeftQuotaV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedPersonalLeftQuotaV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedPersonalLeftQuotaV1Resp>;

    /**
     * Get Locked Product Position
     * @summary Get Locked Product Position
     * @param {SimpleEarnApiGetSimpleEarnLockedPositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnLockedPositionV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedPositionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetSimpleEarnLockedPositionV1Resp>;

    /**
     * Get Locked Subscription Preview
     * @summary Get Locked Subscription Preview(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApiInterface
     */
    getSimpleEarnLockedSubscriptionPreviewV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSimpleEarnLockedSubscriptionPreviewV1RespItem>>;

}

/**
 * Request parameters for createSimpleEarnFlexibleRedeemV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1Request
 */
export interface SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1Request {
    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1
     */
    readonly productId: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1
     */
    readonly amount?: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1
     */
    readonly destAccount?: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {boolean}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1
     */
    readonly redeemAll?: boolean
}

/**
 * Request parameters for createSimpleEarnFlexibleSetAutoSubscribeV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1Request
 */
export interface SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1Request {
    /**
     * 
     * @type {boolean}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1
     */
    readonly autoSubscribe: boolean

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1
     */
    readonly productId: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSimpleEarnFlexibleSubscribeV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1Request
 */
export interface SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1Request {
    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1
     */
    readonly productId: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {boolean}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1
     */
    readonly autoSubscribe?: boolean

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1
     */
    readonly sourceAccount?: string
}

/**
 * Request parameters for createSimpleEarnLockedRedeemV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiCreateSimpleEarnLockedRedeemV1Request
 */
export interface SimpleEarnApiCreateSimpleEarnLockedRedeemV1Request {
    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedRedeemV1
     */
    readonly positionId: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedRedeemV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedRedeemV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSimpleEarnLockedSetAutoSubscribeV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1Request
 */
export interface SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1Request {
    /**
     * 
     * @type {boolean}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1
     */
    readonly autoSubscribe: boolean

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1
     */
    readonly positionId: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSimpleEarnLockedSetRedeemOptionV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1Request
 */
export interface SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1Request {
    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1
     */
    readonly positionId: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1
     */
    readonly redeemTo: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createSimpleEarnLockedSubscribeV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiCreateSimpleEarnLockedSubscribeV1Request
 */
export interface SimpleEarnApiCreateSimpleEarnLockedSubscribeV1Request {
    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSubscribeV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSubscribeV1
     */
    readonly projectId: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSubscribeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {boolean}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSubscribeV1
     */
    readonly autoSubscribe?: boolean

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSubscribeV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSubscribeV1
     */
    readonly redeemTo?: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiCreateSimpleEarnLockedSubscribeV1
     */
    readonly sourceAccount?: string
}

/**
 * Request parameters for getSimpleEarnAccountV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnAccountV1Request
 */
export interface SimpleEarnApiGetSimpleEarnAccountV1Request {
    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnAccountV1
     */
    readonly timestamp: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnFlexibleHistoryCollateralRecordV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1Request
 */
export interface SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1Request {
    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1
     */
    readonly productId?: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1
     */
    readonly size?: number

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnFlexibleHistoryRateHistoryV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1Request
 */
export interface SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1Request {
    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1
     */
    readonly productId: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1
     */
    readonly timestamp: number

    /**
     * &amp;#34;DAY&amp;#34;,&amp;#34;YEAR&amp;#34;,default&amp;#34;DAY&amp;#34;
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1
     */
    readonly aprPeriod?: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1
     */
    readonly size?: number

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnFlexibleHistoryRedemptionRecordV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1Request
 */
export interface SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1Request {
    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1
     */
    readonly productId?: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1
     */
    readonly redeemId?: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1
     */
    readonly endTime?: number

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1
     */
    readonly size?: number
}

/**
 * Request parameters for getSimpleEarnFlexibleHistoryRewardsRecordV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1Request
 */
export interface SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1Request {
    /**
     * &#x60;Bonus&#x60; - Bonus tiered APR, &#x60;REALTIME&#x60; Real-time APR, &#x60;REWARDS&#x60; Historical rewards,&#x60;ALL&#x60;(set to default)
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1
     */
    readonly type: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1
     */
    readonly productId?: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1
     */
    readonly endTime?: number

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnFlexibleHistorySubscriptionRecordV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1Request
 */
export interface SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1Request {
    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1
     */
    readonly productId?: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1
     */
    readonly purchaseId?: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1
     */
    readonly endTime?: number

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnFlexibleListV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnFlexibleListV1Request
 */
export interface SimpleEarnApiGetSimpleEarnFlexibleListV1Request {
    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleListV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleListV1
     */
    readonly asset?: string

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleListV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleListV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnFlexiblePersonalLeftQuotaV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnFlexiblePersonalLeftQuotaV1Request
 */
export interface SimpleEarnApiGetSimpleEarnFlexiblePersonalLeftQuotaV1Request {
    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexiblePersonalLeftQuotaV1
     */
    readonly productId: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexiblePersonalLeftQuotaV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexiblePersonalLeftQuotaV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnFlexiblePositionV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnFlexiblePositionV1Request
 */
export interface SimpleEarnApiGetSimpleEarnFlexiblePositionV1Request {
    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexiblePositionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexiblePositionV1
     */
    readonly asset?: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexiblePositionV1
     */
    readonly productId?: string

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexiblePositionV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexiblePositionV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexiblePositionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnFlexibleSubscriptionPreviewV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1Request
 */
export interface SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1Request {
    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1
     */
    readonly productId: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1
     */
    readonly amount: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnLockedHistoryRedemptionRecordV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1Request
 */
export interface SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1Request {
    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1
     */
    readonly positionId?: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1
     */
    readonly redeemId?: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1
     */
    readonly endTime?: number

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnLockedHistoryRewardsRecordV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1Request
 */
export interface SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1Request {
    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1
     */
    readonly positionId?: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1
     */
    readonly endTime?: number

    /**
     * Currently querying the page. Start from 1, Default:1, Max: 1,000
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnLockedHistorySubscriptionRecordV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1Request
 */
export interface SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1Request {
    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1
     */
    readonly purchaseId?: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1
     */
    readonly endTime?: number

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnLockedListV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnLockedListV1Request
 */
export interface SimpleEarnApiGetSimpleEarnLockedListV1Request {
    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedListV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnLockedListV1
     */
    readonly asset?: string

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedListV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedListV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnLockedPersonalLeftQuotaV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnLockedPersonalLeftQuotaV1Request
 */
export interface SimpleEarnApiGetSimpleEarnLockedPersonalLeftQuotaV1Request {
    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnLockedPersonalLeftQuotaV1
     */
    readonly projectId: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedPersonalLeftQuotaV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedPersonalLeftQuotaV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnLockedPositionV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnLockedPositionV1Request
 */
export interface SimpleEarnApiGetSimpleEarnLockedPositionV1Request {
    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedPositionV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnLockedPositionV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedPositionV1
     */
    readonly positionId?: number

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnLockedPositionV1
     */
    readonly projectId?: string

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedPositionV1
     */
    readonly current?: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedPositionV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedPositionV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSimpleEarnLockedSubscriptionPreviewV1 operation in SimpleEarnApi.
 * @export
 * @interface SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1Request
 */
export interface SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1Request {
    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1
     */
    readonly projectId: string

    /**
     * 
     * @type {string}
     * @memberof SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1
     */
    readonly amount: string

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1
     */
    readonly timestamp: number

    /**
     * true or false, default true.
     * @type {boolean}
     * @memberof SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1
     */
    readonly autoSubscribe?: boolean

    /**
     * 
     * @type {number}
     * @memberof SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1
     */
    readonly recvWindow?: number
}

/**
 * SimpleEarnApi - object-oriented interface
 * @export
 * @class SimpleEarnApi
 * @extends {BaseAPI}
 */
export class SimpleEarnApi extends BaseAPI implements SimpleEarnApiInterface {
    /**
     * Redeem Flexible Product
     * @summary Redeem Flexible Product(TRADE)
     * @param {SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public createSimpleEarnFlexibleRedeemV1(requestParameters: SimpleEarnApiCreateSimpleEarnFlexibleRedeemV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).createSimpleEarnFlexibleRedeemV1(requestParameters.productId, requestParameters.timestamp, requestParameters.amount, requestParameters.destAccount, requestParameters.recvWindow, requestParameters.redeemAll, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set Flexible Auto Subscribe
     * @summary Set Flexible Auto Subscribe(USER_DATA)
     * @param {SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public createSimpleEarnFlexibleSetAutoSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnFlexibleSetAutoSubscribeV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).createSimpleEarnFlexibleSetAutoSubscribeV1(requestParameters.autoSubscribe, requestParameters.productId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Subscribe Flexible Product
     * @summary Subscribe Flexible Product(TRADE)
     * @param {SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public createSimpleEarnFlexibleSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnFlexibleSubscribeV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).createSimpleEarnFlexibleSubscribeV1(requestParameters.amount, requestParameters.productId, requestParameters.timestamp, requestParameters.autoSubscribe, requestParameters.recvWindow, requestParameters.sourceAccount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redeem Locked Product
     * @summary Redeem Locked Product(TRADE)
     * @param {SimpleEarnApiCreateSimpleEarnLockedRedeemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public createSimpleEarnLockedRedeemV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedRedeemV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).createSimpleEarnLockedRedeemV1(requestParameters.positionId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set locked auto subscribe
     * @summary Set Locked Auto Subscribe(USER_DATA)
     * @param {SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public createSimpleEarnLockedSetAutoSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedSetAutoSubscribeV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).createSimpleEarnLockedSetAutoSubscribeV1(requestParameters.autoSubscribe, requestParameters.positionId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set redeem option for Locked product
     * @summary Set Locked Product Redeem Option(USER_DATA)
     * @param {SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public createSimpleEarnLockedSetRedeemOptionV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedSetRedeemOptionV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).createSimpleEarnLockedSetRedeemOptionV1(requestParameters.positionId, requestParameters.redeemTo, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Subscribe Locked Product
     * @summary Subscribe Locked Product(TRADE)
     * @param {SimpleEarnApiCreateSimpleEarnLockedSubscribeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public createSimpleEarnLockedSubscribeV1(requestParameters: SimpleEarnApiCreateSimpleEarnLockedSubscribeV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).createSimpleEarnLockedSubscribeV1(requestParameters.amount, requestParameters.projectId, requestParameters.timestamp, requestParameters.autoSubscribe, requestParameters.recvWindow, requestParameters.redeemTo, requestParameters.sourceAccount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Simple Account query
     * @summary Simple Account(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnAccountV1(requestParameters: SimpleEarnApiGetSimpleEarnAccountV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Collateral Record
     * @summary Get Collateral Record(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnFlexibleHistoryCollateralRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistoryCollateralRecordV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnFlexibleHistoryCollateralRecordV1(requestParameters.timestamp, requestParameters.productId, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Rate History
     * @summary Get Rate History(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnFlexibleHistoryRateHistoryV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistoryRateHistoryV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnFlexibleHistoryRateHistoryV1(requestParameters.productId, requestParameters.timestamp, requestParameters.aprPeriod, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Flexible Redemption Record
     * @summary Get Flexible Redemption Record(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnFlexibleHistoryRedemptionRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistoryRedemptionRecordV1Request = {}, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnFlexibleHistoryRedemptionRecordV1(requestParameters.productId, requestParameters.redeemId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Flexible Rewards History
     * @summary Get Flexible Rewards History(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnFlexibleHistoryRewardsRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistoryRewardsRecordV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnFlexibleHistoryRewardsRecordV1(requestParameters.type, requestParameters.timestamp, requestParameters.productId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Flexible Subscription Record
     * @summary Get Flexible Subscription Record(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnFlexibleHistorySubscriptionRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleHistorySubscriptionRecordV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnFlexibleHistorySubscriptionRecordV1(requestParameters.timestamp, requestParameters.productId, requestParameters.purchaseId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get available Simple Earn flexible product list
     * @summary Get Simple Earn Flexible Product List(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnFlexibleListV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleListV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnFlexibleListV1(requestParameters.timestamp, requestParameters.asset, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Flexible Personal Left Quota
     * @summary Get Flexible Personal Left Quota(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexiblePersonalLeftQuotaV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnFlexiblePersonalLeftQuotaV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexiblePersonalLeftQuotaV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnFlexiblePersonalLeftQuotaV1(requestParameters.productId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Flexible Product Position
     * @summary Get Flexible Product Position(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexiblePositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnFlexiblePositionV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexiblePositionV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnFlexiblePositionV1(requestParameters.timestamp, requestParameters.asset, requestParameters.productId, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Flexible Subscription Preview
     * @summary Get Flexible Subscription Preview(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnFlexibleSubscriptionPreviewV1(requestParameters: SimpleEarnApiGetSimpleEarnFlexibleSubscriptionPreviewV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnFlexibleSubscriptionPreviewV1(requestParameters.productId, requestParameters.amount, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Locked Redemption Record
     * @summary Get Locked Redemption Record(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnLockedHistoryRedemptionRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedHistoryRedemptionRecordV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnLockedHistoryRedemptionRecordV1(requestParameters.timestamp, requestParameters.positionId, requestParameters.redeemId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Locked Rewards History
     * @summary Get Locked Rewards History(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnLockedHistoryRewardsRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedHistoryRewardsRecordV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnLockedHistoryRewardsRecordV1(requestParameters.timestamp, requestParameters.positionId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Locked Subscription Record
     * @summary Get Locked Subscription Record(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnLockedHistorySubscriptionRecordV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedHistorySubscriptionRecordV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnLockedHistorySubscriptionRecordV1(requestParameters.timestamp, requestParameters.purchaseId, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Simple Earn Locked Product List
     * @summary Get Simple Earn Locked Product List(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnLockedListV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedListV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnLockedListV1(requestParameters.timestamp, requestParameters.asset, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Locked Personal Left Quota
     * @summary Get Locked Personal Left Quota(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedPersonalLeftQuotaV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnLockedPersonalLeftQuotaV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedPersonalLeftQuotaV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnLockedPersonalLeftQuotaV1(requestParameters.projectId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Locked Product Position
     * @summary Get Locked Product Position
     * @param {SimpleEarnApiGetSimpleEarnLockedPositionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnLockedPositionV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedPositionV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnLockedPositionV1(requestParameters.timestamp, requestParameters.asset, requestParameters.positionId, requestParameters.projectId, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Locked Subscription Preview
     * @summary Get Locked Subscription Preview(USER_DATA)
     * @param {SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public getSimpleEarnLockedSubscriptionPreviewV1(requestParameters: SimpleEarnApiGetSimpleEarnLockedSubscriptionPreviewV1Request, options?: RawAxiosRequestConfig) {
        return SimpleEarnApiFp(this.configuration).getSimpleEarnLockedSubscriptionPreviewV1(requestParameters.projectId, requestParameters.amount, requestParameters.timestamp, requestParameters.autoSubscribe, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

