/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreateLoanVipBorrowV1Resp } from '../model';
// @ts-ignore
import type { CreateLoanVipRenewV1Resp } from '../model';
// @ts-ignore
import type { CreateLoanVipRepayV1Resp } from '../model';
// @ts-ignore
import type { GetLoanVipAccruedInterestV1Resp } from '../model';
// @ts-ignore
import type { GetLoanVipCollateralAccountV1Resp } from '../model';
// @ts-ignore
import type { GetLoanVipCollateralDataV1Resp } from '../model';
// @ts-ignore
import type { GetLoanVipInterestRateHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetLoanVipLoanableDataV1Resp } from '../model';
// @ts-ignore
import type { GetLoanVipOngoingOrdersV1Resp } from '../model';
// @ts-ignore
import type { GetLoanVipRepayHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetLoanVipRequestDataV1Resp } from '../model';
// @ts-ignore
import type { GetLoanVipRequestInterestRateV1RespItem } from '../model';
/**
 * VipLoanApi - axios parameter creator
 * @export
 */
export const VipLoanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * VIP loan is available for VIP users only.
         * @summary VIP Loan Borrow(TRADE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanVipBorrowV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/loan/vip/borrow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VIP loan is available for VIP users only.
         * @summary VIP Loan Renew(TRADE)
         * @param {number} loanTerm 
         * @param {number} orderId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanVipRenewV1: async (loanTerm: number, orderId: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanTerm' is not null or undefined
            assertParamExists('createLoanVipRenewV1', 'loanTerm', loanTerm)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('createLoanVipRenewV1', 'orderId', orderId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createLoanVipRenewV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/vip/renew`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (loanTerm !== undefined) { 
                localVarFormParams.set('loanTerm', loanTerm as any);
            }
    
            if (orderId !== undefined) { 
                localVarFormParams.set('orderId', orderId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VIP loan is available for VIP users only.
         * @summary VIP Loan Repay(TRADE)
         * @param {string} amount 
         * @param {number} orderId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanVipRepayV1: async (amount: string, orderId: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createLoanVipRepayV1', 'amount', amount)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('createLoanVipRepayV1', 'orderId', orderId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createLoanVipRepayV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/vip/repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (orderId !== undefined) { 
                localVarFormParams.set('orderId', orderId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GET /sapi/v1/loan/vip/accruedInterest
         * @summary Get VIP Loan Accrued Interest(USER_DATA)
         * @param {number} recvWindow 
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {string} [loanCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipAccruedInterestV1: async (recvWindow: number, timestamp: number, orderId?: number, loanCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recvWindow' is not null or undefined
            assertParamExists('getLoanVipAccruedInterestV1', 'recvWindow', recvWindow)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanVipAccruedInterestV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/vip/accruedInterest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VIP loan is available for VIP users only
         * @summary Check VIP Loan Collateral Account (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {number} [collateralAccountId] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipCollateralAccountV1: async (timestamp: number, orderId?: number, collateralAccountId?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanVipCollateralAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/vip/collateral/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (collateralAccountId !== undefined) {
                localVarQueryParameter['collateralAccountId'] = collateralAccountId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Collateral Asset Data
         * @summary Get Collateral Asset Data(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [collateralCoin] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipCollateralDataV1: async (timestamp: number, collateralCoin?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanVipCollateralDataV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/vip/collateral/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get VIP Loan Interest Rate History
         * @summary Get VIP Loan Interest Rate History (USER_DATA)
         * @param {string} coin 
         * @param {number} recvWindow 
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Check current querying page, start from 1. Default：1；Max：1000.
         * @param {number} [limit] Default：10; Max：100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipInterestRateHistoryV1: async (coin: string, recvWindow: number, timestamp: number, startTime?: number, endTime?: number, current?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('getLoanVipInterestRateHistoryV1', 'coin', coin)
            // verify required parameter 'recvWindow' is not null or undefined
            assertParamExists('getLoanVipInterestRateHistoryV1', 'recvWindow', recvWindow)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanVipInterestRateHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/vip/interestRateHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.
         * @summary Get Loanable Assets Data(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {number} [vipLevel] default:user&amp;#39;s vip level
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipLoanableDataV1: async (timestamp: number, loanCoin?: string, vipLevel?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanVipLoanableDataV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/vip/loanable/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (vipLevel !== undefined) {
                localVarQueryParameter['vipLevel'] = vipLevel;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VIP loan is available for VIP users only.
         * @summary Get VIP Loan Ongoing Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {number} [collateralAccountId] 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [current] Currently querying page. Start from 1, Default:1, Max: 1000.
         * @param {number} [limit] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipOngoingOrdersV1: async (timestamp: number, orderId?: number, collateralAccountId?: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanVipOngoingOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/vip/ongoing/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (collateralAccountId !== undefined) {
                localVarQueryParameter['collateralAccountId'] = collateralAccountId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GET /sapi/v1/loan/vip/repay/history
         * @summary Get VIP Loan Repayment History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {string} [loanCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1, Default:1, Max: 1000
         * @param {number} [limit] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipRepayHistoryV1: async (timestamp: number, orderId?: number, loanCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanVipRepayHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/vip/repay/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Application Status
         * @summary Query Application Status(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [current] Currently querying page. Start from 1, Default:1, Max: 1000
         * @param {number} [limit] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipRequestDataV1: async (timestamp: number, current?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanVipRequestDataV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/vip/request/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Borrow Interest Rate
         * @summary Get Borrow Interest Rate(USER_DATA)
         * @param {string} loanCoin Max 10 assets, Multiple split by &amp;#34;,&amp;#34;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipRequestInterestRateV1: async (loanCoin: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('getLoanVipRequestInterestRateV1', 'loanCoin', loanCoin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanVipRequestInterestRateV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/vip/request/interestRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VipLoanApi - functional programming interface
 * @export
 */
export const VipLoanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VipLoanApiAxiosParamCreator(configuration)
    return {
        /**
         * VIP loan is available for VIP users only.
         * @summary VIP Loan Borrow(TRADE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLoanVipBorrowV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoanVipBorrowV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLoanVipBorrowV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.createLoanVipBorrowV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * VIP loan is available for VIP users only.
         * @summary VIP Loan Renew(TRADE)
         * @param {number} loanTerm 
         * @param {number} orderId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLoanVipRenewV1(loanTerm: number, orderId: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoanVipRenewV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLoanVipRenewV1(loanTerm, orderId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.createLoanVipRenewV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * VIP loan is available for VIP users only.
         * @summary VIP Loan Repay(TRADE)
         * @param {string} amount 
         * @param {number} orderId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLoanVipRepayV1(amount: string, orderId: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoanVipRepayV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLoanVipRepayV1(amount, orderId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.createLoanVipRepayV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * GET /sapi/v1/loan/vip/accruedInterest
         * @summary Get VIP Loan Accrued Interest(USER_DATA)
         * @param {number} recvWindow 
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {string} [loanCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanVipAccruedInterestV1(recvWindow: number, timestamp: number, orderId?: number, loanCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanVipAccruedInterestV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanVipAccruedInterestV1(recvWindow, timestamp, orderId, loanCoin, startTime, endTime, current, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.getLoanVipAccruedInterestV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * VIP loan is available for VIP users only
         * @summary Check VIP Loan Collateral Account (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {number} [collateralAccountId] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanVipCollateralAccountV1(timestamp: number, orderId?: number, collateralAccountId?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanVipCollateralAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanVipCollateralAccountV1(timestamp, orderId, collateralAccountId, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.getLoanVipCollateralAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Collateral Asset Data
         * @summary Get Collateral Asset Data(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [collateralCoin] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanVipCollateralDataV1(timestamp: number, collateralCoin?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanVipCollateralDataV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanVipCollateralDataV1(timestamp, collateralCoin, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.getLoanVipCollateralDataV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get VIP Loan Interest Rate History
         * @summary Get VIP Loan Interest Rate History (USER_DATA)
         * @param {string} coin 
         * @param {number} recvWindow 
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Check current querying page, start from 1. Default：1；Max：1000.
         * @param {number} [limit] Default：10; Max：100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanVipInterestRateHistoryV1(coin: string, recvWindow: number, timestamp: number, startTime?: number, endTime?: number, current?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanVipInterestRateHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanVipInterestRateHistoryV1(coin, recvWindow, timestamp, startTime, endTime, current, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.getLoanVipInterestRateHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.
         * @summary Get Loanable Assets Data(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {number} [vipLevel] default:user&amp;#39;s vip level
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanVipLoanableDataV1(timestamp: number, loanCoin?: string, vipLevel?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanVipLoanableDataV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanVipLoanableDataV1(timestamp, loanCoin, vipLevel, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.getLoanVipLoanableDataV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * VIP loan is available for VIP users only.
         * @summary Get VIP Loan Ongoing Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {number} [collateralAccountId] 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [current] Currently querying page. Start from 1, Default:1, Max: 1000.
         * @param {number} [limit] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanVipOngoingOrdersV1(timestamp: number, orderId?: number, collateralAccountId?: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanVipOngoingOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanVipOngoingOrdersV1(timestamp, orderId, collateralAccountId, loanCoin, collateralCoin, current, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.getLoanVipOngoingOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * GET /sapi/v1/loan/vip/repay/history
         * @summary Get VIP Loan Repayment History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {string} [loanCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1, Default:1, Max: 1000
         * @param {number} [limit] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanVipRepayHistoryV1(timestamp: number, orderId?: number, loanCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanVipRepayHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanVipRepayHistoryV1(timestamp, orderId, loanCoin, startTime, endTime, current, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.getLoanVipRepayHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Application Status
         * @summary Query Application Status(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [current] Currently querying page. Start from 1, Default:1, Max: 1000
         * @param {number} [limit] Default: 10, Max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanVipRequestDataV1(timestamp: number, current?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanVipRequestDataV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanVipRequestDataV1(timestamp, current, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.getLoanVipRequestDataV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Borrow Interest Rate
         * @summary Get Borrow Interest Rate(USER_DATA)
         * @param {string} loanCoin Max 10 assets, Multiple split by &amp;#34;,&amp;#34;
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanVipRequestInterestRateV1(loanCoin: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLoanVipRequestInterestRateV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanVipRequestInterestRateV1(loanCoin, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VipLoanApi.getLoanVipRequestInterestRateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VipLoanApi - factory interface
 * @export
 */
export const VipLoanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VipLoanApiFp(configuration)
    return {
        /**
         * VIP loan is available for VIP users only.
         * @summary VIP Loan Borrow(TRADE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanVipBorrowV1(options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanVipBorrowV1Resp> {
            return localVarFp.createLoanVipBorrowV1(options).then((request) => request(axios, basePath));
        },
        /**
         * VIP loan is available for VIP users only.
         * @summary VIP Loan Renew(TRADE)
         * @param {VipLoanApiCreateLoanVipRenewV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanVipRenewV1(requestParameters: VipLoanApiCreateLoanVipRenewV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanVipRenewV1Resp> {
            return localVarFp.createLoanVipRenewV1(requestParameters.loanTerm, requestParameters.orderId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * VIP loan is available for VIP users only.
         * @summary VIP Loan Repay(TRADE)
         * @param {VipLoanApiCreateLoanVipRepayV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanVipRepayV1(requestParameters: VipLoanApiCreateLoanVipRepayV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanVipRepayV1Resp> {
            return localVarFp.createLoanVipRepayV1(requestParameters.amount, requestParameters.orderId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * GET /sapi/v1/loan/vip/accruedInterest
         * @summary Get VIP Loan Accrued Interest(USER_DATA)
         * @param {VipLoanApiGetLoanVipAccruedInterestV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipAccruedInterestV1(requestParameters: VipLoanApiGetLoanVipAccruedInterestV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipAccruedInterestV1Resp> {
            return localVarFp.getLoanVipAccruedInterestV1(requestParameters.recvWindow, requestParameters.timestamp, requestParameters.orderId, requestParameters.loanCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * VIP loan is available for VIP users only
         * @summary Check VIP Loan Collateral Account (USER_DATA)
         * @param {VipLoanApiGetLoanVipCollateralAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipCollateralAccountV1(requestParameters: VipLoanApiGetLoanVipCollateralAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipCollateralAccountV1Resp> {
            return localVarFp.getLoanVipCollateralAccountV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.collateralAccountId, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Collateral Asset Data
         * @summary Get Collateral Asset Data(USER_DATA)
         * @param {VipLoanApiGetLoanVipCollateralDataV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipCollateralDataV1(requestParameters: VipLoanApiGetLoanVipCollateralDataV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipCollateralDataV1Resp> {
            return localVarFp.getLoanVipCollateralDataV1(requestParameters.timestamp, requestParameters.collateralCoin, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get VIP Loan Interest Rate History
         * @summary Get VIP Loan Interest Rate History (USER_DATA)
         * @param {VipLoanApiGetLoanVipInterestRateHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipInterestRateHistoryV1(requestParameters: VipLoanApiGetLoanVipInterestRateHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipInterestRateHistoryV1Resp> {
            return localVarFp.getLoanVipInterestRateHistoryV1(requestParameters.coin, requestParameters.recvWindow, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.
         * @summary Get Loanable Assets Data(USER_DATA)
         * @param {VipLoanApiGetLoanVipLoanableDataV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipLoanableDataV1(requestParameters: VipLoanApiGetLoanVipLoanableDataV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipLoanableDataV1Resp> {
            return localVarFp.getLoanVipLoanableDataV1(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.vipLevel, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * VIP loan is available for VIP users only.
         * @summary Get VIP Loan Ongoing Orders(USER_DATA)
         * @param {VipLoanApiGetLoanVipOngoingOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipOngoingOrdersV1(requestParameters: VipLoanApiGetLoanVipOngoingOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipOngoingOrdersV1Resp> {
            return localVarFp.getLoanVipOngoingOrdersV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.collateralAccountId, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * GET /sapi/v1/loan/vip/repay/history
         * @summary Get VIP Loan Repayment History(USER_DATA)
         * @param {VipLoanApiGetLoanVipRepayHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipRepayHistoryV1(requestParameters: VipLoanApiGetLoanVipRepayHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipRepayHistoryV1Resp> {
            return localVarFp.getLoanVipRepayHistoryV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.loanCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Application Status
         * @summary Query Application Status(USER_DATA)
         * @param {VipLoanApiGetLoanVipRequestDataV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipRequestDataV1(requestParameters: VipLoanApiGetLoanVipRequestDataV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipRequestDataV1Resp> {
            return localVarFp.getLoanVipRequestDataV1(requestParameters.timestamp, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Borrow Interest Rate
         * @summary Get Borrow Interest Rate(USER_DATA)
         * @param {VipLoanApiGetLoanVipRequestInterestRateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanVipRequestInterestRateV1(requestParameters: VipLoanApiGetLoanVipRequestInterestRateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLoanVipRequestInterestRateV1RespItem>> {
            return localVarFp.getLoanVipRequestInterestRateV1(requestParameters.loanCoin, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VipLoanApi - interface
 * @export
 * @interface VipLoanApi
 */
export interface VipLoanApiInterface {
    /**
     * VIP loan is available for VIP users only.
     * @summary VIP Loan Borrow(TRADE)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    createLoanVipBorrowV1(options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanVipBorrowV1Resp>;

    /**
     * VIP loan is available for VIP users only.
     * @summary VIP Loan Renew(TRADE)
     * @param {VipLoanApiCreateLoanVipRenewV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    createLoanVipRenewV1(requestParameters: VipLoanApiCreateLoanVipRenewV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanVipRenewV1Resp>;

    /**
     * VIP loan is available for VIP users only.
     * @summary VIP Loan Repay(TRADE)
     * @param {VipLoanApiCreateLoanVipRepayV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    createLoanVipRepayV1(requestParameters: VipLoanApiCreateLoanVipRepayV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanVipRepayV1Resp>;

    /**
     * GET /sapi/v1/loan/vip/accruedInterest
     * @summary Get VIP Loan Accrued Interest(USER_DATA)
     * @param {VipLoanApiGetLoanVipAccruedInterestV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    getLoanVipAccruedInterestV1(requestParameters: VipLoanApiGetLoanVipAccruedInterestV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipAccruedInterestV1Resp>;

    /**
     * VIP loan is available for VIP users only
     * @summary Check VIP Loan Collateral Account (USER_DATA)
     * @param {VipLoanApiGetLoanVipCollateralAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    getLoanVipCollateralAccountV1(requestParameters: VipLoanApiGetLoanVipCollateralAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipCollateralAccountV1Resp>;

    /**
     * Get Collateral Asset Data
     * @summary Get Collateral Asset Data(USER_DATA)
     * @param {VipLoanApiGetLoanVipCollateralDataV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    getLoanVipCollateralDataV1(requestParameters: VipLoanApiGetLoanVipCollateralDataV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipCollateralDataV1Resp>;

    /**
     * Get VIP Loan Interest Rate History
     * @summary Get VIP Loan Interest Rate History (USER_DATA)
     * @param {VipLoanApiGetLoanVipInterestRateHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    getLoanVipInterestRateHistoryV1(requestParameters: VipLoanApiGetLoanVipInterestRateHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipInterestRateHistoryV1Resp>;

    /**
     * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.
     * @summary Get Loanable Assets Data(USER_DATA)
     * @param {VipLoanApiGetLoanVipLoanableDataV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    getLoanVipLoanableDataV1(requestParameters: VipLoanApiGetLoanVipLoanableDataV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipLoanableDataV1Resp>;

    /**
     * VIP loan is available for VIP users only.
     * @summary Get VIP Loan Ongoing Orders(USER_DATA)
     * @param {VipLoanApiGetLoanVipOngoingOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    getLoanVipOngoingOrdersV1(requestParameters: VipLoanApiGetLoanVipOngoingOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipOngoingOrdersV1Resp>;

    /**
     * GET /sapi/v1/loan/vip/repay/history
     * @summary Get VIP Loan Repayment History(USER_DATA)
     * @param {VipLoanApiGetLoanVipRepayHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    getLoanVipRepayHistoryV1(requestParameters: VipLoanApiGetLoanVipRepayHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipRepayHistoryV1Resp>;

    /**
     * Query Application Status
     * @summary Query Application Status(USER_DATA)
     * @param {VipLoanApiGetLoanVipRequestDataV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    getLoanVipRequestDataV1(requestParameters: VipLoanApiGetLoanVipRequestDataV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanVipRequestDataV1Resp>;

    /**
     * Get Borrow Interest Rate
     * @summary Get Borrow Interest Rate(USER_DATA)
     * @param {VipLoanApiGetLoanVipRequestInterestRateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApiInterface
     */
    getLoanVipRequestInterestRateV1(requestParameters: VipLoanApiGetLoanVipRequestInterestRateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLoanVipRequestInterestRateV1RespItem>>;

}

/**
 * Request parameters for createLoanVipRenewV1 operation in VipLoanApi.
 * @export
 * @interface VipLoanApiCreateLoanVipRenewV1Request
 */
export interface VipLoanApiCreateLoanVipRenewV1Request {
    /**
     * 
     * @type {number}
     * @memberof VipLoanApiCreateLoanVipRenewV1
     */
    readonly loanTerm: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiCreateLoanVipRenewV1
     */
    readonly orderId: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiCreateLoanVipRenewV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiCreateLoanVipRenewV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createLoanVipRepayV1 operation in VipLoanApi.
 * @export
 * @interface VipLoanApiCreateLoanVipRepayV1Request
 */
export interface VipLoanApiCreateLoanVipRepayV1Request {
    /**
     * 
     * @type {string}
     * @memberof VipLoanApiCreateLoanVipRepayV1
     */
    readonly amount: string

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiCreateLoanVipRepayV1
     */
    readonly orderId: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiCreateLoanVipRepayV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiCreateLoanVipRepayV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanVipAccruedInterestV1 operation in VipLoanApi.
 * @export
 * @interface VipLoanApiGetLoanVipAccruedInterestV1Request
 */
export interface VipLoanApiGetLoanVipAccruedInterestV1Request {
    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipAccruedInterestV1
     */
    readonly recvWindow: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipAccruedInterestV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipAccruedInterestV1
     */
    readonly orderId?: number

    /**
     * 
     * @type {string}
     * @memberof VipLoanApiGetLoanVipAccruedInterestV1
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipAccruedInterestV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipAccruedInterestV1
     */
    readonly endTime?: number

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof VipLoanApiGetLoanVipAccruedInterestV1
     */
    readonly current?: number

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof VipLoanApiGetLoanVipAccruedInterestV1
     */
    readonly limit?: number
}

/**
 * Request parameters for getLoanVipCollateralAccountV1 operation in VipLoanApi.
 * @export
 * @interface VipLoanApiGetLoanVipCollateralAccountV1Request
 */
export interface VipLoanApiGetLoanVipCollateralAccountV1Request {
    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipCollateralAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipCollateralAccountV1
     */
    readonly orderId?: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipCollateralAccountV1
     */
    readonly collateralAccountId?: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipCollateralAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanVipCollateralDataV1 operation in VipLoanApi.
 * @export
 * @interface VipLoanApiGetLoanVipCollateralDataV1Request
 */
export interface VipLoanApiGetLoanVipCollateralDataV1Request {
    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipCollateralDataV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof VipLoanApiGetLoanVipCollateralDataV1
     */
    readonly collateralCoin?: string

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipCollateralDataV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanVipInterestRateHistoryV1 operation in VipLoanApi.
 * @export
 * @interface VipLoanApiGetLoanVipInterestRateHistoryV1Request
 */
export interface VipLoanApiGetLoanVipInterestRateHistoryV1Request {
    /**
     * 
     * @type {string}
     * @memberof VipLoanApiGetLoanVipInterestRateHistoryV1
     */
    readonly coin: string

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipInterestRateHistoryV1
     */
    readonly recvWindow: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipInterestRateHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipInterestRateHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipInterestRateHistoryV1
     */
    readonly endTime?: number

    /**
     * Check current querying page, start from 1. Default：1；Max：1000.
     * @type {number}
     * @memberof VipLoanApiGetLoanVipInterestRateHistoryV1
     */
    readonly current?: number

    /**
     * Default：10; Max：100.
     * @type {number}
     * @memberof VipLoanApiGetLoanVipInterestRateHistoryV1
     */
    readonly limit?: number
}

/**
 * Request parameters for getLoanVipLoanableDataV1 operation in VipLoanApi.
 * @export
 * @interface VipLoanApiGetLoanVipLoanableDataV1Request
 */
export interface VipLoanApiGetLoanVipLoanableDataV1Request {
    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipLoanableDataV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof VipLoanApiGetLoanVipLoanableDataV1
     */
    readonly loanCoin?: string

    /**
     * default:user&amp;#39;s vip level
     * @type {number}
     * @memberof VipLoanApiGetLoanVipLoanableDataV1
     */
    readonly vipLevel?: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipLoanableDataV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanVipOngoingOrdersV1 operation in VipLoanApi.
 * @export
 * @interface VipLoanApiGetLoanVipOngoingOrdersV1Request
 */
export interface VipLoanApiGetLoanVipOngoingOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipOngoingOrdersV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipOngoingOrdersV1
     */
    readonly orderId?: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipOngoingOrdersV1
     */
    readonly collateralAccountId?: number

    /**
     * 
     * @type {string}
     * @memberof VipLoanApiGetLoanVipOngoingOrdersV1
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {string}
     * @memberof VipLoanApiGetLoanVipOngoingOrdersV1
     */
    readonly collateralCoin?: string

    /**
     * Currently querying page. Start from 1, Default:1, Max: 1000.
     * @type {number}
     * @memberof VipLoanApiGetLoanVipOngoingOrdersV1
     */
    readonly current?: number

    /**
     * Default: 10, Max: 100
     * @type {number}
     * @memberof VipLoanApiGetLoanVipOngoingOrdersV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipOngoingOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanVipRepayHistoryV1 operation in VipLoanApi.
 * @export
 * @interface VipLoanApiGetLoanVipRepayHistoryV1Request
 */
export interface VipLoanApiGetLoanVipRepayHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRepayHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRepayHistoryV1
     */
    readonly orderId?: number

    /**
     * 
     * @type {string}
     * @memberof VipLoanApiGetLoanVipRepayHistoryV1
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRepayHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRepayHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1, Default:1, Max: 1000
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRepayHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10, Max: 100
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRepayHistoryV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRepayHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanVipRequestDataV1 operation in VipLoanApi.
 * @export
 * @interface VipLoanApiGetLoanVipRequestDataV1Request
 */
export interface VipLoanApiGetLoanVipRequestDataV1Request {
    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRequestDataV1
     */
    readonly timestamp: number

    /**
     * Currently querying page. Start from 1, Default:1, Max: 1000
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRequestDataV1
     */
    readonly current?: number

    /**
     * Default: 10, Max: 100
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRequestDataV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRequestDataV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanVipRequestInterestRateV1 operation in VipLoanApi.
 * @export
 * @interface VipLoanApiGetLoanVipRequestInterestRateV1Request
 */
export interface VipLoanApiGetLoanVipRequestInterestRateV1Request {
    /**
     * Max 10 assets, Multiple split by &amp;#34;,&amp;#34;
     * @type {string}
     * @memberof VipLoanApiGetLoanVipRequestInterestRateV1
     */
    readonly loanCoin: string

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRequestInterestRateV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof VipLoanApiGetLoanVipRequestInterestRateV1
     */
    readonly recvWindow?: number
}

/**
 * VipLoanApi - object-oriented interface
 * @export
 * @class VipLoanApi
 * @extends {BaseAPI}
 */
export class VipLoanApi extends BaseAPI implements VipLoanApiInterface {
    /**
     * VIP loan is available for VIP users only.
     * @summary VIP Loan Borrow(TRADE)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public createLoanVipBorrowV1(options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).createLoanVipBorrowV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * VIP loan is available for VIP users only.
     * @summary VIP Loan Renew(TRADE)
     * @param {VipLoanApiCreateLoanVipRenewV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public createLoanVipRenewV1(requestParameters: VipLoanApiCreateLoanVipRenewV1Request, options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).createLoanVipRenewV1(requestParameters.loanTerm, requestParameters.orderId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * VIP loan is available for VIP users only.
     * @summary VIP Loan Repay(TRADE)
     * @param {VipLoanApiCreateLoanVipRepayV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public createLoanVipRepayV1(requestParameters: VipLoanApiCreateLoanVipRepayV1Request, options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).createLoanVipRepayV1(requestParameters.amount, requestParameters.orderId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GET /sapi/v1/loan/vip/accruedInterest
     * @summary Get VIP Loan Accrued Interest(USER_DATA)
     * @param {VipLoanApiGetLoanVipAccruedInterestV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public getLoanVipAccruedInterestV1(requestParameters: VipLoanApiGetLoanVipAccruedInterestV1Request, options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).getLoanVipAccruedInterestV1(requestParameters.recvWindow, requestParameters.timestamp, requestParameters.orderId, requestParameters.loanCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * VIP loan is available for VIP users only
     * @summary Check VIP Loan Collateral Account (USER_DATA)
     * @param {VipLoanApiGetLoanVipCollateralAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public getLoanVipCollateralAccountV1(requestParameters: VipLoanApiGetLoanVipCollateralAccountV1Request, options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).getLoanVipCollateralAccountV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.collateralAccountId, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Collateral Asset Data
     * @summary Get Collateral Asset Data(USER_DATA)
     * @param {VipLoanApiGetLoanVipCollateralDataV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public getLoanVipCollateralDataV1(requestParameters: VipLoanApiGetLoanVipCollateralDataV1Request, options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).getLoanVipCollateralDataV1(requestParameters.timestamp, requestParameters.collateralCoin, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get VIP Loan Interest Rate History
     * @summary Get VIP Loan Interest Rate History (USER_DATA)
     * @param {VipLoanApiGetLoanVipInterestRateHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public getLoanVipInterestRateHistoryV1(requestParameters: VipLoanApiGetLoanVipInterestRateHistoryV1Request, options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).getLoanVipInterestRateHistoryV1(requestParameters.coin, requestParameters.recvWindow, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.
     * @summary Get Loanable Assets Data(USER_DATA)
     * @param {VipLoanApiGetLoanVipLoanableDataV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public getLoanVipLoanableDataV1(requestParameters: VipLoanApiGetLoanVipLoanableDataV1Request, options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).getLoanVipLoanableDataV1(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.vipLevel, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * VIP loan is available for VIP users only.
     * @summary Get VIP Loan Ongoing Orders(USER_DATA)
     * @param {VipLoanApiGetLoanVipOngoingOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public getLoanVipOngoingOrdersV1(requestParameters: VipLoanApiGetLoanVipOngoingOrdersV1Request, options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).getLoanVipOngoingOrdersV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.collateralAccountId, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GET /sapi/v1/loan/vip/repay/history
     * @summary Get VIP Loan Repayment History(USER_DATA)
     * @param {VipLoanApiGetLoanVipRepayHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public getLoanVipRepayHistoryV1(requestParameters: VipLoanApiGetLoanVipRepayHistoryV1Request, options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).getLoanVipRepayHistoryV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.loanCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Application Status
     * @summary Query Application Status(USER_DATA)
     * @param {VipLoanApiGetLoanVipRequestDataV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public getLoanVipRequestDataV1(requestParameters: VipLoanApiGetLoanVipRequestDataV1Request, options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).getLoanVipRequestDataV1(requestParameters.timestamp, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Borrow Interest Rate
     * @summary Get Borrow Interest Rate(USER_DATA)
     * @param {VipLoanApiGetLoanVipRequestInterestRateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipLoanApi
     */
    public getLoanVipRequestInterestRateV1(requestParameters: VipLoanApiGetLoanVipRequestInterestRateV1Request, options?: RawAxiosRequestConfig) {
        return VipLoanApiFp(this.configuration).getLoanVipRequestInterestRateV1(requestParameters.loanCoin, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

