/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { GetNftHistoryDepositV1Resp } from '../model';
// @ts-ignore
import type { GetNftHistoryTransactionsV1Resp } from '../model';
// @ts-ignore
import type { GetNftHistoryWithdrawV1Resp } from '../model';
// @ts-ignore
import type { GetNftUserGetAssetV1Resp } from '../model';
/**
 * NftApi - axios parameter creator
 * @export
 */
export const NftApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * et NFT Deposit History
         * @summary Get NFT Deposit History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNftHistoryDepositV1: async (timestamp: number, startTime?: number, endTime?: number, limit?: number, page?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getNftHistoryDepositV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/nft/history/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get NFT Transaction History
         * @summary Get NFT Transaction History(USER_DATA)
         * @param {number} orderType 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNftHistoryTransactionsV1: async (orderType: number, timestamp: number, startTime?: number, endTime?: number, limit?: number, page?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderType' is not null or undefined
            assertParamExists('getNftHistoryTransactionsV1', 'orderType', orderType)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getNftHistoryTransactionsV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/nft/history/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (orderType !== undefined) {
                localVarQueryParameter['orderType'] = orderType;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get NFT Withdraw History
         * @summary Get NFT Withdraw History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNftHistoryWithdrawV1: async (timestamp: number, startTime?: number, endTime?: number, limit?: number, page?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getNftHistoryWithdrawV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/nft/history/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get NFT Asset
         * @summary Get NFT Asset(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNftUserGetAssetV1: async (timestamp: number, limit?: number, page?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getNftUserGetAssetV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/nft/user/getAsset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NftApi - functional programming interface
 * @export
 */
export const NftApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NftApiAxiosParamCreator(configuration)
    return {
        /**
         * et NFT Deposit History
         * @summary Get NFT Deposit History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNftHistoryDepositV1(timestamp: number, startTime?: number, endTime?: number, limit?: number, page?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNftHistoryDepositV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNftHistoryDepositV1(timestamp, startTime, endTime, limit, page, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NftApi.getNftHistoryDepositV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get NFT Transaction History
         * @summary Get NFT Transaction History(USER_DATA)
         * @param {number} orderType 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNftHistoryTransactionsV1(orderType: number, timestamp: number, startTime?: number, endTime?: number, limit?: number, page?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNftHistoryTransactionsV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNftHistoryTransactionsV1(orderType, timestamp, startTime, endTime, limit, page, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NftApi.getNftHistoryTransactionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get NFT Withdraw History
         * @summary Get NFT Withdraw History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNftHistoryWithdrawV1(timestamp: number, startTime?: number, endTime?: number, limit?: number, page?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNftHistoryWithdrawV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNftHistoryWithdrawV1(timestamp, startTime, endTime, limit, page, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NftApi.getNftHistoryWithdrawV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get NFT Asset
         * @summary Get NFT Asset(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNftUserGetAssetV1(timestamp: number, limit?: number, page?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNftUserGetAssetV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNftUserGetAssetV1(timestamp, limit, page, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NftApi.getNftUserGetAssetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NftApi - factory interface
 * @export
 */
export const NftApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NftApiFp(configuration)
    return {
        /**
         * et NFT Deposit History
         * @summary Get NFT Deposit History(USER_DATA)
         * @param {NftApiGetNftHistoryDepositV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNftHistoryDepositV1(requestParameters: NftApiGetNftHistoryDepositV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetNftHistoryDepositV1Resp> {
            return localVarFp.getNftHistoryDepositV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.page, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get NFT Transaction History
         * @summary Get NFT Transaction History(USER_DATA)
         * @param {NftApiGetNftHistoryTransactionsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNftHistoryTransactionsV1(requestParameters: NftApiGetNftHistoryTransactionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetNftHistoryTransactionsV1Resp> {
            return localVarFp.getNftHistoryTransactionsV1(requestParameters.orderType, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.page, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get NFT Withdraw History
         * @summary Get NFT Withdraw History(USER_DATA)
         * @param {NftApiGetNftHistoryWithdrawV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNftHistoryWithdrawV1(requestParameters: NftApiGetNftHistoryWithdrawV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetNftHistoryWithdrawV1Resp> {
            return localVarFp.getNftHistoryWithdrawV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.page, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get NFT Asset
         * @summary Get NFT Asset(USER_DATA)
         * @param {NftApiGetNftUserGetAssetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNftUserGetAssetV1(requestParameters: NftApiGetNftUserGetAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetNftUserGetAssetV1Resp> {
            return localVarFp.getNftUserGetAssetV1(requestParameters.timestamp, requestParameters.limit, requestParameters.page, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NftApi - interface
 * @export
 * @interface NftApi
 */
export interface NftApiInterface {
    /**
     * et NFT Deposit History
     * @summary Get NFT Deposit History(USER_DATA)
     * @param {NftApiGetNftHistoryDepositV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftApiInterface
     */
    getNftHistoryDepositV1(requestParameters: NftApiGetNftHistoryDepositV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetNftHistoryDepositV1Resp>;

    /**
     * Get NFT Transaction History
     * @summary Get NFT Transaction History(USER_DATA)
     * @param {NftApiGetNftHistoryTransactionsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftApiInterface
     */
    getNftHistoryTransactionsV1(requestParameters: NftApiGetNftHistoryTransactionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetNftHistoryTransactionsV1Resp>;

    /**
     * Get NFT Withdraw History
     * @summary Get NFT Withdraw History(USER_DATA)
     * @param {NftApiGetNftHistoryWithdrawV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftApiInterface
     */
    getNftHistoryWithdrawV1(requestParameters: NftApiGetNftHistoryWithdrawV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetNftHistoryWithdrawV1Resp>;

    /**
     * Get NFT Asset
     * @summary Get NFT Asset(USER_DATA)
     * @param {NftApiGetNftUserGetAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftApiInterface
     */
    getNftUserGetAssetV1(requestParameters: NftApiGetNftUserGetAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetNftUserGetAssetV1Resp>;

}

/**
 * Request parameters for getNftHistoryDepositV1 operation in NftApi.
 * @export
 * @interface NftApiGetNftHistoryDepositV1Request
 */
export interface NftApiGetNftHistoryDepositV1Request {
    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryDepositV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryDepositV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryDepositV1
     */
    readonly endTime?: number

    /**
     * Default 50, Max 50
     * @type {number}
     * @memberof NftApiGetNftHistoryDepositV1
     */
    readonly limit?: number

    /**
     * Default 1
     * @type {number}
     * @memberof NftApiGetNftHistoryDepositV1
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryDepositV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getNftHistoryTransactionsV1 operation in NftApi.
 * @export
 * @interface NftApiGetNftHistoryTransactionsV1Request
 */
export interface NftApiGetNftHistoryTransactionsV1Request {
    /**
     * 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
     * @type {number}
     * @memberof NftApiGetNftHistoryTransactionsV1
     */
    readonly orderType: number

    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryTransactionsV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryTransactionsV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryTransactionsV1
     */
    readonly endTime?: number

    /**
     * Default 50, Max 50
     * @type {number}
     * @memberof NftApiGetNftHistoryTransactionsV1
     */
    readonly limit?: number

    /**
     * Default 1
     * @type {number}
     * @memberof NftApiGetNftHistoryTransactionsV1
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryTransactionsV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getNftHistoryWithdrawV1 operation in NftApi.
 * @export
 * @interface NftApiGetNftHistoryWithdrawV1Request
 */
export interface NftApiGetNftHistoryWithdrawV1Request {
    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryWithdrawV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryWithdrawV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryWithdrawV1
     */
    readonly endTime?: number

    /**
     * Default 50, Max 50
     * @type {number}
     * @memberof NftApiGetNftHistoryWithdrawV1
     */
    readonly limit?: number

    /**
     * Default 1
     * @type {number}
     * @memberof NftApiGetNftHistoryWithdrawV1
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftHistoryWithdrawV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getNftUserGetAssetV1 operation in NftApi.
 * @export
 * @interface NftApiGetNftUserGetAssetV1Request
 */
export interface NftApiGetNftUserGetAssetV1Request {
    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftUserGetAssetV1
     */
    readonly timestamp: number

    /**
     * Default 50, Max 50
     * @type {number}
     * @memberof NftApiGetNftUserGetAssetV1
     */
    readonly limit?: number

    /**
     * Default 1
     * @type {number}
     * @memberof NftApiGetNftUserGetAssetV1
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof NftApiGetNftUserGetAssetV1
     */
    readonly recvWindow?: number
}

/**
 * NftApi - object-oriented interface
 * @export
 * @class NftApi
 * @extends {BaseAPI}
 */
export class NftApi extends BaseAPI implements NftApiInterface {
    /**
     * et NFT Deposit History
     * @summary Get NFT Deposit History(USER_DATA)
     * @param {NftApiGetNftHistoryDepositV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftApi
     */
    public getNftHistoryDepositV1(requestParameters: NftApiGetNftHistoryDepositV1Request, options?: RawAxiosRequestConfig) {
        return NftApiFp(this.configuration).getNftHistoryDepositV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.page, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get NFT Transaction History
     * @summary Get NFT Transaction History(USER_DATA)
     * @param {NftApiGetNftHistoryTransactionsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftApi
     */
    public getNftHistoryTransactionsV1(requestParameters: NftApiGetNftHistoryTransactionsV1Request, options?: RawAxiosRequestConfig) {
        return NftApiFp(this.configuration).getNftHistoryTransactionsV1(requestParameters.orderType, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.page, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get NFT Withdraw History
     * @summary Get NFT Withdraw History(USER_DATA)
     * @param {NftApiGetNftHistoryWithdrawV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftApi
     */
    public getNftHistoryWithdrawV1(requestParameters: NftApiGetNftHistoryWithdrawV1Request, options?: RawAxiosRequestConfig) {
        return NftApiFp(this.configuration).getNftHistoryWithdrawV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.page, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get NFT Asset
     * @summary Get NFT Asset(USER_DATA)
     * @param {NftApiGetNftUserGetAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftApi
     */
    public getNftUserGetAssetV1(requestParameters: NftApiGetNftUserGetAssetV1Request, options?: RawAxiosRequestConfig) {
        return NftApiFp(this.configuration).getNftUserGetAssetV1(requestParameters.timestamp, requestParameters.limit, requestParameters.page, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

