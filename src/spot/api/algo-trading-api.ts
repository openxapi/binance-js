/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreateAlgoFuturesNewOrderTwapV1Resp } from '../model';
// @ts-ignore
import type { CreateAlgoFuturesNewOrderVpV1Resp } from '../model';
// @ts-ignore
import type { CreateAlgoSpotNewOrderTwapV1Resp } from '../model';
// @ts-ignore
import type { DeleteAlgoFuturesOrderV1Resp } from '../model';
// @ts-ignore
import type { DeleteAlgoSpotOrderV1Resp } from '../model';
// @ts-ignore
import type { GetAlgoFuturesHistoricalOrdersV1Resp } from '../model';
// @ts-ignore
import type { GetAlgoFuturesOpenOrdersV1Resp } from '../model';
// @ts-ignore
import type { GetAlgoFuturesSubOrdersV1Resp } from '../model';
// @ts-ignore
import type { GetAlgoSpotHistoricalOrdersV1Resp } from '../model';
// @ts-ignore
import type { GetAlgoSpotOpenOrdersV1Resp } from '../model';
// @ts-ignore
import type { GetAlgoSpotSubOrdersV1Resp } from '../model';
/**
 * AlgoTradingApi - axios parameter creator
 * @export
 */
export const AlgoTradingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Send in a Twap new order. Only support on USDⓈ-M Contracts.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {number} duration 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {string} [positionSide] 
         * @param {number} [recvWindow] 
         * @param {boolean} [reduceOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlgoFuturesNewOrderTwapV1: async (duration: number, quantity: string, side: string, symbol: string, timestamp: number, clientAlgoId?: string, limitPrice?: string, positionSide?: string, recvWindow?: number, reduceOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'duration' is not null or undefined
            assertParamExists('createAlgoFuturesNewOrderTwapV1', 'duration', duration)
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('createAlgoFuturesNewOrderTwapV1', 'quantity', quantity)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('createAlgoFuturesNewOrderTwapV1', 'side', side)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('createAlgoFuturesNewOrderTwapV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createAlgoFuturesNewOrderTwapV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/futures/newOrderTwap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (clientAlgoId !== undefined) { 
                localVarFormParams.set('clientAlgoId', clientAlgoId as any);
            }
    
            if (duration !== undefined) { 
                localVarFormParams.set('duration', duration as any);
            }
    
            if (limitPrice !== undefined) { 
                localVarFormParams.set('limitPrice', limitPrice as any);
            }
    
            if (positionSide !== undefined) { 
                localVarFormParams.set('positionSide', positionSide as any);
            }
    
            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (reduceOnly !== undefined) { 
                localVarFormParams.set('reduceOnly', reduceOnly as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.set('side', side as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send in a VP new order. Only support on USDⓈ-M Contracts.
         * @summary Volume Participation(VP) New Order (TRADE)
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} urgency 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {string} [positionSide] 
         * @param {number} [recvWindow] 
         * @param {boolean} [reduceOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlgoFuturesNewOrderVpV1: async (quantity: string, side: string, symbol: string, timestamp: number, urgency: string, clientAlgoId?: string, limitPrice?: string, positionSide?: string, recvWindow?: number, reduceOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('createAlgoFuturesNewOrderVpV1', 'quantity', quantity)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('createAlgoFuturesNewOrderVpV1', 'side', side)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('createAlgoFuturesNewOrderVpV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createAlgoFuturesNewOrderVpV1', 'timestamp', timestamp)
            // verify required parameter 'urgency' is not null or undefined
            assertParamExists('createAlgoFuturesNewOrderVpV1', 'urgency', urgency)
            const localVarPath = `/sapi/v1/algo/futures/newOrderVp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (clientAlgoId !== undefined) { 
                localVarFormParams.set('clientAlgoId', clientAlgoId as any);
            }
    
            if (limitPrice !== undefined) { 
                localVarFormParams.set('limitPrice', limitPrice as any);
            }
    
            if (positionSide !== undefined) { 
                localVarFormParams.set('positionSide', positionSide as any);
            }
    
            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (reduceOnly !== undefined) { 
                localVarFormParams.set('reduceOnly', reduceOnly as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.set('side', side as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (urgency !== undefined) { 
                localVarFormParams.set('urgency', urgency as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Place a new spot TWAP order with Algo service.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {number} duration 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlgoSpotNewOrderTwapV1: async (duration: number, quantity: string, side: string, symbol: string, timestamp: number, clientAlgoId?: string, limitPrice?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'duration' is not null or undefined
            assertParamExists('createAlgoSpotNewOrderTwapV1', 'duration', duration)
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('createAlgoSpotNewOrderTwapV1', 'quantity', quantity)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('createAlgoSpotNewOrderTwapV1', 'side', side)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('createAlgoSpotNewOrderTwapV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createAlgoSpotNewOrderTwapV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/spot/newOrderTwap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (clientAlgoId !== undefined) { 
                localVarFormParams.set('clientAlgoId', clientAlgoId as any);
            }
    
            if (duration !== undefined) { 
                localVarFormParams.set('duration', duration as any);
            }
    
            if (limitPrice !== undefined) { 
                localVarFormParams.set('limitPrice', limitPrice as any);
            }
    
            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.set('side', side as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an active order.
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId eg. 14511
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlgoFuturesOrderV1: async (algoId: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('deleteAlgoFuturesOrderV1', 'algoId', algoId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('deleteAlgoFuturesOrderV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/futures/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an open TWAP order
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId eg. 14511
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlgoSpotOrderV1: async (algoId: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('deleteAlgoSpotOrderV1', 'algoId', algoId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('deleteAlgoSpotOrderV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/spot/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Historical Algo Order
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] Trading symbol eg. BTCUSDT
         * @param {string} [side] BUY or SELL
         * @param {number} [startTime] in milliseconds  eg.1641522717552
         * @param {number} [endTime] in milliseconds  eg.1641522526562
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoFuturesHistoricalOrdersV1: async (timestamp: number, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAlgoFuturesHistoricalOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/futures/historicalOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Current Algo Open Orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoFuturesOpenOrdersV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAlgoFuturesOpenOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/futures/openOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {number} algoId 
         * @param {number} timestamp 
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoFuturesSubOrdersV1: async (algoId: number, timestamp: number, page?: number, pageSize?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('getAlgoFuturesSubOrdersV1', 'algoId', algoId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAlgoFuturesSubOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/futures/subOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all historical SPOT TWAP orders
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] Trading symbol eg. BTCUSDT
         * @param {string} [side] BUY or SELL
         * @param {number} [startTime] in milliseconds  eg.1641522717552
         * @param {number} [endTime] in milliseconds  eg.1641522526562
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoSpotHistoricalOrdersV1: async (timestamp: number, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAlgoSpotHistoricalOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/spot/historicalOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all open SPOT TWAP orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoSpotOpenOrdersV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAlgoSpotOpenOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/spot/openOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {number} algoId 
         * @param {number} timestamp 
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoSpotSubOrdersV1: async (algoId: number, timestamp: number, page?: number, pageSize?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('getAlgoSpotSubOrdersV1', 'algoId', algoId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAlgoSpotSubOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/algo/spot/subOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlgoTradingApi - functional programming interface
 * @export
 */
export const AlgoTradingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlgoTradingApiAxiosParamCreator(configuration)
    return {
        /**
         * Send in a Twap new order. Only support on USDⓈ-M Contracts.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {number} duration 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {string} [positionSide] 
         * @param {number} [recvWindow] 
         * @param {boolean} [reduceOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAlgoFuturesNewOrderTwapV1(duration: number, quantity: string, side: string, symbol: string, timestamp: number, clientAlgoId?: string, limitPrice?: string, positionSide?: string, recvWindow?: number, reduceOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAlgoFuturesNewOrderTwapV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAlgoFuturesNewOrderTwapV1(duration, quantity, side, symbol, timestamp, clientAlgoId, limitPrice, positionSide, recvWindow, reduceOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlgoTradingApi.createAlgoFuturesNewOrderTwapV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send in a VP new order. Only support on USDⓈ-M Contracts.
         * @summary Volume Participation(VP) New Order (TRADE)
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} urgency 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {string} [positionSide] 
         * @param {number} [recvWindow] 
         * @param {boolean} [reduceOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAlgoFuturesNewOrderVpV1(quantity: string, side: string, symbol: string, timestamp: number, urgency: string, clientAlgoId?: string, limitPrice?: string, positionSide?: string, recvWindow?: number, reduceOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAlgoFuturesNewOrderVpV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAlgoFuturesNewOrderVpV1(quantity, side, symbol, timestamp, urgency, clientAlgoId, limitPrice, positionSide, recvWindow, reduceOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlgoTradingApi.createAlgoFuturesNewOrderVpV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Place a new spot TWAP order with Algo service.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {number} duration 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [clientAlgoId] 
         * @param {string} [limitPrice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAlgoSpotNewOrderTwapV1(duration: number, quantity: string, side: string, symbol: string, timestamp: number, clientAlgoId?: string, limitPrice?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAlgoSpotNewOrderTwapV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAlgoSpotNewOrderTwapV1(duration, quantity, side, symbol, timestamp, clientAlgoId, limitPrice, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlgoTradingApi.createAlgoSpotNewOrderTwapV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancel an active order.
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId eg. 14511
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAlgoFuturesOrderV1(algoId: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAlgoFuturesOrderV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlgoFuturesOrderV1(algoId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlgoTradingApi.deleteAlgoFuturesOrderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancel an open TWAP order
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId eg. 14511
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAlgoSpotOrderV1(algoId: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAlgoSpotOrderV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlgoSpotOrderV1(algoId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlgoTradingApi.deleteAlgoSpotOrderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Historical Algo Order
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] Trading symbol eg. BTCUSDT
         * @param {string} [side] BUY or SELL
         * @param {number} [startTime] in milliseconds  eg.1641522717552
         * @param {number} [endTime] in milliseconds  eg.1641522526562
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlgoFuturesHistoricalOrdersV1(timestamp: number, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAlgoFuturesHistoricalOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlgoFuturesHistoricalOrdersV1(timestamp, symbol, side, startTime, endTime, page, pageSize, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlgoTradingApi.getAlgoFuturesHistoricalOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Current Algo Open Orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlgoFuturesOpenOrdersV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAlgoFuturesOpenOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlgoFuturesOpenOrdersV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlgoTradingApi.getAlgoFuturesOpenOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {number} algoId 
         * @param {number} timestamp 
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlgoFuturesSubOrdersV1(algoId: number, timestamp: number, page?: number, pageSize?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAlgoFuturesSubOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlgoFuturesSubOrdersV1(algoId, timestamp, page, pageSize, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlgoTradingApi.getAlgoFuturesSubOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all historical SPOT TWAP orders
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] Trading symbol eg. BTCUSDT
         * @param {string} [side] BUY or SELL
         * @param {number} [startTime] in milliseconds  eg.1641522717552
         * @param {number} [endTime] in milliseconds  eg.1641522526562
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlgoSpotHistoricalOrdersV1(timestamp: number, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAlgoSpotHistoricalOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlgoSpotHistoricalOrdersV1(timestamp, symbol, side, startTime, endTime, page, pageSize, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlgoTradingApi.getAlgoSpotHistoricalOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all open SPOT TWAP orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlgoSpotOpenOrdersV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAlgoSpotOpenOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlgoSpotOpenOrdersV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlgoTradingApi.getAlgoSpotOpenOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {number} algoId 
         * @param {number} timestamp 
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlgoSpotSubOrdersV1(algoId: number, timestamp: number, page?: number, pageSize?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAlgoSpotSubOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlgoSpotSubOrdersV1(algoId, timestamp, page, pageSize, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlgoTradingApi.getAlgoSpotSubOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AlgoTradingApi - factory interface
 * @export
 */
export const AlgoTradingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlgoTradingApiFp(configuration)
    return {
        /**
         * Send in a Twap new order. Only support on USDⓈ-M Contracts.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlgoFuturesNewOrderTwapV1(requestParameters: AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAlgoFuturesNewOrderTwapV1Resp> {
            return localVarFp.createAlgoFuturesNewOrderTwapV1(requestParameters.duration, requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.clientAlgoId, requestParameters.limitPrice, requestParameters.positionSide, requestParameters.recvWindow, requestParameters.reduceOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Send in a VP new order. Only support on USDⓈ-M Contracts.
         * @summary Volume Participation(VP) New Order (TRADE)
         * @param {AlgoTradingApiCreateAlgoFuturesNewOrderVpV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlgoFuturesNewOrderVpV1(requestParameters: AlgoTradingApiCreateAlgoFuturesNewOrderVpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAlgoFuturesNewOrderVpV1Resp> {
            return localVarFp.createAlgoFuturesNewOrderVpV1(requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.urgency, requestParameters.clientAlgoId, requestParameters.limitPrice, requestParameters.positionSide, requestParameters.recvWindow, requestParameters.reduceOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Place a new spot TWAP order with Algo service.
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {AlgoTradingApiCreateAlgoSpotNewOrderTwapV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlgoSpotNewOrderTwapV1(requestParameters: AlgoTradingApiCreateAlgoSpotNewOrderTwapV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAlgoSpotNewOrderTwapV1Resp> {
            return localVarFp.createAlgoSpotNewOrderTwapV1(requestParameters.duration, requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.clientAlgoId, requestParameters.limitPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel an active order.
         * @summary Cancel Algo Order(TRADE)
         * @param {AlgoTradingApiDeleteAlgoFuturesOrderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlgoFuturesOrderV1(requestParameters: AlgoTradingApiDeleteAlgoFuturesOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAlgoFuturesOrderV1Resp> {
            return localVarFp.deleteAlgoFuturesOrderV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel an open TWAP order
         * @summary Cancel Algo Order(TRADE)
         * @param {AlgoTradingApiDeleteAlgoSpotOrderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlgoSpotOrderV1(requestParameters: AlgoTradingApiDeleteAlgoSpotOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAlgoSpotOrderV1Resp> {
            return localVarFp.deleteAlgoSpotOrderV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Historical Algo Order
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoFuturesHistoricalOrdersV1(requestParameters: AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoFuturesHistoricalOrdersV1Resp> {
            return localVarFp.getAlgoFuturesHistoricalOrdersV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.side, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Current Algo Open Orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {AlgoTradingApiGetAlgoFuturesOpenOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoFuturesOpenOrdersV1(requestParameters: AlgoTradingApiGetAlgoFuturesOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoFuturesOpenOrdersV1Resp> {
            return localVarFp.getAlgoFuturesOpenOrdersV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {AlgoTradingApiGetAlgoFuturesSubOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoFuturesSubOrdersV1(requestParameters: AlgoTradingApiGetAlgoFuturesSubOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoFuturesSubOrdersV1Resp> {
            return localVarFp.getAlgoFuturesSubOrdersV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all historical SPOT TWAP orders
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {AlgoTradingApiGetAlgoSpotHistoricalOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoSpotHistoricalOrdersV1(requestParameters: AlgoTradingApiGetAlgoSpotHistoricalOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoSpotHistoricalOrdersV1Resp> {
            return localVarFp.getAlgoSpotHistoricalOrdersV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.side, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all open SPOT TWAP orders
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {AlgoTradingApiGetAlgoSpotOpenOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoSpotOpenOrdersV1(requestParameters: AlgoTradingApiGetAlgoSpotOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoSpotOpenOrdersV1Resp> {
            return localVarFp.getAlgoSpotOpenOrdersV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get respective sub orders for a specified algoId
         * @summary Query Sub Orders(USER_DATA)
         * @param {AlgoTradingApiGetAlgoSpotSubOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgoSpotSubOrdersV1(requestParameters: AlgoTradingApiGetAlgoSpotSubOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoSpotSubOrdersV1Resp> {
            return localVarFp.getAlgoSpotSubOrdersV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlgoTradingApi - interface
 * @export
 * @interface AlgoTradingApi
 */
export interface AlgoTradingApiInterface {
    /**
     * Send in a Twap new order. Only support on USDⓈ-M Contracts.
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApiInterface
     */
    createAlgoFuturesNewOrderTwapV1(requestParameters: AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAlgoFuturesNewOrderTwapV1Resp>;

    /**
     * Send in a VP new order. Only support on USDⓈ-M Contracts.
     * @summary Volume Participation(VP) New Order (TRADE)
     * @param {AlgoTradingApiCreateAlgoFuturesNewOrderVpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApiInterface
     */
    createAlgoFuturesNewOrderVpV1(requestParameters: AlgoTradingApiCreateAlgoFuturesNewOrderVpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAlgoFuturesNewOrderVpV1Resp>;

    /**
     * Place a new spot TWAP order with Algo service.
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {AlgoTradingApiCreateAlgoSpotNewOrderTwapV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApiInterface
     */
    createAlgoSpotNewOrderTwapV1(requestParameters: AlgoTradingApiCreateAlgoSpotNewOrderTwapV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAlgoSpotNewOrderTwapV1Resp>;

    /**
     * Cancel an active order.
     * @summary Cancel Algo Order(TRADE)
     * @param {AlgoTradingApiDeleteAlgoFuturesOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApiInterface
     */
    deleteAlgoFuturesOrderV1(requestParameters: AlgoTradingApiDeleteAlgoFuturesOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAlgoFuturesOrderV1Resp>;

    /**
     * Cancel an open TWAP order
     * @summary Cancel Algo Order(TRADE)
     * @param {AlgoTradingApiDeleteAlgoSpotOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApiInterface
     */
    deleteAlgoSpotOrderV1(requestParameters: AlgoTradingApiDeleteAlgoSpotOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAlgoSpotOrderV1Resp>;

    /**
     * Query Historical Algo Order
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApiInterface
     */
    getAlgoFuturesHistoricalOrdersV1(requestParameters: AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoFuturesHistoricalOrdersV1Resp>;

    /**
     * Query Current Algo Open Orders
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoFuturesOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApiInterface
     */
    getAlgoFuturesOpenOrdersV1(requestParameters: AlgoTradingApiGetAlgoFuturesOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoFuturesOpenOrdersV1Resp>;

    /**
     * Get respective sub orders for a specified algoId
     * @summary Query Sub Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoFuturesSubOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApiInterface
     */
    getAlgoFuturesSubOrdersV1(requestParameters: AlgoTradingApiGetAlgoFuturesSubOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoFuturesSubOrdersV1Resp>;

    /**
     * Get all historical SPOT TWAP orders
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoSpotHistoricalOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApiInterface
     */
    getAlgoSpotHistoricalOrdersV1(requestParameters: AlgoTradingApiGetAlgoSpotHistoricalOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoSpotHistoricalOrdersV1Resp>;

    /**
     * Get all open SPOT TWAP orders
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoSpotOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApiInterface
     */
    getAlgoSpotOpenOrdersV1(requestParameters: AlgoTradingApiGetAlgoSpotOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoSpotOpenOrdersV1Resp>;

    /**
     * Get respective sub orders for a specified algoId
     * @summary Query Sub Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoSpotSubOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApiInterface
     */
    getAlgoSpotSubOrdersV1(requestParameters: AlgoTradingApiGetAlgoSpotSubOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAlgoSpotSubOrdersV1Resp>;

}

/**
 * Request parameters for createAlgoFuturesNewOrderTwapV1 operation in AlgoTradingApi.
 * @export
 * @interface AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1Request
 */
export interface AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1Request {
    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1
     */
    readonly duration: number

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1
     */
    readonly quantity: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1
     */
    readonly side: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1
     */
    readonly clientAlgoId?: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1
     */
    readonly limitPrice?: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1
     */
    readonly positionSide?: string

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {boolean}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1
     */
    readonly reduceOnly?: boolean
}

/**
 * Request parameters for createAlgoFuturesNewOrderVpV1 operation in AlgoTradingApi.
 * @export
 * @interface AlgoTradingApiCreateAlgoFuturesNewOrderVpV1Request
 */
export interface AlgoTradingApiCreateAlgoFuturesNewOrderVpV1Request {
    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderVpV1
     */
    readonly quantity: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderVpV1
     */
    readonly side: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderVpV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderVpV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderVpV1
     */
    readonly urgency: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderVpV1
     */
    readonly clientAlgoId?: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderVpV1
     */
    readonly limitPrice?: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderVpV1
     */
    readonly positionSide?: string

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderVpV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {boolean}
     * @memberof AlgoTradingApiCreateAlgoFuturesNewOrderVpV1
     */
    readonly reduceOnly?: boolean
}

/**
 * Request parameters for createAlgoSpotNewOrderTwapV1 operation in AlgoTradingApi.
 * @export
 * @interface AlgoTradingApiCreateAlgoSpotNewOrderTwapV1Request
 */
export interface AlgoTradingApiCreateAlgoSpotNewOrderTwapV1Request {
    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiCreateAlgoSpotNewOrderTwapV1
     */
    readonly duration: number

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoSpotNewOrderTwapV1
     */
    readonly quantity: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoSpotNewOrderTwapV1
     */
    readonly side: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoSpotNewOrderTwapV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiCreateAlgoSpotNewOrderTwapV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoSpotNewOrderTwapV1
     */
    readonly clientAlgoId?: string

    /**
     * 
     * @type {string}
     * @memberof AlgoTradingApiCreateAlgoSpotNewOrderTwapV1
     */
    readonly limitPrice?: string
}

/**
 * Request parameters for deleteAlgoFuturesOrderV1 operation in AlgoTradingApi.
 * @export
 * @interface AlgoTradingApiDeleteAlgoFuturesOrderV1Request
 */
export interface AlgoTradingApiDeleteAlgoFuturesOrderV1Request {
    /**
     * eg. 14511
     * @type {number}
     * @memberof AlgoTradingApiDeleteAlgoFuturesOrderV1
     */
    readonly algoId: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiDeleteAlgoFuturesOrderV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiDeleteAlgoFuturesOrderV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for deleteAlgoSpotOrderV1 operation in AlgoTradingApi.
 * @export
 * @interface AlgoTradingApiDeleteAlgoSpotOrderV1Request
 */
export interface AlgoTradingApiDeleteAlgoSpotOrderV1Request {
    /**
     * eg. 14511
     * @type {number}
     * @memberof AlgoTradingApiDeleteAlgoSpotOrderV1
     */
    readonly algoId: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiDeleteAlgoSpotOrderV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiDeleteAlgoSpotOrderV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAlgoFuturesHistoricalOrdersV1 operation in AlgoTradingApi.
 * @export
 * @interface AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1Request
 */
export interface AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1
     */
    readonly timestamp: number

    /**
     * Trading symbol eg. BTCUSDT
     * @type {string}
     * @memberof AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1
     */
    readonly symbol?: string

    /**
     * BUY or SELL
     * @type {string}
     * @memberof AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1
     */
    readonly side?: string

    /**
     * in milliseconds  eg.1641522717552
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1
     */
    readonly startTime?: number

    /**
     * in milliseconds  eg.1641522526562
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1
     */
    readonly endTime?: number

    /**
     * Default is 1
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1
     */
    readonly page?: number

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAlgoFuturesOpenOrdersV1 operation in AlgoTradingApi.
 * @export
 * @interface AlgoTradingApiGetAlgoFuturesOpenOrdersV1Request
 */
export interface AlgoTradingApiGetAlgoFuturesOpenOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesOpenOrdersV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesOpenOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAlgoFuturesSubOrdersV1 operation in AlgoTradingApi.
 * @export
 * @interface AlgoTradingApiGetAlgoFuturesSubOrdersV1Request
 */
export interface AlgoTradingApiGetAlgoFuturesSubOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesSubOrdersV1
     */
    readonly algoId: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesSubOrdersV1
     */
    readonly timestamp: number

    /**
     * Default is 1
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesSubOrdersV1
     */
    readonly page?: number

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesSubOrdersV1
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoFuturesSubOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAlgoSpotHistoricalOrdersV1 operation in AlgoTradingApi.
 * @export
 * @interface AlgoTradingApiGetAlgoSpotHistoricalOrdersV1Request
 */
export interface AlgoTradingApiGetAlgoSpotHistoricalOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotHistoricalOrdersV1
     */
    readonly timestamp: number

    /**
     * Trading symbol eg. BTCUSDT
     * @type {string}
     * @memberof AlgoTradingApiGetAlgoSpotHistoricalOrdersV1
     */
    readonly symbol?: string

    /**
     * BUY or SELL
     * @type {string}
     * @memberof AlgoTradingApiGetAlgoSpotHistoricalOrdersV1
     */
    readonly side?: string

    /**
     * in milliseconds  eg.1641522717552
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotHistoricalOrdersV1
     */
    readonly startTime?: number

    /**
     * in milliseconds  eg.1641522526562
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotHistoricalOrdersV1
     */
    readonly endTime?: number

    /**
     * Default is 1
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotHistoricalOrdersV1
     */
    readonly page?: number

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotHistoricalOrdersV1
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotHistoricalOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAlgoSpotOpenOrdersV1 operation in AlgoTradingApi.
 * @export
 * @interface AlgoTradingApiGetAlgoSpotOpenOrdersV1Request
 */
export interface AlgoTradingApiGetAlgoSpotOpenOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotOpenOrdersV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotOpenOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAlgoSpotSubOrdersV1 operation in AlgoTradingApi.
 * @export
 * @interface AlgoTradingApiGetAlgoSpotSubOrdersV1Request
 */
export interface AlgoTradingApiGetAlgoSpotSubOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotSubOrdersV1
     */
    readonly algoId: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotSubOrdersV1
     */
    readonly timestamp: number

    /**
     * Default is 1
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotSubOrdersV1
     */
    readonly page?: number

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotSubOrdersV1
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof AlgoTradingApiGetAlgoSpotSubOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * AlgoTradingApi - object-oriented interface
 * @export
 * @class AlgoTradingApi
 * @extends {BaseAPI}
 */
export class AlgoTradingApi extends BaseAPI implements AlgoTradingApiInterface {
    /**
     * Send in a Twap new order. Only support on USDⓈ-M Contracts.
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApi
     */
    public createAlgoFuturesNewOrderTwapV1(requestParameters: AlgoTradingApiCreateAlgoFuturesNewOrderTwapV1Request, options?: RawAxiosRequestConfig) {
        return AlgoTradingApiFp(this.configuration).createAlgoFuturesNewOrderTwapV1(requestParameters.duration, requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.clientAlgoId, requestParameters.limitPrice, requestParameters.positionSide, requestParameters.recvWindow, requestParameters.reduceOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send in a VP new order. Only support on USDⓈ-M Contracts.
     * @summary Volume Participation(VP) New Order (TRADE)
     * @param {AlgoTradingApiCreateAlgoFuturesNewOrderVpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApi
     */
    public createAlgoFuturesNewOrderVpV1(requestParameters: AlgoTradingApiCreateAlgoFuturesNewOrderVpV1Request, options?: RawAxiosRequestConfig) {
        return AlgoTradingApiFp(this.configuration).createAlgoFuturesNewOrderVpV1(requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.urgency, requestParameters.clientAlgoId, requestParameters.limitPrice, requestParameters.positionSide, requestParameters.recvWindow, requestParameters.reduceOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Place a new spot TWAP order with Algo service.
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {AlgoTradingApiCreateAlgoSpotNewOrderTwapV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApi
     */
    public createAlgoSpotNewOrderTwapV1(requestParameters: AlgoTradingApiCreateAlgoSpotNewOrderTwapV1Request, options?: RawAxiosRequestConfig) {
        return AlgoTradingApiFp(this.configuration).createAlgoSpotNewOrderTwapV1(requestParameters.duration, requestParameters.quantity, requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.clientAlgoId, requestParameters.limitPrice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel an active order.
     * @summary Cancel Algo Order(TRADE)
     * @param {AlgoTradingApiDeleteAlgoFuturesOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApi
     */
    public deleteAlgoFuturesOrderV1(requestParameters: AlgoTradingApiDeleteAlgoFuturesOrderV1Request, options?: RawAxiosRequestConfig) {
        return AlgoTradingApiFp(this.configuration).deleteAlgoFuturesOrderV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel an open TWAP order
     * @summary Cancel Algo Order(TRADE)
     * @param {AlgoTradingApiDeleteAlgoSpotOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApi
     */
    public deleteAlgoSpotOrderV1(requestParameters: AlgoTradingApiDeleteAlgoSpotOrderV1Request, options?: RawAxiosRequestConfig) {
        return AlgoTradingApiFp(this.configuration).deleteAlgoSpotOrderV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Historical Algo Order
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApi
     */
    public getAlgoFuturesHistoricalOrdersV1(requestParameters: AlgoTradingApiGetAlgoFuturesHistoricalOrdersV1Request, options?: RawAxiosRequestConfig) {
        return AlgoTradingApiFp(this.configuration).getAlgoFuturesHistoricalOrdersV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.side, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Current Algo Open Orders
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoFuturesOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApi
     */
    public getAlgoFuturesOpenOrdersV1(requestParameters: AlgoTradingApiGetAlgoFuturesOpenOrdersV1Request, options?: RawAxiosRequestConfig) {
        return AlgoTradingApiFp(this.configuration).getAlgoFuturesOpenOrdersV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get respective sub orders for a specified algoId
     * @summary Query Sub Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoFuturesSubOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApi
     */
    public getAlgoFuturesSubOrdersV1(requestParameters: AlgoTradingApiGetAlgoFuturesSubOrdersV1Request, options?: RawAxiosRequestConfig) {
        return AlgoTradingApiFp(this.configuration).getAlgoFuturesSubOrdersV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all historical SPOT TWAP orders
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoSpotHistoricalOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApi
     */
    public getAlgoSpotHistoricalOrdersV1(requestParameters: AlgoTradingApiGetAlgoSpotHistoricalOrdersV1Request, options?: RawAxiosRequestConfig) {
        return AlgoTradingApiFp(this.configuration).getAlgoSpotHistoricalOrdersV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.side, requestParameters.startTime, requestParameters.endTime, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all open SPOT TWAP orders
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoSpotOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApi
     */
    public getAlgoSpotOpenOrdersV1(requestParameters: AlgoTradingApiGetAlgoSpotOpenOrdersV1Request, options?: RawAxiosRequestConfig) {
        return AlgoTradingApiFp(this.configuration).getAlgoSpotOpenOrdersV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get respective sub orders for a specified algoId
     * @summary Query Sub Orders(USER_DATA)
     * @param {AlgoTradingApiGetAlgoSpotSubOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlgoTradingApi
     */
    public getAlgoSpotSubOrdersV1(requestParameters: AlgoTradingApiGetAlgoSpotSubOrdersV1Request, options?: RawAxiosRequestConfig) {
        return AlgoTradingApiFp(this.configuration).getAlgoSpotSubOrdersV1(requestParameters.algoId, requestParameters.timestamp, requestParameters.page, requestParameters.pageSize, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

