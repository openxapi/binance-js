/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreateLoanFlexibleAdjustLtvV2Resp } from '../model';
// @ts-ignore
import type { CreateLoanFlexibleBorrowV2Resp } from '../model';
// @ts-ignore
import type { CreateLoanFlexibleRepayCollateralV2Resp } from '../model';
// @ts-ignore
import type { CreateLoanFlexibleRepayV2Resp } from '../model';
// @ts-ignore
import type { GetLoanBorrowHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetLoanFlexibleBorrowHistoryV2Resp } from '../model';
// @ts-ignore
import type { GetLoanFlexibleCollateralDataV2Resp } from '../model';
// @ts-ignore
import type { GetLoanFlexibleLiquidationHistoryV2Resp } from '../model';
// @ts-ignore
import type { GetLoanFlexibleLoanableDataV2Resp } from '../model';
// @ts-ignore
import type { GetLoanFlexibleLtvAdjustmentHistoryV2Resp } from '../model';
// @ts-ignore
import type { GetLoanFlexibleOngoingOrdersV2Resp } from '../model';
// @ts-ignore
import type { GetLoanFlexibleRepayHistoryV2Resp } from '../model';
// @ts-ignore
import type { GetLoanFlexibleRepayRateV2Resp } from '../model';
// @ts-ignore
import type { GetLoanIncomeV1RespItem } from '../model';
// @ts-ignore
import type { GetLoanLtvAdjustmentHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetLoanRepayHistoryV1Resp } from '../model';
/**
 * CryptoLoanApi - axios parameter creator
 * @export
 */
export const CryptoLoanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Flexible Loan Adjust LTV
         * @summary Flexible Loan Adjust LTV(TRADE)
         * @param {string} adjustmentAmount 
         * @param {string} collateralCoin 
         * @param {string} direction 
         * @param {string} loanCoin 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanFlexibleAdjustLtvV2: async (adjustmentAmount: string, collateralCoin: string, direction: string, loanCoin: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adjustmentAmount' is not null or undefined
            assertParamExists('createLoanFlexibleAdjustLtvV2', 'adjustmentAmount', adjustmentAmount)
            // verify required parameter 'collateralCoin' is not null or undefined
            assertParamExists('createLoanFlexibleAdjustLtvV2', 'collateralCoin', collateralCoin)
            // verify required parameter 'direction' is not null or undefined
            assertParamExists('createLoanFlexibleAdjustLtvV2', 'direction', direction)
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('createLoanFlexibleAdjustLtvV2', 'loanCoin', loanCoin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createLoanFlexibleAdjustLtvV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/loan/flexible/adjust/ltv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (adjustmentAmount !== undefined) { 
                localVarFormParams.set('adjustmentAmount', adjustmentAmount as any);
            }
    
            if (collateralCoin !== undefined) { 
                localVarFormParams.set('collateralCoin', collateralCoin as any);
            }
    
            if (direction !== undefined) { 
                localVarFormParams.set('direction', direction as any);
            }
    
            if (loanCoin !== undefined) { 
                localVarFormParams.set('loanCoin', loanCoin as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Borrow Flexible Loan
         * @summary Flexible Loan Borrow(TRADE)
         * @param {string} collateralCoin 
         * @param {string} loanCoin 
         * @param {number} timestamp 
         * @param {string} [collateralAmount] 
         * @param {string} [loanAmount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanFlexibleBorrowV2: async (collateralCoin: string, loanCoin: string, timestamp: number, collateralAmount?: string, loanAmount?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collateralCoin' is not null or undefined
            assertParamExists('createLoanFlexibleBorrowV2', 'collateralCoin', collateralCoin)
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('createLoanFlexibleBorrowV2', 'loanCoin', loanCoin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createLoanFlexibleBorrowV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/loan/flexible/borrow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (collateralAmount !== undefined) { 
                localVarFormParams.set('collateralAmount', collateralAmount as any);
            }
    
            if (collateralCoin !== undefined) { 
                localVarFormParams.set('collateralCoin', collateralCoin as any);
            }
    
            if (loanAmount !== undefined) { 
                localVarFormParams.set('loanAmount', loanAmount as any);
            }
    
            if (loanCoin !== undefined) { 
                localVarFormParams.set('loanCoin', loanCoin as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ** Request Weight(UID) ** 6000 Parameters: - repayAmount refers to the loan amount the user would like to repay
         * @summary Flexible Loan Collateral Repayment (TRADE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanFlexibleRepayCollateralV2: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v2/loan/flexible/repay/collateral`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flexible Loan Repay
         * @summary Flexible Loan Repay(TRADE)
         * @param {string} collateralCoin 
         * @param {string} loanCoin 
         * @param {string} repayAmount 
         * @param {number} timestamp 
         * @param {boolean} [collateralReturn] 
         * @param {boolean} [fullRepayment] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanFlexibleRepayV2: async (collateralCoin: string, loanCoin: string, repayAmount: string, timestamp: number, collateralReturn?: boolean, fullRepayment?: boolean, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collateralCoin' is not null or undefined
            assertParamExists('createLoanFlexibleRepayV2', 'collateralCoin', collateralCoin)
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('createLoanFlexibleRepayV2', 'loanCoin', loanCoin)
            // verify required parameter 'repayAmount' is not null or undefined
            assertParamExists('createLoanFlexibleRepayV2', 'repayAmount', repayAmount)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createLoanFlexibleRepayV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/loan/flexible/repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (collateralCoin !== undefined) { 
                localVarFormParams.set('collateralCoin', collateralCoin as any);
            }
    
            if (collateralReturn !== undefined) { 
                localVarFormParams.set('collateralReturn', collateralReturn as any);
            }
    
            if (fullRepayment !== undefined) { 
                localVarFormParams.set('fullRepayment', fullRepayment as any);
            }
    
            if (loanCoin !== undefined) { 
                localVarFormParams.set('loanCoin', loanCoin as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (repayAmount !== undefined) { 
                localVarFormParams.set('repayAmount', repayAmount as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Loan Borrow History
         * @summary Get Loan Borrow History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] orderId in &#x60;POST /sapi/v1/loan/borrow&#x60;
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000.
         * @param {number} [limit] Default: 10; max: 100.
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanBorrowHistoryV1: async (timestamp: number, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanBorrowHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/borrow/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Flexible Loan Borrow History
         * @summary Get Flexible Loan Borrow History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleBorrowHistoryV2: async (timestamp: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanFlexibleBorrowHistoryV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/loan/flexible/borrow/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get LTV information and collateral limit of flexible loan\'s collateral assets. The collateral limit is shown in USD value.
         * @summary Get Flexible Loan Collateral Assets Data(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [collateralCoin] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleCollateralDataV2: async (timestamp: number, collateralCoin?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanFlexibleCollateralDataV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/loan/flexible/collateral/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Flexible Loan Liquidation History (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleLiquidationHistoryV2: async (timestamp: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanFlexibleLiquidationHistoryV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/loan/flexible/liquidation/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.
         * @summary Get Flexible Loan Assets Data(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleLoanableDataV2: async (timestamp: number, loanCoin?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanFlexibleLoanableDataV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/loan/flexible/loanable/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Flexible Loan LTV Adjustment History
         * @summary Get Flexible Loan LTV Adjustment History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleLtvAdjustmentHistoryV2: async (timestamp: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanFlexibleLtvAdjustmentHistoryV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/loan/flexible/ltv/adjustment/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Flexible Loan Ongoing Orders
         * @summary Get Flexible Loan Ongoing Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleOngoingOrdersV2: async (timestamp: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanFlexibleOngoingOrdersV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/loan/flexible/ongoing/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Flexible Loan Repayment History
         * @summary Get Flexible Loan Repayment History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleRepayHistoryV2: async (timestamp: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanFlexibleRepayHistoryV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/loan/flexible/repay/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the latest rate of collateral coin/loan coin when using collateral repay.
         * @summary Check Collateral Repay Rate (USER_DATA)
         * @param {string} loanCoin 
         * @param {string} collateralCoin 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleRepayRateV2: async (loanCoin: string, collateralCoin: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('getLoanFlexibleRepayRateV2', 'loanCoin', loanCoin)
            // verify required parameter 'collateralCoin' is not null or undefined
            assertParamExists('getLoanFlexibleRepayRateV2', 'collateralCoin', collateralCoin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanFlexibleRepayRateV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/loan/flexible/repay/rate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Crypto Loans Income History
         * @summary Get Crypto Loans Income History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [type] All types will be returned by default. Enum：&#x60;borrowIn&#x60; ,&#x60;collateralSpent&#x60;, &#x60;repayAmount&#x60;, &#x60;collateralReturn&#x60;(Collateral return after repayment), &#x60;addCollateral&#x60;, &#x60;removeCollateral&#x60;, &#x60;collateralReturnAfterLiquidation&#x60;
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] default 20, max 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanIncomeV1: async (timestamp: number, asset?: string, type?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanIncomeV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/income`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Loan LTV Adjustment History
         * @summary Get Loan LTV Adjustment History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanLtvAdjustmentHistoryV1: async (timestamp: number, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanLtvAdjustmentHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/ltv/adjustment/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Loan Repayment History
         * @summary Get Loan Repayment History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanRepayHistoryV1: async (timestamp: number, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLoanRepayHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/loan/repay/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CryptoLoanApi - functional programming interface
 * @export
 */
export const CryptoLoanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CryptoLoanApiAxiosParamCreator(configuration)
    return {
        /**
         * Flexible Loan Adjust LTV
         * @summary Flexible Loan Adjust LTV(TRADE)
         * @param {string} adjustmentAmount 
         * @param {string} collateralCoin 
         * @param {string} direction 
         * @param {string} loanCoin 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLoanFlexibleAdjustLtvV2(adjustmentAmount: string, collateralCoin: string, direction: string, loanCoin: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoanFlexibleAdjustLtvV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLoanFlexibleAdjustLtvV2(adjustmentAmount, collateralCoin, direction, loanCoin, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.createLoanFlexibleAdjustLtvV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Borrow Flexible Loan
         * @summary Flexible Loan Borrow(TRADE)
         * @param {string} collateralCoin 
         * @param {string} loanCoin 
         * @param {number} timestamp 
         * @param {string} [collateralAmount] 
         * @param {string} [loanAmount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLoanFlexibleBorrowV2(collateralCoin: string, loanCoin: string, timestamp: number, collateralAmount?: string, loanAmount?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoanFlexibleBorrowV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLoanFlexibleBorrowV2(collateralCoin, loanCoin, timestamp, collateralAmount, loanAmount, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.createLoanFlexibleBorrowV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ** Request Weight(UID) ** 6000 Parameters: - repayAmount refers to the loan amount the user would like to repay
         * @summary Flexible Loan Collateral Repayment (TRADE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLoanFlexibleRepayCollateralV2(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoanFlexibleRepayCollateralV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLoanFlexibleRepayCollateralV2(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.createLoanFlexibleRepayCollateralV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flexible Loan Repay
         * @summary Flexible Loan Repay(TRADE)
         * @param {string} collateralCoin 
         * @param {string} loanCoin 
         * @param {string} repayAmount 
         * @param {number} timestamp 
         * @param {boolean} [collateralReturn] 
         * @param {boolean} [fullRepayment] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLoanFlexibleRepayV2(collateralCoin: string, loanCoin: string, repayAmount: string, timestamp: number, collateralReturn?: boolean, fullRepayment?: boolean, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLoanFlexibleRepayV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLoanFlexibleRepayV2(collateralCoin, loanCoin, repayAmount, timestamp, collateralReturn, fullRepayment, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.createLoanFlexibleRepayV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Loan Borrow History
         * @summary Get Loan Borrow History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] orderId in &#x60;POST /sapi/v1/loan/borrow&#x60;
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000.
         * @param {number} [limit] Default: 10; max: 100.
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanBorrowHistoryV1(timestamp: number, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanBorrowHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanBorrowHistoryV1(timestamp, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanBorrowHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Flexible Loan Borrow History
         * @summary Get Flexible Loan Borrow History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanFlexibleBorrowHistoryV2(timestamp: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanFlexibleBorrowHistoryV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanFlexibleBorrowHistoryV2(timestamp, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanFlexibleBorrowHistoryV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get LTV information and collateral limit of flexible loan\'s collateral assets. The collateral limit is shown in USD value.
         * @summary Get Flexible Loan Collateral Assets Data(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [collateralCoin] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanFlexibleCollateralDataV2(timestamp: number, collateralCoin?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanFlexibleCollateralDataV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanFlexibleCollateralDataV2(timestamp, collateralCoin, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanFlexibleCollateralDataV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Flexible Loan Liquidation History (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanFlexibleLiquidationHistoryV2(timestamp: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanFlexibleLiquidationHistoryV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanFlexibleLiquidationHistoryV2(timestamp, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanFlexibleLiquidationHistoryV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.
         * @summary Get Flexible Loan Assets Data(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanFlexibleLoanableDataV2(timestamp: number, loanCoin?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanFlexibleLoanableDataV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanFlexibleLoanableDataV2(timestamp, loanCoin, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanFlexibleLoanableDataV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Flexible Loan LTV Adjustment History
         * @summary Get Flexible Loan LTV Adjustment History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanFlexibleLtvAdjustmentHistoryV2(timestamp: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanFlexibleLtvAdjustmentHistoryV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanFlexibleLtvAdjustmentHistoryV2(timestamp, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanFlexibleLtvAdjustmentHistoryV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Flexible Loan Ongoing Orders
         * @summary Get Flexible Loan Ongoing Orders(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanFlexibleOngoingOrdersV2(timestamp: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanFlexibleOngoingOrdersV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanFlexibleOngoingOrdersV2(timestamp, loanCoin, collateralCoin, current, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanFlexibleOngoingOrdersV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Flexible Loan Repayment History
         * @summary Get Flexible Loan Repayment History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanFlexibleRepayHistoryV2(timestamp: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanFlexibleRepayHistoryV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanFlexibleRepayHistoryV2(timestamp, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanFlexibleRepayHistoryV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the latest rate of collateral coin/loan coin when using collateral repay.
         * @summary Check Collateral Repay Rate (USER_DATA)
         * @param {string} loanCoin 
         * @param {string} collateralCoin 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanFlexibleRepayRateV2(loanCoin: string, collateralCoin: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanFlexibleRepayRateV2Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanFlexibleRepayRateV2(loanCoin, collateralCoin, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanFlexibleRepayRateV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Crypto Loans Income History
         * @summary Get Crypto Loans Income History(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [type] All types will be returned by default. Enum：&#x60;borrowIn&#x60; ,&#x60;collateralSpent&#x60;, &#x60;repayAmount&#x60;, &#x60;collateralReturn&#x60;(Collateral return after repayment), &#x60;addCollateral&#x60;, &#x60;removeCollateral&#x60;, &#x60;collateralReturnAfterLiquidation&#x60;
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] default 20, max 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanIncomeV1(timestamp: number, asset?: string, type?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLoanIncomeV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanIncomeV1(timestamp, asset, type, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanIncomeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Loan LTV Adjustment History
         * @summary Get Loan LTV Adjustment History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanLtvAdjustmentHistoryV1(timestamp: number, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanLtvAdjustmentHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanLtvAdjustmentHistoryV1(timestamp, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanLtvAdjustmentHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Loan Repayment History
         * @summary Get Loan Repayment History(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [orderId] 
         * @param {string} [loanCoin] 
         * @param {string} [collateralCoin] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanRepayHistoryV1(timestamp: number, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoanRepayHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanRepayHistoryV1(timestamp, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CryptoLoanApi.getLoanRepayHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CryptoLoanApi - factory interface
 * @export
 */
export const CryptoLoanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CryptoLoanApiFp(configuration)
    return {
        /**
         * Flexible Loan Adjust LTV
         * @summary Flexible Loan Adjust LTV(TRADE)
         * @param {CryptoLoanApiCreateLoanFlexibleAdjustLtvV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanFlexibleAdjustLtvV2(requestParameters: CryptoLoanApiCreateLoanFlexibleAdjustLtvV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanFlexibleAdjustLtvV2Resp> {
            return localVarFp.createLoanFlexibleAdjustLtvV2(requestParameters.adjustmentAmount, requestParameters.collateralCoin, requestParameters.direction, requestParameters.loanCoin, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Borrow Flexible Loan
         * @summary Flexible Loan Borrow(TRADE)
         * @param {CryptoLoanApiCreateLoanFlexibleBorrowV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanFlexibleBorrowV2(requestParameters: CryptoLoanApiCreateLoanFlexibleBorrowV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanFlexibleBorrowV2Resp> {
            return localVarFp.createLoanFlexibleBorrowV2(requestParameters.collateralCoin, requestParameters.loanCoin, requestParameters.timestamp, requestParameters.collateralAmount, requestParameters.loanAmount, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * ** Request Weight(UID) ** 6000 Parameters: - repayAmount refers to the loan amount the user would like to repay
         * @summary Flexible Loan Collateral Repayment (TRADE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanFlexibleRepayCollateralV2(options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanFlexibleRepayCollateralV2Resp> {
            return localVarFp.createLoanFlexibleRepayCollateralV2(options).then((request) => request(axios, basePath));
        },
        /**
         * Flexible Loan Repay
         * @summary Flexible Loan Repay(TRADE)
         * @param {CryptoLoanApiCreateLoanFlexibleRepayV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanFlexibleRepayV2(requestParameters: CryptoLoanApiCreateLoanFlexibleRepayV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanFlexibleRepayV2Resp> {
            return localVarFp.createLoanFlexibleRepayV2(requestParameters.collateralCoin, requestParameters.loanCoin, requestParameters.repayAmount, requestParameters.timestamp, requestParameters.collateralReturn, requestParameters.fullRepayment, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Loan Borrow History
         * @summary Get Loan Borrow History(USER_DATA)
         * @param {CryptoLoanApiGetLoanBorrowHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanBorrowHistoryV1(requestParameters: CryptoLoanApiGetLoanBorrowHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanBorrowHistoryV1Resp> {
            return localVarFp.getLoanBorrowHistoryV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Flexible Loan Borrow History
         * @summary Get Flexible Loan Borrow History(USER_DATA)
         * @param {CryptoLoanApiGetLoanFlexibleBorrowHistoryV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleBorrowHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleBorrowHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleBorrowHistoryV2Resp> {
            return localVarFp.getLoanFlexibleBorrowHistoryV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get LTV information and collateral limit of flexible loan\'s collateral assets. The collateral limit is shown in USD value.
         * @summary Get Flexible Loan Collateral Assets Data(USER_DATA)
         * @param {CryptoLoanApiGetLoanFlexibleCollateralDataV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleCollateralDataV2(requestParameters: CryptoLoanApiGetLoanFlexibleCollateralDataV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleCollateralDataV2Resp> {
            return localVarFp.getLoanFlexibleCollateralDataV2(requestParameters.timestamp, requestParameters.collateralCoin, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Flexible Loan Liquidation History (USER_DATA)
         * @param {CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleLiquidationHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleLiquidationHistoryV2Resp> {
            return localVarFp.getLoanFlexibleLiquidationHistoryV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.
         * @summary Get Flexible Loan Assets Data(USER_DATA)
         * @param {CryptoLoanApiGetLoanFlexibleLoanableDataV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleLoanableDataV2(requestParameters: CryptoLoanApiGetLoanFlexibleLoanableDataV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleLoanableDataV2Resp> {
            return localVarFp.getLoanFlexibleLoanableDataV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Flexible Loan LTV Adjustment History
         * @summary Get Flexible Loan LTV Adjustment History(USER_DATA)
         * @param {CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleLtvAdjustmentHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleLtvAdjustmentHistoryV2Resp> {
            return localVarFp.getLoanFlexibleLtvAdjustmentHistoryV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Flexible Loan Ongoing Orders
         * @summary Get Flexible Loan Ongoing Orders(USER_DATA)
         * @param {CryptoLoanApiGetLoanFlexibleOngoingOrdersV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleOngoingOrdersV2(requestParameters: CryptoLoanApiGetLoanFlexibleOngoingOrdersV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleOngoingOrdersV2Resp> {
            return localVarFp.getLoanFlexibleOngoingOrdersV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Flexible Loan Repayment History
         * @summary Get Flexible Loan Repayment History(USER_DATA)
         * @param {CryptoLoanApiGetLoanFlexibleRepayHistoryV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleRepayHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleRepayHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleRepayHistoryV2Resp> {
            return localVarFp.getLoanFlexibleRepayHistoryV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the latest rate of collateral coin/loan coin when using collateral repay.
         * @summary Check Collateral Repay Rate (USER_DATA)
         * @param {CryptoLoanApiGetLoanFlexibleRepayRateV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanFlexibleRepayRateV2(requestParameters: CryptoLoanApiGetLoanFlexibleRepayRateV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleRepayRateV2Resp> {
            return localVarFp.getLoanFlexibleRepayRateV2(requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Crypto Loans Income History
         * @summary Get Crypto Loans Income History(USER_DATA)
         * @param {CryptoLoanApiGetLoanIncomeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanIncomeV1(requestParameters: CryptoLoanApiGetLoanIncomeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLoanIncomeV1RespItem>> {
            return localVarFp.getLoanIncomeV1(requestParameters.timestamp, requestParameters.asset, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Loan LTV Adjustment History
         * @summary Get Loan LTV Adjustment History(USER_DATA)
         * @param {CryptoLoanApiGetLoanLtvAdjustmentHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanLtvAdjustmentHistoryV1(requestParameters: CryptoLoanApiGetLoanLtvAdjustmentHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanLtvAdjustmentHistoryV1Resp> {
            return localVarFp.getLoanLtvAdjustmentHistoryV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Loan Repayment History
         * @summary Get Loan Repayment History(USER_DATA)
         * @param {CryptoLoanApiGetLoanRepayHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanRepayHistoryV1(requestParameters: CryptoLoanApiGetLoanRepayHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanRepayHistoryV1Resp> {
            return localVarFp.getLoanRepayHistoryV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CryptoLoanApi - interface
 * @export
 * @interface CryptoLoanApi
 */
export interface CryptoLoanApiInterface {
    /**
     * Flexible Loan Adjust LTV
     * @summary Flexible Loan Adjust LTV(TRADE)
     * @param {CryptoLoanApiCreateLoanFlexibleAdjustLtvV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    createLoanFlexibleAdjustLtvV2(requestParameters: CryptoLoanApiCreateLoanFlexibleAdjustLtvV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanFlexibleAdjustLtvV2Resp>;

    /**
     * Borrow Flexible Loan
     * @summary Flexible Loan Borrow(TRADE)
     * @param {CryptoLoanApiCreateLoanFlexibleBorrowV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    createLoanFlexibleBorrowV2(requestParameters: CryptoLoanApiCreateLoanFlexibleBorrowV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanFlexibleBorrowV2Resp>;

    /**
     * ** Request Weight(UID) ** 6000 Parameters: - repayAmount refers to the loan amount the user would like to repay
     * @summary Flexible Loan Collateral Repayment (TRADE)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    createLoanFlexibleRepayCollateralV2(options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanFlexibleRepayCollateralV2Resp>;

    /**
     * Flexible Loan Repay
     * @summary Flexible Loan Repay(TRADE)
     * @param {CryptoLoanApiCreateLoanFlexibleRepayV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    createLoanFlexibleRepayV2(requestParameters: CryptoLoanApiCreateLoanFlexibleRepayV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLoanFlexibleRepayV2Resp>;

    /**
     * Get Loan Borrow History
     * @summary Get Loan Borrow History(USER_DATA)
     * @param {CryptoLoanApiGetLoanBorrowHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanBorrowHistoryV1(requestParameters: CryptoLoanApiGetLoanBorrowHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanBorrowHistoryV1Resp>;

    /**
     * Get Flexible Loan Borrow History
     * @summary Get Flexible Loan Borrow History(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleBorrowHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanFlexibleBorrowHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleBorrowHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleBorrowHistoryV2Resp>;

    /**
     * Get LTV information and collateral limit of flexible loan\'s collateral assets. The collateral limit is shown in USD value.
     * @summary Get Flexible Loan Collateral Assets Data(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleCollateralDataV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanFlexibleCollateralDataV2(requestParameters: CryptoLoanApiGetLoanFlexibleCollateralDataV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleCollateralDataV2Resp>;

    /**
     * 
     * @summary Get Flexible Loan Liquidation History (USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanFlexibleLiquidationHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleLiquidationHistoryV2Resp>;

    /**
     * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.
     * @summary Get Flexible Loan Assets Data(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleLoanableDataV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanFlexibleLoanableDataV2(requestParameters: CryptoLoanApiGetLoanFlexibleLoanableDataV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleLoanableDataV2Resp>;

    /**
     * Get Flexible Loan LTV Adjustment History
     * @summary Get Flexible Loan LTV Adjustment History(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanFlexibleLtvAdjustmentHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleLtvAdjustmentHistoryV2Resp>;

    /**
     * Get Flexible Loan Ongoing Orders
     * @summary Get Flexible Loan Ongoing Orders(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleOngoingOrdersV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanFlexibleOngoingOrdersV2(requestParameters: CryptoLoanApiGetLoanFlexibleOngoingOrdersV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleOngoingOrdersV2Resp>;

    /**
     * Get Flexible Loan Repayment History
     * @summary Get Flexible Loan Repayment History(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleRepayHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanFlexibleRepayHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleRepayHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleRepayHistoryV2Resp>;

    /**
     * Get the latest rate of collateral coin/loan coin when using collateral repay.
     * @summary Check Collateral Repay Rate (USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleRepayRateV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanFlexibleRepayRateV2(requestParameters: CryptoLoanApiGetLoanFlexibleRepayRateV2Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanFlexibleRepayRateV2Resp>;

    /**
     * Get Crypto Loans Income History
     * @summary Get Crypto Loans Income History(USER_DATA)
     * @param {CryptoLoanApiGetLoanIncomeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanIncomeV1(requestParameters: CryptoLoanApiGetLoanIncomeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLoanIncomeV1RespItem>>;

    /**
     * Get Loan LTV Adjustment History
     * @summary Get Loan LTV Adjustment History(USER_DATA)
     * @param {CryptoLoanApiGetLoanLtvAdjustmentHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanLtvAdjustmentHistoryV1(requestParameters: CryptoLoanApiGetLoanLtvAdjustmentHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanLtvAdjustmentHistoryV1Resp>;

    /**
     * Get Loan Repayment History
     * @summary Get Loan Repayment History(USER_DATA)
     * @param {CryptoLoanApiGetLoanRepayHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApiInterface
     */
    getLoanRepayHistoryV1(requestParameters: CryptoLoanApiGetLoanRepayHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetLoanRepayHistoryV1Resp>;

}

/**
 * Request parameters for createLoanFlexibleAdjustLtvV2 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiCreateLoanFlexibleAdjustLtvV2Request
 */
export interface CryptoLoanApiCreateLoanFlexibleAdjustLtvV2Request {
    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiCreateLoanFlexibleAdjustLtvV2
     */
    readonly adjustmentAmount: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiCreateLoanFlexibleAdjustLtvV2
     */
    readonly collateralCoin: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiCreateLoanFlexibleAdjustLtvV2
     */
    readonly direction: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiCreateLoanFlexibleAdjustLtvV2
     */
    readonly loanCoin: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiCreateLoanFlexibleAdjustLtvV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiCreateLoanFlexibleAdjustLtvV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createLoanFlexibleBorrowV2 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiCreateLoanFlexibleBorrowV2Request
 */
export interface CryptoLoanApiCreateLoanFlexibleBorrowV2Request {
    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiCreateLoanFlexibleBorrowV2
     */
    readonly collateralCoin: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiCreateLoanFlexibleBorrowV2
     */
    readonly loanCoin: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiCreateLoanFlexibleBorrowV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiCreateLoanFlexibleBorrowV2
     */
    readonly collateralAmount?: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiCreateLoanFlexibleBorrowV2
     */
    readonly loanAmount?: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiCreateLoanFlexibleBorrowV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createLoanFlexibleRepayV2 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiCreateLoanFlexibleRepayV2Request
 */
export interface CryptoLoanApiCreateLoanFlexibleRepayV2Request {
    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiCreateLoanFlexibleRepayV2
     */
    readonly collateralCoin: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiCreateLoanFlexibleRepayV2
     */
    readonly loanCoin: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiCreateLoanFlexibleRepayV2
     */
    readonly repayAmount: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiCreateLoanFlexibleRepayV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {boolean}
     * @memberof CryptoLoanApiCreateLoanFlexibleRepayV2
     */
    readonly collateralReturn?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CryptoLoanApiCreateLoanFlexibleRepayV2
     */
    readonly fullRepayment?: boolean

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiCreateLoanFlexibleRepayV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanBorrowHistoryV1 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanBorrowHistoryV1Request
 */
export interface CryptoLoanApiGetLoanBorrowHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanBorrowHistoryV1
     */
    readonly timestamp: number

    /**
     * orderId in &#x60;POST /sapi/v1/loan/borrow&#x60;
     * @type {number}
     * @memberof CryptoLoanApiGetLoanBorrowHistoryV1
     */
    readonly orderId?: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanBorrowHistoryV1
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanBorrowHistoryV1
     */
    readonly collateralCoin?: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanBorrowHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanBorrowHistoryV1
     */
    readonly endTime?: number

    /**
     * Current querying page. Start from 1; default: 1; max: 1000.
     * @type {number}
     * @memberof CryptoLoanApiGetLoanBorrowHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10; max: 100.
     * @type {number}
     * @memberof CryptoLoanApiGetLoanBorrowHistoryV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanBorrowHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanFlexibleBorrowHistoryV2 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanFlexibleBorrowHistoryV2Request
 */
export interface CryptoLoanApiGetLoanFlexibleBorrowHistoryV2Request {
    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleBorrowHistoryV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleBorrowHistoryV2
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleBorrowHistoryV2
     */
    readonly collateralCoin?: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleBorrowHistoryV2
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleBorrowHistoryV2
     */
    readonly endTime?: number

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleBorrowHistoryV2
     */
    readonly current?: number

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleBorrowHistoryV2
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleBorrowHistoryV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanFlexibleCollateralDataV2 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanFlexibleCollateralDataV2Request
 */
export interface CryptoLoanApiGetLoanFlexibleCollateralDataV2Request {
    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleCollateralDataV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleCollateralDataV2
     */
    readonly collateralCoin?: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleCollateralDataV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanFlexibleLiquidationHistoryV2 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2Request
 */
export interface CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2Request {
    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2
     */
    readonly collateralCoin?: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2
     */
    readonly endTime?: number

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2
     */
    readonly current?: number

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanFlexibleLoanableDataV2 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanFlexibleLoanableDataV2Request
 */
export interface CryptoLoanApiGetLoanFlexibleLoanableDataV2Request {
    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLoanableDataV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleLoanableDataV2
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLoanableDataV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanFlexibleLtvAdjustmentHistoryV2 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2Request
 */
export interface CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2Request {
    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2
     */
    readonly collateralCoin?: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2
     */
    readonly endTime?: number

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2
     */
    readonly current?: number

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanFlexibleOngoingOrdersV2 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanFlexibleOngoingOrdersV2Request
 */
export interface CryptoLoanApiGetLoanFlexibleOngoingOrdersV2Request {
    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleOngoingOrdersV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleOngoingOrdersV2
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleOngoingOrdersV2
     */
    readonly collateralCoin?: string

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleOngoingOrdersV2
     */
    readonly current?: number

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleOngoingOrdersV2
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleOngoingOrdersV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanFlexibleRepayHistoryV2 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanFlexibleRepayHistoryV2Request
 */
export interface CryptoLoanApiGetLoanFlexibleRepayHistoryV2Request {
    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayHistoryV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayHistoryV2
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayHistoryV2
     */
    readonly collateralCoin?: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayHistoryV2
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayHistoryV2
     */
    readonly endTime?: number

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayHistoryV2
     */
    readonly current?: number

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayHistoryV2
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayHistoryV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanFlexibleRepayRateV2 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanFlexibleRepayRateV2Request
 */
export interface CryptoLoanApiGetLoanFlexibleRepayRateV2Request {
    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayRateV2
     */
    readonly loanCoin: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayRateV2
     */
    readonly collateralCoin: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayRateV2
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanFlexibleRepayRateV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanIncomeV1 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanIncomeV1Request
 */
export interface CryptoLoanApiGetLoanIncomeV1Request {
    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanIncomeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanIncomeV1
     */
    readonly asset?: string

    /**
     * All types will be returned by default. Enum：&#x60;borrowIn&#x60; ,&#x60;collateralSpent&#x60;, &#x60;repayAmount&#x60;, &#x60;collateralReturn&#x60;(Collateral return after repayment), &#x60;addCollateral&#x60;, &#x60;removeCollateral&#x60;, &#x60;collateralReturnAfterLiquidation&#x60;
     * @type {string}
     * @memberof CryptoLoanApiGetLoanIncomeV1
     */
    readonly type?: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanIncomeV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanIncomeV1
     */
    readonly endTime?: number

    /**
     * default 20, max 100
     * @type {number}
     * @memberof CryptoLoanApiGetLoanIncomeV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanIncomeV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanLtvAdjustmentHistoryV1 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanLtvAdjustmentHistoryV1Request
 */
export interface CryptoLoanApiGetLoanLtvAdjustmentHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanLtvAdjustmentHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanLtvAdjustmentHistoryV1
     */
    readonly orderId?: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanLtvAdjustmentHistoryV1
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanLtvAdjustmentHistoryV1
     */
    readonly collateralCoin?: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanLtvAdjustmentHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanLtvAdjustmentHistoryV1
     */
    readonly endTime?: number

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof CryptoLoanApiGetLoanLtvAdjustmentHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof CryptoLoanApiGetLoanLtvAdjustmentHistoryV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanLtvAdjustmentHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLoanRepayHistoryV1 operation in CryptoLoanApi.
 * @export
 * @interface CryptoLoanApiGetLoanRepayHistoryV1Request
 */
export interface CryptoLoanApiGetLoanRepayHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanRepayHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanRepayHistoryV1
     */
    readonly orderId?: number

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanRepayHistoryV1
     */
    readonly loanCoin?: string

    /**
     * 
     * @type {string}
     * @memberof CryptoLoanApiGetLoanRepayHistoryV1
     */
    readonly collateralCoin?: string

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanRepayHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanRepayHistoryV1
     */
    readonly endTime?: number

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof CryptoLoanApiGetLoanRepayHistoryV1
     */
    readonly current?: number

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof CryptoLoanApiGetLoanRepayHistoryV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof CryptoLoanApiGetLoanRepayHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * CryptoLoanApi - object-oriented interface
 * @export
 * @class CryptoLoanApi
 * @extends {BaseAPI}
 */
export class CryptoLoanApi extends BaseAPI implements CryptoLoanApiInterface {
    /**
     * Flexible Loan Adjust LTV
     * @summary Flexible Loan Adjust LTV(TRADE)
     * @param {CryptoLoanApiCreateLoanFlexibleAdjustLtvV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public createLoanFlexibleAdjustLtvV2(requestParameters: CryptoLoanApiCreateLoanFlexibleAdjustLtvV2Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).createLoanFlexibleAdjustLtvV2(requestParameters.adjustmentAmount, requestParameters.collateralCoin, requestParameters.direction, requestParameters.loanCoin, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Borrow Flexible Loan
     * @summary Flexible Loan Borrow(TRADE)
     * @param {CryptoLoanApiCreateLoanFlexibleBorrowV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public createLoanFlexibleBorrowV2(requestParameters: CryptoLoanApiCreateLoanFlexibleBorrowV2Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).createLoanFlexibleBorrowV2(requestParameters.collateralCoin, requestParameters.loanCoin, requestParameters.timestamp, requestParameters.collateralAmount, requestParameters.loanAmount, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ** Request Weight(UID) ** 6000 Parameters: - repayAmount refers to the loan amount the user would like to repay
     * @summary Flexible Loan Collateral Repayment (TRADE)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public createLoanFlexibleRepayCollateralV2(options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).createLoanFlexibleRepayCollateralV2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flexible Loan Repay
     * @summary Flexible Loan Repay(TRADE)
     * @param {CryptoLoanApiCreateLoanFlexibleRepayV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public createLoanFlexibleRepayV2(requestParameters: CryptoLoanApiCreateLoanFlexibleRepayV2Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).createLoanFlexibleRepayV2(requestParameters.collateralCoin, requestParameters.loanCoin, requestParameters.repayAmount, requestParameters.timestamp, requestParameters.collateralReturn, requestParameters.fullRepayment, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Loan Borrow History
     * @summary Get Loan Borrow History(USER_DATA)
     * @param {CryptoLoanApiGetLoanBorrowHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanBorrowHistoryV1(requestParameters: CryptoLoanApiGetLoanBorrowHistoryV1Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanBorrowHistoryV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Flexible Loan Borrow History
     * @summary Get Flexible Loan Borrow History(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleBorrowHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanFlexibleBorrowHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleBorrowHistoryV2Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanFlexibleBorrowHistoryV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get LTV information and collateral limit of flexible loan\'s collateral assets. The collateral limit is shown in USD value.
     * @summary Get Flexible Loan Collateral Assets Data(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleCollateralDataV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanFlexibleCollateralDataV2(requestParameters: CryptoLoanApiGetLoanFlexibleCollateralDataV2Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanFlexibleCollateralDataV2(requestParameters.timestamp, requestParameters.collateralCoin, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Flexible Loan Liquidation History (USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanFlexibleLiquidationHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleLiquidationHistoryV2Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanFlexibleLiquidationHistoryV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.
     * @summary Get Flexible Loan Assets Data(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleLoanableDataV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanFlexibleLoanableDataV2(requestParameters: CryptoLoanApiGetLoanFlexibleLoanableDataV2Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanFlexibleLoanableDataV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Flexible Loan LTV Adjustment History
     * @summary Get Flexible Loan LTV Adjustment History(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanFlexibleLtvAdjustmentHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleLtvAdjustmentHistoryV2Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanFlexibleLtvAdjustmentHistoryV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Flexible Loan Ongoing Orders
     * @summary Get Flexible Loan Ongoing Orders(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleOngoingOrdersV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanFlexibleOngoingOrdersV2(requestParameters: CryptoLoanApiGetLoanFlexibleOngoingOrdersV2Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanFlexibleOngoingOrdersV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Flexible Loan Repayment History
     * @summary Get Flexible Loan Repayment History(USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleRepayHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanFlexibleRepayHistoryV2(requestParameters: CryptoLoanApiGetLoanFlexibleRepayHistoryV2Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanFlexibleRepayHistoryV2(requestParameters.timestamp, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the latest rate of collateral coin/loan coin when using collateral repay.
     * @summary Check Collateral Repay Rate (USER_DATA)
     * @param {CryptoLoanApiGetLoanFlexibleRepayRateV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanFlexibleRepayRateV2(requestParameters: CryptoLoanApiGetLoanFlexibleRepayRateV2Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanFlexibleRepayRateV2(requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Crypto Loans Income History
     * @summary Get Crypto Loans Income History(USER_DATA)
     * @param {CryptoLoanApiGetLoanIncomeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanIncomeV1(requestParameters: CryptoLoanApiGetLoanIncomeV1Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanIncomeV1(requestParameters.timestamp, requestParameters.asset, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Loan LTV Adjustment History
     * @summary Get Loan LTV Adjustment History(USER_DATA)
     * @param {CryptoLoanApiGetLoanLtvAdjustmentHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanLtvAdjustmentHistoryV1(requestParameters: CryptoLoanApiGetLoanLtvAdjustmentHistoryV1Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanLtvAdjustmentHistoryV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Loan Repayment History
     * @summary Get Loan Repayment History(USER_DATA)
     * @param {CryptoLoanApiGetLoanRepayHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoanApi
     */
    public getLoanRepayHistoryV1(requestParameters: CryptoLoanApiGetLoanRepayHistoryV1Request, options?: RawAxiosRequestConfig) {
        return CryptoLoanApiFp(this.configuration).getLoanRepayHistoryV1(requestParameters.timestamp, requestParameters.orderId, requestParameters.loanCoin, requestParameters.collateralCoin, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

