/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { SpotGetAggTradesV3RespItem } from '../model';
// @ts-ignore
import type { SpotGetAvgPriceV3Resp } from '../model';
// @ts-ignore
import type { SpotGetDepthV3Resp } from '../model';
// @ts-ignore
import type { SpotGetHistoricalTradesV3RespItem } from '../model';
// @ts-ignore
import type { SpotGetKlinesV3200ResponseInnerInner } from '../model';
// @ts-ignore
import type { SpotGetTicker24hrV3Resp } from '../model';
// @ts-ignore
import type { SpotGetTickerBookTickerV3Resp } from '../model';
// @ts-ignore
import type { SpotGetTickerPriceV3Resp } from '../model';
// @ts-ignore
import type { SpotGetTickerTradingDayV3Resp } from '../model';
// @ts-ignore
import type { SpotGetTickerV3Resp } from '../model';
// @ts-ignore
import type { SpotGetTradesV3RespItem } from '../model';
/**
 * MarketDataApi - axios parameter creator
 * @export
 */
export const MarketDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get compressed, aggregate trades. Trades that fill at the time, from the same taker order, with the same price will have the quantity aggregated.
         * @summary Compressed/Aggregate trades list
         * @param {string} symbol 
         * @param {number} [fromId] ID to get aggregate trades from INCLUSIVE.
         * @param {number} [startTime] Timestamp in ms to get aggregate trades from INCLUSIVE.
         * @param {number} [endTime] Timestamp in ms to get aggregate trades until INCLUSIVE.
         * @param {number} [limit] Default 500; max 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetAggTradesV3: async (symbol: string, fromId?: number, startTime?: number, endTime?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetAggTradesV3', 'symbol', symbol)
            const localVarPath = `/api/v3/aggTrades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['fromId'] = fromId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Current average price for a symbol.
         * @summary Current average price
         * @param {string} symbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetAvgPriceV3: async (symbol: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetAvgPriceV3', 'symbol', symbol)
            const localVarPath = `/api/v3/avgPrice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Order book
         * @param {string} symbol 
         * @param {number} [limit] Default 100; max 5000. &lt;br/&gt; If limit &amp;gt; 5000. then the response will truncate to 5000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetDepthV3: async (symbol: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetDepthV3', 'symbol', symbol)
            const localVarPath = `/api/v3/depth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get older trades.
         * @summary Old trade lookup
         * @param {string} symbol 
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [fromId] TradeId to fetch from. Default gets most recent trades.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetHistoricalTradesV3: async (symbol: string, limit?: number, fromId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetHistoricalTradesV3', 'symbol', symbol)
            const localVarPath = `/api/v3/historicalTrades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['fromId'] = fromId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.
         * @summary Kline/Candlestick data
         * @param {string} symbol 
         * @param {string} interval 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {string} [timeZone] Default: 0 (UTC)
         * @param {number} [limit] Default 500; max 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetKlinesV3: async (symbol: string, interval: string, startTime?: number, endTime?: number, timeZone?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetKlinesV3', 'symbol', symbol)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('spotGetKlinesV3', 'interval', interval)
            const localVarPath = `/api/v3/klines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (timeZone !== undefined) {
                localVarQueryParameter['timeZone'] = timeZone;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 24 hour rolling window price change statistics. Careful when accessing this with no symbol.
         * @summary 24hr ticker price change statistics
         * @param {string} [symbol] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, tickers for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;          Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {string} [symbols] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, tickers for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;          Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {SpotGetTicker24hrV3TypeEnum} [type] Supported values: &#x60;FULL&#x60; or &#x60;MINI&#x60;. &lt;br/&gt;If none provided, the default is &#x60;FULL&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTicker24hrV3: async (symbol?: string, symbols?: string, type?: SpotGetTicker24hrV3TypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/ticker/24hr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (symbols !== undefined) {
                localVarQueryParameter['symbols'] = symbols;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Best price/qty on the order book for a symbol or symbols.
         * @summary Symbol order book ticker
         * @param {string} [symbol] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, bookTickers for all symbols will be returned in an array.          &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {string} [symbols] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, bookTickers for all symbols will be returned in an array.          &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTickerBookTickerV3: async (symbol?: string, symbols?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/ticker/bookTicker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (symbols !== undefined) {
                localVarQueryParameter['symbols'] = symbols;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Latest price for a symbol or symbols.
         * @summary Symbol price ticker
         * @param {string} [symbol] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, prices for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {string} [symbols] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, prices for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTickerPriceV3: async (symbol?: string, symbols?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/ticker/price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (symbols !== undefined) {
                localVarQueryParameter['symbols'] = symbols;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Price change statistics for a trading day. 4 for each requested symbol.  The weight for this request will cap at 200 once the number of symbols in the request is more than 50.
         * @summary Trading Day Ticker
         * @param {string} symbol Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
         * @param {string} symbols Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
         * @param {string} [timeZone] Default: 0 (UTC)
         * @param {SpotGetTickerTradingDayV3TypeEnum} [type] Supported values: &#x60;FULL&#x60; or &#x60;MINI&#x60;. &lt;br/&gt;If none provided, the default is &#x60;FULL&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTickerTradingDayV3: async (symbol: string, symbols: string, timeZone?: string, type?: SpotGetTickerTradingDayV3TypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetTickerTradingDayV3', 'symbol', symbol)
            // verify required parameter 'symbols' is not null or undefined
            assertParamExists('spotGetTickerTradingDayV3', 'symbols', symbols)
            const localVarPath = `/api/v3/ticker/tradingDay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (symbols !== undefined) {
                localVarQueryParameter['symbols'] = symbols;
            }

            if (timeZone !== undefined) {
                localVarQueryParameter['timeZone'] = timeZone;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: This endpoint is different from the GET /api/v3/ticker/24hr endpoint. The window used to compute statistics will be no more than 59999ms from the requested windowSize. openTime for /api/v3/ticker always starts on a minute, while the closeTime is the current time of the request. As such, the effective window will be up to 59999ms wider than windowSize. E.g. If the closeTime is 1641287867099 (January 04, 2022 09:17:47:099 UTC) , and the windowSize is 1d. the openTime will be: 1641201420000 (January 3, 2022, 09:17:00) 4 for each requested symbol regardless of windowSize.  The weight for this request will cap at 200 once the number of symbols in the request is more than 50.
         * @summary Rolling window price change statistics
         * @param {string} symbol Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
         * @param {string} symbols Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
         * @param {string} [windowSize] Defaults to &#x60;1d&#x60; if no parameter provided &lt;br/&gt; Supported &#x60;windowSize&#x60; values: &lt;br/&gt; &#x60;1m&#x60;,&#x60;2m&#x60;....&#x60;59m&#x60; for minutes &lt;br/&gt; &#x60;1h&#x60;, &#x60;2h&#x60;....&#x60;23h&#x60; - for hours &lt;br/&gt; &#x60;1d&#x60;...&#x60;7d&#x60; - for days &lt;br/&gt;&lt;br/&gt; Units cannot be combined (e.g. &#x60;1d2h&#x60; is not allowed)
         * @param {SpotGetTickerV3TypeEnum} [type] Supported values: &#x60;FULL&#x60; or &#x60;MINI&#x60;. &lt;br/&gt;If none provided, the default is &#x60;FULL&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTickerV3: async (symbol: string, symbols: string, windowSize?: string, type?: SpotGetTickerV3TypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetTickerV3', 'symbol', symbol)
            // verify required parameter 'symbols' is not null or undefined
            assertParamExists('spotGetTickerV3', 'symbols', symbols)
            const localVarPath = `/api/v3/ticker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (symbols !== undefined) {
                localVarQueryParameter['symbols'] = symbols;
            }

            if (windowSize !== undefined) {
                localVarQueryParameter['windowSize'] = windowSize;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recent trades.
         * @summary Recent trades list
         * @param {string} symbol 
         * @param {number} [limit] Default 500; max 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTradesV3: async (symbol: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetTradesV3', 'symbol', symbol)
            const localVarPath = `/api/v3/trades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The request is similar to klines having the same parameters and response. uiKlines return modified kline data, optimized for presentation of candlestick charts.
         * @summary UIKlines
         * @param {string} symbol 
         * @param {string} interval See &lt;a href&#x3D;\&quot;/docs/binance-spot-api-docs/rest-api/market-data-endpoints#kline-intervals\&quot;&gt;&#x60;klines&#x60;&lt;/a&gt;
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {string} [timeZone] Default: 0 (UTC)
         * @param {number} [limit] Default 500; max 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetUiKlinesV3: async (symbol: string, interval: string, startTime?: number, endTime?: number, timeZone?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('spotGetUiKlinesV3', 'symbol', symbol)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('spotGetUiKlinesV3', 'interval', interval)
            const localVarPath = `/api/v3/uiKlines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (timeZone !== undefined) {
                localVarQueryParameter['timeZone'] = timeZone;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketDataApi - functional programming interface
 * @export
 */
export const MarketDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Get compressed, aggregate trades. Trades that fill at the time, from the same taker order, with the same price will have the quantity aggregated.
         * @summary Compressed/Aggregate trades list
         * @param {string} symbol 
         * @param {number} [fromId] ID to get aggregate trades from INCLUSIVE.
         * @param {number} [startTime] Timestamp in ms to get aggregate trades from INCLUSIVE.
         * @param {number} [endTime] Timestamp in ms to get aggregate trades until INCLUSIVE.
         * @param {number} [limit] Default 500; max 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetAggTradesV3(symbol: string, fromId?: number, startTime?: number, endTime?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SpotGetAggTradesV3RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetAggTradesV3(symbol, fromId, startTime, endTime, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetAggTradesV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Current average price for a symbol.
         * @summary Current average price
         * @param {string} symbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetAvgPriceV3(symbol: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpotGetAvgPriceV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetAvgPriceV3(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetAvgPriceV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Order book
         * @param {string} symbol 
         * @param {number} [limit] Default 100; max 5000. &lt;br/&gt; If limit &amp;gt; 5000. then the response will truncate to 5000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetDepthV3(symbol: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpotGetDepthV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetDepthV3(symbol, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetDepthV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get older trades.
         * @summary Old trade lookup
         * @param {string} symbol 
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [fromId] TradeId to fetch from. Default gets most recent trades.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetHistoricalTradesV3(symbol: string, limit?: number, fromId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SpotGetHistoricalTradesV3RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetHistoricalTradesV3(symbol, limit, fromId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetHistoricalTradesV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.
         * @summary Kline/Candlestick data
         * @param {string} symbol 
         * @param {string} interval 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {string} [timeZone] Default: 0 (UTC)
         * @param {number} [limit] Default 500; max 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetKlinesV3(symbol: string, interval: string, startTime?: number, endTime?: number, timeZone?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Array<SpotGetKlinesV3200ResponseInnerInner>>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetKlinesV3(symbol, interval, startTime, endTime, timeZone, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetKlinesV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 24 hour rolling window price change statistics. Careful when accessing this with no symbol.
         * @summary 24hr ticker price change statistics
         * @param {string} [symbol] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, tickers for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;          Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {string} [symbols] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, tickers for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;          Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {SpotGetTicker24hrV3TypeEnum} [type] Supported values: &#x60;FULL&#x60; or &#x60;MINI&#x60;. &lt;br/&gt;If none provided, the default is &#x60;FULL&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetTicker24hrV3(symbol?: string, symbols?: string, type?: SpotGetTicker24hrV3TypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpotGetTicker24hrV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetTicker24hrV3(symbol, symbols, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetTicker24hrV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Best price/qty on the order book for a symbol or symbols.
         * @summary Symbol order book ticker
         * @param {string} [symbol] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, bookTickers for all symbols will be returned in an array.          &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {string} [symbols] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, bookTickers for all symbols will be returned in an array.          &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetTickerBookTickerV3(symbol?: string, symbols?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpotGetTickerBookTickerV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetTickerBookTickerV3(symbol, symbols, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetTickerBookTickerV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Latest price for a symbol or symbols.
         * @summary Symbol price ticker
         * @param {string} [symbol] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, prices for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {string} [symbols] Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, prices for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetTickerPriceV3(symbol?: string, symbols?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpotGetTickerPriceV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetTickerPriceV3(symbol, symbols, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetTickerPriceV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Price change statistics for a trading day. 4 for each requested symbol.  The weight for this request will cap at 200 once the number of symbols in the request is more than 50.
         * @summary Trading Day Ticker
         * @param {string} symbol Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
         * @param {string} symbols Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
         * @param {string} [timeZone] Default: 0 (UTC)
         * @param {SpotGetTickerTradingDayV3TypeEnum} [type] Supported values: &#x60;FULL&#x60; or &#x60;MINI&#x60;. &lt;br/&gt;If none provided, the default is &#x60;FULL&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetTickerTradingDayV3(symbol: string, symbols: string, timeZone?: string, type?: SpotGetTickerTradingDayV3TypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpotGetTickerTradingDayV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetTickerTradingDayV3(symbol, symbols, timeZone, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetTickerTradingDayV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Note: This endpoint is different from the GET /api/v3/ticker/24hr endpoint. The window used to compute statistics will be no more than 59999ms from the requested windowSize. openTime for /api/v3/ticker always starts on a minute, while the closeTime is the current time of the request. As such, the effective window will be up to 59999ms wider than windowSize. E.g. If the closeTime is 1641287867099 (January 04, 2022 09:17:47:099 UTC) , and the windowSize is 1d. the openTime will be: 1641201420000 (January 3, 2022, 09:17:00) 4 for each requested symbol regardless of windowSize.  The weight for this request will cap at 200 once the number of symbols in the request is more than 50.
         * @summary Rolling window price change statistics
         * @param {string} symbol Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
         * @param {string} symbols Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
         * @param {string} [windowSize] Defaults to &#x60;1d&#x60; if no parameter provided &lt;br/&gt; Supported &#x60;windowSize&#x60; values: &lt;br/&gt; &#x60;1m&#x60;,&#x60;2m&#x60;....&#x60;59m&#x60; for minutes &lt;br/&gt; &#x60;1h&#x60;, &#x60;2h&#x60;....&#x60;23h&#x60; - for hours &lt;br/&gt; &#x60;1d&#x60;...&#x60;7d&#x60; - for days &lt;br/&gt;&lt;br/&gt; Units cannot be combined (e.g. &#x60;1d2h&#x60; is not allowed)
         * @param {SpotGetTickerV3TypeEnum} [type] Supported values: &#x60;FULL&#x60; or &#x60;MINI&#x60;. &lt;br/&gt;If none provided, the default is &#x60;FULL&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetTickerV3(symbol: string, symbols: string, windowSize?: string, type?: SpotGetTickerV3TypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpotGetTickerV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetTickerV3(symbol, symbols, windowSize, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetTickerV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get recent trades.
         * @summary Recent trades list
         * @param {string} symbol 
         * @param {number} [limit] Default 500; max 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetTradesV3(symbol: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SpotGetTradesV3RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetTradesV3(symbol, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetTradesV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The request is similar to klines having the same parameters and response. uiKlines return modified kline data, optimized for presentation of candlestick charts.
         * @summary UIKlines
         * @param {string} symbol 
         * @param {string} interval See &lt;a href&#x3D;\&quot;/docs/binance-spot-api-docs/rest-api/market-data-endpoints#kline-intervals\&quot;&gt;&#x60;klines&#x60;&lt;/a&gt;
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {string} [timeZone] Default: 0 (UTC)
         * @param {number} [limit] Default 500; max 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotGetUiKlinesV3(symbol: string, interval: string, startTime?: number, endTime?: number, timeZone?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Array<SpotGetKlinesV3200ResponseInnerInner>>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotGetUiKlinesV3(symbol, interval, startTime, endTime, timeZone, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.spotGetUiKlinesV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MarketDataApi - factory interface
 * @export
 */
export const MarketDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketDataApiFp(configuration)
    return {
        /**
         * Get compressed, aggregate trades. Trades that fill at the time, from the same taker order, with the same price will have the quantity aggregated.
         * @summary Compressed/Aggregate trades list
         * @param {MarketDataApiSpotGetAggTradesV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetAggTradesV3(requestParameters: MarketDataApiSpotGetAggTradesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetAggTradesV3RespItem>> {
            return localVarFp.spotGetAggTradesV3(requestParameters.symbol, requestParameters.fromId, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Current average price for a symbol.
         * @summary Current average price
         * @param {MarketDataApiSpotGetAvgPriceV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetAvgPriceV3(requestParameters: MarketDataApiSpotGetAvgPriceV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetAvgPriceV3Resp> {
            return localVarFp.spotGetAvgPriceV3(requestParameters.symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Order book
         * @param {MarketDataApiSpotGetDepthV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetDepthV3(requestParameters: MarketDataApiSpotGetDepthV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetDepthV3Resp> {
            return localVarFp.spotGetDepthV3(requestParameters.symbol, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get older trades.
         * @summary Old trade lookup
         * @param {MarketDataApiSpotGetHistoricalTradesV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetHistoricalTradesV3(requestParameters: MarketDataApiSpotGetHistoricalTradesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetHistoricalTradesV3RespItem>> {
            return localVarFp.spotGetHistoricalTradesV3(requestParameters.symbol, requestParameters.limit, requestParameters.fromId, options).then((request) => request(axios, basePath));
        },
        /**
         * Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.
         * @summary Kline/Candlestick data
         * @param {MarketDataApiSpotGetKlinesV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetKlinesV3(requestParameters: MarketDataApiSpotGetKlinesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<Array<SpotGetKlinesV3200ResponseInnerInner>>> {
            return localVarFp.spotGetKlinesV3(requestParameters.symbol, requestParameters.interval, requestParameters.startTime, requestParameters.endTime, requestParameters.timeZone, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 24 hour rolling window price change statistics. Careful when accessing this with no symbol.
         * @summary 24hr ticker price change statistics
         * @param {MarketDataApiSpotGetTicker24hrV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTicker24hrV3(requestParameters: MarketDataApiSpotGetTicker24hrV3Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetTicker24hrV3Resp> {
            return localVarFp.spotGetTicker24hrV3(requestParameters.symbol, requestParameters.symbols, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * Best price/qty on the order book for a symbol or symbols.
         * @summary Symbol order book ticker
         * @param {MarketDataApiSpotGetTickerBookTickerV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTickerBookTickerV3(requestParameters: MarketDataApiSpotGetTickerBookTickerV3Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetTickerBookTickerV3Resp> {
            return localVarFp.spotGetTickerBookTickerV3(requestParameters.symbol, requestParameters.symbols, options).then((request) => request(axios, basePath));
        },
        /**
         * Latest price for a symbol or symbols.
         * @summary Symbol price ticker
         * @param {MarketDataApiSpotGetTickerPriceV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTickerPriceV3(requestParameters: MarketDataApiSpotGetTickerPriceV3Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetTickerPriceV3Resp> {
            return localVarFp.spotGetTickerPriceV3(requestParameters.symbol, requestParameters.symbols, options).then((request) => request(axios, basePath));
        },
        /**
         * Price change statistics for a trading day. 4 for each requested symbol.  The weight for this request will cap at 200 once the number of symbols in the request is more than 50.
         * @summary Trading Day Ticker
         * @param {MarketDataApiSpotGetTickerTradingDayV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTickerTradingDayV3(requestParameters: MarketDataApiSpotGetTickerTradingDayV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetTickerTradingDayV3Resp> {
            return localVarFp.spotGetTickerTradingDayV3(requestParameters.symbol, requestParameters.symbols, requestParameters.timeZone, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: This endpoint is different from the GET /api/v3/ticker/24hr endpoint. The window used to compute statistics will be no more than 59999ms from the requested windowSize. openTime for /api/v3/ticker always starts on a minute, while the closeTime is the current time of the request. As such, the effective window will be up to 59999ms wider than windowSize. E.g. If the closeTime is 1641287867099 (January 04, 2022 09:17:47:099 UTC) , and the windowSize is 1d. the openTime will be: 1641201420000 (January 3, 2022, 09:17:00) 4 for each requested symbol regardless of windowSize.  The weight for this request will cap at 200 once the number of symbols in the request is more than 50.
         * @summary Rolling window price change statistics
         * @param {MarketDataApiSpotGetTickerV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTickerV3(requestParameters: MarketDataApiSpotGetTickerV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetTickerV3Resp> {
            return localVarFp.spotGetTickerV3(requestParameters.symbol, requestParameters.symbols, requestParameters.windowSize, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * Get recent trades.
         * @summary Recent trades list
         * @param {MarketDataApiSpotGetTradesV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetTradesV3(requestParameters: MarketDataApiSpotGetTradesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetTradesV3RespItem>> {
            return localVarFp.spotGetTradesV3(requestParameters.symbol, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * The request is similar to klines having the same parameters and response. uiKlines return modified kline data, optimized for presentation of candlestick charts.
         * @summary UIKlines
         * @param {MarketDataApiSpotGetUiKlinesV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotGetUiKlinesV3(requestParameters: MarketDataApiSpotGetUiKlinesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<Array<SpotGetKlinesV3200ResponseInnerInner>>> {
            return localVarFp.spotGetUiKlinesV3(requestParameters.symbol, requestParameters.interval, requestParameters.startTime, requestParameters.endTime, requestParameters.timeZone, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketDataApi - interface
 * @export
 * @interface MarketDataApi
 */
export interface MarketDataApiInterface {
    /**
     * Get compressed, aggregate trades. Trades that fill at the time, from the same taker order, with the same price will have the quantity aggregated.
     * @summary Compressed/Aggregate trades list
     * @param {MarketDataApiSpotGetAggTradesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetAggTradesV3(requestParameters: MarketDataApiSpotGetAggTradesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetAggTradesV3RespItem>>;

    /**
     * Current average price for a symbol.
     * @summary Current average price
     * @param {MarketDataApiSpotGetAvgPriceV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetAvgPriceV3(requestParameters: MarketDataApiSpotGetAvgPriceV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetAvgPriceV3Resp>;

    /**
     * 
     * @summary Order book
     * @param {MarketDataApiSpotGetDepthV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetDepthV3(requestParameters: MarketDataApiSpotGetDepthV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetDepthV3Resp>;

    /**
     * Get older trades.
     * @summary Old trade lookup
     * @param {MarketDataApiSpotGetHistoricalTradesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetHistoricalTradesV3(requestParameters: MarketDataApiSpotGetHistoricalTradesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetHistoricalTradesV3RespItem>>;

    /**
     * Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.
     * @summary Kline/Candlestick data
     * @param {MarketDataApiSpotGetKlinesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetKlinesV3(requestParameters: MarketDataApiSpotGetKlinesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<Array<SpotGetKlinesV3200ResponseInnerInner>>>;

    /**
     * 24 hour rolling window price change statistics. Careful when accessing this with no symbol.
     * @summary 24hr ticker price change statistics
     * @param {MarketDataApiSpotGetTicker24hrV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetTicker24hrV3(requestParameters?: MarketDataApiSpotGetTicker24hrV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetTicker24hrV3Resp>;

    /**
     * Best price/qty on the order book for a symbol or symbols.
     * @summary Symbol order book ticker
     * @param {MarketDataApiSpotGetTickerBookTickerV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetTickerBookTickerV3(requestParameters?: MarketDataApiSpotGetTickerBookTickerV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetTickerBookTickerV3Resp>;

    /**
     * Latest price for a symbol or symbols.
     * @summary Symbol price ticker
     * @param {MarketDataApiSpotGetTickerPriceV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetTickerPriceV3(requestParameters?: MarketDataApiSpotGetTickerPriceV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetTickerPriceV3Resp>;

    /**
     * Price change statistics for a trading day. 4 for each requested symbol.  The weight for this request will cap at 200 once the number of symbols in the request is more than 50.
     * @summary Trading Day Ticker
     * @param {MarketDataApiSpotGetTickerTradingDayV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetTickerTradingDayV3(requestParameters: MarketDataApiSpotGetTickerTradingDayV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetTickerTradingDayV3Resp>;

    /**
     * Note: This endpoint is different from the GET /api/v3/ticker/24hr endpoint. The window used to compute statistics will be no more than 59999ms from the requested windowSize. openTime for /api/v3/ticker always starts on a minute, while the closeTime is the current time of the request. As such, the effective window will be up to 59999ms wider than windowSize. E.g. If the closeTime is 1641287867099 (January 04, 2022 09:17:47:099 UTC) , and the windowSize is 1d. the openTime will be: 1641201420000 (January 3, 2022, 09:17:00) 4 for each requested symbol regardless of windowSize.  The weight for this request will cap at 200 once the number of symbols in the request is more than 50.
     * @summary Rolling window price change statistics
     * @param {MarketDataApiSpotGetTickerV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetTickerV3(requestParameters: MarketDataApiSpotGetTickerV3Request, options?: RawAxiosRequestConfig): AxiosPromise<SpotGetTickerV3Resp>;

    /**
     * Get recent trades.
     * @summary Recent trades list
     * @param {MarketDataApiSpotGetTradesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetTradesV3(requestParameters: MarketDataApiSpotGetTradesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpotGetTradesV3RespItem>>;

    /**
     * The request is similar to klines having the same parameters and response. uiKlines return modified kline data, optimized for presentation of candlestick charts.
     * @summary UIKlines
     * @param {MarketDataApiSpotGetUiKlinesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    spotGetUiKlinesV3(requestParameters: MarketDataApiSpotGetUiKlinesV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<Array<SpotGetKlinesV3200ResponseInnerInner>>>;

}

/**
 * Request parameters for spotGetAggTradesV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetAggTradesV3Request
 */
export interface MarketDataApiSpotGetAggTradesV3Request {
    /**
     * 
     * @type {string}
     * @memberof MarketDataApiSpotGetAggTradesV3
     */
    readonly symbol: string

    /**
     * ID to get aggregate trades from INCLUSIVE.
     * @type {number}
     * @memberof MarketDataApiSpotGetAggTradesV3
     */
    readonly fromId?: number

    /**
     * Timestamp in ms to get aggregate trades from INCLUSIVE.
     * @type {number}
     * @memberof MarketDataApiSpotGetAggTradesV3
     */
    readonly startTime?: number

    /**
     * Timestamp in ms to get aggregate trades until INCLUSIVE.
     * @type {number}
     * @memberof MarketDataApiSpotGetAggTradesV3
     */
    readonly endTime?: number

    /**
     * Default 500; max 1000.
     * @type {number}
     * @memberof MarketDataApiSpotGetAggTradesV3
     */
    readonly limit?: number
}

/**
 * Request parameters for spotGetAvgPriceV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetAvgPriceV3Request
 */
export interface MarketDataApiSpotGetAvgPriceV3Request {
    /**
     * 
     * @type {string}
     * @memberof MarketDataApiSpotGetAvgPriceV3
     */
    readonly symbol: string
}

/**
 * Request parameters for spotGetDepthV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetDepthV3Request
 */
export interface MarketDataApiSpotGetDepthV3Request {
    /**
     * 
     * @type {string}
     * @memberof MarketDataApiSpotGetDepthV3
     */
    readonly symbol: string

    /**
     * Default 100; max 5000. &lt;br/&gt; If limit &amp;gt; 5000. then the response will truncate to 5000.
     * @type {number}
     * @memberof MarketDataApiSpotGetDepthV3
     */
    readonly limit?: number
}

/**
 * Request parameters for spotGetHistoricalTradesV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetHistoricalTradesV3Request
 */
export interface MarketDataApiSpotGetHistoricalTradesV3Request {
    /**
     * 
     * @type {string}
     * @memberof MarketDataApiSpotGetHistoricalTradesV3
     */
    readonly symbol: string

    /**
     * Default 500; max 1000.
     * @type {number}
     * @memberof MarketDataApiSpotGetHistoricalTradesV3
     */
    readonly limit?: number

    /**
     * TradeId to fetch from. Default gets most recent trades.
     * @type {number}
     * @memberof MarketDataApiSpotGetHistoricalTradesV3
     */
    readonly fromId?: number
}

/**
 * Request parameters for spotGetKlinesV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetKlinesV3Request
 */
export interface MarketDataApiSpotGetKlinesV3Request {
    /**
     * 
     * @type {string}
     * @memberof MarketDataApiSpotGetKlinesV3
     */
    readonly symbol: string

    /**
     * 
     * @type {string}
     * @memberof MarketDataApiSpotGetKlinesV3
     */
    readonly interval: string

    /**
     * 
     * @type {number}
     * @memberof MarketDataApiSpotGetKlinesV3
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof MarketDataApiSpotGetKlinesV3
     */
    readonly endTime?: number

    /**
     * Default: 0 (UTC)
     * @type {string}
     * @memberof MarketDataApiSpotGetKlinesV3
     */
    readonly timeZone?: string

    /**
     * Default 500; max 1000.
     * @type {number}
     * @memberof MarketDataApiSpotGetKlinesV3
     */
    readonly limit?: number
}

/**
 * Request parameters for spotGetTicker24hrV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetTicker24hrV3Request
 */
export interface MarketDataApiSpotGetTicker24hrV3Request {
    /**
     * Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, tickers for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;          Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
     * @type {string}
     * @memberof MarketDataApiSpotGetTicker24hrV3
     */
    readonly symbol?: string

    /**
     * Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, tickers for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;          Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
     * @type {string}
     * @memberof MarketDataApiSpotGetTicker24hrV3
     */
    readonly symbols?: string

    /**
     * Supported values: &#x60;FULL&#x60; or &#x60;MINI&#x60;. &lt;br/&gt;If none provided, the default is &#x60;FULL&#x60;
     * @type {'FULL' | 'MINI'}
     * @memberof MarketDataApiSpotGetTicker24hrV3
     */
    readonly type?: SpotGetTicker24hrV3TypeEnum
}

/**
 * Request parameters for spotGetTickerBookTickerV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetTickerBookTickerV3Request
 */
export interface MarketDataApiSpotGetTickerBookTickerV3Request {
    /**
     * Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, bookTickers for all symbols will be returned in an array.          &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
     * @type {string}
     * @memberof MarketDataApiSpotGetTickerBookTickerV3
     */
    readonly symbol?: string

    /**
     * Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, bookTickers for all symbols will be returned in an array.          &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
     * @type {string}
     * @memberof MarketDataApiSpotGetTickerBookTickerV3
     */
    readonly symbols?: string
}

/**
 * Request parameters for spotGetTickerPriceV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetTickerPriceV3Request
 */
export interface MarketDataApiSpotGetTickerPriceV3Request {
    /**
     * Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, prices for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
     * @type {string}
     * @memberof MarketDataApiSpotGetTickerPriceV3
     */
    readonly symbol?: string

    /**
     * Parameter symbol and symbols cannot be used in combination. &lt;br/&gt; If neither parameter is sent, prices for all symbols will be returned in an array. &lt;br/&gt;&lt;br/&gt;         Examples of accepted format for the symbols parameter:          [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;          or &lt;br/&gt;          %5B%22BTCUSDT%22,%22BNBUSDT%22%5D
     * @type {string}
     * @memberof MarketDataApiSpotGetTickerPriceV3
     */
    readonly symbols?: string
}

/**
 * Request parameters for spotGetTickerTradingDayV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetTickerTradingDayV3Request
 */
export interface MarketDataApiSpotGetTickerTradingDayV3Request {
    /**
     * Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
     * @type {string}
     * @memberof MarketDataApiSpotGetTickerTradingDayV3
     */
    readonly symbol: string

    /**
     * Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
     * @type {string}
     * @memberof MarketDataApiSpotGetTickerTradingDayV3
     */
    readonly symbols: string

    /**
     * Default: 0 (UTC)
     * @type {string}
     * @memberof MarketDataApiSpotGetTickerTradingDayV3
     */
    readonly timeZone?: string

    /**
     * Supported values: &#x60;FULL&#x60; or &#x60;MINI&#x60;. &lt;br/&gt;If none provided, the default is &#x60;FULL&#x60;
     * @type {'FULL' | 'MINI'}
     * @memberof MarketDataApiSpotGetTickerTradingDayV3
     */
    readonly type?: SpotGetTickerTradingDayV3TypeEnum
}

/**
 * Request parameters for spotGetTickerV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetTickerV3Request
 */
export interface MarketDataApiSpotGetTickerV3Request {
    /**
     * Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
     * @type {string}
     * @memberof MarketDataApiSpotGetTickerV3
     */
    readonly symbol: string

    /**
     * Either &#x60;symbol&#x60; or &#x60;symbols&#x60; must be provided &lt;br/&gt;&lt;br/&gt; Examples of accepted format for the &#x60;symbols&#x60; parameter: &lt;br/&gt; [&amp;#34;BTCUSDT&amp;#34;,&amp;#34;BNBUSDT&amp;#34;] &lt;br/&gt;or &lt;br/&gt;%5B%22BTCUSDT%22,%22BNBUSDT%22%5D &lt;br/&gt;&lt;br/&gt; The maximum number of &#x60;symbols&#x60; allowed in a request is 100.
     * @type {string}
     * @memberof MarketDataApiSpotGetTickerV3
     */
    readonly symbols: string

    /**
     * Defaults to &#x60;1d&#x60; if no parameter provided &lt;br/&gt; Supported &#x60;windowSize&#x60; values: &lt;br/&gt; &#x60;1m&#x60;,&#x60;2m&#x60;....&#x60;59m&#x60; for minutes &lt;br/&gt; &#x60;1h&#x60;, &#x60;2h&#x60;....&#x60;23h&#x60; - for hours &lt;br/&gt; &#x60;1d&#x60;...&#x60;7d&#x60; - for days &lt;br/&gt;&lt;br/&gt; Units cannot be combined (e.g. &#x60;1d2h&#x60; is not allowed)
     * @type {string}
     * @memberof MarketDataApiSpotGetTickerV3
     */
    readonly windowSize?: string

    /**
     * Supported values: &#x60;FULL&#x60; or &#x60;MINI&#x60;. &lt;br/&gt;If none provided, the default is &#x60;FULL&#x60;
     * @type {'FULL' | 'MINI'}
     * @memberof MarketDataApiSpotGetTickerV3
     */
    readonly type?: SpotGetTickerV3TypeEnum
}

/**
 * Request parameters for spotGetTradesV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetTradesV3Request
 */
export interface MarketDataApiSpotGetTradesV3Request {
    /**
     * 
     * @type {string}
     * @memberof MarketDataApiSpotGetTradesV3
     */
    readonly symbol: string

    /**
     * Default 500; max 1000.
     * @type {number}
     * @memberof MarketDataApiSpotGetTradesV3
     */
    readonly limit?: number
}

/**
 * Request parameters for spotGetUiKlinesV3 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiSpotGetUiKlinesV3Request
 */
export interface MarketDataApiSpotGetUiKlinesV3Request {
    /**
     * 
     * @type {string}
     * @memberof MarketDataApiSpotGetUiKlinesV3
     */
    readonly symbol: string

    /**
     * See &lt;a href&#x3D;\&quot;/docs/binance-spot-api-docs/rest-api/market-data-endpoints#kline-intervals\&quot;&gt;&#x60;klines&#x60;&lt;/a&gt;
     * @type {string}
     * @memberof MarketDataApiSpotGetUiKlinesV3
     */
    readonly interval: string

    /**
     * 
     * @type {number}
     * @memberof MarketDataApiSpotGetUiKlinesV3
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof MarketDataApiSpotGetUiKlinesV3
     */
    readonly endTime?: number

    /**
     * Default: 0 (UTC)
     * @type {string}
     * @memberof MarketDataApiSpotGetUiKlinesV3
     */
    readonly timeZone?: string

    /**
     * Default 500; max 1000.
     * @type {number}
     * @memberof MarketDataApiSpotGetUiKlinesV3
     */
    readonly limit?: number
}

/**
 * MarketDataApi - object-oriented interface
 * @export
 * @class MarketDataApi
 * @extends {BaseAPI}
 */
export class MarketDataApi extends BaseAPI implements MarketDataApiInterface {
    /**
     * Get compressed, aggregate trades. Trades that fill at the time, from the same taker order, with the same price will have the quantity aggregated.
     * @summary Compressed/Aggregate trades list
     * @param {MarketDataApiSpotGetAggTradesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetAggTradesV3(requestParameters: MarketDataApiSpotGetAggTradesV3Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetAggTradesV3(requestParameters.symbol, requestParameters.fromId, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Current average price for a symbol.
     * @summary Current average price
     * @param {MarketDataApiSpotGetAvgPriceV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetAvgPriceV3(requestParameters: MarketDataApiSpotGetAvgPriceV3Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetAvgPriceV3(requestParameters.symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Order book
     * @param {MarketDataApiSpotGetDepthV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetDepthV3(requestParameters: MarketDataApiSpotGetDepthV3Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetDepthV3(requestParameters.symbol, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get older trades.
     * @summary Old trade lookup
     * @param {MarketDataApiSpotGetHistoricalTradesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetHistoricalTradesV3(requestParameters: MarketDataApiSpotGetHistoricalTradesV3Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetHistoricalTradesV3(requestParameters.symbol, requestParameters.limit, requestParameters.fromId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.
     * @summary Kline/Candlestick data
     * @param {MarketDataApiSpotGetKlinesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetKlinesV3(requestParameters: MarketDataApiSpotGetKlinesV3Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetKlinesV3(requestParameters.symbol, requestParameters.interval, requestParameters.startTime, requestParameters.endTime, requestParameters.timeZone, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 24 hour rolling window price change statistics. Careful when accessing this with no symbol.
     * @summary 24hr ticker price change statistics
     * @param {MarketDataApiSpotGetTicker24hrV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetTicker24hrV3(requestParameters: MarketDataApiSpotGetTicker24hrV3Request = {}, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetTicker24hrV3(requestParameters.symbol, requestParameters.symbols, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Best price/qty on the order book for a symbol or symbols.
     * @summary Symbol order book ticker
     * @param {MarketDataApiSpotGetTickerBookTickerV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetTickerBookTickerV3(requestParameters: MarketDataApiSpotGetTickerBookTickerV3Request = {}, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetTickerBookTickerV3(requestParameters.symbol, requestParameters.symbols, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Latest price for a symbol or symbols.
     * @summary Symbol price ticker
     * @param {MarketDataApiSpotGetTickerPriceV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetTickerPriceV3(requestParameters: MarketDataApiSpotGetTickerPriceV3Request = {}, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetTickerPriceV3(requestParameters.symbol, requestParameters.symbols, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Price change statistics for a trading day. 4 for each requested symbol.  The weight for this request will cap at 200 once the number of symbols in the request is more than 50.
     * @summary Trading Day Ticker
     * @param {MarketDataApiSpotGetTickerTradingDayV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetTickerTradingDayV3(requestParameters: MarketDataApiSpotGetTickerTradingDayV3Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetTickerTradingDayV3(requestParameters.symbol, requestParameters.symbols, requestParameters.timeZone, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note: This endpoint is different from the GET /api/v3/ticker/24hr endpoint. The window used to compute statistics will be no more than 59999ms from the requested windowSize. openTime for /api/v3/ticker always starts on a minute, while the closeTime is the current time of the request. As such, the effective window will be up to 59999ms wider than windowSize. E.g. If the closeTime is 1641287867099 (January 04, 2022 09:17:47:099 UTC) , and the windowSize is 1d. the openTime will be: 1641201420000 (January 3, 2022, 09:17:00) 4 for each requested symbol regardless of windowSize.  The weight for this request will cap at 200 once the number of symbols in the request is more than 50.
     * @summary Rolling window price change statistics
     * @param {MarketDataApiSpotGetTickerV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetTickerV3(requestParameters: MarketDataApiSpotGetTickerV3Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetTickerV3(requestParameters.symbol, requestParameters.symbols, requestParameters.windowSize, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get recent trades.
     * @summary Recent trades list
     * @param {MarketDataApiSpotGetTradesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetTradesV3(requestParameters: MarketDataApiSpotGetTradesV3Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetTradesV3(requestParameters.symbol, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The request is similar to klines having the same parameters and response. uiKlines return modified kline data, optimized for presentation of candlestick charts.
     * @summary UIKlines
     * @param {MarketDataApiSpotGetUiKlinesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public spotGetUiKlinesV3(requestParameters: MarketDataApiSpotGetUiKlinesV3Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).spotGetUiKlinesV3(requestParameters.symbol, requestParameters.interval, requestParameters.startTime, requestParameters.endTime, requestParameters.timeZone, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SpotGetTicker24hrV3TypeEnum = {
    Full: 'FULL',
    Mini: 'MINI'
} as const;
export type SpotGetTicker24hrV3TypeEnum = typeof SpotGetTicker24hrV3TypeEnum[keyof typeof SpotGetTicker24hrV3TypeEnum];
/**
 * @export
 */
export const SpotGetTickerTradingDayV3TypeEnum = {
    Full: 'FULL',
    Mini: 'MINI'
} as const;
export type SpotGetTickerTradingDayV3TypeEnum = typeof SpotGetTickerTradingDayV3TypeEnum[keyof typeof SpotGetTickerTradingDayV3TypeEnum];
/**
 * @export
 */
export const SpotGetTickerV3TypeEnum = {
    Full: 'FULL',
    Mini: 'MINI'
} as const;
export type SpotGetTickerV3TypeEnum = typeof SpotGetTickerV3TypeEnum[keyof typeof SpotGetTickerV3TypeEnum];
