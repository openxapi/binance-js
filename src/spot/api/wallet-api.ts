/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreateAssetDustBtcV1Resp } from '../model';
// @ts-ignore
import type { CreateAssetDustV1Resp } from '../model';
// @ts-ignore
import type { CreateAssetGetFundingAssetV1RespItem } from '../model';
// @ts-ignore
import type { CreateAssetGetUserAssetV3RespItem } from '../model';
// @ts-ignore
import type { CreateAssetTransferV1Resp } from '../model';
// @ts-ignore
import type { CreateBnbBurnV1Resp } from '../model';
// @ts-ignore
import type { CreateCapitalDepositCreditApplyV1Resp } from '../model';
// @ts-ignore
import type { CreateCapitalWithdrawApplyV1Resp } from '../model';
// @ts-ignore
import type { CreateLocalentityBrokerWithdrawApplyV1Resp } from '../model';
// @ts-ignore
import type { CreateLocalentityWithdrawApplyV1Resp } from '../model';
// @ts-ignore
import type { GetAccountApiRestrictionsV1Resp } from '../model';
// @ts-ignore
import type { GetAccountApiTradingStatusV1Resp } from '../model';
// @ts-ignore
import type { GetAccountInfoV1Resp } from '../model';
// @ts-ignore
import type { GetAccountSnapshotV1Resp } from '../model';
// @ts-ignore
import type { GetAccountStatusV1Resp } from '../model';
// @ts-ignore
import type { GetAssetAssetDividendV1Resp } from '../model';
// @ts-ignore
import type { GetAssetCustodyTransferHistoryV1Resp } from '../model';
// @ts-ignore
import type { GetAssetDribbletV1Resp } from '../model';
// @ts-ignore
import type { GetAssetLedgerTransferCloudMiningQueryByPageV1Resp } from '../model';
// @ts-ignore
import type { GetAssetTradeFeeV1RespItem } from '../model';
// @ts-ignore
import type { GetAssetTransferV1Resp } from '../model';
// @ts-ignore
import type { GetAssetWalletBalanceV1RespItem } from '../model';
// @ts-ignore
import type { GetCapitalConfigGetallV1RespItem } from '../model';
// @ts-ignore
import type { GetCapitalDepositAddressListV1RespItem } from '../model';
// @ts-ignore
import type { GetCapitalDepositAddressV1Resp } from '../model';
// @ts-ignore
import type { GetCapitalDepositHisrecV1RespItem } from '../model';
// @ts-ignore
import type { GetCapitalWithdrawAddressListV1RespItem } from '../model';
// @ts-ignore
import type { GetCapitalWithdrawHistoryV1RespItem } from '../model';
// @ts-ignore
import type { GetLocalentityDepositHistoryV1RespItem } from '../model';
// @ts-ignore
import type { GetLocalentityVaspV1RespItem } from '../model';
// @ts-ignore
import type { GetLocalentityWithdrawHistoryV1RespItem } from '../model';
// @ts-ignore
import type { GetLocalentityWithdrawHistoryV2RespItem } from '../model';
// @ts-ignore
import type { GetSpotDelistScheduleV1RespItem } from '../model';
// @ts-ignore
import type { GetSpotOpenSymbolListV1RespItem } from '../model';
// @ts-ignore
import type { GetSystemStatusV1Resp } from '../model';
// @ts-ignore
import type { UpdateLocalentityBrokerDepositProvideInfoV1Resp } from '../model';
// @ts-ignore
import type { UpdateLocalentityDepositProvideInfoV1Resp } from '../model';
// @ts-ignore
import type { WalletGetAssetAssetDetailV1RespValue } from '../model';
/**
 * WalletApi - axios parameter creator
 * @export
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Disable Fast Withdraw Switch (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountDisableFastWithdrawSwitchV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createAccountDisableFastWithdrawSwitchV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/disableFastWithdrawSwitch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable Fast Withdraw Switch (USER_DATA)
         * @summary Enable Fast Withdraw Switch (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountEnableFastWithdrawSwitchV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createAccountEnableFastWithdrawSwitchV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/enableFastWithdrawSwitch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Assets That Can Be Converted Into BNB
         * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [accountType] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetDustBtcV1: async (timestamp: number, accountType?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createAssetDustBtcV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/dust-btc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (accountType !== undefined) { 
                localVarFormParams.set('accountType', accountType as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Convert dust assets to BNB.
         * @summary Dust Transfer (USER_DATA)
         * @param {Array<string>} asset 
         * @param {number} timestamp 
         * @param {string} [accountType] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetDustV1: async (asset: Array<string>, timestamp: number, accountType?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createAssetDustV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createAssetDustV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/dust`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (accountType !== undefined) { 
                localVarFormParams.set('accountType', accountType as any);
            }
                if (asset) {
                localVarFormParams.set('asset', asset.join(COLLECTION_FORMATS.csv));
            }

    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Funding Wallet
         * @summary Funding Wallet (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [needBtcValuation] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetGetFundingAssetV1: async (timestamp: number, asset?: string, needBtcValuation?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createAssetGetFundingAssetV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/get-funding-asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (needBtcValuation !== undefined) { 
                localVarFormParams.set('needBtcValuation', needBtcValuation as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user assets, just for positive data.
         * @summary User Asset (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {boolean} [needBtcValuation] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetGetUserAssetV3: async (timestamp: number, asset?: string, needBtcValuation?: boolean, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createAssetGetUserAssetV3', 'timestamp', timestamp)
            const localVarPath = `/sapi/v3/asset/getUserAsset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (needBtcValuation !== undefined) { 
                localVarFormParams.set('needBtcValuation', needBtcValuation as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * user universal transfer
         * @summary User Universal Transfer (USER_DATA)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} type 
         * @param {string} [fromSymbol] 
         * @param {number} [recvWindow] 
         * @param {string} [toSymbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetTransferV1: async (amount: string, asset: string, timestamp: number, type: string, fromSymbol?: string, recvWindow?: number, toSymbol?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createAssetTransferV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('createAssetTransferV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createAssetTransferV1', 'timestamp', timestamp)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('createAssetTransferV1', 'type', type)
            const localVarPath = `/sapi/v1/asset/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (fromSymbol !== undefined) { 
                localVarFormParams.set('fromSymbol', fromSymbol as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toSymbol !== undefined) { 
                localVarFormParams.set('toSymbol', toSymbol as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle BNB Burn On Spot Trade And Margin Interest
         * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [interestBNBBurn] 
         * @param {number} [recvWindow] 
         * @param {string} [spotBNBBurn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBnbBurnV1: async (timestamp: number, interestBNBBurn?: string, recvWindow?: number, spotBNBBurn?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createBnbBurnV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/bnbBurn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (interestBNBBurn !== undefined) { 
                localVarFormParams.set('interestBNBBurn', interestBNBBurn as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (spotBNBBurn !== undefined) { 
                localVarFormParams.set('spotBNBBurn', spotBNBBurn as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Apply deposit credit for expired address (One click arrival)
         * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
         * @param {number} [depositId] 
         * @param {number} [subAccountId] 
         * @param {number} [subUserId] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCapitalDepositCreditApplyV1: async (depositId?: number, subAccountId?: number, subUserId?: number, txId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/capital/deposit/credit-apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (depositId !== undefined) { 
                localVarFormParams.set('depositId', depositId as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (subUserId !== undefined) { 
                localVarFormParams.set('subUserId', subUserId as any);
            }
    
            if (txId !== undefined) { 
                localVarFormParams.set('txId', txId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit a withdraw request.
         * @summary Withdraw(USER_DATA)
         * @param {string} address 
         * @param {string} amount 
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [addressTag] 
         * @param {string} [name] 
         * @param {string} [network] 
         * @param {number} [recvWindow] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {string} [withdrawOrderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCapitalWithdrawApplyV1: async (address: string, amount: string, coin: string, timestamp: number, addressTag?: string, name?: string, network?: string, recvWindow?: number, transactionFeeFlag?: boolean, walletType?: number, withdrawOrderId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('createCapitalWithdrawApplyV1', 'address', address)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createCapitalWithdrawApplyV1', 'amount', amount)
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('createCapitalWithdrawApplyV1', 'coin', coin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createCapitalWithdrawApplyV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/withdraw/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (address !== undefined) { 
                localVarFormParams.set('address', address as any);
            }
    
            if (addressTag !== undefined) { 
                localVarFormParams.set('addressTag', addressTag as any);
            }
    
            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (coin !== undefined) { 
                localVarFormParams.set('coin', coin as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (network !== undefined) { 
                localVarFormParams.set('network', network as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (transactionFeeFlag !== undefined) { 
                localVarFormParams.set('transactionFeeFlag', transactionFeeFlag as any);
            }
    
            if (walletType !== undefined) { 
                localVarFormParams.set('walletType', walletType as any);
            }
    
            if (withdrawOrderId !== undefined) { 
                localVarFormParams.set('withdrawOrderId', withdrawOrderId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit a withdrawal request for brokers of local entities that required travel rule.
         * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
         * @param {string} address 
         * @param {string} amount 
         * @param {string} coin 
         * @param {string} originatorPii 
         * @param {string} questionnaire 
         * @param {string} signature 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} withdrawOrderId 
         * @param {string} [addressName] 
         * @param {string} [addressTag] 
         * @param {string} [network] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocalentityBrokerWithdrawApplyV1: async (address: string, amount: string, coin: string, originatorPii: string, questionnaire: string, signature: string, subAccountId: string, timestamp: number, withdrawOrderId: string, addressName?: string, addressTag?: string, network?: string, transactionFeeFlag?: boolean, walletType?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('createLocalentityBrokerWithdrawApplyV1', 'address', address)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createLocalentityBrokerWithdrawApplyV1', 'amount', amount)
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('createLocalentityBrokerWithdrawApplyV1', 'coin', coin)
            // verify required parameter 'originatorPii' is not null or undefined
            assertParamExists('createLocalentityBrokerWithdrawApplyV1', 'originatorPii', originatorPii)
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists('createLocalentityBrokerWithdrawApplyV1', 'questionnaire', questionnaire)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('createLocalentityBrokerWithdrawApplyV1', 'signature', signature)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('createLocalentityBrokerWithdrawApplyV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createLocalentityBrokerWithdrawApplyV1', 'timestamp', timestamp)
            // verify required parameter 'withdrawOrderId' is not null or undefined
            assertParamExists('createLocalentityBrokerWithdrawApplyV1', 'withdrawOrderId', withdrawOrderId)
            const localVarPath = `/sapi/v1/localentity/broker/withdraw/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (address !== undefined) { 
                localVarFormParams.set('address', address as any);
            }
    
            if (addressName !== undefined) { 
                localVarFormParams.set('addressName', addressName as any);
            }
    
            if (addressTag !== undefined) { 
                localVarFormParams.set('addressTag', addressTag as any);
            }
    
            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (coin !== undefined) { 
                localVarFormParams.set('coin', coin as any);
            }
    
            if (network !== undefined) { 
                localVarFormParams.set('network', network as any);
            }
    
            if (originatorPii !== undefined) { 
                localVarFormParams.set('originatorPii', originatorPii as any);
            }
    
            if (questionnaire !== undefined) { 
                localVarFormParams.set('questionnaire', questionnaire as any);
            }
    
            if (signature !== undefined) { 
                localVarFormParams.set('signature', signature as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (transactionFeeFlag !== undefined) { 
                localVarFormParams.set('transactionFeeFlag', transactionFeeFlag as any);
            }
    
            if (walletType !== undefined) { 
                localVarFormParams.set('walletType', walletType as any);
            }
    
            if (withdrawOrderId !== undefined) { 
                localVarFormParams.set('withdrawOrderId', withdrawOrderId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit a withdrawal request for local entities that required travel rule.
         * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
         * @param {string} address 
         * @param {string} amount 
         * @param {string} coin 
         * @param {string} questionnaire 
         * @param {number} timestamp 
         * @param {string} [addressTag] 
         * @param {string} [name] 
         * @param {string} [network] 
         * @param {number} [recvWindow] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {string} [withdrawOrderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocalentityWithdrawApplyV1: async (address: string, amount: string, coin: string, questionnaire: string, timestamp: number, addressTag?: string, name?: string, network?: string, recvWindow?: number, transactionFeeFlag?: boolean, walletType?: number, withdrawOrderId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('createLocalentityWithdrawApplyV1', 'address', address)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createLocalentityWithdrawApplyV1', 'amount', amount)
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('createLocalentityWithdrawApplyV1', 'coin', coin)
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists('createLocalentityWithdrawApplyV1', 'questionnaire', questionnaire)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createLocalentityWithdrawApplyV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/localentity/withdraw/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (address !== undefined) { 
                localVarFormParams.set('address', address as any);
            }
    
            if (addressTag !== undefined) { 
                localVarFormParams.set('addressTag', addressTag as any);
            }
    
            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (coin !== undefined) { 
                localVarFormParams.set('coin', coin as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (network !== undefined) { 
                localVarFormParams.set('network', network as any);
            }
    
            if (questionnaire !== undefined) { 
                localVarFormParams.set('questionnaire', questionnaire as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (transactionFeeFlag !== undefined) { 
                localVarFormParams.set('transactionFeeFlag', transactionFeeFlag as any);
            }
    
            if (walletType !== undefined) { 
                localVarFormParams.set('walletType', walletType as any);
            }
    
            if (withdrawOrderId !== undefined) { 
                localVarFormParams.set('withdrawOrderId', withdrawOrderId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get API Key Permission
         * @summary Get API Key Permission (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountApiRestrictionsV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAccountApiRestrictionsV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/apiRestrictions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch account api trading status detail.
         * @summary Account API Trading Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountApiTradingStatusV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAccountApiTradingStatusV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/apiTradingStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch account info detail.
         * @summary Account info (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfoV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAccountInfoV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Daily account snapshot
         * @summary Daily Account Snapshot (USER_DATA)
         * @param {string} type &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;, &amp;#34;FUTURES&amp;#34;
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountSnapshotV1: async (type: string, timestamp: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getAccountSnapshotV1', 'type', type)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAccountSnapshotV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/accountSnapshot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch account status detail.
         * @summary Account Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountStatusV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAccountStatusV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/account/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch details of assets supported on Binance.
         * @summary Asset Detail (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAssetDetailV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAssetAssetDetailV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/assetDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query asset dividend record.
         * @summary Asset Dividend Record (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 20, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAssetDividendV1: async (timestamp: number, asset?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAssetAssetDividendV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/assetDividend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query User Delegation History
         * @summary Query User Delegation History(For Master Account)(USER_DATA)
         * @param {string} email 
         * @param {number} startTime 
         * @param {number} endTime 
         * @param {number} timestamp 
         * @param {string} [type] Delegate/Undelegate
         * @param {string} [asset] 
         * @param {number} [current] default 1
         * @param {number} [size] default 10, max 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetCustodyTransferHistoryV1: async (email: string, startTime: number, endTime: number, timestamp: number, type?: string, asset?: string, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getAssetCustodyTransferHistoryV1', 'email', email)
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getAssetCustodyTransferHistoryV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getAssetCustodyTransferHistoryV1', 'endTime', endTime)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAssetCustodyTransferHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/custody/transfer-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Dustlog
         * @summary DustLog(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetDribbletV1: async (timestamp: number, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAssetDribbletV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/dribblet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The query of Cloud-Mining payment and refund history
         * @summary Get Cloud-Mining payment and refund history (USER_DATA)
         * @param {number} startTime inclusive, unit: ms
         * @param {number} endTime exclusive, unit: ms
         * @param {number} [tranId] The transaction id
         * @param {string} [clientTranId] The unique flag
         * @param {string} [asset] If it is blank, we will query all assets
         * @param {number} [current] current page, default 1, the min value is 1
         * @param {number} [size] page size, default 10, the max value is 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetLedgerTransferCloudMiningQueryByPageV1: async (startTime: number, endTime: number, tranId?: number, clientTranId?: string, asset?: string, current?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getAssetLedgerTransferCloudMiningQueryByPageV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getAssetLedgerTransferCloudMiningQueryByPageV1', 'endTime', endTime)
            const localVarPath = `/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (tranId !== undefined) {
                localVarQueryParameter['tranId'] = tranId;
            }

            if (clientTranId !== undefined) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch trade fee
         * @summary Trade Fee (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetTradeFeeV1: async (timestamp: number, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAssetTradeFeeV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/tradeFee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query User Universal Transfer History
         * @summary Query User Universal Transfer History(USER_DATA)
         * @param {string} type 
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Default 1
         * @param {number} [size] Default 10, Max 100
         * @param {string} [fromSymbol] 
         * @param {string} [toSymbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetTransferV1: async (type: string, timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, fromSymbol?: string, toSymbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getAssetTransferV1', 'type', type)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAssetTransferV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (fromSymbol !== undefined) {
                localVarQueryParameter['fromSymbol'] = fromSymbol;
            }

            if (toSymbol !== undefined) {
                localVarQueryParameter['toSymbol'] = toSymbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query User Wallet Balance
         * @summary Query User Wallet Balance (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [quoteAsset] &#x60;USDT&#x60;, &#x60;ETH&#x60;, &#x60;USDC&#x60;, &#x60;BNB&#x60;, etc. default &#x60;BTC&#x60;
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetWalletBalanceV1: async (timestamp: number, quoteAsset?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getAssetWalletBalanceV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/asset/wallet/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (quoteAsset !== undefined) {
                localVarQueryParameter['quoteAsset'] = quoteAsset;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information of coins (available for deposit and withdraw) for user.
         * @summary All Coins\' Information (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalConfigGetallV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getCapitalConfigGetallV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/config/getall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch deposit address list with network.
         * @summary Fetch deposit address list with network(USER_DATA)
         * @param {string} coin &#x60;coin&#x60; refers to the parent network address format that the address is using
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalDepositAddressListV1: async (coin: string, timestamp: number, network?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('getCapitalDepositAddressListV1', 'coin', coin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getCapitalDepositAddressListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/deposit/address/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch deposit address with network.
         * @summary Deposit Address(supporting network) (USER_DATA)
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalDepositAddressV1: async (coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('getCapitalDepositAddressV1', 'coin', coin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getCapitalDepositAddressV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/deposit/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch deposit history.
         * @summary Deposit History (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {boolean} [includeSource] Default: &#x60;false&#x60;, return &#x60;sourceAddress&#x60;field when set to &#x60;true&#x60;
         * @param {string} [coin] 
         * @param {number} [status] 0(0:pending, 6:credited but cannot withdraw, 7:Wrong Deposit, 8:Waiting User confirm, 1:success, 2:rejected)
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [offset] Default:0
         * @param {number} [limit] Default:1000, Max:1000
         * @param {number} [recvWindow] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalDepositHisrecV1: async (timestamp: number, includeSource?: boolean, coin?: string, status?: number, startTime?: number, endTime?: number, offset?: number, limit?: number, recvWindow?: number, txId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getCapitalDepositHisrecV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/deposit/hisrec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (includeSource !== undefined) {
                localVarQueryParameter['includeSource'] = includeSource;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (txId !== undefined) {
                localVarQueryParameter['txId'] = txId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch withdraw address list
         * @summary Fetch withdraw address list (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalWithdrawAddressListV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/capital/withdraw/address/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch withdraw history.
         * @summary Withdraw History (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [coin] 
         * @param {string} [withdrawOrderId] 
         * @param {number} [status] 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
         * @param {number} [offset] 
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {string} [idList] id list returned in the response of POST &#x60;/sapi/v1/capital/withdraw/apply&#x60;, separated by &#x60;,&#x60;
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalWithdrawHistoryV1: async (timestamp: number, coin?: string, withdrawOrderId?: string, status?: number, offset?: number, limit?: number, idList?: string, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getCapitalWithdrawHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/capital/withdraw/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (withdrawOrderId !== undefined) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (idList !== undefined) {
                localVarQueryParameter['idList'] = idList;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch deposit history for local entities that required travel rule.
         * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [tranId] Comma(,) separated list of wallet tran Ids.
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {boolean} [pendingQuestionnaire] true: Only return records that pending deposit questionnaire. false/not provided: return all records.
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [offset] Default:0
         * @param {number} [limit] Default:1000, Max:1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalentityDepositHistoryV1: async (timestamp: number, trId?: string, txId?: string, tranId?: string, network?: string, coin?: string, travelRuleStatus?: number, pendingQuestionnaire?: boolean, startTime?: number, endTime?: number, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLocalentityDepositHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/localentity/deposit/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (trId !== undefined) {
                localVarQueryParameter['trId'] = trId;
            }

            if (txId !== undefined) {
                localVarQueryParameter['txId'] = txId;
            }

            if (tranId !== undefined) {
                localVarQueryParameter['tranId'] = tranId;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (travelRuleStatus !== undefined) {
                localVarQueryParameter['travelRuleStatus'] = travelRuleStatus;
            }

            if (pendingQuestionnaire !== undefined) {
                localVarQueryParameter['pendingQuestionnaire'] = pendingQuestionnaire;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the onboarded VASP list for local entities that required travel rule.
         * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalentityVaspV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/localentity/vasp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [withdrawOrderId] Comma(,) separated list of withdrawID defined by the client (i.e. client&amp;#39;s internal withdrawID).
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {number} [offset] Default: 0
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalentityWithdrawHistoryV1: async (timestamp: number, trId?: string, txId?: string, withdrawOrderId?: string, network?: string, coin?: string, travelRuleStatus?: number, offset?: number, limit?: number, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLocalentityWithdrawHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/localentity/withdraw/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (trId !== undefined) {
                localVarQueryParameter['trId'] = trId;
            }

            if (txId !== undefined) {
                localVarQueryParameter['txId'] = txId;
            }

            if (withdrawOrderId !== undefined) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (travelRuleStatus !== undefined) {
                localVarQueryParameter['travelRuleStatus'] = travelRuleStatus;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [withdrawOrderId] Withdraw ID defined by the client (i.e. client&amp;#39;s internal withdrawID).
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {number} [offset] Default: 0
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalentityWithdrawHistoryV2: async (timestamp: number, trId?: string, txId?: string, withdrawOrderId?: string, network?: string, coin?: string, travelRuleStatus?: number, offset?: number, limit?: number, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getLocalentityWithdrawHistoryV2', 'timestamp', timestamp)
            const localVarPath = `/sapi/v2/localentity/withdraw/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (trId !== undefined) {
                localVarQueryParameter['trId'] = trId;
            }

            if (txId !== undefined) {
                localVarQueryParameter['txId'] = txId;
            }

            if (withdrawOrderId !== undefined) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (travelRuleStatus !== undefined) {
                localVarQueryParameter['travelRuleStatus'] = travelRuleStatus;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get symbols delist schedule for spot
         * @summary Get Spot Delist Schedule (MARKET_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpotDelistScheduleV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getSpotDelistScheduleV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/spot/delist-schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of symbols that are scheduled to be opened for trading in the market.
         * @summary Get Open Symbol List (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpotOpenSymbolListV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/spot/open-symbol-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch system status.
         * @summary System Status (System)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/system/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {string} beneficiaryPii 
         * @param {string} depositId 
         * @param {string} questionnaire 
         * @param {string} signature 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [address] 
         * @param {string} [addressTag] 
         * @param {string} [amount] 
         * @param {string} [coin] 
         * @param {string} [network] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocalentityBrokerDepositProvideInfoV1: async (beneficiaryPii: string, depositId: string, questionnaire: string, signature: string, subAccountId: string, timestamp: number, address?: string, addressTag?: string, amount?: string, coin?: string, network?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryPii' is not null or undefined
            assertParamExists('updateLocalentityBrokerDepositProvideInfoV1', 'beneficiaryPii', beneficiaryPii)
            // verify required parameter 'depositId' is not null or undefined
            assertParamExists('updateLocalentityBrokerDepositProvideInfoV1', 'depositId', depositId)
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists('updateLocalentityBrokerDepositProvideInfoV1', 'questionnaire', questionnaire)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('updateLocalentityBrokerDepositProvideInfoV1', 'signature', signature)
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('updateLocalentityBrokerDepositProvideInfoV1', 'subAccountId', subAccountId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('updateLocalentityBrokerDepositProvideInfoV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/localentity/broker/deposit/provide-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (address !== undefined) { 
                localVarFormParams.set('address', address as any);
            }
    
            if (addressTag !== undefined) { 
                localVarFormParams.set('addressTag', addressTag as any);
            }
    
            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (beneficiaryPii !== undefined) { 
                localVarFormParams.set('beneficiaryPii', beneficiaryPii as any);
            }
    
            if (coin !== undefined) { 
                localVarFormParams.set('coin', coin as any);
            }
    
            if (depositId !== undefined) { 
                localVarFormParams.set('depositId', depositId as any);
            }
    
            if (network !== undefined) { 
                localVarFormParams.set('network', network as any);
            }
    
            if (questionnaire !== undefined) { 
                localVarFormParams.set('questionnaire', questionnaire as any);
            }
    
            if (signature !== undefined) { 
                localVarFormParams.set('signature', signature as any);
            }
    
            if (subAccountId !== undefined) { 
                localVarFormParams.set('subAccountId', subAccountId as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {string} questionnaire 
         * @param {number} timestamp 
         * @param {number} tranId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocalentityDepositProvideInfoV1: async (questionnaire: string, timestamp: number, tranId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists('updateLocalentityDepositProvideInfoV1', 'questionnaire', questionnaire)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('updateLocalentityDepositProvideInfoV1', 'timestamp', timestamp)
            // verify required parameter 'tranId' is not null or undefined
            assertParamExists('updateLocalentityDepositProvideInfoV1', 'tranId', tranId)
            const localVarPath = `/sapi/v1/localentity/deposit/provide-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (questionnaire !== undefined) { 
                localVarFormParams.set('questionnaire', questionnaire as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (tranId !== undefined) { 
                localVarFormParams.set('tranId', tranId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Disable Fast Withdraw Switch (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccountDisableFastWithdrawSwitchV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccountDisableFastWithdrawSwitchV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createAccountDisableFastWithdrawSwitchV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable Fast Withdraw Switch (USER_DATA)
         * @summary Enable Fast Withdraw Switch (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccountEnableFastWithdrawSwitchV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccountEnableFastWithdrawSwitchV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createAccountEnableFastWithdrawSwitchV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Assets That Can Be Converted Into BNB
         * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [accountType] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssetDustBtcV1(timestamp: number, accountType?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAssetDustBtcV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssetDustBtcV1(timestamp, accountType, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createAssetDustBtcV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Convert dust assets to BNB.
         * @summary Dust Transfer (USER_DATA)
         * @param {Array<string>} asset 
         * @param {number} timestamp 
         * @param {string} [accountType] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssetDustV1(asset: Array<string>, timestamp: number, accountType?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAssetDustV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssetDustV1(asset, timestamp, accountType, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createAssetDustV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Funding Wallet
         * @summary Funding Wallet (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [needBtcValuation] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssetGetFundingAssetV1(timestamp: number, asset?: string, needBtcValuation?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateAssetGetFundingAssetV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssetGetFundingAssetV1(timestamp, asset, needBtcValuation, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createAssetGetFundingAssetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user assets, just for positive data.
         * @summary User Asset (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {boolean} [needBtcValuation] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssetGetUserAssetV3(timestamp: number, asset?: string, needBtcValuation?: boolean, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateAssetGetUserAssetV3RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssetGetUserAssetV3(timestamp, asset, needBtcValuation, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createAssetGetUserAssetV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * user universal transfer
         * @summary User Universal Transfer (USER_DATA)
         * @param {string} amount 
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} type 
         * @param {string} [fromSymbol] 
         * @param {number} [recvWindow] 
         * @param {string} [toSymbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssetTransferV1(amount: string, asset: string, timestamp: number, type: string, fromSymbol?: string, recvWindow?: number, toSymbol?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAssetTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssetTransferV1(amount, asset, timestamp, type, fromSymbol, recvWindow, toSymbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createAssetTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Toggle BNB Burn On Spot Trade And Margin Interest
         * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [interestBNBBurn] 
         * @param {number} [recvWindow] 
         * @param {string} [spotBNBBurn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBnbBurnV1(timestamp: number, interestBNBBurn?: string, recvWindow?: number, spotBNBBurn?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBnbBurnV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBnbBurnV1(timestamp, interestBNBBurn, recvWindow, spotBNBBurn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createBnbBurnV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Apply deposit credit for expired address (One click arrival)
         * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
         * @param {number} [depositId] 
         * @param {number} [subAccountId] 
         * @param {number} [subUserId] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCapitalDepositCreditApplyV1(depositId?: number, subAccountId?: number, subUserId?: number, txId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCapitalDepositCreditApplyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCapitalDepositCreditApplyV1(depositId, subAccountId, subUserId, txId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createCapitalDepositCreditApplyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit a withdraw request.
         * @summary Withdraw(USER_DATA)
         * @param {string} address 
         * @param {string} amount 
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [addressTag] 
         * @param {string} [name] 
         * @param {string} [network] 
         * @param {number} [recvWindow] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {string} [withdrawOrderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCapitalWithdrawApplyV1(address: string, amount: string, coin: string, timestamp: number, addressTag?: string, name?: string, network?: string, recvWindow?: number, transactionFeeFlag?: boolean, walletType?: number, withdrawOrderId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCapitalWithdrawApplyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCapitalWithdrawApplyV1(address, amount, coin, timestamp, addressTag, name, network, recvWindow, transactionFeeFlag, walletType, withdrawOrderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createCapitalWithdrawApplyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit a withdrawal request for brokers of local entities that required travel rule.
         * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
         * @param {string} address 
         * @param {string} amount 
         * @param {string} coin 
         * @param {string} originatorPii 
         * @param {string} questionnaire 
         * @param {string} signature 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} withdrawOrderId 
         * @param {string} [addressName] 
         * @param {string} [addressTag] 
         * @param {string} [network] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLocalentityBrokerWithdrawApplyV1(address: string, amount: string, coin: string, originatorPii: string, questionnaire: string, signature: string, subAccountId: string, timestamp: number, withdrawOrderId: string, addressName?: string, addressTag?: string, network?: string, transactionFeeFlag?: boolean, walletType?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLocalentityBrokerWithdrawApplyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLocalentityBrokerWithdrawApplyV1(address, amount, coin, originatorPii, questionnaire, signature, subAccountId, timestamp, withdrawOrderId, addressName, addressTag, network, transactionFeeFlag, walletType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createLocalentityBrokerWithdrawApplyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit a withdrawal request for local entities that required travel rule.
         * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
         * @param {string} address 
         * @param {string} amount 
         * @param {string} coin 
         * @param {string} questionnaire 
         * @param {number} timestamp 
         * @param {string} [addressTag] 
         * @param {string} [name] 
         * @param {string} [network] 
         * @param {number} [recvWindow] 
         * @param {boolean} [transactionFeeFlag] 
         * @param {number} [walletType] 
         * @param {string} [withdrawOrderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLocalentityWithdrawApplyV1(address: string, amount: string, coin: string, questionnaire: string, timestamp: number, addressTag?: string, name?: string, network?: string, recvWindow?: number, transactionFeeFlag?: boolean, walletType?: number, withdrawOrderId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLocalentityWithdrawApplyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLocalentityWithdrawApplyV1(address, amount, coin, questionnaire, timestamp, addressTag, name, network, recvWindow, transactionFeeFlag, walletType, withdrawOrderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createLocalentityWithdrawApplyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get API Key Permission
         * @summary Get API Key Permission (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountApiRestrictionsV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountApiRestrictionsV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountApiRestrictionsV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAccountApiRestrictionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch account api trading status detail.
         * @summary Account API Trading Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountApiTradingStatusV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountApiTradingStatusV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountApiTradingStatusV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAccountApiTradingStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch account info detail.
         * @summary Account info (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountInfoV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountInfoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountInfoV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAccountInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Daily account snapshot
         * @summary Daily Account Snapshot (USER_DATA)
         * @param {string} type &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;, &amp;#34;FUTURES&amp;#34;
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountSnapshotV1(type: string, timestamp: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountSnapshotV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountSnapshotV1(type, timestamp, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAccountSnapshotV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch account status detail.
         * @summary Account Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountStatusV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountStatusV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountStatusV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAccountStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch details of assets supported on Binance.
         * @summary Asset Detail (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetAssetDetailV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: WalletGetAssetAssetDetailV1RespValue; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetAssetDetailV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAssetAssetDetailV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query asset dividend record.
         * @summary Asset Dividend Record (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 20, max 500
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetAssetDividendV1(timestamp: number, asset?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAssetAssetDividendV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetAssetDividendV1(timestamp, asset, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAssetAssetDividendV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query User Delegation History
         * @summary Query User Delegation History(For Master Account)(USER_DATA)
         * @param {string} email 
         * @param {number} startTime 
         * @param {number} endTime 
         * @param {number} timestamp 
         * @param {string} [type] Delegate/Undelegate
         * @param {string} [asset] 
         * @param {number} [current] default 1
         * @param {number} [size] default 10, max 100
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetCustodyTransferHistoryV1(email: string, startTime: number, endTime: number, timestamp: number, type?: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAssetCustodyTransferHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetCustodyTransferHistoryV1(email, startTime, endTime, timestamp, type, asset, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAssetCustodyTransferHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Dustlog
         * @summary DustLog(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetDribbletV1(timestamp: number, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAssetDribbletV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetDribbletV1(timestamp, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAssetDribbletV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The query of Cloud-Mining payment and refund history
         * @summary Get Cloud-Mining payment and refund history (USER_DATA)
         * @param {number} startTime inclusive, unit: ms
         * @param {number} endTime exclusive, unit: ms
         * @param {number} [tranId] The transaction id
         * @param {string} [clientTranId] The unique flag
         * @param {string} [asset] If it is blank, we will query all assets
         * @param {number} [current] current page, default 1, the min value is 1
         * @param {number} [size] page size, default 10, the max value is 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetLedgerTransferCloudMiningQueryByPageV1(startTime: number, endTime: number, tranId?: number, clientTranId?: string, asset?: string, current?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAssetLedgerTransferCloudMiningQueryByPageV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetLedgerTransferCloudMiningQueryByPageV1(startTime, endTime, tranId, clientTranId, asset, current, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAssetLedgerTransferCloudMiningQueryByPageV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch trade fee
         * @summary Trade Fee (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetTradeFeeV1(timestamp: number, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAssetTradeFeeV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetTradeFeeV1(timestamp, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAssetTradeFeeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query User Universal Transfer History
         * @summary Query User Universal Transfer History(USER_DATA)
         * @param {string} type 
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Default 1
         * @param {number} [size] Default 10, Max 100
         * @param {string} [fromSymbol] 
         * @param {string} [toSymbol] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetTransferV1(type: string, timestamp: number, startTime?: number, endTime?: number, current?: number, size?: number, fromSymbol?: string, toSymbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAssetTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetTransferV1(type, timestamp, startTime, endTime, current, size, fromSymbol, toSymbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAssetTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query User Wallet Balance
         * @summary Query User Wallet Balance (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [quoteAsset] &#x60;USDT&#x60;, &#x60;ETH&#x60;, &#x60;USDC&#x60;, &#x60;BNB&#x60;, etc. default &#x60;BTC&#x60;
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetWalletBalanceV1(timestamp: number, quoteAsset?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAssetWalletBalanceV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetWalletBalanceV1(timestamp, quoteAsset, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getAssetWalletBalanceV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get information of coins (available for deposit and withdraw) for user.
         * @summary All Coins\' Information (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCapitalConfigGetallV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCapitalConfigGetallV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCapitalConfigGetallV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getCapitalConfigGetallV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch deposit address list with network.
         * @summary Fetch deposit address list with network(USER_DATA)
         * @param {string} coin &#x60;coin&#x60; refers to the parent network address format that the address is using
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCapitalDepositAddressListV1(coin: string, timestamp: number, network?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCapitalDepositAddressListV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCapitalDepositAddressListV1(coin, timestamp, network, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getCapitalDepositAddressListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch deposit address with network.
         * @summary Deposit Address(supporting network) (USER_DATA)
         * @param {string} coin 
         * @param {number} timestamp 
         * @param {string} [network] 
         * @param {string} [amount] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCapitalDepositAddressV1(coin: string, timestamp: number, network?: string, amount?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCapitalDepositAddressV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCapitalDepositAddressV1(coin, timestamp, network, amount, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getCapitalDepositAddressV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch deposit history.
         * @summary Deposit History (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {boolean} [includeSource] Default: &#x60;false&#x60;, return &#x60;sourceAddress&#x60;field when set to &#x60;true&#x60;
         * @param {string} [coin] 
         * @param {number} [status] 0(0:pending, 6:credited but cannot withdraw, 7:Wrong Deposit, 8:Waiting User confirm, 1:success, 2:rejected)
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [offset] Default:0
         * @param {number} [limit] Default:1000, Max:1000
         * @param {number} [recvWindow] 
         * @param {string} [txId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCapitalDepositHisrecV1(timestamp: number, includeSource?: boolean, coin?: string, status?: number, startTime?: number, endTime?: number, offset?: number, limit?: number, recvWindow?: number, txId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCapitalDepositHisrecV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCapitalDepositHisrecV1(timestamp, includeSource, coin, status, startTime, endTime, offset, limit, recvWindow, txId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getCapitalDepositHisrecV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch withdraw address list
         * @summary Fetch withdraw address list (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCapitalWithdrawAddressListV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCapitalWithdrawAddressListV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCapitalWithdrawAddressListV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getCapitalWithdrawAddressListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch withdraw history.
         * @summary Withdraw History (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [coin] 
         * @param {string} [withdrawOrderId] 
         * @param {number} [status] 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
         * @param {number} [offset] 
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {string} [idList] id list returned in the response of POST &#x60;/sapi/v1/capital/withdraw/apply&#x60;, separated by &#x60;,&#x60;
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCapitalWithdrawHistoryV1(timestamp: number, coin?: string, withdrawOrderId?: string, status?: number, offset?: number, limit?: number, idList?: string, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCapitalWithdrawHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCapitalWithdrawHistoryV1(timestamp, coin, withdrawOrderId, status, offset, limit, idList, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getCapitalWithdrawHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch deposit history for local entities that required travel rule.
         * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [tranId] Comma(,) separated list of wallet tran Ids.
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {boolean} [pendingQuestionnaire] true: Only return records that pending deposit questionnaire. false/not provided: return all records.
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [offset] Default:0
         * @param {number} [limit] Default:1000, Max:1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalentityDepositHistoryV1(timestamp: number, trId?: string, txId?: string, tranId?: string, network?: string, coin?: string, travelRuleStatus?: number, pendingQuestionnaire?: boolean, startTime?: number, endTime?: number, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLocalentityDepositHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocalentityDepositHistoryV1(timestamp, trId, txId, tranId, network, coin, travelRuleStatus, pendingQuestionnaire, startTime, endTime, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getLocalentityDepositHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch the onboarded VASP list for local entities that required travel rule.
         * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalentityVaspV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLocalentityVaspV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocalentityVaspV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getLocalentityVaspV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [withdrawOrderId] Comma(,) separated list of withdrawID defined by the client (i.e. client&amp;#39;s internal withdrawID).
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {number} [offset] Default: 0
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalentityWithdrawHistoryV1(timestamp: number, trId?: string, txId?: string, withdrawOrderId?: string, network?: string, coin?: string, travelRuleStatus?: number, offset?: number, limit?: number, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLocalentityWithdrawHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocalentityWithdrawHistoryV1(timestamp, trId, txId, withdrawOrderId, network, coin, travelRuleStatus, offset, limit, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getLocalentityWithdrawHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId] Comma(,) separated list of transaction Ids.
         * @param {string} [withdrawOrderId] Withdraw ID defined by the client (i.e. client&amp;#39;s internal withdrawID).
         * @param {string} [network] 
         * @param {string} [coin] 
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {number} [offset] Default: 0
         * @param {number} [limit] Default: 1000, Max: 1000
         * @param {number} [startTime] Default: 90 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalentityWithdrawHistoryV2(timestamp: number, trId?: string, txId?: string, withdrawOrderId?: string, network?: string, coin?: string, travelRuleStatus?: number, offset?: number, limit?: number, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLocalentityWithdrawHistoryV2RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocalentityWithdrawHistoryV2(timestamp, trId, txId, withdrawOrderId, network, coin, travelRuleStatus, offset, limit, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getLocalentityWithdrawHistoryV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get symbols delist schedule for spot
         * @summary Get Spot Delist Schedule (MARKET_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpotDelistScheduleV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSpotDelistScheduleV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpotDelistScheduleV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getSpotDelistScheduleV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of symbols that are scheduled to be opened for trading in the market.
         * @summary Get Open Symbol List (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpotOpenSymbolListV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSpotOpenSymbolListV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpotOpenSymbolListV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getSpotOpenSymbolListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch system status.
         * @summary System Status (System)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemStatusV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemStatusV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemStatusV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.getSystemStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {string} beneficiaryPii 
         * @param {string} depositId 
         * @param {string} questionnaire 
         * @param {string} signature 
         * @param {string} subAccountId 
         * @param {number} timestamp 
         * @param {string} [address] 
         * @param {string} [addressTag] 
         * @param {string} [amount] 
         * @param {string} [coin] 
         * @param {string} [network] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocalentityBrokerDepositProvideInfoV1(beneficiaryPii: string, depositId: string, questionnaire: string, signature: string, subAccountId: string, timestamp: number, address?: string, addressTag?: string, amount?: string, coin?: string, network?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateLocalentityBrokerDepositProvideInfoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocalentityBrokerDepositProvideInfoV1(beneficiaryPii, depositId, questionnaire, signature, subAccountId, timestamp, address, addressTag, amount, coin, network, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.updateLocalentityBrokerDepositProvideInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {string} questionnaire 
         * @param {number} timestamp 
         * @param {number} tranId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocalentityDepositProvideInfoV1(questionnaire: string, timestamp: number, tranId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateLocalentityDepositProvideInfoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocalentityDepositProvideInfoV1(questionnaire, timestamp, tranId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.updateLocalentityDepositProvideInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletApiFp(configuration)
    return {
        /**
         * 
         * @summary Disable Fast Withdraw Switch (USER_DATA)
         * @param {WalletApiCreateAccountDisableFastWithdrawSwitchV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountDisableFastWithdrawSwitchV1(requestParameters: WalletApiCreateAccountDisableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createAccountDisableFastWithdrawSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable Fast Withdraw Switch (USER_DATA)
         * @summary Enable Fast Withdraw Switch (USER_DATA)
         * @param {WalletApiCreateAccountEnableFastWithdrawSwitchV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountEnableFastWithdrawSwitchV1(requestParameters: WalletApiCreateAccountEnableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createAccountEnableFastWithdrawSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Assets That Can Be Converted Into BNB
         * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
         * @param {WalletApiCreateAssetDustBtcV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetDustBtcV1(requestParameters: WalletApiCreateAssetDustBtcV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAssetDustBtcV1Resp> {
            return localVarFp.createAssetDustBtcV1(requestParameters.timestamp, requestParameters.accountType, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Convert dust assets to BNB.
         * @summary Dust Transfer (USER_DATA)
         * @param {WalletApiCreateAssetDustV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetDustV1(requestParameters: WalletApiCreateAssetDustV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAssetDustV1Resp> {
            return localVarFp.createAssetDustV1(requestParameters.asset, requestParameters.timestamp, requestParameters.accountType, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Funding Wallet
         * @summary Funding Wallet (USER_DATA)
         * @param {WalletApiCreateAssetGetFundingAssetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetGetFundingAssetV1(requestParameters: WalletApiCreateAssetGetFundingAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<CreateAssetGetFundingAssetV1RespItem>> {
            return localVarFp.createAssetGetFundingAssetV1(requestParameters.timestamp, requestParameters.asset, requestParameters.needBtcValuation, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user assets, just for positive data.
         * @summary User Asset (USER_DATA)
         * @param {WalletApiCreateAssetGetUserAssetV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetGetUserAssetV3(requestParameters: WalletApiCreateAssetGetUserAssetV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<CreateAssetGetUserAssetV3RespItem>> {
            return localVarFp.createAssetGetUserAssetV3(requestParameters.timestamp, requestParameters.asset, requestParameters.needBtcValuation, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * user universal transfer
         * @summary User Universal Transfer (USER_DATA)
         * @param {WalletApiCreateAssetTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetTransferV1(requestParameters: WalletApiCreateAssetTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAssetTransferV1Resp> {
            return localVarFp.createAssetTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.type, requestParameters.fromSymbol, requestParameters.recvWindow, requestParameters.toSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Toggle BNB Burn On Spot Trade And Margin Interest
         * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
         * @param {WalletApiCreateBnbBurnV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBnbBurnV1(requestParameters: WalletApiCreateBnbBurnV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBnbBurnV1Resp> {
            return localVarFp.createBnbBurnV1(requestParameters.timestamp, requestParameters.interestBNBBurn, requestParameters.recvWindow, requestParameters.spotBNBBurn, options).then((request) => request(axios, basePath));
        },
        /**
         * Apply deposit credit for expired address (One click arrival)
         * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
         * @param {WalletApiCreateCapitalDepositCreditApplyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCapitalDepositCreditApplyV1(requestParameters: WalletApiCreateCapitalDepositCreditApplyV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<CreateCapitalDepositCreditApplyV1Resp> {
            return localVarFp.createCapitalDepositCreditApplyV1(requestParameters.depositId, requestParameters.subAccountId, requestParameters.subUserId, requestParameters.txId, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit a withdraw request.
         * @summary Withdraw(USER_DATA)
         * @param {WalletApiCreateCapitalWithdrawApplyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCapitalWithdrawApplyV1(requestParameters: WalletApiCreateCapitalWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateCapitalWithdrawApplyV1Resp> {
            return localVarFp.createCapitalWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.timestamp, requestParameters.addressTag, requestParameters.name, requestParameters.network, requestParameters.recvWindow, requestParameters.transactionFeeFlag, requestParameters.walletType, requestParameters.withdrawOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit a withdrawal request for brokers of local entities that required travel rule.
         * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
         * @param {WalletApiCreateLocalentityBrokerWithdrawApplyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocalentityBrokerWithdrawApplyV1(requestParameters: WalletApiCreateLocalentityBrokerWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLocalentityBrokerWithdrawApplyV1Resp> {
            return localVarFp.createLocalentityBrokerWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.originatorPii, requestParameters.questionnaire, requestParameters.signature, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.withdrawOrderId, requestParameters.addressName, requestParameters.addressTag, requestParameters.network, requestParameters.transactionFeeFlag, requestParameters.walletType, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit a withdrawal request for local entities that required travel rule.
         * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
         * @param {WalletApiCreateLocalentityWithdrawApplyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocalentityWithdrawApplyV1(requestParameters: WalletApiCreateLocalentityWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLocalentityWithdrawApplyV1Resp> {
            return localVarFp.createLocalentityWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.questionnaire, requestParameters.timestamp, requestParameters.addressTag, requestParameters.name, requestParameters.network, requestParameters.recvWindow, requestParameters.transactionFeeFlag, requestParameters.walletType, requestParameters.withdrawOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get API Key Permission
         * @summary Get API Key Permission (USER_DATA)
         * @param {WalletApiGetAccountApiRestrictionsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountApiRestrictionsV1(requestParameters: WalletApiGetAccountApiRestrictionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAccountApiRestrictionsV1Resp> {
            return localVarFp.getAccountApiRestrictionsV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch account api trading status detail.
         * @summary Account API Trading Status (USER_DATA)
         * @param {WalletApiGetAccountApiTradingStatusV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountApiTradingStatusV1(requestParameters: WalletApiGetAccountApiTradingStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAccountApiTradingStatusV1Resp> {
            return localVarFp.getAccountApiTradingStatusV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch account info detail.
         * @summary Account info (USER_DATA)
         * @param {WalletApiGetAccountInfoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfoV1(requestParameters: WalletApiGetAccountInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAccountInfoV1Resp> {
            return localVarFp.getAccountInfoV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Daily account snapshot
         * @summary Daily Account Snapshot (USER_DATA)
         * @param {WalletApiGetAccountSnapshotV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountSnapshotV1(requestParameters: WalletApiGetAccountSnapshotV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAccountSnapshotV1Resp> {
            return localVarFp.getAccountSnapshotV1(requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch account status detail.
         * @summary Account Status (USER_DATA)
         * @param {WalletApiGetAccountStatusV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountStatusV1(requestParameters: WalletApiGetAccountStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAccountStatusV1Resp> {
            return localVarFp.getAccountStatusV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch details of assets supported on Binance.
         * @summary Asset Detail (USER_DATA)
         * @param {WalletApiGetAssetAssetDetailV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAssetDetailV1(requestParameters: WalletApiGetAssetAssetDetailV1Request, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: WalletGetAssetAssetDetailV1RespValue; }> {
            return localVarFp.getAssetAssetDetailV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query asset dividend record.
         * @summary Asset Dividend Record (USER_DATA)
         * @param {WalletApiGetAssetAssetDividendV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAssetDividendV1(requestParameters: WalletApiGetAssetAssetDividendV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAssetAssetDividendV1Resp> {
            return localVarFp.getAssetAssetDividendV1(requestParameters.timestamp, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query User Delegation History
         * @summary Query User Delegation History(For Master Account)(USER_DATA)
         * @param {WalletApiGetAssetCustodyTransferHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetCustodyTransferHistoryV1(requestParameters: WalletApiGetAssetCustodyTransferHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAssetCustodyTransferHistoryV1Resp> {
            return localVarFp.getAssetCustodyTransferHistoryV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.type, requestParameters.asset, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Dustlog
         * @summary DustLog(USER_DATA)
         * @param {WalletApiGetAssetDribbletV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetDribbletV1(requestParameters: WalletApiGetAssetDribbletV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAssetDribbletV1Resp> {
            return localVarFp.getAssetDribbletV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * The query of Cloud-Mining payment and refund history
         * @summary Get Cloud-Mining payment and refund history (USER_DATA)
         * @param {WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetLedgerTransferCloudMiningQueryByPageV1(requestParameters: WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAssetLedgerTransferCloudMiningQueryByPageV1Resp> {
            return localVarFp.getAssetLedgerTransferCloudMiningQueryByPageV1(requestParameters.startTime, requestParameters.endTime, requestParameters.tranId, requestParameters.clientTranId, requestParameters.asset, requestParameters.current, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch trade fee
         * @summary Trade Fee (USER_DATA)
         * @param {WalletApiGetAssetTradeFeeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetTradeFeeV1(requestParameters: WalletApiGetAssetTradeFeeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetAssetTradeFeeV1RespItem>> {
            return localVarFp.getAssetTradeFeeV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query User Universal Transfer History
         * @summary Query User Universal Transfer History(USER_DATA)
         * @param {WalletApiGetAssetTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetTransferV1(requestParameters: WalletApiGetAssetTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAssetTransferV1Resp> {
            return localVarFp.getAssetTransferV1(requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.fromSymbol, requestParameters.toSymbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query User Wallet Balance
         * @summary Query User Wallet Balance (USER_DATA)
         * @param {WalletApiGetAssetWalletBalanceV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetWalletBalanceV1(requestParameters: WalletApiGetAssetWalletBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetAssetWalletBalanceV1RespItem>> {
            return localVarFp.getAssetWalletBalanceV1(requestParameters.timestamp, requestParameters.quoteAsset, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information of coins (available for deposit and withdraw) for user.
         * @summary All Coins\' Information (USER_DATA)
         * @param {WalletApiGetCapitalConfigGetallV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalConfigGetallV1(requestParameters: WalletApiGetCapitalConfigGetallV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalConfigGetallV1RespItem>> {
            return localVarFp.getCapitalConfigGetallV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch deposit address list with network.
         * @summary Fetch deposit address list with network(USER_DATA)
         * @param {WalletApiGetCapitalDepositAddressListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalDepositAddressListV1(requestParameters: WalletApiGetCapitalDepositAddressListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalDepositAddressListV1RespItem>> {
            return localVarFp.getCapitalDepositAddressListV1(requestParameters.coin, requestParameters.timestamp, requestParameters.network, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch deposit address with network.
         * @summary Deposit Address(supporting network) (USER_DATA)
         * @param {WalletApiGetCapitalDepositAddressV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalDepositAddressV1(requestParameters: WalletApiGetCapitalDepositAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetCapitalDepositAddressV1Resp> {
            return localVarFp.getCapitalDepositAddressV1(requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch deposit history.
         * @summary Deposit History (supporting network) (USER_DATA)
         * @param {WalletApiGetCapitalDepositHisrecV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalDepositHisrecV1(requestParameters: WalletApiGetCapitalDepositHisrecV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalDepositHisrecV1RespItem>> {
            return localVarFp.getCapitalDepositHisrecV1(requestParameters.timestamp, requestParameters.includeSource, requestParameters.coin, requestParameters.status, requestParameters.startTime, requestParameters.endTime, requestParameters.offset, requestParameters.limit, requestParameters.recvWindow, requestParameters.txId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch withdraw address list
         * @summary Fetch withdraw address list (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalWithdrawAddressListV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalWithdrawAddressListV1RespItem>> {
            return localVarFp.getCapitalWithdrawAddressListV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch withdraw history.
         * @summary Withdraw History (supporting network) (USER_DATA)
         * @param {WalletApiGetCapitalWithdrawHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapitalWithdrawHistoryV1(requestParameters: WalletApiGetCapitalWithdrawHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalWithdrawHistoryV1RespItem>> {
            return localVarFp.getCapitalWithdrawHistoryV1(requestParameters.timestamp, requestParameters.coin, requestParameters.withdrawOrderId, requestParameters.status, requestParameters.offset, requestParameters.limit, requestParameters.idList, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch deposit history for local entities that required travel rule.
         * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
         * @param {WalletApiGetLocalentityDepositHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalentityDepositHistoryV1(requestParameters: WalletApiGetLocalentityDepositHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLocalentityDepositHistoryV1RespItem>> {
            return localVarFp.getLocalentityDepositHistoryV1(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.tranId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.pendingQuestionnaire, requestParameters.startTime, requestParameters.endTime, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the onboarded VASP list for local entities that required travel rule.
         * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalentityVaspV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLocalentityVaspV1RespItem>> {
            return localVarFp.getLocalentityVaspV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {WalletApiGetLocalentityWithdrawHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalentityWithdrawHistoryV1(requestParameters: WalletApiGetLocalentityWithdrawHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLocalentityWithdrawHistoryV1RespItem>> {
            return localVarFp.getLocalentityWithdrawHistoryV1(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.withdrawOrderId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.offset, requestParameters.limit, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {WalletApiGetLocalentityWithdrawHistoryV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalentityWithdrawHistoryV2(requestParameters: WalletApiGetLocalentityWithdrawHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLocalentityWithdrawHistoryV2RespItem>> {
            return localVarFp.getLocalentityWithdrawHistoryV2(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.withdrawOrderId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.offset, requestParameters.limit, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get symbols delist schedule for spot
         * @summary Get Spot Delist Schedule (MARKET_DATA)
         * @param {WalletApiGetSpotDelistScheduleV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpotDelistScheduleV1(requestParameters: WalletApiGetSpotDelistScheduleV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSpotDelistScheduleV1RespItem>> {
            return localVarFp.getSpotDelistScheduleV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of symbols that are scheduled to be opened for trading in the market.
         * @summary Get Open Symbol List (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpotOpenSymbolListV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSpotOpenSymbolListV1RespItem>> {
            return localVarFp.getSpotOpenSymbolListV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch system status.
         * @summary System Status (System)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusV1(options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusV1Resp> {
            return localVarFp.getSystemStatusV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {WalletApiUpdateLocalentityBrokerDepositProvideInfoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocalentityBrokerDepositProvideInfoV1(requestParameters: WalletApiUpdateLocalentityBrokerDepositProvideInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UpdateLocalentityBrokerDepositProvideInfoV1Resp> {
            return localVarFp.updateLocalentityBrokerDepositProvideInfoV1(requestParameters.beneficiaryPii, requestParameters.depositId, requestParameters.questionnaire, requestParameters.signature, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.address, requestParameters.addressTag, requestParameters.amount, requestParameters.coin, requestParameters.network, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {WalletApiUpdateLocalentityDepositProvideInfoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocalentityDepositProvideInfoV1(requestParameters: WalletApiUpdateLocalentityDepositProvideInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UpdateLocalentityDepositProvideInfoV1Resp> {
            return localVarFp.updateLocalentityDepositProvideInfoV1(requestParameters.questionnaire, requestParameters.timestamp, requestParameters.tranId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletApi - interface
 * @export
 * @interface WalletApi
 */
export interface WalletApiInterface {
    /**
     * 
     * @summary Disable Fast Withdraw Switch (USER_DATA)
     * @param {WalletApiCreateAccountDisableFastWithdrawSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createAccountDisableFastWithdrawSwitchV1(requestParameters: WalletApiCreateAccountDisableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * Enable Fast Withdraw Switch (USER_DATA)
     * @summary Enable Fast Withdraw Switch (USER_DATA)
     * @param {WalletApiCreateAccountEnableFastWithdrawSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createAccountEnableFastWithdrawSwitchV1(requestParameters: WalletApiCreateAccountEnableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * Get Assets That Can Be Converted Into BNB
     * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
     * @param {WalletApiCreateAssetDustBtcV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createAssetDustBtcV1(requestParameters: WalletApiCreateAssetDustBtcV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAssetDustBtcV1Resp>;

    /**
     * Convert dust assets to BNB.
     * @summary Dust Transfer (USER_DATA)
     * @param {WalletApiCreateAssetDustV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createAssetDustV1(requestParameters: WalletApiCreateAssetDustV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAssetDustV1Resp>;

    /**
     * Query Funding Wallet
     * @summary Funding Wallet (USER_DATA)
     * @param {WalletApiCreateAssetGetFundingAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createAssetGetFundingAssetV1(requestParameters: WalletApiCreateAssetGetFundingAssetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<CreateAssetGetFundingAssetV1RespItem>>;

    /**
     * Get user assets, just for positive data.
     * @summary User Asset (USER_DATA)
     * @param {WalletApiCreateAssetGetUserAssetV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createAssetGetUserAssetV3(requestParameters: WalletApiCreateAssetGetUserAssetV3Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<CreateAssetGetUserAssetV3RespItem>>;

    /**
     * user universal transfer
     * @summary User Universal Transfer (USER_DATA)
     * @param {WalletApiCreateAssetTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createAssetTransferV1(requestParameters: WalletApiCreateAssetTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateAssetTransferV1Resp>;

    /**
     * Toggle BNB Burn On Spot Trade And Margin Interest
     * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
     * @param {WalletApiCreateBnbBurnV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createBnbBurnV1(requestParameters: WalletApiCreateBnbBurnV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateBnbBurnV1Resp>;

    /**
     * Apply deposit credit for expired address (One click arrival)
     * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
     * @param {WalletApiCreateCapitalDepositCreditApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createCapitalDepositCreditApplyV1(requestParameters?: WalletApiCreateCapitalDepositCreditApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateCapitalDepositCreditApplyV1Resp>;

    /**
     * Submit a withdraw request.
     * @summary Withdraw(USER_DATA)
     * @param {WalletApiCreateCapitalWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createCapitalWithdrawApplyV1(requestParameters: WalletApiCreateCapitalWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateCapitalWithdrawApplyV1Resp>;

    /**
     * Submit a withdrawal request for brokers of local entities that required travel rule.
     * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
     * @param {WalletApiCreateLocalentityBrokerWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createLocalentityBrokerWithdrawApplyV1(requestParameters: WalletApiCreateLocalentityBrokerWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLocalentityBrokerWithdrawApplyV1Resp>;

    /**
     * Submit a withdrawal request for local entities that required travel rule.
     * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
     * @param {WalletApiCreateLocalentityWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    createLocalentityWithdrawApplyV1(requestParameters: WalletApiCreateLocalentityWithdrawApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateLocalentityWithdrawApplyV1Resp>;

    /**
     * Get API Key Permission
     * @summary Get API Key Permission (USER_DATA)
     * @param {WalletApiGetAccountApiRestrictionsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAccountApiRestrictionsV1(requestParameters: WalletApiGetAccountApiRestrictionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAccountApiRestrictionsV1Resp>;

    /**
     * Fetch account api trading status detail.
     * @summary Account API Trading Status (USER_DATA)
     * @param {WalletApiGetAccountApiTradingStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAccountApiTradingStatusV1(requestParameters: WalletApiGetAccountApiTradingStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAccountApiTradingStatusV1Resp>;

    /**
     * Fetch account info detail.
     * @summary Account info (USER_DATA)
     * @param {WalletApiGetAccountInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAccountInfoV1(requestParameters: WalletApiGetAccountInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAccountInfoV1Resp>;

    /**
     * Daily account snapshot
     * @summary Daily Account Snapshot (USER_DATA)
     * @param {WalletApiGetAccountSnapshotV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAccountSnapshotV1(requestParameters: WalletApiGetAccountSnapshotV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAccountSnapshotV1Resp>;

    /**
     * Fetch account status detail.
     * @summary Account Status (USER_DATA)
     * @param {WalletApiGetAccountStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAccountStatusV1(requestParameters: WalletApiGetAccountStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAccountStatusV1Resp>;

    /**
     * Fetch details of assets supported on Binance.
     * @summary Asset Detail (USER_DATA)
     * @param {WalletApiGetAssetAssetDetailV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAssetAssetDetailV1(requestParameters: WalletApiGetAssetAssetDetailV1Request, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: WalletGetAssetAssetDetailV1RespValue; }>;

    /**
     * Query asset dividend record.
     * @summary Asset Dividend Record (USER_DATA)
     * @param {WalletApiGetAssetAssetDividendV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAssetAssetDividendV1(requestParameters: WalletApiGetAssetAssetDividendV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAssetAssetDividendV1Resp>;

    /**
     * Query User Delegation History
     * @summary Query User Delegation History(For Master Account)(USER_DATA)
     * @param {WalletApiGetAssetCustodyTransferHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAssetCustodyTransferHistoryV1(requestParameters: WalletApiGetAssetCustodyTransferHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAssetCustodyTransferHistoryV1Resp>;

    /**
     * Dustlog
     * @summary DustLog(USER_DATA)
     * @param {WalletApiGetAssetDribbletV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAssetDribbletV1(requestParameters: WalletApiGetAssetDribbletV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAssetDribbletV1Resp>;

    /**
     * The query of Cloud-Mining payment and refund history
     * @summary Get Cloud-Mining payment and refund history (USER_DATA)
     * @param {WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAssetLedgerTransferCloudMiningQueryByPageV1(requestParameters: WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAssetLedgerTransferCloudMiningQueryByPageV1Resp>;

    /**
     * Fetch trade fee
     * @summary Trade Fee (USER_DATA)
     * @param {WalletApiGetAssetTradeFeeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAssetTradeFeeV1(requestParameters: WalletApiGetAssetTradeFeeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetAssetTradeFeeV1RespItem>>;

    /**
     * Query User Universal Transfer History
     * @summary Query User Universal Transfer History(USER_DATA)
     * @param {WalletApiGetAssetTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAssetTransferV1(requestParameters: WalletApiGetAssetTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetAssetTransferV1Resp>;

    /**
     * Query User Wallet Balance
     * @summary Query User Wallet Balance (USER_DATA)
     * @param {WalletApiGetAssetWalletBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getAssetWalletBalanceV1(requestParameters: WalletApiGetAssetWalletBalanceV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetAssetWalletBalanceV1RespItem>>;

    /**
     * Get information of coins (available for deposit and withdraw) for user.
     * @summary All Coins\' Information (USER_DATA)
     * @param {WalletApiGetCapitalConfigGetallV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getCapitalConfigGetallV1(requestParameters: WalletApiGetCapitalConfigGetallV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalConfigGetallV1RespItem>>;

    /**
     * Fetch deposit address list with network.
     * @summary Fetch deposit address list with network(USER_DATA)
     * @param {WalletApiGetCapitalDepositAddressListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getCapitalDepositAddressListV1(requestParameters: WalletApiGetCapitalDepositAddressListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalDepositAddressListV1RespItem>>;

    /**
     * Fetch deposit address with network.
     * @summary Deposit Address(supporting network) (USER_DATA)
     * @param {WalletApiGetCapitalDepositAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getCapitalDepositAddressV1(requestParameters: WalletApiGetCapitalDepositAddressV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetCapitalDepositAddressV1Resp>;

    /**
     * Fetch deposit history.
     * @summary Deposit History (supporting network) (USER_DATA)
     * @param {WalletApiGetCapitalDepositHisrecV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getCapitalDepositHisrecV1(requestParameters: WalletApiGetCapitalDepositHisrecV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalDepositHisrecV1RespItem>>;

    /**
     * Fetch withdraw address list
     * @summary Fetch withdraw address list (USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getCapitalWithdrawAddressListV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalWithdrawAddressListV1RespItem>>;

    /**
     * Fetch withdraw history.
     * @summary Withdraw History (supporting network) (USER_DATA)
     * @param {WalletApiGetCapitalWithdrawHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getCapitalWithdrawHistoryV1(requestParameters: WalletApiGetCapitalWithdrawHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCapitalWithdrawHistoryV1RespItem>>;

    /**
     * Fetch deposit history for local entities that required travel rule.
     * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
     * @param {WalletApiGetLocalentityDepositHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getLocalentityDepositHistoryV1(requestParameters: WalletApiGetLocalentityDepositHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLocalentityDepositHistoryV1RespItem>>;

    /**
     * Fetch the onboarded VASP list for local entities that required travel rule.
     * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getLocalentityVaspV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLocalentityVaspV1RespItem>>;

    /**
     * Fetch withdraw history for local entities that required travel rule.
     * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WalletApiGetLocalentityWithdrawHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getLocalentityWithdrawHistoryV1(requestParameters: WalletApiGetLocalentityWithdrawHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLocalentityWithdrawHistoryV1RespItem>>;

    /**
     * Fetch withdraw history for local entities that required travel rule.
     * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WalletApiGetLocalentityWithdrawHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getLocalentityWithdrawHistoryV2(requestParameters: WalletApiGetLocalentityWithdrawHistoryV2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLocalentityWithdrawHistoryV2RespItem>>;

    /**
     * Get symbols delist schedule for spot
     * @summary Get Spot Delist Schedule (MARKET_DATA)
     * @param {WalletApiGetSpotDelistScheduleV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getSpotDelistScheduleV1(requestParameters: WalletApiGetSpotDelistScheduleV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSpotDelistScheduleV1RespItem>>;

    /**
     * Get the list of symbols that are scheduled to be opened for trading in the market.
     * @summary Get Open Symbol List (MARKET_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getSpotOpenSymbolListV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetSpotOpenSymbolListV1RespItem>>;

    /**
     * Fetch system status.
     * @summary System Status (System)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    getSystemStatusV1(options?: RawAxiosRequestConfig): AxiosPromise<GetSystemStatusV1Resp>;

    /**
     * Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WalletApiUpdateLocalentityBrokerDepositProvideInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    updateLocalentityBrokerDepositProvideInfoV1(requestParameters: WalletApiUpdateLocalentityBrokerDepositProvideInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UpdateLocalentityBrokerDepositProvideInfoV1Resp>;

    /**
     * Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WalletApiUpdateLocalentityDepositProvideInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    updateLocalentityDepositProvideInfoV1(requestParameters: WalletApiUpdateLocalentityDepositProvideInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UpdateLocalentityDepositProvideInfoV1Resp>;

}

/**
 * Request parameters for createAccountDisableFastWithdrawSwitchV1 operation in WalletApi.
 * @export
 * @interface WalletApiCreateAccountDisableFastWithdrawSwitchV1Request
 */
export interface WalletApiCreateAccountDisableFastWithdrawSwitchV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAccountDisableFastWithdrawSwitchV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAccountDisableFastWithdrawSwitchV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createAccountEnableFastWithdrawSwitchV1 operation in WalletApi.
 * @export
 * @interface WalletApiCreateAccountEnableFastWithdrawSwitchV1Request
 */
export interface WalletApiCreateAccountEnableFastWithdrawSwitchV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAccountEnableFastWithdrawSwitchV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAccountEnableFastWithdrawSwitchV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createAssetDustBtcV1 operation in WalletApi.
 * @export
 * @interface WalletApiCreateAssetDustBtcV1Request
 */
export interface WalletApiCreateAssetDustBtcV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAssetDustBtcV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateAssetDustBtcV1
     */
    readonly accountType?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAssetDustBtcV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createAssetDustV1 operation in WalletApi.
 * @export
 * @interface WalletApiCreateAssetDustV1Request
 */
export interface WalletApiCreateAssetDustV1Request {
    /**
     * 
     * @type {Array<string>}
     * @memberof WalletApiCreateAssetDustV1
     */
    readonly asset: Array<string>

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAssetDustV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateAssetDustV1
     */
    readonly accountType?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAssetDustV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createAssetGetFundingAssetV1 operation in WalletApi.
 * @export
 * @interface WalletApiCreateAssetGetFundingAssetV1Request
 */
export interface WalletApiCreateAssetGetFundingAssetV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAssetGetFundingAssetV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateAssetGetFundingAssetV1
     */
    readonly asset?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateAssetGetFundingAssetV1
     */
    readonly needBtcValuation?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAssetGetFundingAssetV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createAssetGetUserAssetV3 operation in WalletApi.
 * @export
 * @interface WalletApiCreateAssetGetUserAssetV3Request
 */
export interface WalletApiCreateAssetGetUserAssetV3Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAssetGetUserAssetV3
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateAssetGetUserAssetV3
     */
    readonly asset?: string

    /**
     * 
     * @type {boolean}
     * @memberof WalletApiCreateAssetGetUserAssetV3
     */
    readonly needBtcValuation?: boolean

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAssetGetUserAssetV3
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createAssetTransferV1 operation in WalletApi.
 * @export
 * @interface WalletApiCreateAssetTransferV1Request
 */
export interface WalletApiCreateAssetTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateAssetTransferV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateAssetTransferV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAssetTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateAssetTransferV1
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateAssetTransferV1
     */
    readonly fromSymbol?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateAssetTransferV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateAssetTransferV1
     */
    readonly toSymbol?: string
}

/**
 * Request parameters for createBnbBurnV1 operation in WalletApi.
 * @export
 * @interface WalletApiCreateBnbBurnV1Request
 */
export interface WalletApiCreateBnbBurnV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateBnbBurnV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateBnbBurnV1
     */
    readonly interestBNBBurn?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateBnbBurnV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateBnbBurnV1
     */
    readonly spotBNBBurn?: string
}

/**
 * Request parameters for createCapitalDepositCreditApplyV1 operation in WalletApi.
 * @export
 * @interface WalletApiCreateCapitalDepositCreditApplyV1Request
 */
export interface WalletApiCreateCapitalDepositCreditApplyV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateCapitalDepositCreditApplyV1
     */
    readonly depositId?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateCapitalDepositCreditApplyV1
     */
    readonly subAccountId?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateCapitalDepositCreditApplyV1
     */
    readonly subUserId?: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateCapitalDepositCreditApplyV1
     */
    readonly txId?: string
}

/**
 * Request parameters for createCapitalWithdrawApplyV1 operation in WalletApi.
 * @export
 * @interface WalletApiCreateCapitalWithdrawApplyV1Request
 */
export interface WalletApiCreateCapitalWithdrawApplyV1Request {
    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateCapitalWithdrawApplyV1
     */
    readonly address: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateCapitalWithdrawApplyV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateCapitalWithdrawApplyV1
     */
    readonly coin: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateCapitalWithdrawApplyV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateCapitalWithdrawApplyV1
     */
    readonly addressTag?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateCapitalWithdrawApplyV1
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateCapitalWithdrawApplyV1
     */
    readonly network?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateCapitalWithdrawApplyV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {boolean}
     * @memberof WalletApiCreateCapitalWithdrawApplyV1
     */
    readonly transactionFeeFlag?: boolean

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateCapitalWithdrawApplyV1
     */
    readonly walletType?: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateCapitalWithdrawApplyV1
     */
    readonly withdrawOrderId?: string
}

/**
 * Request parameters for createLocalentityBrokerWithdrawApplyV1 operation in WalletApi.
 * @export
 * @interface WalletApiCreateLocalentityBrokerWithdrawApplyV1Request
 */
export interface WalletApiCreateLocalentityBrokerWithdrawApplyV1Request {
    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly address: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly coin: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly originatorPii: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly questionnaire: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly signature: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly withdrawOrderId: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly addressName?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly addressTag?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly network?: string

    /**
     * 
     * @type {boolean}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly transactionFeeFlag?: boolean

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateLocalentityBrokerWithdrawApplyV1
     */
    readonly walletType?: number
}

/**
 * Request parameters for createLocalentityWithdrawApplyV1 operation in WalletApi.
 * @export
 * @interface WalletApiCreateLocalentityWithdrawApplyV1Request
 */
export interface WalletApiCreateLocalentityWithdrawApplyV1Request {
    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly address: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly coin: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly questionnaire: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly addressTag?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly network?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {boolean}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly transactionFeeFlag?: boolean

    /**
     * 
     * @type {number}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly walletType?: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateLocalentityWithdrawApplyV1
     */
    readonly withdrawOrderId?: string
}

/**
 * Request parameters for getAccountApiRestrictionsV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAccountApiRestrictionsV1Request
 */
export interface WalletApiGetAccountApiRestrictionsV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountApiRestrictionsV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountApiRestrictionsV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAccountApiTradingStatusV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAccountApiTradingStatusV1Request
 */
export interface WalletApiGetAccountApiTradingStatusV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountApiTradingStatusV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountApiTradingStatusV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAccountInfoV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAccountInfoV1Request
 */
export interface WalletApiGetAccountInfoV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountInfoV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountInfoV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAccountSnapshotV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAccountSnapshotV1Request
 */
export interface WalletApiGetAccountSnapshotV1Request {
    /**
     * &amp;#34;SPOT&amp;#34;, &amp;#34;MARGIN&amp;#34;, &amp;#34;FUTURES&amp;#34;
     * @type {string}
     * @memberof WalletApiGetAccountSnapshotV1
     */
    readonly type: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountSnapshotV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountSnapshotV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountSnapshotV1
     */
    readonly endTime?: number

    /**
     * min 7, max 30, default 7
     * @type {number}
     * @memberof WalletApiGetAccountSnapshotV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountSnapshotV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAccountStatusV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAccountStatusV1Request
 */
export interface WalletApiGetAccountStatusV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountStatusV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAccountStatusV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAssetAssetDetailV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAssetAssetDetailV1Request
 */
export interface WalletApiGetAssetAssetDetailV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetAssetDetailV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetAssetDetailV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAssetAssetDividendV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAssetAssetDividendV1Request
 */
export interface WalletApiGetAssetAssetDividendV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetAssetDividendV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetAssetAssetDividendV1
     */
    readonly asset?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetAssetDividendV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetAssetDividendV1
     */
    readonly endTime?: number

    /**
     * Default 20, max 500
     * @type {number}
     * @memberof WalletApiGetAssetAssetDividendV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetAssetDividendV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAssetCustodyTransferHistoryV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAssetCustodyTransferHistoryV1Request
 */
export interface WalletApiGetAssetCustodyTransferHistoryV1Request {
    /**
     * 
     * @type {string}
     * @memberof WalletApiGetAssetCustodyTransferHistoryV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetCustodyTransferHistoryV1
     */
    readonly startTime: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetCustodyTransferHistoryV1
     */
    readonly endTime: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetCustodyTransferHistoryV1
     */
    readonly timestamp: number

    /**
     * Delegate/Undelegate
     * @type {string}
     * @memberof WalletApiGetAssetCustodyTransferHistoryV1
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetAssetCustodyTransferHistoryV1
     */
    readonly asset?: string

    /**
     * default 1
     * @type {number}
     * @memberof WalletApiGetAssetCustodyTransferHistoryV1
     */
    readonly current?: number

    /**
     * default 10, max 100
     * @type {number}
     * @memberof WalletApiGetAssetCustodyTransferHistoryV1
     */
    readonly size?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetCustodyTransferHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAssetDribbletV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAssetDribbletV1Request
 */
export interface WalletApiGetAssetDribbletV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetDribbletV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetDribbletV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetDribbletV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetDribbletV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAssetLedgerTransferCloudMiningQueryByPageV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1Request
 */
export interface WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1Request {
    /**
     * inclusive, unit: ms
     * @type {number}
     * @memberof WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly startTime: number

    /**
     * exclusive, unit: ms
     * @type {number}
     * @memberof WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly endTime: number

    /**
     * The transaction id
     * @type {number}
     * @memberof WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly tranId?: number

    /**
     * The unique flag
     * @type {string}
     * @memberof WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly clientTranId?: string

    /**
     * If it is blank, we will query all assets
     * @type {string}
     * @memberof WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly asset?: string

    /**
     * current page, default 1, the min value is 1
     * @type {number}
     * @memberof WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly current?: number

    /**
     * page size, default 10, the max value is 100
     * @type {number}
     * @memberof WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1
     */
    readonly size?: number
}

/**
 * Request parameters for getAssetTradeFeeV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAssetTradeFeeV1Request
 */
export interface WalletApiGetAssetTradeFeeV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetTradeFeeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetAssetTradeFeeV1
     */
    readonly symbol?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetTradeFeeV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAssetTransferV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAssetTransferV1Request
 */
export interface WalletApiGetAssetTransferV1Request {
    /**
     * 
     * @type {string}
     * @memberof WalletApiGetAssetTransferV1
     */
    readonly type: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetTransferV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetTransferV1
     */
    readonly endTime?: number

    /**
     * Default 1
     * @type {number}
     * @memberof WalletApiGetAssetTransferV1
     */
    readonly current?: number

    /**
     * Default 10, Max 100
     * @type {number}
     * @memberof WalletApiGetAssetTransferV1
     */
    readonly size?: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetAssetTransferV1
     */
    readonly fromSymbol?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetAssetTransferV1
     */
    readonly toSymbol?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetTransferV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getAssetWalletBalanceV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetAssetWalletBalanceV1Request
 */
export interface WalletApiGetAssetWalletBalanceV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetWalletBalanceV1
     */
    readonly timestamp: number

    /**
     * &#x60;USDT&#x60;, &#x60;ETH&#x60;, &#x60;USDC&#x60;, &#x60;BNB&#x60;, etc. default &#x60;BTC&#x60;
     * @type {string}
     * @memberof WalletApiGetAssetWalletBalanceV1
     */
    readonly quoteAsset?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetAssetWalletBalanceV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getCapitalConfigGetallV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetCapitalConfigGetallV1Request
 */
export interface WalletApiGetCapitalConfigGetallV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetCapitalConfigGetallV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetCapitalConfigGetallV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getCapitalDepositAddressListV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetCapitalDepositAddressListV1Request
 */
export interface WalletApiGetCapitalDepositAddressListV1Request {
    /**
     * &#x60;coin&#x60; refers to the parent network address format that the address is using
     * @type {string}
     * @memberof WalletApiGetCapitalDepositAddressListV1
     */
    readonly coin: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetCapitalDepositAddressListV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetCapitalDepositAddressListV1
     */
    readonly network?: string
}

/**
 * Request parameters for getCapitalDepositAddressV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetCapitalDepositAddressV1Request
 */
export interface WalletApiGetCapitalDepositAddressV1Request {
    /**
     * 
     * @type {string}
     * @memberof WalletApiGetCapitalDepositAddressV1
     */
    readonly coin: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetCapitalDepositAddressV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetCapitalDepositAddressV1
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetCapitalDepositAddressV1
     */
    readonly amount?: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetCapitalDepositAddressV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getCapitalDepositHisrecV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetCapitalDepositHisrecV1Request
 */
export interface WalletApiGetCapitalDepositHisrecV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetCapitalDepositHisrecV1
     */
    readonly timestamp: number

    /**
     * Default: &#x60;false&#x60;, return &#x60;sourceAddress&#x60;field when set to &#x60;true&#x60;
     * @type {boolean}
     * @memberof WalletApiGetCapitalDepositHisrecV1
     */
    readonly includeSource?: boolean

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetCapitalDepositHisrecV1
     */
    readonly coin?: string

    /**
     * 0(0:pending, 6:credited but cannot withdraw, 7:Wrong Deposit, 8:Waiting User confirm, 1:success, 2:rejected)
     * @type {number}
     * @memberof WalletApiGetCapitalDepositHisrecV1
     */
    readonly status?: number

    /**
     * Default: 90 days from current timestamp
     * @type {number}
     * @memberof WalletApiGetCapitalDepositHisrecV1
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof WalletApiGetCapitalDepositHisrecV1
     */
    readonly endTime?: number

    /**
     * Default:0
     * @type {number}
     * @memberof WalletApiGetCapitalDepositHisrecV1
     */
    readonly offset?: number

    /**
     * Default:1000, Max:1000
     * @type {number}
     * @memberof WalletApiGetCapitalDepositHisrecV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetCapitalDepositHisrecV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetCapitalDepositHisrecV1
     */
    readonly txId?: string
}

/**
 * Request parameters for getCapitalWithdrawHistoryV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetCapitalWithdrawHistoryV1Request
 */
export interface WalletApiGetCapitalWithdrawHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetCapitalWithdrawHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetCapitalWithdrawHistoryV1
     */
    readonly coin?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetCapitalWithdrawHistoryV1
     */
    readonly withdrawOrderId?: string

    /**
     * 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
     * @type {number}
     * @memberof WalletApiGetCapitalWithdrawHistoryV1
     */
    readonly status?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetCapitalWithdrawHistoryV1
     */
    readonly offset?: number

    /**
     * Default: 1000, Max: 1000
     * @type {number}
     * @memberof WalletApiGetCapitalWithdrawHistoryV1
     */
    readonly limit?: number

    /**
     * id list returned in the response of POST &#x60;/sapi/v1/capital/withdraw/apply&#x60;, separated by &#x60;,&#x60;
     * @type {string}
     * @memberof WalletApiGetCapitalWithdrawHistoryV1
     */
    readonly idList?: string

    /**
     * Default: 90 days from current timestamp
     * @type {number}
     * @memberof WalletApiGetCapitalWithdrawHistoryV1
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof WalletApiGetCapitalWithdrawHistoryV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetCapitalWithdrawHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLocalentityDepositHistoryV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetLocalentityDepositHistoryV1Request
 */
export interface WalletApiGetLocalentityDepositHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly timestamp: number

    /**
     * Comma(,) separated list of travel rule record Ids.
     * @type {string}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly trId?: string

    /**
     * Comma(,) separated list of transaction Ids.
     * @type {string}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly txId?: string

    /**
     * Comma(,) separated list of wallet tran Ids.
     * @type {string}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly tranId?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly coin?: string

    /**
     * 0:Completed,1:Pending,2:Failed
     * @type {number}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly travelRuleStatus?: number

    /**
     * true: Only return records that pending deposit questionnaire. false/not provided: return all records.
     * @type {boolean}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly pendingQuestionnaire?: boolean

    /**
     * Default: 90 days from current timestamp
     * @type {number}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly endTime?: number

    /**
     * Default:0
     * @type {number}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly offset?: number

    /**
     * Default:1000, Max:1000
     * @type {number}
     * @memberof WalletApiGetLocalentityDepositHistoryV1
     */
    readonly limit?: number
}

/**
 * Request parameters for getLocalentityWithdrawHistoryV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetLocalentityWithdrawHistoryV1Request
 */
export interface WalletApiGetLocalentityWithdrawHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly timestamp: number

    /**
     * Comma(,) separated list of travel rule record Ids.
     * @type {string}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly trId?: string

    /**
     * Comma(,) separated list of transaction Ids.
     * @type {string}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly txId?: string

    /**
     * Comma(,) separated list of withdrawID defined by the client (i.e. client&amp;#39;s internal withdrawID).
     * @type {string}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly withdrawOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly coin?: string

    /**
     * 0:Completed,1:Pending,2:Failed
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly travelRuleStatus?: number

    /**
     * Default: 0
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly offset?: number

    /**
     * Default: 1000, Max: 1000
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly limit?: number

    /**
     * Default: 90 days from current timestamp
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getLocalentityWithdrawHistoryV2 operation in WalletApi.
 * @export
 * @interface WalletApiGetLocalentityWithdrawHistoryV2Request
 */
export interface WalletApiGetLocalentityWithdrawHistoryV2Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly timestamp: number

    /**
     * Comma(,) separated list of travel rule record Ids.
     * @type {string}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly trId?: string

    /**
     * Comma(,) separated list of transaction Ids.
     * @type {string}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly txId?: string

    /**
     * Withdraw ID defined by the client (i.e. client&amp;#39;s internal withdrawID).
     * @type {string}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly withdrawOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly network?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly coin?: string

    /**
     * 0:Completed,1:Pending,2:Failed
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly travelRuleStatus?: number

    /**
     * Default: 0
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly offset?: number

    /**
     * Default: 1000, Max: 1000
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly limit?: number

    /**
     * Default: 90 days from current timestamp
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetLocalentityWithdrawHistoryV2
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getSpotDelistScheduleV1 operation in WalletApi.
 * @export
 * @interface WalletApiGetSpotDelistScheduleV1Request
 */
export interface WalletApiGetSpotDelistScheduleV1Request {
    /**
     * 
     * @type {number}
     * @memberof WalletApiGetSpotDelistScheduleV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiGetSpotDelistScheduleV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for updateLocalentityBrokerDepositProvideInfoV1 operation in WalletApi.
 * @export
 * @interface WalletApiUpdateLocalentityBrokerDepositProvideInfoV1Request
 */
export interface WalletApiUpdateLocalentityBrokerDepositProvideInfoV1Request {
    /**
     * 
     * @type {string}
     * @memberof WalletApiUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly beneficiaryPii: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly depositId: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly questionnaire: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly signature: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly subAccountId: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof WalletApiUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly address?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly addressTag?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly amount?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly coin?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiUpdateLocalentityBrokerDepositProvideInfoV1
     */
    readonly network?: string
}

/**
 * Request parameters for updateLocalentityDepositProvideInfoV1 operation in WalletApi.
 * @export
 * @interface WalletApiUpdateLocalentityDepositProvideInfoV1Request
 */
export interface WalletApiUpdateLocalentityDepositProvideInfoV1Request {
    /**
     * 
     * @type {string}
     * @memberof WalletApiUpdateLocalentityDepositProvideInfoV1
     */
    readonly questionnaire: string

    /**
     * 
     * @type {number}
     * @memberof WalletApiUpdateLocalentityDepositProvideInfoV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof WalletApiUpdateLocalentityDepositProvideInfoV1
     */
    readonly tranId: number
}

/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export class WalletApi extends BaseAPI implements WalletApiInterface {
    /**
     * 
     * @summary Disable Fast Withdraw Switch (USER_DATA)
     * @param {WalletApiCreateAccountDisableFastWithdrawSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createAccountDisableFastWithdrawSwitchV1(requestParameters: WalletApiCreateAccountDisableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createAccountDisableFastWithdrawSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable Fast Withdraw Switch (USER_DATA)
     * @summary Enable Fast Withdraw Switch (USER_DATA)
     * @param {WalletApiCreateAccountEnableFastWithdrawSwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createAccountEnableFastWithdrawSwitchV1(requestParameters: WalletApiCreateAccountEnableFastWithdrawSwitchV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createAccountEnableFastWithdrawSwitchV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Assets That Can Be Converted Into BNB
     * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
     * @param {WalletApiCreateAssetDustBtcV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createAssetDustBtcV1(requestParameters: WalletApiCreateAssetDustBtcV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createAssetDustBtcV1(requestParameters.timestamp, requestParameters.accountType, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Convert dust assets to BNB.
     * @summary Dust Transfer (USER_DATA)
     * @param {WalletApiCreateAssetDustV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createAssetDustV1(requestParameters: WalletApiCreateAssetDustV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createAssetDustV1(requestParameters.asset, requestParameters.timestamp, requestParameters.accountType, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Funding Wallet
     * @summary Funding Wallet (USER_DATA)
     * @param {WalletApiCreateAssetGetFundingAssetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createAssetGetFundingAssetV1(requestParameters: WalletApiCreateAssetGetFundingAssetV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createAssetGetFundingAssetV1(requestParameters.timestamp, requestParameters.asset, requestParameters.needBtcValuation, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user assets, just for positive data.
     * @summary User Asset (USER_DATA)
     * @param {WalletApiCreateAssetGetUserAssetV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createAssetGetUserAssetV3(requestParameters: WalletApiCreateAssetGetUserAssetV3Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createAssetGetUserAssetV3(requestParameters.timestamp, requestParameters.asset, requestParameters.needBtcValuation, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * user universal transfer
     * @summary User Universal Transfer (USER_DATA)
     * @param {WalletApiCreateAssetTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createAssetTransferV1(requestParameters: WalletApiCreateAssetTransferV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createAssetTransferV1(requestParameters.amount, requestParameters.asset, requestParameters.timestamp, requestParameters.type, requestParameters.fromSymbol, requestParameters.recvWindow, requestParameters.toSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Toggle BNB Burn On Spot Trade And Margin Interest
     * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
     * @param {WalletApiCreateBnbBurnV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createBnbBurnV1(requestParameters: WalletApiCreateBnbBurnV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createBnbBurnV1(requestParameters.timestamp, requestParameters.interestBNBBurn, requestParameters.recvWindow, requestParameters.spotBNBBurn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Apply deposit credit for expired address (One click arrival)
     * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
     * @param {WalletApiCreateCapitalDepositCreditApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createCapitalDepositCreditApplyV1(requestParameters: WalletApiCreateCapitalDepositCreditApplyV1Request = {}, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createCapitalDepositCreditApplyV1(requestParameters.depositId, requestParameters.subAccountId, requestParameters.subUserId, requestParameters.txId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit a withdraw request.
     * @summary Withdraw(USER_DATA)
     * @param {WalletApiCreateCapitalWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createCapitalWithdrawApplyV1(requestParameters: WalletApiCreateCapitalWithdrawApplyV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createCapitalWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.timestamp, requestParameters.addressTag, requestParameters.name, requestParameters.network, requestParameters.recvWindow, requestParameters.transactionFeeFlag, requestParameters.walletType, requestParameters.withdrawOrderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit a withdrawal request for brokers of local entities that required travel rule.
     * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
     * @param {WalletApiCreateLocalentityBrokerWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createLocalentityBrokerWithdrawApplyV1(requestParameters: WalletApiCreateLocalentityBrokerWithdrawApplyV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createLocalentityBrokerWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.originatorPii, requestParameters.questionnaire, requestParameters.signature, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.withdrawOrderId, requestParameters.addressName, requestParameters.addressTag, requestParameters.network, requestParameters.transactionFeeFlag, requestParameters.walletType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit a withdrawal request for local entities that required travel rule.
     * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
     * @param {WalletApiCreateLocalentityWithdrawApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createLocalentityWithdrawApplyV1(requestParameters: WalletApiCreateLocalentityWithdrawApplyV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createLocalentityWithdrawApplyV1(requestParameters.address, requestParameters.amount, requestParameters.coin, requestParameters.questionnaire, requestParameters.timestamp, requestParameters.addressTag, requestParameters.name, requestParameters.network, requestParameters.recvWindow, requestParameters.transactionFeeFlag, requestParameters.walletType, requestParameters.withdrawOrderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get API Key Permission
     * @summary Get API Key Permission (USER_DATA)
     * @param {WalletApiGetAccountApiRestrictionsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAccountApiRestrictionsV1(requestParameters: WalletApiGetAccountApiRestrictionsV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAccountApiRestrictionsV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch account api trading status detail.
     * @summary Account API Trading Status (USER_DATA)
     * @param {WalletApiGetAccountApiTradingStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAccountApiTradingStatusV1(requestParameters: WalletApiGetAccountApiTradingStatusV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAccountApiTradingStatusV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch account info detail.
     * @summary Account info (USER_DATA)
     * @param {WalletApiGetAccountInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAccountInfoV1(requestParameters: WalletApiGetAccountInfoV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAccountInfoV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Daily account snapshot
     * @summary Daily Account Snapshot (USER_DATA)
     * @param {WalletApiGetAccountSnapshotV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAccountSnapshotV1(requestParameters: WalletApiGetAccountSnapshotV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAccountSnapshotV1(requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch account status detail.
     * @summary Account Status (USER_DATA)
     * @param {WalletApiGetAccountStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAccountStatusV1(requestParameters: WalletApiGetAccountStatusV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAccountStatusV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch details of assets supported on Binance.
     * @summary Asset Detail (USER_DATA)
     * @param {WalletApiGetAssetAssetDetailV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAssetAssetDetailV1(requestParameters: WalletApiGetAssetAssetDetailV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAssetAssetDetailV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query asset dividend record.
     * @summary Asset Dividend Record (USER_DATA)
     * @param {WalletApiGetAssetAssetDividendV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAssetAssetDividendV1(requestParameters: WalletApiGetAssetAssetDividendV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAssetAssetDividendV1(requestParameters.timestamp, requestParameters.asset, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query User Delegation History
     * @summary Query User Delegation History(For Master Account)(USER_DATA)
     * @param {WalletApiGetAssetCustodyTransferHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAssetCustodyTransferHistoryV1(requestParameters: WalletApiGetAssetCustodyTransferHistoryV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAssetCustodyTransferHistoryV1(requestParameters.email, requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.type, requestParameters.asset, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Dustlog
     * @summary DustLog(USER_DATA)
     * @param {WalletApiGetAssetDribbletV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAssetDribbletV1(requestParameters: WalletApiGetAssetDribbletV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAssetDribbletV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The query of Cloud-Mining payment and refund history
     * @summary Get Cloud-Mining payment and refund history (USER_DATA)
     * @param {WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAssetLedgerTransferCloudMiningQueryByPageV1(requestParameters: WalletApiGetAssetLedgerTransferCloudMiningQueryByPageV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAssetLedgerTransferCloudMiningQueryByPageV1(requestParameters.startTime, requestParameters.endTime, requestParameters.tranId, requestParameters.clientTranId, requestParameters.asset, requestParameters.current, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch trade fee
     * @summary Trade Fee (USER_DATA)
     * @param {WalletApiGetAssetTradeFeeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAssetTradeFeeV1(requestParameters: WalletApiGetAssetTradeFeeV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAssetTradeFeeV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query User Universal Transfer History
     * @summary Query User Universal Transfer History(USER_DATA)
     * @param {WalletApiGetAssetTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAssetTransferV1(requestParameters: WalletApiGetAssetTransferV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAssetTransferV1(requestParameters.type, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.fromSymbol, requestParameters.toSymbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query User Wallet Balance
     * @summary Query User Wallet Balance (USER_DATA)
     * @param {WalletApiGetAssetWalletBalanceV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getAssetWalletBalanceV1(requestParameters: WalletApiGetAssetWalletBalanceV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAssetWalletBalanceV1(requestParameters.timestamp, requestParameters.quoteAsset, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information of coins (available for deposit and withdraw) for user.
     * @summary All Coins\' Information (USER_DATA)
     * @param {WalletApiGetCapitalConfigGetallV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getCapitalConfigGetallV1(requestParameters: WalletApiGetCapitalConfigGetallV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getCapitalConfigGetallV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch deposit address list with network.
     * @summary Fetch deposit address list with network(USER_DATA)
     * @param {WalletApiGetCapitalDepositAddressListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getCapitalDepositAddressListV1(requestParameters: WalletApiGetCapitalDepositAddressListV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getCapitalDepositAddressListV1(requestParameters.coin, requestParameters.timestamp, requestParameters.network, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch deposit address with network.
     * @summary Deposit Address(supporting network) (USER_DATA)
     * @param {WalletApiGetCapitalDepositAddressV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getCapitalDepositAddressV1(requestParameters: WalletApiGetCapitalDepositAddressV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getCapitalDepositAddressV1(requestParameters.coin, requestParameters.timestamp, requestParameters.network, requestParameters.amount, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch deposit history.
     * @summary Deposit History (supporting network) (USER_DATA)
     * @param {WalletApiGetCapitalDepositHisrecV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getCapitalDepositHisrecV1(requestParameters: WalletApiGetCapitalDepositHisrecV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getCapitalDepositHisrecV1(requestParameters.timestamp, requestParameters.includeSource, requestParameters.coin, requestParameters.status, requestParameters.startTime, requestParameters.endTime, requestParameters.offset, requestParameters.limit, requestParameters.recvWindow, requestParameters.txId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch withdraw address list
     * @summary Fetch withdraw address list (USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getCapitalWithdrawAddressListV1(options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getCapitalWithdrawAddressListV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch withdraw history.
     * @summary Withdraw History (supporting network) (USER_DATA)
     * @param {WalletApiGetCapitalWithdrawHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getCapitalWithdrawHistoryV1(requestParameters: WalletApiGetCapitalWithdrawHistoryV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getCapitalWithdrawHistoryV1(requestParameters.timestamp, requestParameters.coin, requestParameters.withdrawOrderId, requestParameters.status, requestParameters.offset, requestParameters.limit, requestParameters.idList, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch deposit history for local entities that required travel rule.
     * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
     * @param {WalletApiGetLocalentityDepositHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getLocalentityDepositHistoryV1(requestParameters: WalletApiGetLocalentityDepositHistoryV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getLocalentityDepositHistoryV1(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.tranId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.pendingQuestionnaire, requestParameters.startTime, requestParameters.endTime, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the onboarded VASP list for local entities that required travel rule.
     * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getLocalentityVaspV1(options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getLocalentityVaspV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch withdraw history for local entities that required travel rule.
     * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WalletApiGetLocalentityWithdrawHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getLocalentityWithdrawHistoryV1(requestParameters: WalletApiGetLocalentityWithdrawHistoryV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getLocalentityWithdrawHistoryV1(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.withdrawOrderId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.offset, requestParameters.limit, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch withdraw history for local entities that required travel rule.
     * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WalletApiGetLocalentityWithdrawHistoryV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getLocalentityWithdrawHistoryV2(requestParameters: WalletApiGetLocalentityWithdrawHistoryV2Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getLocalentityWithdrawHistoryV2(requestParameters.timestamp, requestParameters.trId, requestParameters.txId, requestParameters.withdrawOrderId, requestParameters.network, requestParameters.coin, requestParameters.travelRuleStatus, requestParameters.offset, requestParameters.limit, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get symbols delist schedule for spot
     * @summary Get Spot Delist Schedule (MARKET_DATA)
     * @param {WalletApiGetSpotDelistScheduleV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getSpotDelistScheduleV1(requestParameters: WalletApiGetSpotDelistScheduleV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getSpotDelistScheduleV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of symbols that are scheduled to be opened for trading in the market.
     * @summary Get Open Symbol List (MARKET_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getSpotOpenSymbolListV1(options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getSpotOpenSymbolListV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch system status.
     * @summary System Status (System)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getSystemStatusV1(options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).getSystemStatusV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WalletApiUpdateLocalentityBrokerDepositProvideInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public updateLocalentityBrokerDepositProvideInfoV1(requestParameters: WalletApiUpdateLocalentityBrokerDepositProvideInfoV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).updateLocalentityBrokerDepositProvideInfoV1(requestParameters.beneficiaryPii, requestParameters.depositId, requestParameters.questionnaire, requestParameters.signature, requestParameters.subAccountId, requestParameters.timestamp, requestParameters.address, requestParameters.addressTag, requestParameters.amount, requestParameters.coin, requestParameters.network, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WalletApiUpdateLocalentityDepositProvideInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public updateLocalentityDepositProvideInfoV1(requestParameters: WalletApiUpdateLocalentityDepositProvideInfoV1Request, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).updateLocalentityDepositProvideInfoV1(requestParameters.questionnaire, requestParameters.timestamp, requestParameters.tranId, options).then((request) => request(this.axios, this.basePath));
    }
}

