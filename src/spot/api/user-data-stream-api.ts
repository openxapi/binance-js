/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { SpotCreateUserDataStreamV3Resp } from '../model';
/**
 * UserDataStreamApi - axios parameter creator
 * @export
 */
export const UserDataStreamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.
         * @summary Start user data stream (USER_STREAM)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotCreateUserDataStreamV3: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/userDataStream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Close out a user data stream.
         * @summary Close user data stream (USER_STREAM)
         * @param {string} listenKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotDeleteUserDataStreamV3: async (listenKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listenKey' is not null or undefined
            assertParamExists('spotDeleteUserDataStreamV3', 'listenKey', listenKey)
            const localVarPath = `/api/v3/userDataStream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (listenKey !== undefined) {
                localVarQueryParameter['listenKey'] = listenKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It\'s recommended to send a ping about every 30 minutes.
         * @summary Keepalive user data stream (USER_STREAM)
         * @param {string} listenKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotUpdateUserDataStreamV3: async (listenKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listenKey' is not null or undefined
            assertParamExists('spotUpdateUserDataStreamV3', 'listenKey', listenKey)
            const localVarPath = `/api/v3/userDataStream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (listenKey !== undefined) { 
                localVarFormParams.set('listenKey', listenKey as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserDataStreamApi - functional programming interface
 * @export
 */
export const UserDataStreamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserDataStreamApiAxiosParamCreator(configuration)
    return {
        /**
         * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.
         * @summary Start user data stream (USER_STREAM)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotCreateUserDataStreamV3(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpotCreateUserDataStreamV3Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotCreateUserDataStreamV3(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserDataStreamApi.spotCreateUserDataStreamV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Close out a user data stream.
         * @summary Close user data stream (USER_STREAM)
         * @param {string} listenKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotDeleteUserDataStreamV3(listenKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotDeleteUserDataStreamV3(listenKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserDataStreamApi.spotDeleteUserDataStreamV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It\'s recommended to send a ping about every 30 minutes.
         * @summary Keepalive user data stream (USER_STREAM)
         * @param {string} listenKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotUpdateUserDataStreamV3(listenKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spotUpdateUserDataStreamV3(listenKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserDataStreamApi.spotUpdateUserDataStreamV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserDataStreamApi - factory interface
 * @export
 */
export const UserDataStreamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserDataStreamApiFp(configuration)
    return {
        /**
         * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.
         * @summary Start user data stream (USER_STREAM)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotCreateUserDataStreamV3(options?: RawAxiosRequestConfig): AxiosPromise<SpotCreateUserDataStreamV3Resp> {
            return localVarFp.spotCreateUserDataStreamV3(options).then((request) => request(axios, basePath));
        },
        /**
         * Close out a user data stream.
         * @summary Close user data stream (USER_STREAM)
         * @param {UserDataStreamApiSpotDeleteUserDataStreamV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotDeleteUserDataStreamV3(requestParameters: UserDataStreamApiSpotDeleteUserDataStreamV3Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.spotDeleteUserDataStreamV3(requestParameters.listenKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It\'s recommended to send a ping about every 30 minutes.
         * @summary Keepalive user data stream (USER_STREAM)
         * @param {UserDataStreamApiSpotUpdateUserDataStreamV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotUpdateUserDataStreamV3(requestParameters: UserDataStreamApiSpotUpdateUserDataStreamV3Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.spotUpdateUserDataStreamV3(requestParameters.listenKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserDataStreamApi - interface
 * @export
 * @interface UserDataStreamApi
 */
export interface UserDataStreamApiInterface {
    /**
     * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.
     * @summary Start user data stream (USER_STREAM)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDataStreamApiInterface
     */
    spotCreateUserDataStreamV3(options?: RawAxiosRequestConfig): AxiosPromise<SpotCreateUserDataStreamV3Resp>;

    /**
     * Close out a user data stream.
     * @summary Close user data stream (USER_STREAM)
     * @param {UserDataStreamApiSpotDeleteUserDataStreamV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDataStreamApiInterface
     */
    spotDeleteUserDataStreamV3(requestParameters: UserDataStreamApiSpotDeleteUserDataStreamV3Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It\'s recommended to send a ping about every 30 minutes.
     * @summary Keepalive user data stream (USER_STREAM)
     * @param {UserDataStreamApiSpotUpdateUserDataStreamV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDataStreamApiInterface
     */
    spotUpdateUserDataStreamV3(requestParameters: UserDataStreamApiSpotUpdateUserDataStreamV3Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

}

/**
 * Request parameters for spotDeleteUserDataStreamV3 operation in UserDataStreamApi.
 * @export
 * @interface UserDataStreamApiSpotDeleteUserDataStreamV3Request
 */
export interface UserDataStreamApiSpotDeleteUserDataStreamV3Request {
    /**
     * 
     * @type {string}
     * @memberof UserDataStreamApiSpotDeleteUserDataStreamV3
     */
    readonly listenKey: string
}

/**
 * Request parameters for spotUpdateUserDataStreamV3 operation in UserDataStreamApi.
 * @export
 * @interface UserDataStreamApiSpotUpdateUserDataStreamV3Request
 */
export interface UserDataStreamApiSpotUpdateUserDataStreamV3Request {
    /**
     * 
     * @type {string}
     * @memberof UserDataStreamApiSpotUpdateUserDataStreamV3
     */
    readonly listenKey: string
}

/**
 * UserDataStreamApi - object-oriented interface
 * @export
 * @class UserDataStreamApi
 * @extends {BaseAPI}
 */
export class UserDataStreamApi extends BaseAPI implements UserDataStreamApiInterface {
    /**
     * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.
     * @summary Start user data stream (USER_STREAM)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDataStreamApi
     */
    public spotCreateUserDataStreamV3(options?: RawAxiosRequestConfig) {
        return UserDataStreamApiFp(this.configuration).spotCreateUserDataStreamV3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Close out a user data stream.
     * @summary Close user data stream (USER_STREAM)
     * @param {UserDataStreamApiSpotDeleteUserDataStreamV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDataStreamApi
     */
    public spotDeleteUserDataStreamV3(requestParameters: UserDataStreamApiSpotDeleteUserDataStreamV3Request, options?: RawAxiosRequestConfig) {
        return UserDataStreamApiFp(this.configuration).spotDeleteUserDataStreamV3(requestParameters.listenKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It\'s recommended to send a ping about every 30 minutes.
     * @summary Keepalive user data stream (USER_STREAM)
     * @param {UserDataStreamApiSpotUpdateUserDataStreamV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDataStreamApi
     */
    public spotUpdateUserDataStreamV3(requestParameters: UserDataStreamApiSpotUpdateUserDataStreamV3Request, options?: RawAxiosRequestConfig) {
        return UserDataStreamApiFp(this.configuration).spotUpdateUserDataStreamV3(requestParameters.listenKey, options).then((request) => request(this.axios, this.basePath));
    }
}

