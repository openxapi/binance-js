/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreateGiftcardBuyCodeV1Resp } from '../model';
// @ts-ignore
import type { CreateGiftcardCreateCodeV1Resp } from '../model';
// @ts-ignore
import type { CreateGiftcardRedeemCodeV1Resp } from '../model';
// @ts-ignore
import type { GetGiftcardBuyCodeTokenLimitV1Resp } from '../model';
// @ts-ignore
import type { GetGiftcardCryptographyRsaPublicKeyV1Resp } from '../model';
// @ts-ignore
import type { GetGiftcardVerifyV1Resp } from '../model';
/**
 * GiftCardApi - axios parameter creator
 * @export
 */
export const GiftCardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API is for creating a dual-token ( stablecoin-denominated) Binance Gift Card. You may create a gift card using USDT as baseToken, that is redeemable to another designated token (faceToken). For example, you can create a fixed-value BTC gift card and pay with 100 USDT plus 1 USDT fee. This gift card can keep the value fixed at 100 USDT before redemption, and will be redeemable to BTC equivalent to 100 USDT upon redemption.   Once successfully created, the amount of baseToken (e.g. USDT) in the fixed-value gift card along with the fee would be deducted from your funding wallet.   To get started with, please make sure:  You have a Binance account You have passed KYB You have a sufÔ¨Åcient balance(Gift Card amount and fee amount) in your Binance funding wallet You need Enable Withdrawals for the API Key which requests this endpoint.
         * @summary Create a dual-token gift card(fixed value, discount feature)(TRADE)
         * @param {string} baseToken 
         * @param {number} baseTokenAmount 
         * @param {string} faceToken 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGiftcardBuyCodeV1: async (baseToken: string, baseTokenAmount: number, faceToken: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseToken' is not null or undefined
            assertParamExists('createGiftcardBuyCodeV1', 'baseToken', baseToken)
            // verify required parameter 'baseTokenAmount' is not null or undefined
            assertParamExists('createGiftcardBuyCodeV1', 'baseTokenAmount', baseTokenAmount)
            // verify required parameter 'faceToken' is not null or undefined
            assertParamExists('createGiftcardBuyCodeV1', 'faceToken', faceToken)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createGiftcardBuyCodeV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/giftcard/buyCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (baseToken !== undefined) { 
                localVarFormParams.set('baseToken', baseToken as any);
            }
    
            if (baseTokenAmount !== undefined) { 
                localVarFormParams.set('baseTokenAmount', baseTokenAmount as any);
            }
    
            if (faceToken !== undefined) { 
                localVarFormParams.set('faceToken', faceToken as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is for creating a Binance Gift Card.
         * @summary Create a single-token gift card (USER_DATA)
         * @param {number} amount 
         * @param {number} timestamp 
         * @param {string} token 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGiftcardCreateCodeV1: async (amount: number, timestamp: number, token: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createGiftcardCreateCodeV1', 'amount', amount)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createGiftcardCreateCodeV1', 'timestamp', timestamp)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('createGiftcardCreateCodeV1', 'token', token)
            const localVarPath = `/sapi/v1/giftcard/createCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (token !== undefined) { 
                localVarFormParams.set('token', token as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is for redeeming a Binance Gift Card Once redeemed, the coins will be deposited in your funding wallet.
         * @summary Redeem a Binance Gift Card(USER_DATA)
         * @param {string} code 
         * @param {number} timestamp 
         * @param {string} [externalUid] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGiftcardRedeemCodeV1: async (code: string, timestamp: number, externalUid?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('createGiftcardRedeemCodeV1', 'code', code)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createGiftcardRedeemCodeV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/giftcard/redeemCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (code !== undefined) { 
                localVarFormParams.set('code', code as any);
            }
    
            if (externalUid !== undefined) { 
                localVarFormParams.set('externalUid', externalUid as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is to help you verify which tokens are available for you to create Stablecoin-Denominated gift cards as mentioned in section 2 and its‚Äô limitation.
         * @summary Fetch Token Limit(USER_DATA)
         * @param {string} baseToken The token you want to pay, example: BUSD
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftcardBuyCodeTokenLimitV1: async (baseToken: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseToken' is not null or undefined
            assertParamExists('getGiftcardBuyCodeTokenLimitV1', 'baseToken', baseToken)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getGiftcardBuyCodeTokenLimitV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/giftcard/buyCode/token-limit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (baseToken !== undefined) {
                localVarQueryParameter['baseToken'] = baseToken;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is for fetching the RSA Public Key. This RSA Public key will be used to encrypt the card code.
         * @summary Fetch RSA Public Key(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftcardCryptographyRsaPublicKeyV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getGiftcardCryptographyRsaPublicKeyV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/giftcard/cryptography/rsa-public-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is for verifying whether the Binance Gift Card is valid or not by entering Gift Card Number.
         * @summary Verify Binance Gift Card by Gift Card Number(USER_DATA)
         * @param {string} referenceNo Enter the Gift Card Number
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftcardVerifyV1: async (referenceNo: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceNo' is not null or undefined
            assertParamExists('getGiftcardVerifyV1', 'referenceNo', referenceNo)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getGiftcardVerifyV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/giftcard/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (referenceNo !== undefined) {
                localVarQueryParameter['referenceNo'] = referenceNo;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GiftCardApi - functional programming interface
 * @export
 */
export const GiftCardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GiftCardApiAxiosParamCreator(configuration)
    return {
        /**
         * This API is for creating a dual-token ( stablecoin-denominated) Binance Gift Card. You may create a gift card using USDT as baseToken, that is redeemable to another designated token (faceToken). For example, you can create a fixed-value BTC gift card and pay with 100 USDT plus 1 USDT fee. This gift card can keep the value fixed at 100 USDT before redemption, and will be redeemable to BTC equivalent to 100 USDT upon redemption.   Once successfully created, the amount of baseToken (e.g. USDT) in the fixed-value gift card along with the fee would be deducted from your funding wallet.   To get started with, please make sure:  You have a Binance account You have passed KYB You have a sufÔ¨Åcient balance(Gift Card amount and fee amount) in your Binance funding wallet You need Enable Withdrawals for the API Key which requests this endpoint.
         * @summary Create a dual-token gift card(fixed value, discount feature)(TRADE)
         * @param {string} baseToken 
         * @param {number} baseTokenAmount 
         * @param {string} faceToken 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGiftcardBuyCodeV1(baseToken: string, baseTokenAmount: number, faceToken: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGiftcardBuyCodeV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGiftcardBuyCodeV1(baseToken, baseTokenAmount, faceToken, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GiftCardApi.createGiftcardBuyCodeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API is for creating a Binance Gift Card.
         * @summary Create a single-token gift card (USER_DATA)
         * @param {number} amount 
         * @param {number} timestamp 
         * @param {string} token 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGiftcardCreateCodeV1(amount: number, timestamp: number, token: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGiftcardCreateCodeV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGiftcardCreateCodeV1(amount, timestamp, token, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GiftCardApi.createGiftcardCreateCodeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API is for redeeming a Binance Gift Card Once redeemed, the coins will be deposited in your funding wallet.
         * @summary Redeem a Binance Gift Card(USER_DATA)
         * @param {string} code 
         * @param {number} timestamp 
         * @param {string} [externalUid] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGiftcardRedeemCodeV1(code: string, timestamp: number, externalUid?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGiftcardRedeemCodeV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGiftcardRedeemCodeV1(code, timestamp, externalUid, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GiftCardApi.createGiftcardRedeemCodeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API is to help you verify which tokens are available for you to create Stablecoin-Denominated gift cards as mentioned in section 2 and its‚Äô limitation.
         * @summary Fetch Token Limit(USER_DATA)
         * @param {string} baseToken The token you want to pay, example: BUSD
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGiftcardBuyCodeTokenLimitV1(baseToken: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGiftcardBuyCodeTokenLimitV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGiftcardBuyCodeTokenLimitV1(baseToken, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GiftCardApi.getGiftcardBuyCodeTokenLimitV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API is for fetching the RSA Public Key. This RSA Public key will be used to encrypt the card code.
         * @summary Fetch RSA Public Key(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGiftcardCryptographyRsaPublicKeyV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGiftcardCryptographyRsaPublicKeyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGiftcardCryptographyRsaPublicKeyV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GiftCardApi.getGiftcardCryptographyRsaPublicKeyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API is for verifying whether the Binance Gift Card is valid or not by entering Gift Card Number.
         * @summary Verify Binance Gift Card by Gift Card Number(USER_DATA)
         * @param {string} referenceNo Enter the Gift Card Number
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGiftcardVerifyV1(referenceNo: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGiftcardVerifyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGiftcardVerifyV1(referenceNo, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GiftCardApi.getGiftcardVerifyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GiftCardApi - factory interface
 * @export
 */
export const GiftCardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GiftCardApiFp(configuration)
    return {
        /**
         * This API is for creating a dual-token ( stablecoin-denominated) Binance Gift Card. You may create a gift card using USDT as baseToken, that is redeemable to another designated token (faceToken). For example, you can create a fixed-value BTC gift card and pay with 100 USDT plus 1 USDT fee. This gift card can keep the value fixed at 100 USDT before redemption, and will be redeemable to BTC equivalent to 100 USDT upon redemption.   Once successfully created, the amount of baseToken (e.g. USDT) in the fixed-value gift card along with the fee would be deducted from your funding wallet.   To get started with, please make sure:  You have a Binance account You have passed KYB You have a sufÔ¨Åcient balance(Gift Card amount and fee amount) in your Binance funding wallet You need Enable Withdrawals for the API Key which requests this endpoint.
         * @summary Create a dual-token gift card(fixed value, discount feature)(TRADE)
         * @param {GiftCardApiCreateGiftcardBuyCodeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGiftcardBuyCodeV1(requestParameters: GiftCardApiCreateGiftcardBuyCodeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateGiftcardBuyCodeV1Resp> {
            return localVarFp.createGiftcardBuyCodeV1(requestParameters.baseToken, requestParameters.baseTokenAmount, requestParameters.faceToken, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is for creating a Binance Gift Card.
         * @summary Create a single-token gift card (USER_DATA)
         * @param {GiftCardApiCreateGiftcardCreateCodeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGiftcardCreateCodeV1(requestParameters: GiftCardApiCreateGiftcardCreateCodeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateGiftcardCreateCodeV1Resp> {
            return localVarFp.createGiftcardCreateCodeV1(requestParameters.amount, requestParameters.timestamp, requestParameters.token, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is for redeeming a Binance Gift Card Once redeemed, the coins will be deposited in your funding wallet.
         * @summary Redeem a Binance Gift Card(USER_DATA)
         * @param {GiftCardApiCreateGiftcardRedeemCodeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGiftcardRedeemCodeV1(requestParameters: GiftCardApiCreateGiftcardRedeemCodeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateGiftcardRedeemCodeV1Resp> {
            return localVarFp.createGiftcardRedeemCodeV1(requestParameters.code, requestParameters.timestamp, requestParameters.externalUid, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is to help you verify which tokens are available for you to create Stablecoin-Denominated gift cards as mentioned in section 2 and its‚Äô limitation.
         * @summary Fetch Token Limit(USER_DATA)
         * @param {GiftCardApiGetGiftcardBuyCodeTokenLimitV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftcardBuyCodeTokenLimitV1(requestParameters: GiftCardApiGetGiftcardBuyCodeTokenLimitV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetGiftcardBuyCodeTokenLimitV1Resp> {
            return localVarFp.getGiftcardBuyCodeTokenLimitV1(requestParameters.baseToken, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is for fetching the RSA Public Key. This RSA Public key will be used to encrypt the card code.
         * @summary Fetch RSA Public Key(USER_DATA)
         * @param {GiftCardApiGetGiftcardCryptographyRsaPublicKeyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftcardCryptographyRsaPublicKeyV1(requestParameters: GiftCardApiGetGiftcardCryptographyRsaPublicKeyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetGiftcardCryptographyRsaPublicKeyV1Resp> {
            return localVarFp.getGiftcardCryptographyRsaPublicKeyV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is for verifying whether the Binance Gift Card is valid or not by entering Gift Card Number.
         * @summary Verify Binance Gift Card by Gift Card Number(USER_DATA)
         * @param {GiftCardApiGetGiftcardVerifyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftcardVerifyV1(requestParameters: GiftCardApiGetGiftcardVerifyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetGiftcardVerifyV1Resp> {
            return localVarFp.getGiftcardVerifyV1(requestParameters.referenceNo, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GiftCardApi - interface
 * @export
 * @interface GiftCardApi
 */
export interface GiftCardApiInterface {
    /**
     * This API is for creating a dual-token ( stablecoin-denominated) Binance Gift Card. You may create a gift card using USDT as baseToken, that is redeemable to another designated token (faceToken). For example, you can create a fixed-value BTC gift card and pay with 100 USDT plus 1 USDT fee. This gift card can keep the value fixed at 100 USDT before redemption, and will be redeemable to BTC equivalent to 100 USDT upon redemption.   Once successfully created, the amount of baseToken (e.g. USDT) in the fixed-value gift card along with the fee would be deducted from your funding wallet.   To get started with, please make sure:  You have a Binance account You have passed KYB You have a sufÔ¨Åcient balance(Gift Card amount and fee amount) in your Binance funding wallet You need Enable Withdrawals for the API Key which requests this endpoint.
     * @summary Create a dual-token gift card(fixed value, discount feature)(TRADE)
     * @param {GiftCardApiCreateGiftcardBuyCodeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApiInterface
     */
    createGiftcardBuyCodeV1(requestParameters: GiftCardApiCreateGiftcardBuyCodeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateGiftcardBuyCodeV1Resp>;

    /**
     * This API is for creating a Binance Gift Card.
     * @summary Create a single-token gift card (USER_DATA)
     * @param {GiftCardApiCreateGiftcardCreateCodeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApiInterface
     */
    createGiftcardCreateCodeV1(requestParameters: GiftCardApiCreateGiftcardCreateCodeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateGiftcardCreateCodeV1Resp>;

    /**
     * This API is for redeeming a Binance Gift Card Once redeemed, the coins will be deposited in your funding wallet.
     * @summary Redeem a Binance Gift Card(USER_DATA)
     * @param {GiftCardApiCreateGiftcardRedeemCodeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApiInterface
     */
    createGiftcardRedeemCodeV1(requestParameters: GiftCardApiCreateGiftcardRedeemCodeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateGiftcardRedeemCodeV1Resp>;

    /**
     * This API is to help you verify which tokens are available for you to create Stablecoin-Denominated gift cards as mentioned in section 2 and its‚Äô limitation.
     * @summary Fetch Token Limit(USER_DATA)
     * @param {GiftCardApiGetGiftcardBuyCodeTokenLimitV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApiInterface
     */
    getGiftcardBuyCodeTokenLimitV1(requestParameters: GiftCardApiGetGiftcardBuyCodeTokenLimitV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetGiftcardBuyCodeTokenLimitV1Resp>;

    /**
     * This API is for fetching the RSA Public Key. This RSA Public key will be used to encrypt the card code.
     * @summary Fetch RSA Public Key(USER_DATA)
     * @param {GiftCardApiGetGiftcardCryptographyRsaPublicKeyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApiInterface
     */
    getGiftcardCryptographyRsaPublicKeyV1(requestParameters: GiftCardApiGetGiftcardCryptographyRsaPublicKeyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetGiftcardCryptographyRsaPublicKeyV1Resp>;

    /**
     * This API is for verifying whether the Binance Gift Card is valid or not by entering Gift Card Number.
     * @summary Verify Binance Gift Card by Gift Card Number(USER_DATA)
     * @param {GiftCardApiGetGiftcardVerifyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApiInterface
     */
    getGiftcardVerifyV1(requestParameters: GiftCardApiGetGiftcardVerifyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetGiftcardVerifyV1Resp>;

}

/**
 * Request parameters for createGiftcardBuyCodeV1 operation in GiftCardApi.
 * @export
 * @interface GiftCardApiCreateGiftcardBuyCodeV1Request
 */
export interface GiftCardApiCreateGiftcardBuyCodeV1Request {
    /**
     * 
     * @type {string}
     * @memberof GiftCardApiCreateGiftcardBuyCodeV1
     */
    readonly baseToken: string

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiCreateGiftcardBuyCodeV1
     */
    readonly baseTokenAmount: number

    /**
     * 
     * @type {string}
     * @memberof GiftCardApiCreateGiftcardBuyCodeV1
     */
    readonly faceToken: string

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiCreateGiftcardBuyCodeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiCreateGiftcardBuyCodeV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createGiftcardCreateCodeV1 operation in GiftCardApi.
 * @export
 * @interface GiftCardApiCreateGiftcardCreateCodeV1Request
 */
export interface GiftCardApiCreateGiftcardCreateCodeV1Request {
    /**
     * 
     * @type {number}
     * @memberof GiftCardApiCreateGiftcardCreateCodeV1
     */
    readonly amount: number

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiCreateGiftcardCreateCodeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof GiftCardApiCreateGiftcardCreateCodeV1
     */
    readonly token: string

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiCreateGiftcardCreateCodeV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createGiftcardRedeemCodeV1 operation in GiftCardApi.
 * @export
 * @interface GiftCardApiCreateGiftcardRedeemCodeV1Request
 */
export interface GiftCardApiCreateGiftcardRedeemCodeV1Request {
    /**
     * 
     * @type {string}
     * @memberof GiftCardApiCreateGiftcardRedeemCodeV1
     */
    readonly code: string

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiCreateGiftcardRedeemCodeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof GiftCardApiCreateGiftcardRedeemCodeV1
     */
    readonly externalUid?: string

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiCreateGiftcardRedeemCodeV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getGiftcardBuyCodeTokenLimitV1 operation in GiftCardApi.
 * @export
 * @interface GiftCardApiGetGiftcardBuyCodeTokenLimitV1Request
 */
export interface GiftCardApiGetGiftcardBuyCodeTokenLimitV1Request {
    /**
     * The token you want to pay, example: BUSD
     * @type {string}
     * @memberof GiftCardApiGetGiftcardBuyCodeTokenLimitV1
     */
    readonly baseToken: string

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiGetGiftcardBuyCodeTokenLimitV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiGetGiftcardBuyCodeTokenLimitV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getGiftcardCryptographyRsaPublicKeyV1 operation in GiftCardApi.
 * @export
 * @interface GiftCardApiGetGiftcardCryptographyRsaPublicKeyV1Request
 */
export interface GiftCardApiGetGiftcardCryptographyRsaPublicKeyV1Request {
    /**
     * 
     * @type {number}
     * @memberof GiftCardApiGetGiftcardCryptographyRsaPublicKeyV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiGetGiftcardCryptographyRsaPublicKeyV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getGiftcardVerifyV1 operation in GiftCardApi.
 * @export
 * @interface GiftCardApiGetGiftcardVerifyV1Request
 */
export interface GiftCardApiGetGiftcardVerifyV1Request {
    /**
     * Enter the Gift Card Number
     * @type {string}
     * @memberof GiftCardApiGetGiftcardVerifyV1
     */
    readonly referenceNo: string

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiGetGiftcardVerifyV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof GiftCardApiGetGiftcardVerifyV1
     */
    readonly recvWindow?: number
}

/**
 * GiftCardApi - object-oriented interface
 * @export
 * @class GiftCardApi
 * @extends {BaseAPI}
 */
export class GiftCardApi extends BaseAPI implements GiftCardApiInterface {
    /**
     * This API is for creating a dual-token ( stablecoin-denominated) Binance Gift Card. You may create a gift card using USDT as baseToken, that is redeemable to another designated token (faceToken). For example, you can create a fixed-value BTC gift card and pay with 100 USDT plus 1 USDT fee. This gift card can keep the value fixed at 100 USDT before redemption, and will be redeemable to BTC equivalent to 100 USDT upon redemption.   Once successfully created, the amount of baseToken (e.g. USDT) in the fixed-value gift card along with the fee would be deducted from your funding wallet.   To get started with, please make sure:  You have a Binance account You have passed KYB You have a sufÔ¨Åcient balance(Gift Card amount and fee amount) in your Binance funding wallet You need Enable Withdrawals for the API Key which requests this endpoint.
     * @summary Create a dual-token gift card(fixed value, discount feature)(TRADE)
     * @param {GiftCardApiCreateGiftcardBuyCodeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApi
     */
    public createGiftcardBuyCodeV1(requestParameters: GiftCardApiCreateGiftcardBuyCodeV1Request, options?: RawAxiosRequestConfig) {
        return GiftCardApiFp(this.configuration).createGiftcardBuyCodeV1(requestParameters.baseToken, requestParameters.baseTokenAmount, requestParameters.faceToken, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is for creating a Binance Gift Card.
     * @summary Create a single-token gift card (USER_DATA)
     * @param {GiftCardApiCreateGiftcardCreateCodeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApi
     */
    public createGiftcardCreateCodeV1(requestParameters: GiftCardApiCreateGiftcardCreateCodeV1Request, options?: RawAxiosRequestConfig) {
        return GiftCardApiFp(this.configuration).createGiftcardCreateCodeV1(requestParameters.amount, requestParameters.timestamp, requestParameters.token, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is for redeeming a Binance Gift Card Once redeemed, the coins will be deposited in your funding wallet.
     * @summary Redeem a Binance Gift Card(USER_DATA)
     * @param {GiftCardApiCreateGiftcardRedeemCodeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApi
     */
    public createGiftcardRedeemCodeV1(requestParameters: GiftCardApiCreateGiftcardRedeemCodeV1Request, options?: RawAxiosRequestConfig) {
        return GiftCardApiFp(this.configuration).createGiftcardRedeemCodeV1(requestParameters.code, requestParameters.timestamp, requestParameters.externalUid, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is to help you verify which tokens are available for you to create Stablecoin-Denominated gift cards as mentioned in section 2 and its‚Äô limitation.
     * @summary Fetch Token Limit(USER_DATA)
     * @param {GiftCardApiGetGiftcardBuyCodeTokenLimitV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApi
     */
    public getGiftcardBuyCodeTokenLimitV1(requestParameters: GiftCardApiGetGiftcardBuyCodeTokenLimitV1Request, options?: RawAxiosRequestConfig) {
        return GiftCardApiFp(this.configuration).getGiftcardBuyCodeTokenLimitV1(requestParameters.baseToken, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is for fetching the RSA Public Key. This RSA Public key will be used to encrypt the card code.
     * @summary Fetch RSA Public Key(USER_DATA)
     * @param {GiftCardApiGetGiftcardCryptographyRsaPublicKeyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApi
     */
    public getGiftcardCryptographyRsaPublicKeyV1(requestParameters: GiftCardApiGetGiftcardCryptographyRsaPublicKeyV1Request, options?: RawAxiosRequestConfig) {
        return GiftCardApiFp(this.configuration).getGiftcardCryptographyRsaPublicKeyV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is for verifying whether the Binance Gift Card is valid or not by entering Gift Card Number.
     * @summary Verify Binance Gift Card by Gift Card Number(USER_DATA)
     * @param {GiftCardApiGetGiftcardVerifyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCardApi
     */
    public getGiftcardVerifyV1(requestParameters: GiftCardApiGetGiftcardVerifyV1Request, options?: RawAxiosRequestConfig) {
        return GiftCardApiFp(this.configuration).getGiftcardVerifyV1(requestParameters.referenceNo, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

