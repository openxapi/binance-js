/* tslint:disable */
/* eslint-disable */
/**
 * Binance Spot API
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreateDciProductAutoCompoundEditStatusV1Resp } from '../model';
// @ts-ignore
import type { CreateDciProductSubscribeV1Resp } from '../model';
// @ts-ignore
import type { GetDciProductAccountsV1Resp } from '../model';
// @ts-ignore
import type { GetDciProductListV1Resp } from '../model';
// @ts-ignore
import type { GetDciProductPositionsV1Resp } from '../model';
/**
 * DualInvestmentApi - axios parameter creator
 * @export
 */
export const DualInvestmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change Auto-Compound status
         * @summary Change Auto-Compound status(USER_DATA)
         * @param {string} positionId 
         * @param {number} timestamp 
         * @param {string} [autoCompoundPlan] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDciProductAutoCompoundEditStatusV1: async (positionId: string, timestamp: number, autoCompoundPlan?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('createDciProductAutoCompoundEditStatusV1', 'positionId', positionId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createDciProductAutoCompoundEditStatusV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/dci/product/auto_compound/edit-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (autoCompoundPlan !== undefined) { 
                localVarFormParams.set('AutoCompoundPlan', autoCompoundPlan as any);
            }
    
            if (positionId !== undefined) { 
                localVarFormParams.set('positionId', positionId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscribe Dual Investment products
         * @summary Subscribe Dual Investment products(USER_DATA)
         * @param {string} autoCompoundPlan 
         * @param {string} depositAmount 
         * @param {string} id 
         * @param {string} orderId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDciProductSubscribeV1: async (autoCompoundPlan: string, depositAmount: string, id: string, orderId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'autoCompoundPlan' is not null or undefined
            assertParamExists('createDciProductSubscribeV1', 'autoCompoundPlan', autoCompoundPlan)
            // verify required parameter 'depositAmount' is not null or undefined
            assertParamExists('createDciProductSubscribeV1', 'depositAmount', depositAmount)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createDciProductSubscribeV1', 'id', id)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('createDciProductSubscribeV1', 'orderId', orderId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createDciProductSubscribeV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/dci/product/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (autoCompoundPlan !== undefined) { 
                localVarFormParams.set('autoCompoundPlan', autoCompoundPlan as any);
            }
    
            if (depositAmount !== undefined) { 
                localVarFormParams.set('depositAmount', depositAmount as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (orderId !== undefined) { 
                localVarFormParams.set('orderId', orderId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check Dual Investment accounts
         * @summary Check Dual Investment accounts(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDciProductAccountsV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getDciProductAccountsV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/dci/product/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Dual Investment product list
         * @summary Get Dual Investment product list
         * @param {string} optionType Input CALL or PUT
         * @param {string} exercisedCoin Target exercised asset, e.g.: if you subscribe to a high sell product (call option), you should input: &#x60;optionType&#x60;:CALL,&#x60;exercisedCoin&#x60;:USDT,&#x60;investCoin&#x60;:BNB; if you subscribe to a low buy product (put option), you should input: &#x60;optionType&#x60;:PUT,&#x60;exercisedCoin&#x60;:BNB,&#x60;investCoin&#x60;:USDT
         * @param {string} investCoin Asset used for subscribing, e.g.: if you subscribe to a high sell product (call option), you should input: &#x60;optionType&#x60;:CALL,&#x60;exercisedCoin&#x60;:USDT,&#x60;investCoin&#x60;:BNB; if you subscribe to a low buy product (put option), you should input: &#x60;optionType&#x60;:PUT,&#x60;exercisedCoin&#x60;:BNB,&#x60;investCoin&#x60;:USDT
         * @param {number} timestamp 
         * @param {number} [pageSize] Default: 10, Maximum: 100
         * @param {number} [pageIndex] Default: 1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDciProductListV1: async (optionType: string, exercisedCoin: string, investCoin: string, timestamp: number, pageSize?: number, pageIndex?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'optionType' is not null or undefined
            assertParamExists('getDciProductListV1', 'optionType', optionType)
            // verify required parameter 'exercisedCoin' is not null or undefined
            assertParamExists('getDciProductListV1', 'exercisedCoin', exercisedCoin)
            // verify required parameter 'investCoin' is not null or undefined
            assertParamExists('getDciProductListV1', 'investCoin', investCoin)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getDciProductListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/dci/product/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (optionType !== undefined) {
                localVarQueryParameter['optionType'] = optionType;
            }

            if (exercisedCoin !== undefined) {
                localVarQueryParameter['exercisedCoin'] = exercisedCoin;
            }

            if (investCoin !== undefined) {
                localVarQueryParameter['investCoin'] = investCoin;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Dual Investment positions (batch)
         * @summary Get Dual Investment positions(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [status] &#x60;PENDING&#x60;:Products are purchasing, will give results later;&#x60;PURCHASE_SUCCESS&#x60;:purchase successfully;&#x60;SETTLED&#x60;: Products are finish settling;&#x60;PURCHASE_FAIL&#x60;:fail to purchase;&#x60;REFUNDING&#x60;:refund ongoing;&#x60;REFUND_SUCCESS&#x60;:refund to spot account successfully; &#x60;SETTLING&#x60;:Products are settling. If don&amp;#39;t fill this field, will response all the position status.
         * @param {number} [pageSize] Default: 10, Max:100
         * @param {number} [pageIndex] Default:1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDciProductPositionsV1: async (timestamp: number, status?: string, pageSize?: number, pageIndex?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getDciProductPositionsV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/dci/product/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DualInvestmentApi - functional programming interface
 * @export
 */
export const DualInvestmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DualInvestmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Change Auto-Compound status
         * @summary Change Auto-Compound status(USER_DATA)
         * @param {string} positionId 
         * @param {number} timestamp 
         * @param {string} [autoCompoundPlan] 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDciProductAutoCompoundEditStatusV1(positionId: string, timestamp: number, autoCompoundPlan?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDciProductAutoCompoundEditStatusV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDciProductAutoCompoundEditStatusV1(positionId, timestamp, autoCompoundPlan, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DualInvestmentApi.createDciProductAutoCompoundEditStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Subscribe Dual Investment products
         * @summary Subscribe Dual Investment products(USER_DATA)
         * @param {string} autoCompoundPlan 
         * @param {string} depositAmount 
         * @param {string} id 
         * @param {string} orderId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDciProductSubscribeV1(autoCompoundPlan: string, depositAmount: string, id: string, orderId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDciProductSubscribeV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDciProductSubscribeV1(autoCompoundPlan, depositAmount, id, orderId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DualInvestmentApi.createDciProductSubscribeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Check Dual Investment accounts
         * @summary Check Dual Investment accounts(USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDciProductAccountsV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDciProductAccountsV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDciProductAccountsV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DualInvestmentApi.getDciProductAccountsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Dual Investment product list
         * @summary Get Dual Investment product list
         * @param {string} optionType Input CALL or PUT
         * @param {string} exercisedCoin Target exercised asset, e.g.: if you subscribe to a high sell product (call option), you should input: &#x60;optionType&#x60;:CALL,&#x60;exercisedCoin&#x60;:USDT,&#x60;investCoin&#x60;:BNB; if you subscribe to a low buy product (put option), you should input: &#x60;optionType&#x60;:PUT,&#x60;exercisedCoin&#x60;:BNB,&#x60;investCoin&#x60;:USDT
         * @param {string} investCoin Asset used for subscribing, e.g.: if you subscribe to a high sell product (call option), you should input: &#x60;optionType&#x60;:CALL,&#x60;exercisedCoin&#x60;:USDT,&#x60;investCoin&#x60;:BNB; if you subscribe to a low buy product (put option), you should input: &#x60;optionType&#x60;:PUT,&#x60;exercisedCoin&#x60;:BNB,&#x60;investCoin&#x60;:USDT
         * @param {number} timestamp 
         * @param {number} [pageSize] Default: 10, Maximum: 100
         * @param {number} [pageIndex] Default: 1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDciProductListV1(optionType: string, exercisedCoin: string, investCoin: string, timestamp: number, pageSize?: number, pageIndex?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDciProductListV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDciProductListV1(optionType, exercisedCoin, investCoin, timestamp, pageSize, pageIndex, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DualInvestmentApi.getDciProductListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Dual Investment positions (batch)
         * @summary Get Dual Investment positions(USER_DATA)
         * @param {number} timestamp 
         * @param {string} [status] &#x60;PENDING&#x60;:Products are purchasing, will give results later;&#x60;PURCHASE_SUCCESS&#x60;:purchase successfully;&#x60;SETTLED&#x60;: Products are finish settling;&#x60;PURCHASE_FAIL&#x60;:fail to purchase;&#x60;REFUNDING&#x60;:refund ongoing;&#x60;REFUND_SUCCESS&#x60;:refund to spot account successfully; &#x60;SETTLING&#x60;:Products are settling. If don&amp;#39;t fill this field, will response all the position status.
         * @param {number} [pageSize] Default: 10, Max:100
         * @param {number} [pageIndex] Default:1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDciProductPositionsV1(timestamp: number, status?: string, pageSize?: number, pageIndex?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDciProductPositionsV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDciProductPositionsV1(timestamp, status, pageSize, pageIndex, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DualInvestmentApi.getDciProductPositionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DualInvestmentApi - factory interface
 * @export
 */
export const DualInvestmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DualInvestmentApiFp(configuration)
    return {
        /**
         * Change Auto-Compound status
         * @summary Change Auto-Compound status(USER_DATA)
         * @param {DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDciProductAutoCompoundEditStatusV1(requestParameters: DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateDciProductAutoCompoundEditStatusV1Resp> {
            return localVarFp.createDciProductAutoCompoundEditStatusV1(requestParameters.positionId, requestParameters.timestamp, requestParameters.autoCompoundPlan, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscribe Dual Investment products
         * @summary Subscribe Dual Investment products(USER_DATA)
         * @param {DualInvestmentApiCreateDciProductSubscribeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDciProductSubscribeV1(requestParameters: DualInvestmentApiCreateDciProductSubscribeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateDciProductSubscribeV1Resp> {
            return localVarFp.createDciProductSubscribeV1(requestParameters.autoCompoundPlan, requestParameters.depositAmount, requestParameters.id, requestParameters.orderId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Check Dual Investment accounts
         * @summary Check Dual Investment accounts(USER_DATA)
         * @param {DualInvestmentApiGetDciProductAccountsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDciProductAccountsV1(requestParameters: DualInvestmentApiGetDciProductAccountsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetDciProductAccountsV1Resp> {
            return localVarFp.getDciProductAccountsV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dual Investment product list
         * @summary Get Dual Investment product list
         * @param {DualInvestmentApiGetDciProductListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDciProductListV1(requestParameters: DualInvestmentApiGetDciProductListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetDciProductListV1Resp> {
            return localVarFp.getDciProductListV1(requestParameters.optionType, requestParameters.exercisedCoin, requestParameters.investCoin, requestParameters.timestamp, requestParameters.pageSize, requestParameters.pageIndex, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dual Investment positions (batch)
         * @summary Get Dual Investment positions(USER_DATA)
         * @param {DualInvestmentApiGetDciProductPositionsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDciProductPositionsV1(requestParameters: DualInvestmentApiGetDciProductPositionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetDciProductPositionsV1Resp> {
            return localVarFp.getDciProductPositionsV1(requestParameters.timestamp, requestParameters.status, requestParameters.pageSize, requestParameters.pageIndex, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DualInvestmentApi - interface
 * @export
 * @interface DualInvestmentApi
 */
export interface DualInvestmentApiInterface {
    /**
     * Change Auto-Compound status
     * @summary Change Auto-Compound status(USER_DATA)
     * @param {DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DualInvestmentApiInterface
     */
    createDciProductAutoCompoundEditStatusV1(requestParameters: DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateDciProductAutoCompoundEditStatusV1Resp>;

    /**
     * Subscribe Dual Investment products
     * @summary Subscribe Dual Investment products(USER_DATA)
     * @param {DualInvestmentApiCreateDciProductSubscribeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DualInvestmentApiInterface
     */
    createDciProductSubscribeV1(requestParameters: DualInvestmentApiCreateDciProductSubscribeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateDciProductSubscribeV1Resp>;

    /**
     * Check Dual Investment accounts
     * @summary Check Dual Investment accounts(USER_DATA)
     * @param {DualInvestmentApiGetDciProductAccountsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DualInvestmentApiInterface
     */
    getDciProductAccountsV1(requestParameters: DualInvestmentApiGetDciProductAccountsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetDciProductAccountsV1Resp>;

    /**
     * Get Dual Investment product list
     * @summary Get Dual Investment product list
     * @param {DualInvestmentApiGetDciProductListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DualInvestmentApiInterface
     */
    getDciProductListV1(requestParameters: DualInvestmentApiGetDciProductListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetDciProductListV1Resp>;

    /**
     * Get Dual Investment positions (batch)
     * @summary Get Dual Investment positions(USER_DATA)
     * @param {DualInvestmentApiGetDciProductPositionsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DualInvestmentApiInterface
     */
    getDciProductPositionsV1(requestParameters: DualInvestmentApiGetDciProductPositionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetDciProductPositionsV1Resp>;

}

/**
 * Request parameters for createDciProductAutoCompoundEditStatusV1 operation in DualInvestmentApi.
 * @export
 * @interface DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1Request
 */
export interface DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1Request {
    /**
     * 
     * @type {string}
     * @memberof DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1
     */
    readonly positionId: string

    /**
     * 
     * @type {number}
     * @memberof DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1
     */
    readonly autoCompoundPlan?: string

    /**
     * 
     * @type {number}
     * @memberof DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createDciProductSubscribeV1 operation in DualInvestmentApi.
 * @export
 * @interface DualInvestmentApiCreateDciProductSubscribeV1Request
 */
export interface DualInvestmentApiCreateDciProductSubscribeV1Request {
    /**
     * 
     * @type {string}
     * @memberof DualInvestmentApiCreateDciProductSubscribeV1
     */
    readonly autoCompoundPlan: string

    /**
     * 
     * @type {string}
     * @memberof DualInvestmentApiCreateDciProductSubscribeV1
     */
    readonly depositAmount: string

    /**
     * 
     * @type {string}
     * @memberof DualInvestmentApiCreateDciProductSubscribeV1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof DualInvestmentApiCreateDciProductSubscribeV1
     */
    readonly orderId: string

    /**
     * 
     * @type {number}
     * @memberof DualInvestmentApiCreateDciProductSubscribeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof DualInvestmentApiCreateDciProductSubscribeV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getDciProductAccountsV1 operation in DualInvestmentApi.
 * @export
 * @interface DualInvestmentApiGetDciProductAccountsV1Request
 */
export interface DualInvestmentApiGetDciProductAccountsV1Request {
    /**
     * 
     * @type {number}
     * @memberof DualInvestmentApiGetDciProductAccountsV1
     */
    readonly timestamp: number

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof DualInvestmentApiGetDciProductAccountsV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getDciProductListV1 operation in DualInvestmentApi.
 * @export
 * @interface DualInvestmentApiGetDciProductListV1Request
 */
export interface DualInvestmentApiGetDciProductListV1Request {
    /**
     * Input CALL or PUT
     * @type {string}
     * @memberof DualInvestmentApiGetDciProductListV1
     */
    readonly optionType: string

    /**
     * Target exercised asset, e.g.: if you subscribe to a high sell product (call option), you should input: &#x60;optionType&#x60;:CALL,&#x60;exercisedCoin&#x60;:USDT,&#x60;investCoin&#x60;:BNB; if you subscribe to a low buy product (put option), you should input: &#x60;optionType&#x60;:PUT,&#x60;exercisedCoin&#x60;:BNB,&#x60;investCoin&#x60;:USDT
     * @type {string}
     * @memberof DualInvestmentApiGetDciProductListV1
     */
    readonly exercisedCoin: string

    /**
     * Asset used for subscribing, e.g.: if you subscribe to a high sell product (call option), you should input: &#x60;optionType&#x60;:CALL,&#x60;exercisedCoin&#x60;:USDT,&#x60;investCoin&#x60;:BNB; if you subscribe to a low buy product (put option), you should input: &#x60;optionType&#x60;:PUT,&#x60;exercisedCoin&#x60;:BNB,&#x60;investCoin&#x60;:USDT
     * @type {string}
     * @memberof DualInvestmentApiGetDciProductListV1
     */
    readonly investCoin: string

    /**
     * 
     * @type {number}
     * @memberof DualInvestmentApiGetDciProductListV1
     */
    readonly timestamp: number

    /**
     * Default: 10, Maximum: 100
     * @type {number}
     * @memberof DualInvestmentApiGetDciProductListV1
     */
    readonly pageSize?: number

    /**
     * Default: 1
     * @type {number}
     * @memberof DualInvestmentApiGetDciProductListV1
     */
    readonly pageIndex?: number

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof DualInvestmentApiGetDciProductListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getDciProductPositionsV1 operation in DualInvestmentApi.
 * @export
 * @interface DualInvestmentApiGetDciProductPositionsV1Request
 */
export interface DualInvestmentApiGetDciProductPositionsV1Request {
    /**
     * 
     * @type {number}
     * @memberof DualInvestmentApiGetDciProductPositionsV1
     */
    readonly timestamp: number

    /**
     * &#x60;PENDING&#x60;:Products are purchasing, will give results later;&#x60;PURCHASE_SUCCESS&#x60;:purchase successfully;&#x60;SETTLED&#x60;: Products are finish settling;&#x60;PURCHASE_FAIL&#x60;:fail to purchase;&#x60;REFUNDING&#x60;:refund ongoing;&#x60;REFUND_SUCCESS&#x60;:refund to spot account successfully; &#x60;SETTLING&#x60;:Products are settling. If don&amp;#39;t fill this field, will response all the position status.
     * @type {string}
     * @memberof DualInvestmentApiGetDciProductPositionsV1
     */
    readonly status?: string

    /**
     * Default: 10, Max:100
     * @type {number}
     * @memberof DualInvestmentApiGetDciProductPositionsV1
     */
    readonly pageSize?: number

    /**
     * Default:1
     * @type {number}
     * @memberof DualInvestmentApiGetDciProductPositionsV1
     */
    readonly pageIndex?: number

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof DualInvestmentApiGetDciProductPositionsV1
     */
    readonly recvWindow?: number
}

/**
 * DualInvestmentApi - object-oriented interface
 * @export
 * @class DualInvestmentApi
 * @extends {BaseAPI}
 */
export class DualInvestmentApi extends BaseAPI implements DualInvestmentApiInterface {
    /**
     * Change Auto-Compound status
     * @summary Change Auto-Compound status(USER_DATA)
     * @param {DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DualInvestmentApi
     */
    public createDciProductAutoCompoundEditStatusV1(requestParameters: DualInvestmentApiCreateDciProductAutoCompoundEditStatusV1Request, options?: RawAxiosRequestConfig) {
        return DualInvestmentApiFp(this.configuration).createDciProductAutoCompoundEditStatusV1(requestParameters.positionId, requestParameters.timestamp, requestParameters.autoCompoundPlan, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Subscribe Dual Investment products
     * @summary Subscribe Dual Investment products(USER_DATA)
     * @param {DualInvestmentApiCreateDciProductSubscribeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DualInvestmentApi
     */
    public createDciProductSubscribeV1(requestParameters: DualInvestmentApiCreateDciProductSubscribeV1Request, options?: RawAxiosRequestConfig) {
        return DualInvestmentApiFp(this.configuration).createDciProductSubscribeV1(requestParameters.autoCompoundPlan, requestParameters.depositAmount, requestParameters.id, requestParameters.orderId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check Dual Investment accounts
     * @summary Check Dual Investment accounts(USER_DATA)
     * @param {DualInvestmentApiGetDciProductAccountsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DualInvestmentApi
     */
    public getDciProductAccountsV1(requestParameters: DualInvestmentApiGetDciProductAccountsV1Request, options?: RawAxiosRequestConfig) {
        return DualInvestmentApiFp(this.configuration).getDciProductAccountsV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Dual Investment product list
     * @summary Get Dual Investment product list
     * @param {DualInvestmentApiGetDciProductListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DualInvestmentApi
     */
    public getDciProductListV1(requestParameters: DualInvestmentApiGetDciProductListV1Request, options?: RawAxiosRequestConfig) {
        return DualInvestmentApiFp(this.configuration).getDciProductListV1(requestParameters.optionType, requestParameters.exercisedCoin, requestParameters.investCoin, requestParameters.timestamp, requestParameters.pageSize, requestParameters.pageIndex, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Dual Investment positions (batch)
     * @summary Get Dual Investment positions(USER_DATA)
     * @param {DualInvestmentApiGetDciProductPositionsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DualInvestmentApi
     */
    public getDciProductPositionsV1(requestParameters: DualInvestmentApiGetDciProductPositionsV1Request, options?: RawAxiosRequestConfig) {
        return DualInvestmentApiFp(this.configuration).getDciProductPositionsV1(requestParameters.timestamp, requestParameters.status, requestParameters.pageSize, requestParameters.pageIndex, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

