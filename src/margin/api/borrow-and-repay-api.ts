/* tslint:disable */
/* eslint-disable */
/**
 * Binance Margin Trading API
 * OpenAPI specification for Binance exchange - Margin API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { MarginCreateMarginBorrowRepayV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginBorrowRepayV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginInterestHistoryV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginInterestRateHistoryV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginMaxBorrowableV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginNextHourlyInterestRateV1RespItem } from '../model';
/**
 * BorrowAndRepayApi - axios parameter creator
 * @export
 */
export const BorrowAndRepayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Margin account borrow/repay(MARGIN)
         * @summary Margin account borrow/repay(MARGIN)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} isIsolated 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} type 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginBorrowRepayV1: async (amount: string, asset: string, isIsolated: string, symbol: string, timestamp: number, type: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('marginCreateMarginBorrowRepayV1', 'amount', amount)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('marginCreateMarginBorrowRepayV1', 'asset', asset)
            // verify required parameter 'isIsolated' is not null or undefined
            assertParamExists('marginCreateMarginBorrowRepayV1', 'isIsolated', isIsolated)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginCreateMarginBorrowRepayV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginCreateMarginBorrowRepayV1', 'timestamp', timestamp)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('marginCreateMarginBorrowRepayV1', 'type', type)
            const localVarPath = `/sapi/v1/margin/borrow-repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }
    
            if (asset !== undefined) { 
                localVarFormParams.set('asset', asset as any);
            }
    
            if (isIsolated !== undefined) { 
                localVarFormParams.set('isIsolated', isIsolated as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query borrow/repay records in Margin account
         * @summary Query borrow/repay records in Margin account(USER_DATA)
         * @param {string} type &#x60;BORROW&#x60; or &#x60;REPAY&#x60;
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [isolatedSymbol] Symbol in Isolated Margin
         * @param {number} [txId] &#x60;tranId&#x60; in &#x60;POST /sapi/v1/margin/loan&#x60;
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginBorrowRepayV1: async (type: string, timestamp: number, asset?: string, isolatedSymbol?: string, txId?: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('marginGetMarginBorrowRepayV1', 'type', type)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginBorrowRepayV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/borrow-repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (isolatedSymbol !== undefined) {
                localVarQueryParameter['isolatedSymbol'] = isolatedSymbol;
            }

            if (txId !== undefined) {
                localVarQueryParameter['txId'] = txId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Interest History
         * @summary Get Interest History (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [isolatedSymbol] isolated symbol
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginInterestHistoryV1: async (timestamp: number, asset?: string, isolatedSymbol?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginInterestHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/interestHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (isolatedSymbol !== undefined) {
                localVarQueryParameter['isolatedSymbol'] = isolatedSymbol;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Margin Interest Rate History
         * @summary Query Margin Interest Rate History (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {number} [vipLevel] Default: user&amp;#39;s vip level
         * @param {number} [startTime] Default: 7 days ago
         * @param {number} [endTime] Default: present. Maximum range: 1 months.
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginInterestRateHistoryV1: async (asset: string, timestamp: number, vipLevel?: number, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('marginGetMarginInterestRateHistoryV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginInterestRateHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/interestRateHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (vipLevel !== undefined) {
                localVarQueryParameter['vipLevel'] = vipLevel;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Max Borrow
         * @summary Query Max Borrow (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} [isolatedSymbol] isolated symbol
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginMaxBorrowableV1: async (asset: string, timestamp: number, isolatedSymbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('marginGetMarginMaxBorrowableV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginMaxBorrowableV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/maxBorrowable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (isolatedSymbol !== undefined) {
                localVarQueryParameter['isolatedSymbol'] = isolatedSymbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get future hourly interest rate
         * @summary Get future hourly interest rate (USER_DATA)
         * @param {string} assets List of assets, separated by commas, up to 20
         * @param {boolean} isIsolated for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginNextHourlyInterestRateV1: async (assets: string, isIsolated: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assets' is not null or undefined
            assertParamExists('marginGetMarginNextHourlyInterestRateV1', 'assets', assets)
            // verify required parameter 'isIsolated' is not null or undefined
            assertParamExists('marginGetMarginNextHourlyInterestRateV1', 'isIsolated', isIsolated)
            const localVarPath = `/sapi/v1/margin/next-hourly-interest-rate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (assets !== undefined) {
                localVarQueryParameter['assets'] = assets;
            }

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BorrowAndRepayApi - functional programming interface
 * @export
 */
export const BorrowAndRepayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BorrowAndRepayApiAxiosParamCreator(configuration)
    return {
        /**
         * Margin account borrow/repay(MARGIN)
         * @summary Margin account borrow/repay(MARGIN)
         * @param {string} amount 
         * @param {string} asset 
         * @param {string} isIsolated 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} type 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateMarginBorrowRepayV1(amount: string, asset: string, isIsolated: string, symbol: string, timestamp: number, type: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateMarginBorrowRepayV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateMarginBorrowRepayV1(amount, asset, isIsolated, symbol, timestamp, type, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BorrowAndRepayApi.marginCreateMarginBorrowRepayV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query borrow/repay records in Margin account
         * @summary Query borrow/repay records in Margin account(USER_DATA)
         * @param {string} type &#x60;BORROW&#x60; or &#x60;REPAY&#x60;
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [isolatedSymbol] Symbol in Isolated Margin
         * @param {number} [txId] &#x60;tranId&#x60; in &#x60;POST /sapi/v1/margin/loan&#x60;
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginBorrowRepayV1(type: string, timestamp: number, asset?: string, isolatedSymbol?: string, txId?: number, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginBorrowRepayV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginBorrowRepayV1(type, timestamp, asset, isolatedSymbol, txId, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BorrowAndRepayApi.marginGetMarginBorrowRepayV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Interest History
         * @summary Get Interest History (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [isolatedSymbol] isolated symbol
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginInterestHistoryV1(timestamp: number, asset?: string, isolatedSymbol?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginInterestHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginInterestHistoryV1(timestamp, asset, isolatedSymbol, startTime, endTime, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BorrowAndRepayApi.marginGetMarginInterestHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Margin Interest Rate History
         * @summary Query Margin Interest Rate History (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {number} [vipLevel] Default: user&amp;#39;s vip level
         * @param {number} [startTime] Default: 7 days ago
         * @param {number} [endTime] Default: present. Maximum range: 1 months.
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginInterestRateHistoryV1(asset: string, timestamp: number, vipLevel?: number, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginInterestRateHistoryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginInterestRateHistoryV1(asset, timestamp, vipLevel, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BorrowAndRepayApi.marginGetMarginInterestRateHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Max Borrow
         * @summary Query Max Borrow (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} [isolatedSymbol] isolated symbol
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginMaxBorrowableV1(asset: string, timestamp: number, isolatedSymbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginMaxBorrowableV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginMaxBorrowableV1(asset, timestamp, isolatedSymbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BorrowAndRepayApi.marginGetMarginMaxBorrowableV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get future hourly interest rate
         * @summary Get future hourly interest rate (USER_DATA)
         * @param {string} assets List of assets, separated by commas, up to 20
         * @param {boolean} isIsolated for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginNextHourlyInterestRateV1(assets: string, isIsolated: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginNextHourlyInterestRateV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginNextHourlyInterestRateV1(assets, isIsolated, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BorrowAndRepayApi.marginGetMarginNextHourlyInterestRateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BorrowAndRepayApi - factory interface
 * @export
 */
export const BorrowAndRepayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BorrowAndRepayApiFp(configuration)
    return {
        /**
         * Margin account borrow/repay(MARGIN)
         * @summary Margin account borrow/repay(MARGIN)
         * @param {BorrowAndRepayApiMarginCreateMarginBorrowRepayV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginBorrowRepayV1(requestParameters: BorrowAndRepayApiMarginCreateMarginBorrowRepayV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginBorrowRepayV1Resp> {
            return localVarFp.marginCreateMarginBorrowRepayV1(requestParameters.amount, requestParameters.asset, requestParameters.isIsolated, requestParameters.symbol, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query borrow/repay records in Margin account
         * @summary Query borrow/repay records in Margin account(USER_DATA)
         * @param {BorrowAndRepayApiMarginGetMarginBorrowRepayV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginBorrowRepayV1(requestParameters: BorrowAndRepayApiMarginGetMarginBorrowRepayV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginBorrowRepayV1Resp> {
            return localVarFp.marginGetMarginBorrowRepayV1(requestParameters.type, requestParameters.timestamp, requestParameters.asset, requestParameters.isolatedSymbol, requestParameters.txId, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Interest History
         * @summary Get Interest History (USER_DATA)
         * @param {BorrowAndRepayApiMarginGetMarginInterestHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginInterestHistoryV1(requestParameters: BorrowAndRepayApiMarginGetMarginInterestHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginInterestHistoryV1Resp> {
            return localVarFp.marginGetMarginInterestHistoryV1(requestParameters.timestamp, requestParameters.asset, requestParameters.isolatedSymbol, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Margin Interest Rate History
         * @summary Query Margin Interest Rate History (USER_DATA)
         * @param {BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginInterestRateHistoryV1(requestParameters: BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginInterestRateHistoryV1RespItem>> {
            return localVarFp.marginGetMarginInterestRateHistoryV1(requestParameters.asset, requestParameters.timestamp, requestParameters.vipLevel, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Max Borrow
         * @summary Query Max Borrow (USER_DATA)
         * @param {BorrowAndRepayApiMarginGetMarginMaxBorrowableV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginMaxBorrowableV1(requestParameters: BorrowAndRepayApiMarginGetMarginMaxBorrowableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginMaxBorrowableV1Resp> {
            return localVarFp.marginGetMarginMaxBorrowableV1(requestParameters.asset, requestParameters.timestamp, requestParameters.isolatedSymbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get future hourly interest rate
         * @summary Get future hourly interest rate (USER_DATA)
         * @param {BorrowAndRepayApiMarginGetMarginNextHourlyInterestRateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginNextHourlyInterestRateV1(requestParameters: BorrowAndRepayApiMarginGetMarginNextHourlyInterestRateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginNextHourlyInterestRateV1RespItem>> {
            return localVarFp.marginGetMarginNextHourlyInterestRateV1(requestParameters.assets, requestParameters.isIsolated, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BorrowAndRepayApi - interface
 * @export
 * @interface BorrowAndRepayApi
 */
export interface BorrowAndRepayApiInterface {
    /**
     * Margin account borrow/repay(MARGIN)
     * @summary Margin account borrow/repay(MARGIN)
     * @param {BorrowAndRepayApiMarginCreateMarginBorrowRepayV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApiInterface
     */
    marginCreateMarginBorrowRepayV1(requestParameters: BorrowAndRepayApiMarginCreateMarginBorrowRepayV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginBorrowRepayV1Resp>;

    /**
     * Query borrow/repay records in Margin account
     * @summary Query borrow/repay records in Margin account(USER_DATA)
     * @param {BorrowAndRepayApiMarginGetMarginBorrowRepayV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApiInterface
     */
    marginGetMarginBorrowRepayV1(requestParameters: BorrowAndRepayApiMarginGetMarginBorrowRepayV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginBorrowRepayV1Resp>;

    /**
     * Get Interest History
     * @summary Get Interest History (USER_DATA)
     * @param {BorrowAndRepayApiMarginGetMarginInterestHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApiInterface
     */
    marginGetMarginInterestHistoryV1(requestParameters: BorrowAndRepayApiMarginGetMarginInterestHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginInterestHistoryV1Resp>;

    /**
     * Query Margin Interest Rate History
     * @summary Query Margin Interest Rate History (USER_DATA)
     * @param {BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApiInterface
     */
    marginGetMarginInterestRateHistoryV1(requestParameters: BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginInterestRateHistoryV1RespItem>>;

    /**
     * Query Max Borrow
     * @summary Query Max Borrow (USER_DATA)
     * @param {BorrowAndRepayApiMarginGetMarginMaxBorrowableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApiInterface
     */
    marginGetMarginMaxBorrowableV1(requestParameters: BorrowAndRepayApiMarginGetMarginMaxBorrowableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginMaxBorrowableV1Resp>;

    /**
     * Get future hourly interest rate
     * @summary Get future hourly interest rate (USER_DATA)
     * @param {BorrowAndRepayApiMarginGetMarginNextHourlyInterestRateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApiInterface
     */
    marginGetMarginNextHourlyInterestRateV1(requestParameters: BorrowAndRepayApiMarginGetMarginNextHourlyInterestRateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginNextHourlyInterestRateV1RespItem>>;

}

/**
 * Request parameters for marginCreateMarginBorrowRepayV1 operation in BorrowAndRepayApi.
 * @export
 * @interface BorrowAndRepayApiMarginCreateMarginBorrowRepayV1Request
 */
export interface BorrowAndRepayApiMarginCreateMarginBorrowRepayV1Request {
    /**
     * 
     * @type {string}
     * @memberof BorrowAndRepayApiMarginCreateMarginBorrowRepayV1
     */
    readonly amount: string

    /**
     * 
     * @type {string}
     * @memberof BorrowAndRepayApiMarginCreateMarginBorrowRepayV1
     */
    readonly asset: string

    /**
     * 
     * @type {string}
     * @memberof BorrowAndRepayApiMarginCreateMarginBorrowRepayV1
     */
    readonly isIsolated: string

    /**
     * 
     * @type {string}
     * @memberof BorrowAndRepayApiMarginCreateMarginBorrowRepayV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof BorrowAndRepayApiMarginCreateMarginBorrowRepayV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BorrowAndRepayApiMarginCreateMarginBorrowRepayV1
     */
    readonly type: string

    /**
     * 
     * @type {number}
     * @memberof BorrowAndRepayApiMarginCreateMarginBorrowRepayV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginBorrowRepayV1 operation in BorrowAndRepayApi.
 * @export
 * @interface BorrowAndRepayApiMarginGetMarginBorrowRepayV1Request
 */
export interface BorrowAndRepayApiMarginGetMarginBorrowRepayV1Request {
    /**
     * &#x60;BORROW&#x60; or &#x60;REPAY&#x60;
     * @type {string}
     * @memberof BorrowAndRepayApiMarginGetMarginBorrowRepayV1
     */
    readonly type: string

    /**
     * 
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginBorrowRepayV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BorrowAndRepayApiMarginGetMarginBorrowRepayV1
     */
    readonly asset?: string

    /**
     * Symbol in Isolated Margin
     * @type {string}
     * @memberof BorrowAndRepayApiMarginGetMarginBorrowRepayV1
     */
    readonly isolatedSymbol?: string

    /**
     * &#x60;tranId&#x60; in &#x60;POST /sapi/v1/margin/loan&#x60;
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginBorrowRepayV1
     */
    readonly txId?: number

    /**
     * 
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginBorrowRepayV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginBorrowRepayV1
     */
    readonly endTime?: number

    /**
     * Current querying page. Start from 1. Default:1
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginBorrowRepayV1
     */
    readonly current?: number

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginBorrowRepayV1
     */
    readonly size?: number

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginBorrowRepayV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginInterestHistoryV1 operation in BorrowAndRepayApi.
 * @export
 * @interface BorrowAndRepayApiMarginGetMarginInterestHistoryV1Request
 */
export interface BorrowAndRepayApiMarginGetMarginInterestHistoryV1Request {
    /**
     * 
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestHistoryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestHistoryV1
     */
    readonly asset?: string

    /**
     * isolated symbol
     * @type {string}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestHistoryV1
     */
    readonly isolatedSymbol?: string

    /**
     * 
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestHistoryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestHistoryV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestHistoryV1
     */
    readonly current?: number

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestHistoryV1
     */
    readonly size?: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginInterestRateHistoryV1 operation in BorrowAndRepayApi.
 * @export
 * @interface BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1Request
 */
export interface BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1Request {
    /**
     * 
     * @type {string}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1
     */
    readonly timestamp: number

    /**
     * Default: user&amp;#39;s vip level
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1
     */
    readonly vipLevel?: number

    /**
     * Default: 7 days ago
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1
     */
    readonly startTime?: number

    /**
     * Default: present. Maximum range: 1 months.
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1
     */
    readonly endTime?: number

    /**
     * No more than 60000
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginMaxBorrowableV1 operation in BorrowAndRepayApi.
 * @export
 * @interface BorrowAndRepayApiMarginGetMarginMaxBorrowableV1Request
 */
export interface BorrowAndRepayApiMarginGetMarginMaxBorrowableV1Request {
    /**
     * 
     * @type {string}
     * @memberof BorrowAndRepayApiMarginGetMarginMaxBorrowableV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginMaxBorrowableV1
     */
    readonly timestamp: number

    /**
     * isolated symbol
     * @type {string}
     * @memberof BorrowAndRepayApiMarginGetMarginMaxBorrowableV1
     */
    readonly isolatedSymbol?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof BorrowAndRepayApiMarginGetMarginMaxBorrowableV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginNextHourlyInterestRateV1 operation in BorrowAndRepayApi.
 * @export
 * @interface BorrowAndRepayApiMarginGetMarginNextHourlyInterestRateV1Request
 */
export interface BorrowAndRepayApiMarginGetMarginNextHourlyInterestRateV1Request {
    /**
     * List of assets, separated by commas, up to 20
     * @type {string}
     * @memberof BorrowAndRepayApiMarginGetMarginNextHourlyInterestRateV1
     */
    readonly assets: string

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;
     * @type {boolean}
     * @memberof BorrowAndRepayApiMarginGetMarginNextHourlyInterestRateV1
     */
    readonly isIsolated: boolean
}

/**
 * BorrowAndRepayApi - object-oriented interface
 * @export
 * @class BorrowAndRepayApi
 * @extends {BaseAPI}
 */
export class BorrowAndRepayApi extends BaseAPI implements BorrowAndRepayApiInterface {
    /**
     * Margin account borrow/repay(MARGIN)
     * @summary Margin account borrow/repay(MARGIN)
     * @param {BorrowAndRepayApiMarginCreateMarginBorrowRepayV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApi
     */
    public marginCreateMarginBorrowRepayV1(requestParameters: BorrowAndRepayApiMarginCreateMarginBorrowRepayV1Request, options?: RawAxiosRequestConfig) {
        return BorrowAndRepayApiFp(this.configuration).marginCreateMarginBorrowRepayV1(requestParameters.amount, requestParameters.asset, requestParameters.isIsolated, requestParameters.symbol, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query borrow/repay records in Margin account
     * @summary Query borrow/repay records in Margin account(USER_DATA)
     * @param {BorrowAndRepayApiMarginGetMarginBorrowRepayV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApi
     */
    public marginGetMarginBorrowRepayV1(requestParameters: BorrowAndRepayApiMarginGetMarginBorrowRepayV1Request, options?: RawAxiosRequestConfig) {
        return BorrowAndRepayApiFp(this.configuration).marginGetMarginBorrowRepayV1(requestParameters.type, requestParameters.timestamp, requestParameters.asset, requestParameters.isolatedSymbol, requestParameters.txId, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Interest History
     * @summary Get Interest History (USER_DATA)
     * @param {BorrowAndRepayApiMarginGetMarginInterestHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApi
     */
    public marginGetMarginInterestHistoryV1(requestParameters: BorrowAndRepayApiMarginGetMarginInterestHistoryV1Request, options?: RawAxiosRequestConfig) {
        return BorrowAndRepayApiFp(this.configuration).marginGetMarginInterestHistoryV1(requestParameters.timestamp, requestParameters.asset, requestParameters.isolatedSymbol, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Margin Interest Rate History
     * @summary Query Margin Interest Rate History (USER_DATA)
     * @param {BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApi
     */
    public marginGetMarginInterestRateHistoryV1(requestParameters: BorrowAndRepayApiMarginGetMarginInterestRateHistoryV1Request, options?: RawAxiosRequestConfig) {
        return BorrowAndRepayApiFp(this.configuration).marginGetMarginInterestRateHistoryV1(requestParameters.asset, requestParameters.timestamp, requestParameters.vipLevel, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Max Borrow
     * @summary Query Max Borrow (USER_DATA)
     * @param {BorrowAndRepayApiMarginGetMarginMaxBorrowableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApi
     */
    public marginGetMarginMaxBorrowableV1(requestParameters: BorrowAndRepayApiMarginGetMarginMaxBorrowableV1Request, options?: RawAxiosRequestConfig) {
        return BorrowAndRepayApiFp(this.configuration).marginGetMarginMaxBorrowableV1(requestParameters.asset, requestParameters.timestamp, requestParameters.isolatedSymbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get future hourly interest rate
     * @summary Get future hourly interest rate (USER_DATA)
     * @param {BorrowAndRepayApiMarginGetMarginNextHourlyInterestRateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowAndRepayApi
     */
    public marginGetMarginNextHourlyInterestRateV1(requestParameters: BorrowAndRepayApiMarginGetMarginNextHourlyInterestRateV1Request, options?: RawAxiosRequestConfig) {
        return BorrowAndRepayApiFp(this.configuration).marginGetMarginNextHourlyInterestRateV1(requestParameters.assets, requestParameters.isIsolated, options).then((request) => request(this.axios, this.basePath));
    }
}

