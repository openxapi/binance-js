/* tslint:disable */
/* eslint-disable */
/**
 * Binance Margin Trading API
 * OpenAPI specification for Binance exchange - Margin API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { MarginGetMarginAllAssetsV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginAllPairsV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginAvailableInventoryV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginCrossMarginCollateralRatioV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginDelistScheduleV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginIsolatedAllPairsV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginIsolatedMarginTierV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginLeverageBracketV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginPriceIndexV1Resp } from '../model';
/**
 * MarketDataApi - axios parameter creator
 * @export
 */
export const MarketDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get All Margin Assets.
         * @summary Get All Margin Assets (MARKET_DATA)
         * @param {string} [asset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAllAssetsV1: async (asset?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/margin/allAssets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Cross Margin Pairs
         * @summary Get All Cross Margin Pairs (MARKET_DATA)
         * @param {string} [symbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAllPairsV1: async (symbol?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/margin/allPairs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Margin available Inventory query
         * @summary Query Margin Available Inventory(USER_DATA)
         * @param {string} type MARGIN,ISOLATED
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAvailableInventoryV1: async (type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('marginGetMarginAvailableInventoryV1', 'type', type)
            const localVarPath = `/sapi/v1/margin/available-inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cross margin collateral ratio
         * @summary Cross margin collateral ratio (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginCrossMarginCollateralRatioV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/margin/crossMarginCollateralRatio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tokens or symbols delist schedule for cross margin and isolated margin
         * @summary Get Delist Schedule (MARKET_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginDelistScheduleV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginDelistScheduleV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/delist-schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Isolated Margin Symbol
         * @summary Get All Isolated Margin Symbol(MARKET_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginIsolatedAllPairsV1: async (timestamp: number, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginIsolatedAllPairsV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/isolated/allPairs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data
         * @summary Query Isolated Margin Tier Data (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [tier] All margin tier data will be returned if tier is omitted
         * @param {number} [recvWindow] No more than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginIsolatedMarginTierV1: async (symbol: string, timestamp: number, tier?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginGetMarginIsolatedMarginTierV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginIsolatedMarginTierV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/isolatedMarginTier`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (tier !== undefined) {
                localVarQueryParameter['tier'] = tier;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Liability Coin Leverage Bracket in Cross Margin Pro Mode
         * @summary Query Liability Coin Leverage Bracket in Cross Margin Pro Mode(MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginLeverageBracketV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/margin/leverageBracket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Margin PriceIndex
         * @summary Query Margin PriceIndex (MARKET_DATA)
         * @param {string} symbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginPriceIndexV1: async (symbol: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginGetMarginPriceIndexV1', 'symbol', symbol)
            const localVarPath = `/sapi/v1/margin/priceIndex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketDataApi - functional programming interface
 * @export
 */
export const MarketDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Get All Margin Assets.
         * @summary Get All Margin Assets (MARKET_DATA)
         * @param {string} [asset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginAllAssetsV1(asset?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginAllAssetsV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginAllAssetsV1(asset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.marginGetMarginAllAssetsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All Cross Margin Pairs
         * @summary Get All Cross Margin Pairs (MARKET_DATA)
         * @param {string} [symbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginAllPairsV1(symbol?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginAllPairsV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginAllPairsV1(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.marginGetMarginAllPairsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Margin available Inventory query
         * @summary Query Margin Available Inventory(USER_DATA)
         * @param {string} type MARGIN,ISOLATED
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginAvailableInventoryV1(type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginAvailableInventoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginAvailableInventoryV1(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.marginGetMarginAvailableInventoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cross margin collateral ratio
         * @summary Cross margin collateral ratio (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginCrossMarginCollateralRatioV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginCrossMarginCollateralRatioV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginCrossMarginCollateralRatioV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.marginGetMarginCrossMarginCollateralRatioV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get tokens or symbols delist schedule for cross margin and isolated margin
         * @summary Get Delist Schedule (MARKET_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginDelistScheduleV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginDelistScheduleV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginDelistScheduleV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.marginGetMarginDelistScheduleV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All Isolated Margin Symbol
         * @summary Get All Isolated Margin Symbol(MARKET_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginIsolatedAllPairsV1(timestamp: number, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginIsolatedAllPairsV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginIsolatedAllPairsV1(timestamp, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.marginGetMarginIsolatedAllPairsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data
         * @summary Query Isolated Margin Tier Data (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [tier] All margin tier data will be returned if tier is omitted
         * @param {number} [recvWindow] No more than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginIsolatedMarginTierV1(symbol: string, timestamp: number, tier?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginIsolatedMarginTierV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginIsolatedMarginTierV1(symbol, timestamp, tier, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.marginGetMarginIsolatedMarginTierV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Liability Coin Leverage Bracket in Cross Margin Pro Mode
         * @summary Query Liability Coin Leverage Bracket in Cross Margin Pro Mode(MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginLeverageBracketV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginLeverageBracketV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginLeverageBracketV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.marginGetMarginLeverageBracketV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Margin PriceIndex
         * @summary Query Margin PriceIndex (MARKET_DATA)
         * @param {string} symbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginPriceIndexV1(symbol: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginPriceIndexV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginPriceIndexV1(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.marginGetMarginPriceIndexV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MarketDataApi - factory interface
 * @export
 */
export const MarketDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketDataApiFp(configuration)
    return {
        /**
         * Get All Margin Assets.
         * @summary Get All Margin Assets (MARKET_DATA)
         * @param {MarketDataApiMarginGetMarginAllAssetsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAllAssetsV1(requestParameters: MarketDataApiMarginGetMarginAllAssetsV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginAllAssetsV1RespItem>> {
            return localVarFp.marginGetMarginAllAssetsV1(requestParameters.asset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Cross Margin Pairs
         * @summary Get All Cross Margin Pairs (MARKET_DATA)
         * @param {MarketDataApiMarginGetMarginAllPairsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAllPairsV1(requestParameters: MarketDataApiMarginGetMarginAllPairsV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginAllPairsV1RespItem>> {
            return localVarFp.marginGetMarginAllPairsV1(requestParameters.symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Margin available Inventory query
         * @summary Query Margin Available Inventory(USER_DATA)
         * @param {MarketDataApiMarginGetMarginAvailableInventoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAvailableInventoryV1(requestParameters: MarketDataApiMarginGetMarginAvailableInventoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginAvailableInventoryV1Resp> {
            return localVarFp.marginGetMarginAvailableInventoryV1(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * Cross margin collateral ratio
         * @summary Cross margin collateral ratio (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginCrossMarginCollateralRatioV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginCrossMarginCollateralRatioV1RespItem>> {
            return localVarFp.marginGetMarginCrossMarginCollateralRatioV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Get tokens or symbols delist schedule for cross margin and isolated margin
         * @summary Get Delist Schedule (MARKET_DATA)
         * @param {MarketDataApiMarginGetMarginDelistScheduleV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginDelistScheduleV1(requestParameters: MarketDataApiMarginGetMarginDelistScheduleV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginDelistScheduleV1RespItem>> {
            return localVarFp.marginGetMarginDelistScheduleV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Isolated Margin Symbol
         * @summary Get All Isolated Margin Symbol(MARKET_DATA)
         * @param {MarketDataApiMarginGetMarginIsolatedAllPairsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginIsolatedAllPairsV1(requestParameters: MarketDataApiMarginGetMarginIsolatedAllPairsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginIsolatedAllPairsV1RespItem>> {
            return localVarFp.marginGetMarginIsolatedAllPairsV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data
         * @summary Query Isolated Margin Tier Data (USER_DATA)
         * @param {MarketDataApiMarginGetMarginIsolatedMarginTierV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginIsolatedMarginTierV1(requestParameters: MarketDataApiMarginGetMarginIsolatedMarginTierV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginIsolatedMarginTierV1RespItem>> {
            return localVarFp.marginGetMarginIsolatedMarginTierV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.tier, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Liability Coin Leverage Bracket in Cross Margin Pro Mode
         * @summary Query Liability Coin Leverage Bracket in Cross Margin Pro Mode(MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginLeverageBracketV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginLeverageBracketV1RespItem>> {
            return localVarFp.marginGetMarginLeverageBracketV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Query Margin PriceIndex
         * @summary Query Margin PriceIndex (MARKET_DATA)
         * @param {MarketDataApiMarginGetMarginPriceIndexV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginPriceIndexV1(requestParameters: MarketDataApiMarginGetMarginPriceIndexV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginPriceIndexV1Resp> {
            return localVarFp.marginGetMarginPriceIndexV1(requestParameters.symbol, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketDataApi - interface
 * @export
 * @interface MarketDataApi
 */
export interface MarketDataApiInterface {
    /**
     * Get All Margin Assets.
     * @summary Get All Margin Assets (MARKET_DATA)
     * @param {MarketDataApiMarginGetMarginAllAssetsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    marginGetMarginAllAssetsV1(requestParameters?: MarketDataApiMarginGetMarginAllAssetsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginAllAssetsV1RespItem>>;

    /**
     * Get All Cross Margin Pairs
     * @summary Get All Cross Margin Pairs (MARKET_DATA)
     * @param {MarketDataApiMarginGetMarginAllPairsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    marginGetMarginAllPairsV1(requestParameters?: MarketDataApiMarginGetMarginAllPairsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginAllPairsV1RespItem>>;

    /**
     * Margin available Inventory query
     * @summary Query Margin Available Inventory(USER_DATA)
     * @param {MarketDataApiMarginGetMarginAvailableInventoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    marginGetMarginAvailableInventoryV1(requestParameters: MarketDataApiMarginGetMarginAvailableInventoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginAvailableInventoryV1Resp>;

    /**
     * Cross margin collateral ratio
     * @summary Cross margin collateral ratio (MARKET_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    marginGetMarginCrossMarginCollateralRatioV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginCrossMarginCollateralRatioV1RespItem>>;

    /**
     * Get tokens or symbols delist schedule for cross margin and isolated margin
     * @summary Get Delist Schedule (MARKET_DATA)
     * @param {MarketDataApiMarginGetMarginDelistScheduleV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    marginGetMarginDelistScheduleV1(requestParameters: MarketDataApiMarginGetMarginDelistScheduleV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginDelistScheduleV1RespItem>>;

    /**
     * Get All Isolated Margin Symbol
     * @summary Get All Isolated Margin Symbol(MARKET_DATA)
     * @param {MarketDataApiMarginGetMarginIsolatedAllPairsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    marginGetMarginIsolatedAllPairsV1(requestParameters: MarketDataApiMarginGetMarginIsolatedAllPairsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginIsolatedAllPairsV1RespItem>>;

    /**
     * Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data
     * @summary Query Isolated Margin Tier Data (USER_DATA)
     * @param {MarketDataApiMarginGetMarginIsolatedMarginTierV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    marginGetMarginIsolatedMarginTierV1(requestParameters: MarketDataApiMarginGetMarginIsolatedMarginTierV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginIsolatedMarginTierV1RespItem>>;

    /**
     * Liability Coin Leverage Bracket in Cross Margin Pro Mode
     * @summary Query Liability Coin Leverage Bracket in Cross Margin Pro Mode(MARKET_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    marginGetMarginLeverageBracketV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginLeverageBracketV1RespItem>>;

    /**
     * Query Margin PriceIndex
     * @summary Query Margin PriceIndex (MARKET_DATA)
     * @param {MarketDataApiMarginGetMarginPriceIndexV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApiInterface
     */
    marginGetMarginPriceIndexV1(requestParameters: MarketDataApiMarginGetMarginPriceIndexV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginPriceIndexV1Resp>;

}

/**
 * Request parameters for marginGetMarginAllAssetsV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiMarginGetMarginAllAssetsV1Request
 */
export interface MarketDataApiMarginGetMarginAllAssetsV1Request {
    /**
     * 
     * @type {string}
     * @memberof MarketDataApiMarginGetMarginAllAssetsV1
     */
    readonly asset?: string
}

/**
 * Request parameters for marginGetMarginAllPairsV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiMarginGetMarginAllPairsV1Request
 */
export interface MarketDataApiMarginGetMarginAllPairsV1Request {
    /**
     * 
     * @type {string}
     * @memberof MarketDataApiMarginGetMarginAllPairsV1
     */
    readonly symbol?: string
}

/**
 * Request parameters for marginGetMarginAvailableInventoryV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiMarginGetMarginAvailableInventoryV1Request
 */
export interface MarketDataApiMarginGetMarginAvailableInventoryV1Request {
    /**
     * MARGIN,ISOLATED
     * @type {string}
     * @memberof MarketDataApiMarginGetMarginAvailableInventoryV1
     */
    readonly type: string
}

/**
 * Request parameters for marginGetMarginDelistScheduleV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiMarginGetMarginDelistScheduleV1Request
 */
export interface MarketDataApiMarginGetMarginDelistScheduleV1Request {
    /**
     * 
     * @type {number}
     * @memberof MarketDataApiMarginGetMarginDelistScheduleV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof MarketDataApiMarginGetMarginDelistScheduleV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginIsolatedAllPairsV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiMarginGetMarginIsolatedAllPairsV1Request
 */
export interface MarketDataApiMarginGetMarginIsolatedAllPairsV1Request {
    /**
     * 
     * @type {number}
     * @memberof MarketDataApiMarginGetMarginIsolatedAllPairsV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof MarketDataApiMarginGetMarginIsolatedAllPairsV1
     */
    readonly symbol?: string

    /**
     * No more than 60000
     * @type {number}
     * @memberof MarketDataApiMarginGetMarginIsolatedAllPairsV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginIsolatedMarginTierV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiMarginGetMarginIsolatedMarginTierV1Request
 */
export interface MarketDataApiMarginGetMarginIsolatedMarginTierV1Request {
    /**
     * 
     * @type {string}
     * @memberof MarketDataApiMarginGetMarginIsolatedMarginTierV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof MarketDataApiMarginGetMarginIsolatedMarginTierV1
     */
    readonly timestamp: number

    /**
     * All margin tier data will be returned if tier is omitted
     * @type {number}
     * @memberof MarketDataApiMarginGetMarginIsolatedMarginTierV1
     */
    readonly tier?: number

    /**
     * No more than &#x60;60000&#x60;
     * @type {number}
     * @memberof MarketDataApiMarginGetMarginIsolatedMarginTierV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginPriceIndexV1 operation in MarketDataApi.
 * @export
 * @interface MarketDataApiMarginGetMarginPriceIndexV1Request
 */
export interface MarketDataApiMarginGetMarginPriceIndexV1Request {
    /**
     * 
     * @type {string}
     * @memberof MarketDataApiMarginGetMarginPriceIndexV1
     */
    readonly symbol: string
}

/**
 * MarketDataApi - object-oriented interface
 * @export
 * @class MarketDataApi
 * @extends {BaseAPI}
 */
export class MarketDataApi extends BaseAPI implements MarketDataApiInterface {
    /**
     * Get All Margin Assets.
     * @summary Get All Margin Assets (MARKET_DATA)
     * @param {MarketDataApiMarginGetMarginAllAssetsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public marginGetMarginAllAssetsV1(requestParameters: MarketDataApiMarginGetMarginAllAssetsV1Request = {}, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).marginGetMarginAllAssetsV1(requestParameters.asset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Cross Margin Pairs
     * @summary Get All Cross Margin Pairs (MARKET_DATA)
     * @param {MarketDataApiMarginGetMarginAllPairsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public marginGetMarginAllPairsV1(requestParameters: MarketDataApiMarginGetMarginAllPairsV1Request = {}, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).marginGetMarginAllPairsV1(requestParameters.symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Margin available Inventory query
     * @summary Query Margin Available Inventory(USER_DATA)
     * @param {MarketDataApiMarginGetMarginAvailableInventoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public marginGetMarginAvailableInventoryV1(requestParameters: MarketDataApiMarginGetMarginAvailableInventoryV1Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).marginGetMarginAvailableInventoryV1(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cross margin collateral ratio
     * @summary Cross margin collateral ratio (MARKET_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public marginGetMarginCrossMarginCollateralRatioV1(options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).marginGetMarginCrossMarginCollateralRatioV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tokens or symbols delist schedule for cross margin and isolated margin
     * @summary Get Delist Schedule (MARKET_DATA)
     * @param {MarketDataApiMarginGetMarginDelistScheduleV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public marginGetMarginDelistScheduleV1(requestParameters: MarketDataApiMarginGetMarginDelistScheduleV1Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).marginGetMarginDelistScheduleV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Isolated Margin Symbol
     * @summary Get All Isolated Margin Symbol(MARKET_DATA)
     * @param {MarketDataApiMarginGetMarginIsolatedAllPairsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public marginGetMarginIsolatedAllPairsV1(requestParameters: MarketDataApiMarginGetMarginIsolatedAllPairsV1Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).marginGetMarginIsolatedAllPairsV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data
     * @summary Query Isolated Margin Tier Data (USER_DATA)
     * @param {MarketDataApiMarginGetMarginIsolatedMarginTierV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public marginGetMarginIsolatedMarginTierV1(requestParameters: MarketDataApiMarginGetMarginIsolatedMarginTierV1Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).marginGetMarginIsolatedMarginTierV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.tier, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Liability Coin Leverage Bracket in Cross Margin Pro Mode
     * @summary Query Liability Coin Leverage Bracket in Cross Margin Pro Mode(MARKET_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public marginGetMarginLeverageBracketV1(options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).marginGetMarginLeverageBracketV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Margin PriceIndex
     * @summary Query Margin PriceIndex (MARKET_DATA)
     * @param {MarketDataApiMarginGetMarginPriceIndexV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public marginGetMarginPriceIndexV1(requestParameters: MarketDataApiMarginGetMarginPriceIndexV1Request, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).marginGetMarginPriceIndexV1(requestParameters.symbol, options).then((request) => request(this.axios, this.basePath));
    }
}

