/* tslint:disable */
/* eslint-disable */
/**
 * Binance Margin Trading API
 * OpenAPI specification for Binance exchange - Margin API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { MarginGetMarginMaxTransferableV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginTransferV1Resp } from '../model';
/**
 * TransferApi - axios parameter creator
 * @export
 */
export const TransferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Query Max Transfer-Out Amount
         * @summary Query Max Transfer-Out Amount (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} [isolatedSymbol] isolated symbol
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginMaxTransferableV1: async (asset: string, timestamp: number, isolatedSymbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('marginGetMarginMaxTransferableV1', 'asset', asset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginMaxTransferableV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/maxTransferable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (isolatedSymbol !== undefined) {
                localVarQueryParameter['isolatedSymbol'] = isolatedSymbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Cross Margin Transfer History
         * @summary Get Cross Margin Transfer History (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [type] Transfer Type: ROLL_IN, ROLL_OUT
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {string} [isolatedSymbol] Symbol in Isolated Margin
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginTransferV1: async (timestamp: number, asset?: string, type?: string, startTime?: number, endTime?: number, current?: number, size?: number, isolatedSymbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginTransferV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (isolatedSymbol !== undefined) {
                localVarQueryParameter['isolatedSymbol'] = isolatedSymbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransferApi - functional programming interface
 * @export
 */
export const TransferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransferApiAxiosParamCreator(configuration)
    return {
        /**
         * Query Max Transfer-Out Amount
         * @summary Query Max Transfer-Out Amount (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp 
         * @param {string} [isolatedSymbol] isolated symbol
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginMaxTransferableV1(asset: string, timestamp: number, isolatedSymbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginMaxTransferableV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginMaxTransferableV1(asset, timestamp, isolatedSymbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransferApi.marginGetMarginMaxTransferableV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Cross Margin Transfer History
         * @summary Get Cross Margin Transfer History (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [type] Transfer Type: ROLL_IN, ROLL_OUT
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {string} [isolatedSymbol] Symbol in Isolated Margin
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginTransferV1(timestamp: number, asset?: string, type?: string, startTime?: number, endTime?: number, current?: number, size?: number, isolatedSymbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginTransferV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginTransferV1(timestamp, asset, type, startTime, endTime, current, size, isolatedSymbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransferApi.marginGetMarginTransferV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransferApi - factory interface
 * @export
 */
export const TransferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransferApiFp(configuration)
    return {
        /**
         * Query Max Transfer-Out Amount
         * @summary Query Max Transfer-Out Amount (USER_DATA)
         * @param {TransferApiMarginGetMarginMaxTransferableV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginMaxTransferableV1(requestParameters: TransferApiMarginGetMarginMaxTransferableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginMaxTransferableV1Resp> {
            return localVarFp.marginGetMarginMaxTransferableV1(requestParameters.asset, requestParameters.timestamp, requestParameters.isolatedSymbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Cross Margin Transfer History
         * @summary Get Cross Margin Transfer History (USER_DATA)
         * @param {TransferApiMarginGetMarginTransferV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginTransferV1(requestParameters: TransferApiMarginGetMarginTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginTransferV1Resp> {
            return localVarFp.marginGetMarginTransferV1(requestParameters.timestamp, requestParameters.asset, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.isolatedSymbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransferApi - interface
 * @export
 * @interface TransferApi
 */
export interface TransferApiInterface {
    /**
     * Query Max Transfer-Out Amount
     * @summary Query Max Transfer-Out Amount (USER_DATA)
     * @param {TransferApiMarginGetMarginMaxTransferableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransferApiInterface
     */
    marginGetMarginMaxTransferableV1(requestParameters: TransferApiMarginGetMarginMaxTransferableV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginMaxTransferableV1Resp>;

    /**
     * Get Cross Margin Transfer History
     * @summary Get Cross Margin Transfer History (USER_DATA)
     * @param {TransferApiMarginGetMarginTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransferApiInterface
     */
    marginGetMarginTransferV1(requestParameters: TransferApiMarginGetMarginTransferV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginTransferV1Resp>;

}

/**
 * Request parameters for marginGetMarginMaxTransferableV1 operation in TransferApi.
 * @export
 * @interface TransferApiMarginGetMarginMaxTransferableV1Request
 */
export interface TransferApiMarginGetMarginMaxTransferableV1Request {
    /**
     * 
     * @type {string}
     * @memberof TransferApiMarginGetMarginMaxTransferableV1
     */
    readonly asset: string

    /**
     * 
     * @type {number}
     * @memberof TransferApiMarginGetMarginMaxTransferableV1
     */
    readonly timestamp: number

    /**
     * isolated symbol
     * @type {string}
     * @memberof TransferApiMarginGetMarginMaxTransferableV1
     */
    readonly isolatedSymbol?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TransferApiMarginGetMarginMaxTransferableV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginTransferV1 operation in TransferApi.
 * @export
 * @interface TransferApiMarginGetMarginTransferV1Request
 */
export interface TransferApiMarginGetMarginTransferV1Request {
    /**
     * 
     * @type {number}
     * @memberof TransferApiMarginGetMarginTransferV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof TransferApiMarginGetMarginTransferV1
     */
    readonly asset?: string

    /**
     * Transfer Type: ROLL_IN, ROLL_OUT
     * @type {string}
     * @memberof TransferApiMarginGetMarginTransferV1
     */
    readonly type?: string

    /**
     * 
     * @type {number}
     * @memberof TransferApiMarginGetMarginTransferV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof TransferApiMarginGetMarginTransferV1
     */
    readonly endTime?: number

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof TransferApiMarginGetMarginTransferV1
     */
    readonly current?: number

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof TransferApiMarginGetMarginTransferV1
     */
    readonly size?: number

    /**
     * Symbol in Isolated Margin
     * @type {string}
     * @memberof TransferApiMarginGetMarginTransferV1
     */
    readonly isolatedSymbol?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TransferApiMarginGetMarginTransferV1
     */
    readonly recvWindow?: number
}

/**
 * TransferApi - object-oriented interface
 * @export
 * @class TransferApi
 * @extends {BaseAPI}
 */
export class TransferApi extends BaseAPI implements TransferApiInterface {
    /**
     * Query Max Transfer-Out Amount
     * @summary Query Max Transfer-Out Amount (USER_DATA)
     * @param {TransferApiMarginGetMarginMaxTransferableV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransferApi
     */
    public marginGetMarginMaxTransferableV1(requestParameters: TransferApiMarginGetMarginMaxTransferableV1Request, options?: RawAxiosRequestConfig) {
        return TransferApiFp(this.configuration).marginGetMarginMaxTransferableV1(requestParameters.asset, requestParameters.timestamp, requestParameters.isolatedSymbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Cross Margin Transfer History
     * @summary Get Cross Margin Transfer History (USER_DATA)
     * @param {TransferApiMarginGetMarginTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransferApi
     */
    public marginGetMarginTransferV1(requestParameters: TransferApiMarginGetMarginTransferV1Request, options?: RawAxiosRequestConfig) {
        return TransferApiFp(this.configuration).marginGetMarginTransferV1(requestParameters.timestamp, requestParameters.asset, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.current, requestParameters.size, requestParameters.isolatedSymbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

