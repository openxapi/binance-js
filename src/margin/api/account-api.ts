/* tslint:disable */
/* eslint-disable */
/**
 * Binance Margin Trading API
 * OpenAPI specification for Binance exchange - Margin API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { MarginCreateMarginIsolatedAccountV1Resp } from '../model';
// @ts-ignore
import type { MarginCreateMarginMaxLeverageV1Resp } from '../model';
// @ts-ignore
import type { MarginDeleteMarginIsolatedAccountV1Resp } from '../model';
// @ts-ignore
import type { MarginGetBnbBurnV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginAccountV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginCapitalFlowV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginCrossMarginDataV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginIsolatedAccountLimitV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginIsolatedAccountV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginIsolatedMarginDataV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginTradeCoeffV1Resp } from '../model';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Enable isolated margin account for a specific symbol(Only supports activation of previously disabled accounts).
         * @summary Enable Isolated Margin Account (TRADE)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginIsolatedAccountV1: async (symbol: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginCreateMarginIsolatedAccountV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginCreateMarginIsolatedAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/isolated/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adjust cross margin max leverage
         * @summary Adjust cross margin max leverage (USER_DATA)
         * @param {number} maxLeverage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginMaxLeverageV1: async (maxLeverage: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'maxLeverage' is not null or undefined
            assertParamExists('marginCreateMarginMaxLeverageV1', 'maxLeverage', maxLeverage)
            const localVarPath = `/sapi/v1/margin/max-leverage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (maxLeverage !== undefined) { 
                localVarFormParams.set('maxLeverage', maxLeverage as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24 hours.
         * @summary Disable Isolated Margin Account (TRADE)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteMarginIsolatedAccountV1: async (symbol: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginDeleteMarginIsolatedAccountV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginDeleteMarginIsolatedAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/isolated/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get BNB Burn Status
         * @summary Get BNB Burn Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetBnbBurnV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetBnbBurnV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/bnbBurn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Cross Margin Account Details
         * @summary Query Cross Margin Account Details (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAccountV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Cross Isolated Margin Capital Flow
         * @summary Query Cross Isolated Margin Capital Flow (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [symbol] 查询逐仓数据时必填
         * @param {string} [type] 
         * @param {number} [startTime] 只支持查询最近90天的数据
         * @param {number} [endTime] 
         * @param {number} [fromId] 如设置fromId, 将返回id &amp;gt; fromId的数据。否则将返回最新数据
         * @param {number} [limit] 每次返回的数据条数限制。默认 500; 最大 1000.
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginCapitalFlowV1: async (timestamp: number, asset?: string, symbol?: string, type?: string, startTime?: number, endTime?: number, fromId?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginCapitalFlowV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/capital-flow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['fromId'] = fromId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get cross margin fee data collection with any vip level or user\'s current specific data as https://www.binance.com/en/margin-fee
         * @summary Query Cross Margin Fee Data (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [vipLevel] User&amp;#39;s current specific margin data will be returned if vipLevel is omitted
         * @param {string} [coin] 
         * @param {number} [recvWindow] No more than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginCrossMarginDataV1: async (timestamp: number, vipLevel?: number, coin?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginCrossMarginDataV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/crossMarginData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (vipLevel !== undefined) {
                localVarQueryParameter['vipLevel'] = vipLevel;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query enabled isolated margin account limit.
         * @summary Query Enabled Isolated Margin Account Limit (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginIsolatedAccountLimitV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginIsolatedAccountLimitV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/isolated/accountLimit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Isolated Margin Account Info
         * @summary Query Isolated Margin Account Info (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbols] Max 5 symbols can be sent; separated by &amp;#34;,&amp;#34;. e.g. &amp;#34;BTCUSDT,BNBUSDT,ADAUSDT&amp;#34;
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginIsolatedAccountV1: async (timestamp: number, symbols?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginIsolatedAccountV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/isolated/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbols !== undefined) {
                localVarQueryParameter['symbols'] = symbols;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get isolated margin fee data collection with any vip level or user\'s current specific data as https://www.binance.com/en/margin-fee
         * @summary Query Isolated Margin Fee Data (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [vipLevel] User&amp;#39;s current specific margin data will be returned if vipLevel is omitted
         * @param {string} [symbol] 
         * @param {number} [recvWindow] No more than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginIsolatedMarginDataV1: async (timestamp: number, vipLevel?: number, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginIsolatedMarginDataV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/isolatedMarginData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (vipLevel !== undefined) {
                localVarQueryParameter['vipLevel'] = vipLevel;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get personal margin level information
         * @summary Get Summary of Margin account (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginTradeCoeffV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginTradeCoeffV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/tradeCoeff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Enable isolated margin account for a specific symbol(Only supports activation of previously disabled accounts).
         * @summary Enable Isolated Margin Account (TRADE)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateMarginIsolatedAccountV1(symbol: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateMarginIsolatedAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateMarginIsolatedAccountV1(symbol, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.marginCreateMarginIsolatedAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Adjust cross margin max leverage
         * @summary Adjust cross margin max leverage (USER_DATA)
         * @param {number} maxLeverage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateMarginMaxLeverageV1(maxLeverage: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateMarginMaxLeverageV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateMarginMaxLeverageV1(maxLeverage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.marginCreateMarginMaxLeverageV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24 hours.
         * @summary Disable Isolated Margin Account (TRADE)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginDeleteMarginIsolatedAccountV1(symbol: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginDeleteMarginIsolatedAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginDeleteMarginIsolatedAccountV1(symbol, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.marginDeleteMarginIsolatedAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get BNB Burn Status
         * @summary Get BNB Burn Status (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetBnbBurnV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetBnbBurnV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetBnbBurnV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.marginGetBnbBurnV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Cross Margin Account Details
         * @summary Query Cross Margin Account Details (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginAccountV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginAccountV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.marginGetMarginAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Cross Isolated Margin Capital Flow
         * @summary Query Cross Isolated Margin Capital Flow (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [asset] 
         * @param {string} [symbol] 查询逐仓数据时必填
         * @param {string} [type] 
         * @param {number} [startTime] 只支持查询最近90天的数据
         * @param {number} [endTime] 
         * @param {number} [fromId] 如设置fromId, 将返回id &amp;gt; fromId的数据。否则将返回最新数据
         * @param {number} [limit] 每次返回的数据条数限制。默认 500; 最大 1000.
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginCapitalFlowV1(timestamp: number, asset?: string, symbol?: string, type?: string, startTime?: number, endTime?: number, fromId?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginCapitalFlowV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginCapitalFlowV1(timestamp, asset, symbol, type, startTime, endTime, fromId, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.marginGetMarginCapitalFlowV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get cross margin fee data collection with any vip level or user\'s current specific data as https://www.binance.com/en/margin-fee
         * @summary Query Cross Margin Fee Data (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [vipLevel] User&amp;#39;s current specific margin data will be returned if vipLevel is omitted
         * @param {string} [coin] 
         * @param {number} [recvWindow] No more than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginCrossMarginDataV1(timestamp: number, vipLevel?: number, coin?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginCrossMarginDataV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginCrossMarginDataV1(timestamp, vipLevel, coin, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.marginGetMarginCrossMarginDataV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query enabled isolated margin account limit.
         * @summary Query Enabled Isolated Margin Account Limit (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginIsolatedAccountLimitV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginIsolatedAccountLimitV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginIsolatedAccountLimitV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.marginGetMarginIsolatedAccountLimitV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Isolated Margin Account Info
         * @summary Query Isolated Margin Account Info (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbols] Max 5 symbols can be sent; separated by &amp;#34;,&amp;#34;. e.g. &amp;#34;BTCUSDT,BNBUSDT,ADAUSDT&amp;#34;
         * @param {number} [recvWindow] No more than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginIsolatedAccountV1(timestamp: number, symbols?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginIsolatedAccountV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginIsolatedAccountV1(timestamp, symbols, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.marginGetMarginIsolatedAccountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get isolated margin fee data collection with any vip level or user\'s current specific data as https://www.binance.com/en/margin-fee
         * @summary Query Isolated Margin Fee Data (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [vipLevel] User&amp;#39;s current specific margin data will be returned if vipLevel is omitted
         * @param {string} [symbol] 
         * @param {number} [recvWindow] No more than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginIsolatedMarginDataV1(timestamp: number, vipLevel?: number, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginIsolatedMarginDataV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginIsolatedMarginDataV1(timestamp, vipLevel, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.marginGetMarginIsolatedMarginDataV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get personal margin level information
         * @summary Get Summary of Margin account (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginTradeCoeffV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginTradeCoeffV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginTradeCoeffV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.marginGetMarginTradeCoeffV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * Enable isolated margin account for a specific symbol(Only supports activation of previously disabled accounts).
         * @summary Enable Isolated Margin Account (TRADE)
         * @param {AccountApiMarginCreateMarginIsolatedAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginIsolatedAccountV1(requestParameters: AccountApiMarginCreateMarginIsolatedAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginIsolatedAccountV1Resp> {
            return localVarFp.marginCreateMarginIsolatedAccountV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Adjust cross margin max leverage
         * @summary Adjust cross margin max leverage (USER_DATA)
         * @param {AccountApiMarginCreateMarginMaxLeverageV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginMaxLeverageV1(requestParameters: AccountApiMarginCreateMarginMaxLeverageV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginMaxLeverageV1Resp> {
            return localVarFp.marginCreateMarginMaxLeverageV1(requestParameters.maxLeverage, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24 hours.
         * @summary Disable Isolated Margin Account (TRADE)
         * @param {AccountApiMarginDeleteMarginIsolatedAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteMarginIsolatedAccountV1(requestParameters: AccountApiMarginDeleteMarginIsolatedAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginDeleteMarginIsolatedAccountV1Resp> {
            return localVarFp.marginDeleteMarginIsolatedAccountV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get BNB Burn Status
         * @summary Get BNB Burn Status (USER_DATA)
         * @param {AccountApiMarginGetBnbBurnV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetBnbBurnV1(requestParameters: AccountApiMarginGetBnbBurnV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetBnbBurnV1Resp> {
            return localVarFp.marginGetBnbBurnV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Cross Margin Account Details
         * @summary Query Cross Margin Account Details (USER_DATA)
         * @param {AccountApiMarginGetMarginAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAccountV1(requestParameters: AccountApiMarginGetMarginAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginAccountV1Resp> {
            return localVarFp.marginGetMarginAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Cross Isolated Margin Capital Flow
         * @summary Query Cross Isolated Margin Capital Flow (USER_DATA)
         * @param {AccountApiMarginGetMarginCapitalFlowV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginCapitalFlowV1(requestParameters: AccountApiMarginGetMarginCapitalFlowV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginCapitalFlowV1RespItem>> {
            return localVarFp.marginGetMarginCapitalFlowV1(requestParameters.timestamp, requestParameters.asset, requestParameters.symbol, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.fromId, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get cross margin fee data collection with any vip level or user\'s current specific data as https://www.binance.com/en/margin-fee
         * @summary Query Cross Margin Fee Data (USER_DATA)
         * @param {AccountApiMarginGetMarginCrossMarginDataV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginCrossMarginDataV1(requestParameters: AccountApiMarginGetMarginCrossMarginDataV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginCrossMarginDataV1RespItem>> {
            return localVarFp.marginGetMarginCrossMarginDataV1(requestParameters.timestamp, requestParameters.vipLevel, requestParameters.coin, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query enabled isolated margin account limit.
         * @summary Query Enabled Isolated Margin Account Limit (USER_DATA)
         * @param {AccountApiMarginGetMarginIsolatedAccountLimitV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginIsolatedAccountLimitV1(requestParameters: AccountApiMarginGetMarginIsolatedAccountLimitV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginIsolatedAccountLimitV1Resp> {
            return localVarFp.marginGetMarginIsolatedAccountLimitV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Isolated Margin Account Info
         * @summary Query Isolated Margin Account Info (USER_DATA)
         * @param {AccountApiMarginGetMarginIsolatedAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginIsolatedAccountV1(requestParameters: AccountApiMarginGetMarginIsolatedAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginIsolatedAccountV1Resp> {
            return localVarFp.marginGetMarginIsolatedAccountV1(requestParameters.timestamp, requestParameters.symbols, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get isolated margin fee data collection with any vip level or user\'s current specific data as https://www.binance.com/en/margin-fee
         * @summary Query Isolated Margin Fee Data (USER_DATA)
         * @param {AccountApiMarginGetMarginIsolatedMarginDataV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginIsolatedMarginDataV1(requestParameters: AccountApiMarginGetMarginIsolatedMarginDataV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginIsolatedMarginDataV1RespItem>> {
            return localVarFp.marginGetMarginIsolatedMarginDataV1(requestParameters.timestamp, requestParameters.vipLevel, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get personal margin level information
         * @summary Get Summary of Margin account (USER_DATA)
         * @param {AccountApiMarginGetMarginTradeCoeffV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginTradeCoeffV1(requestParameters: AccountApiMarginGetMarginTradeCoeffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginTradeCoeffV1Resp> {
            return localVarFp.marginGetMarginTradeCoeffV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - interface
 * @export
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Enable isolated margin account for a specific symbol(Only supports activation of previously disabled accounts).
     * @summary Enable Isolated Margin Account (TRADE)
     * @param {AccountApiMarginCreateMarginIsolatedAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    marginCreateMarginIsolatedAccountV1(requestParameters: AccountApiMarginCreateMarginIsolatedAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginIsolatedAccountV1Resp>;

    /**
     * Adjust cross margin max leverage
     * @summary Adjust cross margin max leverage (USER_DATA)
     * @param {AccountApiMarginCreateMarginMaxLeverageV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    marginCreateMarginMaxLeverageV1(requestParameters: AccountApiMarginCreateMarginMaxLeverageV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginMaxLeverageV1Resp>;

    /**
     * Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24 hours.
     * @summary Disable Isolated Margin Account (TRADE)
     * @param {AccountApiMarginDeleteMarginIsolatedAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    marginDeleteMarginIsolatedAccountV1(requestParameters: AccountApiMarginDeleteMarginIsolatedAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginDeleteMarginIsolatedAccountV1Resp>;

    /**
     * Get BNB Burn Status
     * @summary Get BNB Burn Status (USER_DATA)
     * @param {AccountApiMarginGetBnbBurnV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    marginGetBnbBurnV1(requestParameters: AccountApiMarginGetBnbBurnV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetBnbBurnV1Resp>;

    /**
     * Query Cross Margin Account Details
     * @summary Query Cross Margin Account Details (USER_DATA)
     * @param {AccountApiMarginGetMarginAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    marginGetMarginAccountV1(requestParameters: AccountApiMarginGetMarginAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginAccountV1Resp>;

    /**
     * Query Cross Isolated Margin Capital Flow
     * @summary Query Cross Isolated Margin Capital Flow (USER_DATA)
     * @param {AccountApiMarginGetMarginCapitalFlowV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    marginGetMarginCapitalFlowV1(requestParameters: AccountApiMarginGetMarginCapitalFlowV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginCapitalFlowV1RespItem>>;

    /**
     * Get cross margin fee data collection with any vip level or user\'s current specific data as https://www.binance.com/en/margin-fee
     * @summary Query Cross Margin Fee Data (USER_DATA)
     * @param {AccountApiMarginGetMarginCrossMarginDataV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    marginGetMarginCrossMarginDataV1(requestParameters: AccountApiMarginGetMarginCrossMarginDataV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginCrossMarginDataV1RespItem>>;

    /**
     * Query enabled isolated margin account limit.
     * @summary Query Enabled Isolated Margin Account Limit (USER_DATA)
     * @param {AccountApiMarginGetMarginIsolatedAccountLimitV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    marginGetMarginIsolatedAccountLimitV1(requestParameters: AccountApiMarginGetMarginIsolatedAccountLimitV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginIsolatedAccountLimitV1Resp>;

    /**
     * Query Isolated Margin Account Info
     * @summary Query Isolated Margin Account Info (USER_DATA)
     * @param {AccountApiMarginGetMarginIsolatedAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    marginGetMarginIsolatedAccountV1(requestParameters: AccountApiMarginGetMarginIsolatedAccountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginIsolatedAccountV1Resp>;

    /**
     * Get isolated margin fee data collection with any vip level or user\'s current specific data as https://www.binance.com/en/margin-fee
     * @summary Query Isolated Margin Fee Data (USER_DATA)
     * @param {AccountApiMarginGetMarginIsolatedMarginDataV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    marginGetMarginIsolatedMarginDataV1(requestParameters: AccountApiMarginGetMarginIsolatedMarginDataV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginIsolatedMarginDataV1RespItem>>;

    /**
     * Get personal margin level information
     * @summary Get Summary of Margin account (USER_DATA)
     * @param {AccountApiMarginGetMarginTradeCoeffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    marginGetMarginTradeCoeffV1(requestParameters: AccountApiMarginGetMarginTradeCoeffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginTradeCoeffV1Resp>;

}

/**
 * Request parameters for marginCreateMarginIsolatedAccountV1 operation in AccountApi.
 * @export
 * @interface AccountApiMarginCreateMarginIsolatedAccountV1Request
 */
export interface AccountApiMarginCreateMarginIsolatedAccountV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiMarginCreateMarginIsolatedAccountV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginCreateMarginIsolatedAccountV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginCreateMarginIsolatedAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginCreateMarginMaxLeverageV1 operation in AccountApi.
 * @export
 * @interface AccountApiMarginCreateMarginMaxLeverageV1Request
 */
export interface AccountApiMarginCreateMarginMaxLeverageV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginCreateMarginMaxLeverageV1
     */
    readonly maxLeverage: number
}

/**
 * Request parameters for marginDeleteMarginIsolatedAccountV1 operation in AccountApi.
 * @export
 * @interface AccountApiMarginDeleteMarginIsolatedAccountV1Request
 */
export interface AccountApiMarginDeleteMarginIsolatedAccountV1Request {
    /**
     * 
     * @type {string}
     * @memberof AccountApiMarginDeleteMarginIsolatedAccountV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginDeleteMarginIsolatedAccountV1
     */
    readonly timestamp: number

    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiMarginDeleteMarginIsolatedAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetBnbBurnV1 operation in AccountApi.
 * @export
 * @interface AccountApiMarginGetBnbBurnV1Request
 */
export interface AccountApiMarginGetBnbBurnV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginGetBnbBurnV1
     */
    readonly timestamp: number

    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiMarginGetBnbBurnV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginAccountV1 operation in AccountApi.
 * @export
 * @interface AccountApiMarginGetMarginAccountV1Request
 */
export interface AccountApiMarginGetMarginAccountV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginGetMarginAccountV1
     */
    readonly timestamp: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof AccountApiMarginGetMarginAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginCapitalFlowV1 operation in AccountApi.
 * @export
 * @interface AccountApiMarginGetMarginCapitalFlowV1Request
 */
export interface AccountApiMarginGetMarginCapitalFlowV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginGetMarginCapitalFlowV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiMarginGetMarginCapitalFlowV1
     */
    readonly asset?: string

    /**
     * 查询逐仓数据时必填
     * @type {string}
     * @memberof AccountApiMarginGetMarginCapitalFlowV1
     */
    readonly symbol?: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiMarginGetMarginCapitalFlowV1
     */
    readonly type?: string

    /**
     * 只支持查询最近90天的数据
     * @type {number}
     * @memberof AccountApiMarginGetMarginCapitalFlowV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginGetMarginCapitalFlowV1
     */
    readonly endTime?: number

    /**
     * 如设置fromId, 将返回id &amp;gt; fromId的数据。否则将返回最新数据
     * @type {number}
     * @memberof AccountApiMarginGetMarginCapitalFlowV1
     */
    readonly fromId?: number

    /**
     * 每次返回的数据条数限制。默认 500; 最大 1000.
     * @type {number}
     * @memberof AccountApiMarginGetMarginCapitalFlowV1
     */
    readonly limit?: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof AccountApiMarginGetMarginCapitalFlowV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginCrossMarginDataV1 operation in AccountApi.
 * @export
 * @interface AccountApiMarginGetMarginCrossMarginDataV1Request
 */
export interface AccountApiMarginGetMarginCrossMarginDataV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginGetMarginCrossMarginDataV1
     */
    readonly timestamp: number

    /**
     * User&amp;#39;s current specific margin data will be returned if vipLevel is omitted
     * @type {number}
     * @memberof AccountApiMarginGetMarginCrossMarginDataV1
     */
    readonly vipLevel?: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiMarginGetMarginCrossMarginDataV1
     */
    readonly coin?: string

    /**
     * No more than &#x60;60000&#x60;
     * @type {number}
     * @memberof AccountApiMarginGetMarginCrossMarginDataV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginIsolatedAccountLimitV1 operation in AccountApi.
 * @export
 * @interface AccountApiMarginGetMarginIsolatedAccountLimitV1Request
 */
export interface AccountApiMarginGetMarginIsolatedAccountLimitV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginGetMarginIsolatedAccountLimitV1
     */
    readonly timestamp: number

    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiMarginGetMarginIsolatedAccountLimitV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginIsolatedAccountV1 operation in AccountApi.
 * @export
 * @interface AccountApiMarginGetMarginIsolatedAccountV1Request
 */
export interface AccountApiMarginGetMarginIsolatedAccountV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginGetMarginIsolatedAccountV1
     */
    readonly timestamp: number

    /**
     * Max 5 symbols can be sent; separated by &amp;#34;,&amp;#34;. e.g. &amp;#34;BTCUSDT,BNBUSDT,ADAUSDT&amp;#34;
     * @type {string}
     * @memberof AccountApiMarginGetMarginIsolatedAccountV1
     */
    readonly symbols?: string

    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiMarginGetMarginIsolatedAccountV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginIsolatedMarginDataV1 operation in AccountApi.
 * @export
 * @interface AccountApiMarginGetMarginIsolatedMarginDataV1Request
 */
export interface AccountApiMarginGetMarginIsolatedMarginDataV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginGetMarginIsolatedMarginDataV1
     */
    readonly timestamp: number

    /**
     * User&amp;#39;s current specific margin data will be returned if vipLevel is omitted
     * @type {number}
     * @memberof AccountApiMarginGetMarginIsolatedMarginDataV1
     */
    readonly vipLevel?: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiMarginGetMarginIsolatedMarginDataV1
     */
    readonly symbol?: string

    /**
     * No more than &#x60;60000&#x60;
     * @type {number}
     * @memberof AccountApiMarginGetMarginIsolatedMarginDataV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginTradeCoeffV1 operation in AccountApi.
 * @export
 * @interface AccountApiMarginGetMarginTradeCoeffV1Request
 */
export interface AccountApiMarginGetMarginTradeCoeffV1Request {
    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginGetMarginTradeCoeffV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiMarginGetMarginTradeCoeffV1
     */
    readonly recvWindow?: number
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI implements AccountApiInterface {
    /**
     * Enable isolated margin account for a specific symbol(Only supports activation of previously disabled accounts).
     * @summary Enable Isolated Margin Account (TRADE)
     * @param {AccountApiMarginCreateMarginIsolatedAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public marginCreateMarginIsolatedAccountV1(requestParameters: AccountApiMarginCreateMarginIsolatedAccountV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).marginCreateMarginIsolatedAccountV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adjust cross margin max leverage
     * @summary Adjust cross margin max leverage (USER_DATA)
     * @param {AccountApiMarginCreateMarginMaxLeverageV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public marginCreateMarginMaxLeverageV1(requestParameters: AccountApiMarginCreateMarginMaxLeverageV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).marginCreateMarginMaxLeverageV1(requestParameters.maxLeverage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24 hours.
     * @summary Disable Isolated Margin Account (TRADE)
     * @param {AccountApiMarginDeleteMarginIsolatedAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public marginDeleteMarginIsolatedAccountV1(requestParameters: AccountApiMarginDeleteMarginIsolatedAccountV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).marginDeleteMarginIsolatedAccountV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get BNB Burn Status
     * @summary Get BNB Burn Status (USER_DATA)
     * @param {AccountApiMarginGetBnbBurnV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public marginGetBnbBurnV1(requestParameters: AccountApiMarginGetBnbBurnV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).marginGetBnbBurnV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Cross Margin Account Details
     * @summary Query Cross Margin Account Details (USER_DATA)
     * @param {AccountApiMarginGetMarginAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public marginGetMarginAccountV1(requestParameters: AccountApiMarginGetMarginAccountV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).marginGetMarginAccountV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Cross Isolated Margin Capital Flow
     * @summary Query Cross Isolated Margin Capital Flow (USER_DATA)
     * @param {AccountApiMarginGetMarginCapitalFlowV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public marginGetMarginCapitalFlowV1(requestParameters: AccountApiMarginGetMarginCapitalFlowV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).marginGetMarginCapitalFlowV1(requestParameters.timestamp, requestParameters.asset, requestParameters.symbol, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.fromId, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get cross margin fee data collection with any vip level or user\'s current specific data as https://www.binance.com/en/margin-fee
     * @summary Query Cross Margin Fee Data (USER_DATA)
     * @param {AccountApiMarginGetMarginCrossMarginDataV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public marginGetMarginCrossMarginDataV1(requestParameters: AccountApiMarginGetMarginCrossMarginDataV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).marginGetMarginCrossMarginDataV1(requestParameters.timestamp, requestParameters.vipLevel, requestParameters.coin, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query enabled isolated margin account limit.
     * @summary Query Enabled Isolated Margin Account Limit (USER_DATA)
     * @param {AccountApiMarginGetMarginIsolatedAccountLimitV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public marginGetMarginIsolatedAccountLimitV1(requestParameters: AccountApiMarginGetMarginIsolatedAccountLimitV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).marginGetMarginIsolatedAccountLimitV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Isolated Margin Account Info
     * @summary Query Isolated Margin Account Info (USER_DATA)
     * @param {AccountApiMarginGetMarginIsolatedAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public marginGetMarginIsolatedAccountV1(requestParameters: AccountApiMarginGetMarginIsolatedAccountV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).marginGetMarginIsolatedAccountV1(requestParameters.timestamp, requestParameters.symbols, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get isolated margin fee data collection with any vip level or user\'s current specific data as https://www.binance.com/en/margin-fee
     * @summary Query Isolated Margin Fee Data (USER_DATA)
     * @param {AccountApiMarginGetMarginIsolatedMarginDataV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public marginGetMarginIsolatedMarginDataV1(requestParameters: AccountApiMarginGetMarginIsolatedMarginDataV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).marginGetMarginIsolatedMarginDataV1(requestParameters.timestamp, requestParameters.vipLevel, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get personal margin level information
     * @summary Get Summary of Margin account (USER_DATA)
     * @param {AccountApiMarginGetMarginTradeCoeffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public marginGetMarginTradeCoeffV1(requestParameters: AccountApiMarginGetMarginTradeCoeffV1Request, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).marginGetMarginTradeCoeffV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

