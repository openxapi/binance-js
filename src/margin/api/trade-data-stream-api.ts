/* tslint:disable */
/* eslint-disable */
/**
 * Binance Margin Trading API
 * OpenAPI specification for Binance exchange - Margin API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { MarginCreateUserDataStreamIsolatedV1Resp } from '../model';
// @ts-ignore
import type { MarginCreateUserDataStreamV1Resp } from '../model';
/**
 * TradeDataStreamApi - axios parameter creator
 * @export
 */
export const TradeDataStreamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Start a new isolated margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
         * @summary Start Isolated Margin User Data Stream (USER_STREAM)
         * @param {string} symbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateUserDataStreamIsolatedV1: async (symbol: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginCreateUserDataStreamIsolatedV1', 'symbol', symbol)
            const localVarPath = `/sapi/v1/userDataStream/isolated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start a new margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
         * @summary Start Margin User Data Stream (USER_STREAM)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateUserDataStreamV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/userDataStream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Close out a isolated margin user data stream.
         * @summary Close Isolated Margin User Data Stream (USER_STREAM)
         * @param {string} symbol 
         * @param {string} listenkey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteUserDataStreamIsolatedV1: async (symbol: string, listenkey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginDeleteUserDataStreamIsolatedV1', 'symbol', symbol)
            // verify required parameter 'listenkey' is not null or undefined
            assertParamExists('marginDeleteUserDataStreamIsolatedV1', 'listenkey', listenkey)
            const localVarPath = `/sapi/v1/userDataStream/isolated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (listenkey !== undefined) {
                localVarQueryParameter['listenkey'] = listenkey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Close out a Margin user data stream.
         * @summary Close Margin User Data Stream (USER_STREAM)
         * @param {string} listenkey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteUserDataStreamV1: async (listenkey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listenkey' is not null or undefined
            assertParamExists('marginDeleteUserDataStreamV1', 'listenkey', listenkey)
            const localVarPath = `/sapi/v1/userDataStream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (listenkey !== undefined) {
                localVarQueryParameter['listenkey'] = listenkey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Keepalive an isolated margin user data stream to prevent a time out.
         * @summary Keepalive Isolated Margin User Data Stream (USER_STREAM)
         * @param {string} listenKey 
         * @param {string} symbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginUpdateUserDataStreamIsolatedV1: async (listenKey: string, symbol: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listenKey' is not null or undefined
            assertParamExists('marginUpdateUserDataStreamIsolatedV1', 'listenKey', listenKey)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginUpdateUserDataStreamIsolatedV1', 'symbol', symbol)
            const localVarPath = `/sapi/v1/userDataStream/isolated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (listenKey !== undefined) { 
                localVarFormParams.set('listenKey', listenKey as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Keepalive a margin user data stream to prevent a time out.
         * @summary Keepalive Margin User Data Stream (USER_STREAM)
         * @param {string} listenKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginUpdateUserDataStreamV1: async (listenKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listenKey' is not null or undefined
            assertParamExists('marginUpdateUserDataStreamV1', 'listenKey', listenKey)
            const localVarPath = `/sapi/v1/userDataStream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (listenKey !== undefined) { 
                localVarFormParams.set('listenKey', listenKey as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TradeDataStreamApi - functional programming interface
 * @export
 */
export const TradeDataStreamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TradeDataStreamApiAxiosParamCreator(configuration)
    return {
        /**
         * Start a new isolated margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
         * @summary Start Isolated Margin User Data Stream (USER_STREAM)
         * @param {string} symbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateUserDataStreamIsolatedV1(symbol: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateUserDataStreamIsolatedV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateUserDataStreamIsolatedV1(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeDataStreamApi.marginCreateUserDataStreamIsolatedV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Start a new margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
         * @summary Start Margin User Data Stream (USER_STREAM)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateUserDataStreamV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateUserDataStreamV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateUserDataStreamV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeDataStreamApi.marginCreateUserDataStreamV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Close out a isolated margin user data stream.
         * @summary Close Isolated Margin User Data Stream (USER_STREAM)
         * @param {string} symbol 
         * @param {string} listenkey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginDeleteUserDataStreamIsolatedV1(symbol: string, listenkey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginDeleteUserDataStreamIsolatedV1(symbol, listenkey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeDataStreamApi.marginDeleteUserDataStreamIsolatedV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Close out a Margin user data stream.
         * @summary Close Margin User Data Stream (USER_STREAM)
         * @param {string} listenkey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginDeleteUserDataStreamV1(listenkey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginDeleteUserDataStreamV1(listenkey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeDataStreamApi.marginDeleteUserDataStreamV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Keepalive an isolated margin user data stream to prevent a time out.
         * @summary Keepalive Isolated Margin User Data Stream (USER_STREAM)
         * @param {string} listenKey 
         * @param {string} symbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginUpdateUserDataStreamIsolatedV1(listenKey: string, symbol: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginUpdateUserDataStreamIsolatedV1(listenKey, symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeDataStreamApi.marginUpdateUserDataStreamIsolatedV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Keepalive a margin user data stream to prevent a time out.
         * @summary Keepalive Margin User Data Stream (USER_STREAM)
         * @param {string} listenKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginUpdateUserDataStreamV1(listenKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginUpdateUserDataStreamV1(listenKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeDataStreamApi.marginUpdateUserDataStreamV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TradeDataStreamApi - factory interface
 * @export
 */
export const TradeDataStreamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TradeDataStreamApiFp(configuration)
    return {
        /**
         * Start a new isolated margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
         * @summary Start Isolated Margin User Data Stream (USER_STREAM)
         * @param {TradeDataStreamApiMarginCreateUserDataStreamIsolatedV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateUserDataStreamIsolatedV1(requestParameters: TradeDataStreamApiMarginCreateUserDataStreamIsolatedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateUserDataStreamIsolatedV1Resp> {
            return localVarFp.marginCreateUserDataStreamIsolatedV1(requestParameters.symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Start a new margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
         * @summary Start Margin User Data Stream (USER_STREAM)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateUserDataStreamV1(options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateUserDataStreamV1Resp> {
            return localVarFp.marginCreateUserDataStreamV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Close out a isolated margin user data stream.
         * @summary Close Isolated Margin User Data Stream (USER_STREAM)
         * @param {TradeDataStreamApiMarginDeleteUserDataStreamIsolatedV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteUserDataStreamIsolatedV1(requestParameters: TradeDataStreamApiMarginDeleteUserDataStreamIsolatedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.marginDeleteUserDataStreamIsolatedV1(requestParameters.symbol, requestParameters.listenkey, options).then((request) => request(axios, basePath));
        },
        /**
         * Close out a Margin user data stream.
         * @summary Close Margin User Data Stream (USER_STREAM)
         * @param {TradeDataStreamApiMarginDeleteUserDataStreamV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteUserDataStreamV1(requestParameters: TradeDataStreamApiMarginDeleteUserDataStreamV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.marginDeleteUserDataStreamV1(requestParameters.listenkey, options).then((request) => request(axios, basePath));
        },
        /**
         * Keepalive an isolated margin user data stream to prevent a time out.
         * @summary Keepalive Isolated Margin User Data Stream (USER_STREAM)
         * @param {TradeDataStreamApiMarginUpdateUserDataStreamIsolatedV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginUpdateUserDataStreamIsolatedV1(requestParameters: TradeDataStreamApiMarginUpdateUserDataStreamIsolatedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.marginUpdateUserDataStreamIsolatedV1(requestParameters.listenKey, requestParameters.symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Keepalive a margin user data stream to prevent a time out.
         * @summary Keepalive Margin User Data Stream (USER_STREAM)
         * @param {TradeDataStreamApiMarginUpdateUserDataStreamV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginUpdateUserDataStreamV1(requestParameters: TradeDataStreamApiMarginUpdateUserDataStreamV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.marginUpdateUserDataStreamV1(requestParameters.listenKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TradeDataStreamApi - interface
 * @export
 * @interface TradeDataStreamApi
 */
export interface TradeDataStreamApiInterface {
    /**
     * Start a new isolated margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
     * @summary Start Isolated Margin User Data Stream (USER_STREAM)
     * @param {TradeDataStreamApiMarginCreateUserDataStreamIsolatedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApiInterface
     */
    marginCreateUserDataStreamIsolatedV1(requestParameters: TradeDataStreamApiMarginCreateUserDataStreamIsolatedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateUserDataStreamIsolatedV1Resp>;

    /**
     * Start a new margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
     * @summary Start Margin User Data Stream (USER_STREAM)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApiInterface
     */
    marginCreateUserDataStreamV1(options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateUserDataStreamV1Resp>;

    /**
     * Close out a isolated margin user data stream.
     * @summary Close Isolated Margin User Data Stream (USER_STREAM)
     * @param {TradeDataStreamApiMarginDeleteUserDataStreamIsolatedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApiInterface
     */
    marginDeleteUserDataStreamIsolatedV1(requestParameters: TradeDataStreamApiMarginDeleteUserDataStreamIsolatedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * Close out a Margin user data stream.
     * @summary Close Margin User Data Stream (USER_STREAM)
     * @param {TradeDataStreamApiMarginDeleteUserDataStreamV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApiInterface
     */
    marginDeleteUserDataStreamV1(requestParameters: TradeDataStreamApiMarginDeleteUserDataStreamV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * Keepalive an isolated margin user data stream to prevent a time out.
     * @summary Keepalive Isolated Margin User Data Stream (USER_STREAM)
     * @param {TradeDataStreamApiMarginUpdateUserDataStreamIsolatedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApiInterface
     */
    marginUpdateUserDataStreamIsolatedV1(requestParameters: TradeDataStreamApiMarginUpdateUserDataStreamIsolatedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * Keepalive a margin user data stream to prevent a time out.
     * @summary Keepalive Margin User Data Stream (USER_STREAM)
     * @param {TradeDataStreamApiMarginUpdateUserDataStreamV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApiInterface
     */
    marginUpdateUserDataStreamV1(requestParameters: TradeDataStreamApiMarginUpdateUserDataStreamV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

}

/**
 * Request parameters for marginCreateUserDataStreamIsolatedV1 operation in TradeDataStreamApi.
 * @export
 * @interface TradeDataStreamApiMarginCreateUserDataStreamIsolatedV1Request
 */
export interface TradeDataStreamApiMarginCreateUserDataStreamIsolatedV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeDataStreamApiMarginCreateUserDataStreamIsolatedV1
     */
    readonly symbol: string
}

/**
 * Request parameters for marginDeleteUserDataStreamIsolatedV1 operation in TradeDataStreamApi.
 * @export
 * @interface TradeDataStreamApiMarginDeleteUserDataStreamIsolatedV1Request
 */
export interface TradeDataStreamApiMarginDeleteUserDataStreamIsolatedV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeDataStreamApiMarginDeleteUserDataStreamIsolatedV1
     */
    readonly symbol: string

    /**
     * 
     * @type {string}
     * @memberof TradeDataStreamApiMarginDeleteUserDataStreamIsolatedV1
     */
    readonly listenkey: string
}

/**
 * Request parameters for marginDeleteUserDataStreamV1 operation in TradeDataStreamApi.
 * @export
 * @interface TradeDataStreamApiMarginDeleteUserDataStreamV1Request
 */
export interface TradeDataStreamApiMarginDeleteUserDataStreamV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeDataStreamApiMarginDeleteUserDataStreamV1
     */
    readonly listenkey: string
}

/**
 * Request parameters for marginUpdateUserDataStreamIsolatedV1 operation in TradeDataStreamApi.
 * @export
 * @interface TradeDataStreamApiMarginUpdateUserDataStreamIsolatedV1Request
 */
export interface TradeDataStreamApiMarginUpdateUserDataStreamIsolatedV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeDataStreamApiMarginUpdateUserDataStreamIsolatedV1
     */
    readonly listenKey: string

    /**
     * 
     * @type {string}
     * @memberof TradeDataStreamApiMarginUpdateUserDataStreamIsolatedV1
     */
    readonly symbol: string
}

/**
 * Request parameters for marginUpdateUserDataStreamV1 operation in TradeDataStreamApi.
 * @export
 * @interface TradeDataStreamApiMarginUpdateUserDataStreamV1Request
 */
export interface TradeDataStreamApiMarginUpdateUserDataStreamV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeDataStreamApiMarginUpdateUserDataStreamV1
     */
    readonly listenKey: string
}

/**
 * TradeDataStreamApi - object-oriented interface
 * @export
 * @class TradeDataStreamApi
 * @extends {BaseAPI}
 */
export class TradeDataStreamApi extends BaseAPI implements TradeDataStreamApiInterface {
    /**
     * Start a new isolated margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
     * @summary Start Isolated Margin User Data Stream (USER_STREAM)
     * @param {TradeDataStreamApiMarginCreateUserDataStreamIsolatedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApi
     */
    public marginCreateUserDataStreamIsolatedV1(requestParameters: TradeDataStreamApiMarginCreateUserDataStreamIsolatedV1Request, options?: RawAxiosRequestConfig) {
        return TradeDataStreamApiFp(this.configuration).marginCreateUserDataStreamIsolatedV1(requestParameters.symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start a new margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
     * @summary Start Margin User Data Stream (USER_STREAM)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApi
     */
    public marginCreateUserDataStreamV1(options?: RawAxiosRequestConfig) {
        return TradeDataStreamApiFp(this.configuration).marginCreateUserDataStreamV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Close out a isolated margin user data stream.
     * @summary Close Isolated Margin User Data Stream (USER_STREAM)
     * @param {TradeDataStreamApiMarginDeleteUserDataStreamIsolatedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApi
     */
    public marginDeleteUserDataStreamIsolatedV1(requestParameters: TradeDataStreamApiMarginDeleteUserDataStreamIsolatedV1Request, options?: RawAxiosRequestConfig) {
        return TradeDataStreamApiFp(this.configuration).marginDeleteUserDataStreamIsolatedV1(requestParameters.symbol, requestParameters.listenkey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Close out a Margin user data stream.
     * @summary Close Margin User Data Stream (USER_STREAM)
     * @param {TradeDataStreamApiMarginDeleteUserDataStreamV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApi
     */
    public marginDeleteUserDataStreamV1(requestParameters: TradeDataStreamApiMarginDeleteUserDataStreamV1Request, options?: RawAxiosRequestConfig) {
        return TradeDataStreamApiFp(this.configuration).marginDeleteUserDataStreamV1(requestParameters.listenkey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Keepalive an isolated margin user data stream to prevent a time out.
     * @summary Keepalive Isolated Margin User Data Stream (USER_STREAM)
     * @param {TradeDataStreamApiMarginUpdateUserDataStreamIsolatedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApi
     */
    public marginUpdateUserDataStreamIsolatedV1(requestParameters: TradeDataStreamApiMarginUpdateUserDataStreamIsolatedV1Request, options?: RawAxiosRequestConfig) {
        return TradeDataStreamApiFp(this.configuration).marginUpdateUserDataStreamIsolatedV1(requestParameters.listenKey, requestParameters.symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Keepalive a margin user data stream to prevent a time out.
     * @summary Keepalive Margin User Data Stream (USER_STREAM)
     * @param {TradeDataStreamApiMarginUpdateUserDataStreamV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeDataStreamApi
     */
    public marginUpdateUserDataStreamV1(requestParameters: TradeDataStreamApiMarginUpdateUserDataStreamV1Request, options?: RawAxiosRequestConfig) {
        return TradeDataStreamApiFp(this.configuration).marginUpdateUserDataStreamV1(requestParameters.listenKey, options).then((request) => request(this.axios, this.basePath));
    }
}

