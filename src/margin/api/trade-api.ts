/* tslint:disable */
/* eslint-disable */
/**
 * Binance Margin Trading API
 * OpenAPI specification for Binance exchange - Margin API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { MarginCreateMarginApiKeyV1Resp } from '../model';
// @ts-ignore
import type { MarginCreateMarginExchangeSmallLiabilityV1Resp } from '../model';
// @ts-ignore
import type { MarginCreateMarginManualLiquidationV1Resp } from '../model';
// @ts-ignore
import type { MarginCreateMarginOrderOcoV1Resp } from '../model';
// @ts-ignore
import type { MarginCreateMarginOrderOtoV1Resp } from '../model';
// @ts-ignore
import type { MarginCreateMarginOrderOtocoV1Resp } from '../model';
// @ts-ignore
import type { MarginCreateMarginOrderV1Resp } from '../model';
// @ts-ignore
import type { MarginDeleteMarginOpenOrdersV1RespItem } from '../model';
// @ts-ignore
import type { MarginDeleteMarginOrderListV1Resp } from '../model';
// @ts-ignore
import type { MarginDeleteMarginOrderV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginAllOrderListV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginAllOrdersV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginApiKeyListV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginApiKeyV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginExchangeSmallLiabilityHistoryV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginExchangeSmallLiabilityV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginForceLiquidationRecV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginMyTradesV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginOpenOrderListV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginOpenOrdersV1RespItem } from '../model';
// @ts-ignore
import type { MarginGetMarginOrderListV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginOrderV1Resp } from '../model';
// @ts-ignore
import type { MarginGetMarginRateLimitOrderV1RespItem } from '../model';
/**
 * TradeApi - axios parameter creator
 * @export
 */
export const TradeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Binance Margin offers low-latency trading through a special key, available exclusively to users with VIP level 4 or higher. **
         * @summary Create Special Key(Low-Latency Trading)(TRADE)
         * @param {string} apiName 
         * @param {number} timestamp 
         * @param {string} [ip] 
         * @param {string} [permissionMode] 
         * @param {string} [publicKey] 
         * @param {number} [recvWindow] 
         * @param {string} [symbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginApiKeyV1: async (apiName: string, timestamp: number, ip?: string, permissionMode?: string, publicKey?: string, recvWindow?: number, symbol?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiName' is not null or undefined
            assertParamExists('marginCreateMarginApiKeyV1', 'apiName', apiName)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginCreateMarginApiKeyV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/apiKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (apiName !== undefined) { 
                localVarFormParams.set('apiName', apiName as any);
            }
    
            if (ip !== undefined) { 
                localVarFormParams.set('ip', ip as any);
            }
    
            if (permissionMode !== undefined) { 
                localVarFormParams.set('permissionMode', permissionMode as any);
            }
    
            if (publicKey !== undefined) { 
                localVarFormParams.set('publicKey', publicKey as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Small Liability Exchange
         * @summary Small Liability Exchange (MARGIN)
         * @param {Array<string>} assetNames 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginExchangeSmallLiabilityV1: async (assetNames: Array<string>, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetNames' is not null or undefined
            assertParamExists('marginCreateMarginExchangeSmallLiabilityV1', 'assetNames', assetNames)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginCreateMarginExchangeSmallLiabilityV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/exchange-small-liability`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            if (assetNames) {
                localVarFormParams.set('assetNames', assetNames.join(COLLECTION_FORMATS.csv));
            }

    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Margin Manual Liquidation
         * @summary Margin Manual Liquidation(MARGIN)
         * @param {number} timestamp 
         * @param {string} type 
         * @param {number} [recvWindow] 
         * @param {string} [symbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginManualLiquidationV1: async (timestamp: number, type: string, recvWindow?: number, symbol?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginCreateMarginManualLiquidationV1', 'timestamp', timestamp)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('marginCreateMarginManualLiquidationV1', 'type', type)
            const localVarPath = `/sapi/v1/margin/manual-liquidation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send in a new OCO for a margin account
         * @summary Margin Account New OCO (TRADE)
         * @param {string} price 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} stopPrice 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {boolean} [autoRepayAtCancel] 
         * @param {string} [isIsolated] 
         * @param {string} [limitClientOrderId] 
         * @param {string} [limitIcebergQty] 
         * @param {string} [listClientOrderId] 
         * @param {string} [newOrderRespType] 
         * @param {number} [recvWindow] 
         * @param {string} [selfTradePreventionMode] 
         * @param {string} [sideEffectType] 
         * @param {string} [stopClientOrderId] 
         * @param {string} [stopIcebergQty] 
         * @param {string} [stopLimitPrice] 
         * @param {string} [stopLimitTimeInForce] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginOrderOcoV1: async (price: string, quantity: string, side: string, stopPrice: string, symbol: string, timestamp: number, autoRepayAtCancel?: boolean, isIsolated?: string, limitClientOrderId?: string, limitIcebergQty?: string, listClientOrderId?: string, newOrderRespType?: string, recvWindow?: number, selfTradePreventionMode?: string, sideEffectType?: string, stopClientOrderId?: string, stopIcebergQty?: string, stopLimitPrice?: string, stopLimitTimeInForce?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'price' is not null or undefined
            assertParamExists('marginCreateMarginOrderOcoV1', 'price', price)
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('marginCreateMarginOrderOcoV1', 'quantity', quantity)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('marginCreateMarginOrderOcoV1', 'side', side)
            // verify required parameter 'stopPrice' is not null or undefined
            assertParamExists('marginCreateMarginOrderOcoV1', 'stopPrice', stopPrice)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginCreateMarginOrderOcoV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginCreateMarginOrderOcoV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/order/oco`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (autoRepayAtCancel !== undefined) { 
                localVarFormParams.set('autoRepayAtCancel', autoRepayAtCancel as any);
            }
    
            if (isIsolated !== undefined) { 
                localVarFormParams.set('isIsolated', isIsolated as any);
            }
    
            if (limitClientOrderId !== undefined) { 
                localVarFormParams.set('limitClientOrderId', limitClientOrderId as any);
            }
    
            if (limitIcebergQty !== undefined) { 
                localVarFormParams.set('limitIcebergQty', limitIcebergQty as any);
            }
    
            if (listClientOrderId !== undefined) { 
                localVarFormParams.set('listClientOrderId', listClientOrderId as any);
            }
    
            if (newOrderRespType !== undefined) { 
                localVarFormParams.set('newOrderRespType', newOrderRespType as any);
            }
    
            if (price !== undefined) { 
                localVarFormParams.set('price', price as any);
            }
    
            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (selfTradePreventionMode !== undefined) { 
                localVarFormParams.set('selfTradePreventionMode', selfTradePreventionMode as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.set('side', side as any);
            }
    
            if (sideEffectType !== undefined) { 
                localVarFormParams.set('sideEffectType', sideEffectType as any);
            }
    
            if (stopClientOrderId !== undefined) { 
                localVarFormParams.set('stopClientOrderId', stopClientOrderId as any);
            }
    
            if (stopIcebergQty !== undefined) { 
                localVarFormParams.set('stopIcebergQty', stopIcebergQty as any);
            }
    
            if (stopLimitPrice !== undefined) { 
                localVarFormParams.set('stopLimitPrice', stopLimitPrice as any);
            }
    
            if (stopLimitTimeInForce !== undefined) { 
                localVarFormParams.set('stopLimitTimeInForce', stopLimitTimeInForce as any);
            }
    
            if (stopPrice !== undefined) { 
                localVarFormParams.set('stopPrice', stopPrice as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a new OTO order for margin account:
         * @summary Margin Account New OTO (TRADE)
         * @param {string} pendingQuantity 
         * @param {string} pendingSide 
         * @param {string} pendingType 
         * @param {string} symbol 
         * @param {string} workingIcebergQty 
         * @param {string} workingPrice 
         * @param {string} workingQuantity 
         * @param {string} workingSide 
         * @param {MarginCreateMarginOrderOtoV1WorkingTypeEnum} workingType 
         * @param {boolean} [autoRepayAtCancel] 
         * @param {string} [isIsolated] 
         * @param {string} [listClientOrderId] 
         * @param {string} [newOrderRespType] 
         * @param {string} [pendingClientOrderId] 
         * @param {string} [pendingIcebergQty] 
         * @param {string} [pendingPrice] 
         * @param {string} [pendingStopPrice] 
         * @param {string} [pendingTimeInForce] 
         * @param {string} [pendingTrailingDelta] 
         * @param {string} [selfTradePreventionMode] 
         * @param {string} [sideEffectType] 
         * @param {string} [workingClientOrderId] 
         * @param {string} [workingTimeInForce] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginOrderOtoV1: async (pendingQuantity: string, pendingSide: string, pendingType: string, symbol: string, workingIcebergQty: string, workingPrice: string, workingQuantity: string, workingSide: string, workingType: MarginCreateMarginOrderOtoV1WorkingTypeEnum, autoRepayAtCancel?: boolean, isIsolated?: string, listClientOrderId?: string, newOrderRespType?: string, pendingClientOrderId?: string, pendingIcebergQty?: string, pendingPrice?: string, pendingStopPrice?: string, pendingTimeInForce?: string, pendingTrailingDelta?: string, selfTradePreventionMode?: string, sideEffectType?: string, workingClientOrderId?: string, workingTimeInForce?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pendingQuantity' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtoV1', 'pendingQuantity', pendingQuantity)
            // verify required parameter 'pendingSide' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtoV1', 'pendingSide', pendingSide)
            // verify required parameter 'pendingType' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtoV1', 'pendingType', pendingType)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtoV1', 'symbol', symbol)
            // verify required parameter 'workingIcebergQty' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtoV1', 'workingIcebergQty', workingIcebergQty)
            // verify required parameter 'workingPrice' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtoV1', 'workingPrice', workingPrice)
            // verify required parameter 'workingQuantity' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtoV1', 'workingQuantity', workingQuantity)
            // verify required parameter 'workingSide' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtoV1', 'workingSide', workingSide)
            // verify required parameter 'workingType' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtoV1', 'workingType', workingType)
            const localVarPath = `/sapi/v1/margin/order/oto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (autoRepayAtCancel !== undefined) { 
                localVarFormParams.set('autoRepayAtCancel', autoRepayAtCancel as any);
            }
    
            if (isIsolated !== undefined) { 
                localVarFormParams.set('isIsolated', isIsolated as any);
            }
    
            if (listClientOrderId !== undefined) { 
                localVarFormParams.set('listClientOrderId', listClientOrderId as any);
            }
    
            if (newOrderRespType !== undefined) { 
                localVarFormParams.set('newOrderRespType', newOrderRespType as any);
            }
    
            if (pendingClientOrderId !== undefined) { 
                localVarFormParams.set('pendingClientOrderId', pendingClientOrderId as any);
            }
    
            if (pendingIcebergQty !== undefined) { 
                localVarFormParams.set('pendingIcebergQty', pendingIcebergQty as any);
            }
    
            if (pendingPrice !== undefined) { 
                localVarFormParams.set('pendingPrice', pendingPrice as any);
            }
    
            if (pendingQuantity !== undefined) { 
                localVarFormParams.set('pendingQuantity', pendingQuantity as any);
            }
    
            if (pendingSide !== undefined) { 
                localVarFormParams.set('pendingSide', pendingSide as any);
            }
    
            if (pendingStopPrice !== undefined) { 
                localVarFormParams.set('pendingStopPrice', pendingStopPrice as any);
            }
    
            if (pendingTimeInForce !== undefined) { 
                localVarFormParams.set('pendingTimeInForce', pendingTimeInForce as any);
            }
    
            if (pendingTrailingDelta !== undefined) { 
                localVarFormParams.set('pendingTrailingDelta', pendingTrailingDelta as any);
            }
    
            if (pendingType !== undefined) { 
                localVarFormParams.set('pendingType', pendingType as any);
            }
    
            if (selfTradePreventionMode !== undefined) { 
                localVarFormParams.set('selfTradePreventionMode', selfTradePreventionMode as any);
            }
    
            if (sideEffectType !== undefined) { 
                localVarFormParams.set('sideEffectType', sideEffectType as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (workingClientOrderId !== undefined) { 
                localVarFormParams.set('workingClientOrderId', workingClientOrderId as any);
            }
    
            if (workingIcebergQty !== undefined) { 
                localVarFormParams.set('workingIcebergQty', workingIcebergQty as any);
            }
    
            if (workingPrice !== undefined) { 
                localVarFormParams.set('workingPrice', workingPrice as any);
            }
    
            if (workingQuantity !== undefined) { 
                localVarFormParams.set('workingQuantity', workingQuantity as any);
            }
    
            if (workingSide !== undefined) { 
                localVarFormParams.set('workingSide', workingSide as any);
            }
    
            if (workingTimeInForce !== undefined) { 
                localVarFormParams.set('workingTimeInForce', workingTimeInForce as any);
            }
    
            if (workingType !== undefined) { 
                localVarFormParams.set('workingType', workingType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a new OTOCO order for margin account：
         * @summary Margin Account New OTOCO (TRADE)
         * @param {MarginCreateMarginOrderOtocoV1PendingAboveTypeEnum} pendingAboveType 
         * @param {string} pendingQuantity 
         * @param {string} pendingSide 
         * @param {string} symbol 
         * @param {string} workingPrice 
         * @param {string} workingQuantity 
         * @param {string} workingSide 
         * @param {MarginCreateMarginOrderOtocoV1WorkingTypeEnum} workingType 
         * @param {boolean} [autoRepayAtCancel] 
         * @param {string} [isIsolated] 
         * @param {string} [listClientOrderId] 
         * @param {string} [newOrderRespType] 
         * @param {string} [pendingAboveClientOrderId] 
         * @param {string} [pendingAboveIcebergQty] 
         * @param {string} [pendingAbovePrice] 
         * @param {string} [pendingAboveStopPrice] 
         * @param {string} [pendingAboveTimeInForce] 
         * @param {string} [pendingAboveTrailingDelta] 
         * @param {string} [pendingBelowClientOrderId] 
         * @param {string} [pendingBelowIcebergQty] 
         * @param {string} [pendingBelowPrice] 
         * @param {string} [pendingBelowStopPrice] 
         * @param {string} [pendingBelowTimeInForce] 
         * @param {string} [pendingBelowTrailingDelta] 
         * @param {MarginCreateMarginOrderOtocoV1PendingBelowTypeEnum} [pendingBelowType] 
         * @param {string} [selfTradePreventionMode] 
         * @param {string} [sideEffectType] 
         * @param {string} [workingClientOrderId] 
         * @param {string} [workingIcebergQty] 
         * @param {string} [workingTimeInForce] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginOrderOtocoV1: async (pendingAboveType: MarginCreateMarginOrderOtocoV1PendingAboveTypeEnum, pendingQuantity: string, pendingSide: string, symbol: string, workingPrice: string, workingQuantity: string, workingSide: string, workingType: MarginCreateMarginOrderOtocoV1WorkingTypeEnum, autoRepayAtCancel?: boolean, isIsolated?: string, listClientOrderId?: string, newOrderRespType?: string, pendingAboveClientOrderId?: string, pendingAboveIcebergQty?: string, pendingAbovePrice?: string, pendingAboveStopPrice?: string, pendingAboveTimeInForce?: string, pendingAboveTrailingDelta?: string, pendingBelowClientOrderId?: string, pendingBelowIcebergQty?: string, pendingBelowPrice?: string, pendingBelowStopPrice?: string, pendingBelowTimeInForce?: string, pendingBelowTrailingDelta?: string, pendingBelowType?: MarginCreateMarginOrderOtocoV1PendingBelowTypeEnum, selfTradePreventionMode?: string, sideEffectType?: string, workingClientOrderId?: string, workingIcebergQty?: string, workingTimeInForce?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pendingAboveType' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtocoV1', 'pendingAboveType', pendingAboveType)
            // verify required parameter 'pendingQuantity' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtocoV1', 'pendingQuantity', pendingQuantity)
            // verify required parameter 'pendingSide' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtocoV1', 'pendingSide', pendingSide)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtocoV1', 'symbol', symbol)
            // verify required parameter 'workingPrice' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtocoV1', 'workingPrice', workingPrice)
            // verify required parameter 'workingQuantity' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtocoV1', 'workingQuantity', workingQuantity)
            // verify required parameter 'workingSide' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtocoV1', 'workingSide', workingSide)
            // verify required parameter 'workingType' is not null or undefined
            assertParamExists('marginCreateMarginOrderOtocoV1', 'workingType', workingType)
            const localVarPath = `/sapi/v1/margin/order/otoco`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (autoRepayAtCancel !== undefined) { 
                localVarFormParams.set('autoRepayAtCancel', autoRepayAtCancel as any);
            }
    
            if (isIsolated !== undefined) { 
                localVarFormParams.set('isIsolated', isIsolated as any);
            }
    
            if (listClientOrderId !== undefined) { 
                localVarFormParams.set('listClientOrderId', listClientOrderId as any);
            }
    
            if (newOrderRespType !== undefined) { 
                localVarFormParams.set('newOrderRespType', newOrderRespType as any);
            }
    
            if (pendingAboveClientOrderId !== undefined) { 
                localVarFormParams.set('pendingAboveClientOrderId', pendingAboveClientOrderId as any);
            }
    
            if (pendingAboveIcebergQty !== undefined) { 
                localVarFormParams.set('pendingAboveIcebergQty', pendingAboveIcebergQty as any);
            }
    
            if (pendingAbovePrice !== undefined) { 
                localVarFormParams.set('pendingAbovePrice', pendingAbovePrice as any);
            }
    
            if (pendingAboveStopPrice !== undefined) { 
                localVarFormParams.set('pendingAboveStopPrice', pendingAboveStopPrice as any);
            }
    
            if (pendingAboveTimeInForce !== undefined) { 
                localVarFormParams.set('pendingAboveTimeInForce', pendingAboveTimeInForce as any);
            }
    
            if (pendingAboveTrailingDelta !== undefined) { 
                localVarFormParams.set('pendingAboveTrailingDelta', pendingAboveTrailingDelta as any);
            }
    
            if (pendingAboveType !== undefined) { 
                localVarFormParams.set('pendingAboveType', pendingAboveType as any);
            }
    
            if (pendingBelowClientOrderId !== undefined) { 
                localVarFormParams.set('pendingBelowClientOrderId', pendingBelowClientOrderId as any);
            }
    
            if (pendingBelowIcebergQty !== undefined) { 
                localVarFormParams.set('pendingBelowIcebergQty', pendingBelowIcebergQty as any);
            }
    
            if (pendingBelowPrice !== undefined) { 
                localVarFormParams.set('pendingBelowPrice', pendingBelowPrice as any);
            }
    
            if (pendingBelowStopPrice !== undefined) { 
                localVarFormParams.set('pendingBelowStopPrice', pendingBelowStopPrice as any);
            }
    
            if (pendingBelowTimeInForce !== undefined) { 
                localVarFormParams.set('pendingBelowTimeInForce', pendingBelowTimeInForce as any);
            }
    
            if (pendingBelowTrailingDelta !== undefined) { 
                localVarFormParams.set('pendingBelowTrailingDelta', pendingBelowTrailingDelta as any);
            }
    
            if (pendingBelowType !== undefined) { 
                localVarFormParams.set('pendingBelowType', pendingBelowType as any);
            }
    
            if (pendingQuantity !== undefined) { 
                localVarFormParams.set('pendingQuantity', pendingQuantity as any);
            }
    
            if (pendingSide !== undefined) { 
                localVarFormParams.set('pendingSide', pendingSide as any);
            }
    
            if (selfTradePreventionMode !== undefined) { 
                localVarFormParams.set('selfTradePreventionMode', selfTradePreventionMode as any);
            }
    
            if (sideEffectType !== undefined) { 
                localVarFormParams.set('sideEffectType', sideEffectType as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (workingClientOrderId !== undefined) { 
                localVarFormParams.set('workingClientOrderId', workingClientOrderId as any);
            }
    
            if (workingIcebergQty !== undefined) { 
                localVarFormParams.set('workingIcebergQty', workingIcebergQty as any);
            }
    
            if (workingPrice !== undefined) { 
                localVarFormParams.set('workingPrice', workingPrice as any);
            }
    
            if (workingQuantity !== undefined) { 
                localVarFormParams.set('workingQuantity', workingQuantity as any);
            }
    
            if (workingSide !== undefined) { 
                localVarFormParams.set('workingSide', workingSide as any);
            }
    
            if (workingTimeInForce !== undefined) { 
                localVarFormParams.set('workingTimeInForce', workingTimeInForce as any);
            }
    
            if (workingType !== undefined) { 
                localVarFormParams.set('workingType', workingType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a new order for margin account.
         * @summary Margin Account New Order (TRADE)
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} type 
         * @param {boolean} [autoRepayAtCancel] 
         * @param {string} [icebergQty] 
         * @param {string} [isIsolated] 
         * @param {string} [newClientOrderId] 
         * @param {string} [newOrderRespType] 
         * @param {string} [price] 
         * @param {string} [quantity] 
         * @param {string} [quoteOrderQty] 
         * @param {number} [recvWindow] 
         * @param {string} [selfTradePreventionMode] 
         * @param {string} [sideEffectType] 
         * @param {string} [stopPrice] 
         * @param {string} [timeInForce] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginOrderV1: async (side: string, symbol: string, timestamp: number, type: string, autoRepayAtCancel?: boolean, icebergQty?: string, isIsolated?: string, newClientOrderId?: string, newOrderRespType?: string, price?: string, quantity?: string, quoteOrderQty?: string, recvWindow?: number, selfTradePreventionMode?: string, sideEffectType?: string, stopPrice?: string, timeInForce?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'side' is not null or undefined
            assertParamExists('marginCreateMarginOrderV1', 'side', side)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginCreateMarginOrderV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginCreateMarginOrderV1', 'timestamp', timestamp)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('marginCreateMarginOrderV1', 'type', type)
            const localVarPath = `/sapi/v1/margin/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (autoRepayAtCancel !== undefined) { 
                localVarFormParams.set('autoRepayAtCancel', autoRepayAtCancel as any);
            }
    
            if (icebergQty !== undefined) { 
                localVarFormParams.set('icebergQty', icebergQty as any);
            }
    
            if (isIsolated !== undefined) { 
                localVarFormParams.set('isIsolated', isIsolated as any);
            }
    
            if (newClientOrderId !== undefined) { 
                localVarFormParams.set('newClientOrderId', newClientOrderId as any);
            }
    
            if (newOrderRespType !== undefined) { 
                localVarFormParams.set('newOrderRespType', newOrderRespType as any);
            }
    
            if (price !== undefined) { 
                localVarFormParams.set('price', price as any);
            }
    
            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }
    
            if (quoteOrderQty !== undefined) { 
                localVarFormParams.set('quoteOrderQty', quoteOrderQty as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (selfTradePreventionMode !== undefined) { 
                localVarFormParams.set('selfTradePreventionMode', selfTradePreventionMode as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.set('side', side as any);
            }
    
            if (sideEffectType !== undefined) { 
                localVarFormParams.set('sideEffectType', sideEffectType as any);
            }
    
            if (stopPrice !== undefined) { 
                localVarFormParams.set('stopPrice', stopPrice as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timeInForce !== undefined) { 
                localVarFormParams.set('timeInForce', timeInForce as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This only applies to Special Key for Low Latency Trading.
         * @summary Delete Special Key(Low-Latency Trading)(TRADE)
         * @param {number} timestamp 
         * @param {string} [apiKey] 
         * @param {string} [apiName] 
         * @param {string} [symbol] isolated margin pair
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteMarginApiKeyV1: async (timestamp: number, apiKey?: string, apiName?: string, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginDeleteMarginApiKeyV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/apiKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (apiKey !== undefined) {
                localVarQueryParameter['apiKey'] = apiKey;
            }

            if (apiName !== undefined) {
                localVarQueryParameter['apiName'] = apiName;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels all active orders on a symbol for margin account. This includes OCO orders.
         * @summary Margin Account Cancel all Open Orders on a Symbol (TRADE)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteMarginOpenOrdersV1: async (symbol: string, timestamp: number, isIsolated?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginDeleteMarginOpenOrdersV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginDeleteMarginOpenOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/openOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an entire Order List for a margin account.
         * @summary Margin Account Cancel OCO (TRADE)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [orderListId] Either &#x60;orderListId&#x60; or &#x60;listClientOrderId&#x60; must be provided
         * @param {string} [listClientOrderId] Either &#x60;orderListId&#x60; or &#x60;listClientOrderId&#x60; must be provided
         * @param {string} [newClientOrderId] Used to uniquely identify this cancel. Automatically generated by default
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteMarginOrderListV1: async (symbol: string, timestamp: number, isIsolated?: string, orderListId?: number, listClientOrderId?: string, newClientOrderId?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginDeleteMarginOrderListV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginDeleteMarginOrderListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/orderList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (orderListId !== undefined) {
                localVarQueryParameter['orderListId'] = orderListId;
            }

            if (listClientOrderId !== undefined) {
                localVarQueryParameter['listClientOrderId'] = listClientOrderId;
            }

            if (newClientOrderId !== undefined) {
                localVarQueryParameter['newClientOrderId'] = newClientOrderId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an active order for margin account.
         * @summary Margin Account Cancel Order (TRADE)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [orderId] 
         * @param {string} [origClientOrderId] 
         * @param {string} [newClientOrderId] Used to uniquely identify this cancel. Automatically generated by default.
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteMarginOrderV1: async (symbol: string, timestamp: number, isIsolated?: string, orderId?: number, origClientOrderId?: string, newClientOrderId?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginDeleteMarginOrderV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginDeleteMarginOrderV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (origClientOrderId !== undefined) {
                localVarQueryParameter['origClientOrderId'] = origClientOrderId;
            }

            if (newClientOrderId !== undefined) {
                localVarQueryParameter['newClientOrderId'] = newClientOrderId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all OCO for a specific margin account based on provided optional parameters
         * @summary Query Margin Account\'s all OCO (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {string} [symbol] mandatory for isolated margin, not supported for cross margin
         * @param {number} [fromId] If supplied, neither &#x60;startTime&#x60; or &#x60;endTime&#x60; can be provided
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default Value: 500; Max Value: 1000
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAllOrderListV1: async (timestamp: number, isIsolated?: string, symbol?: string, fromId?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginAllOrderListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/allOrderList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['fromId'] = fromId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Margin Account\'s All Orders
         * @summary Query Margin Account\'s All Orders (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [orderId] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 500; max 500.
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAllOrdersV1: async (symbol: string, timestamp: number, isIsolated?: string, orderId?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginGetMarginAllOrdersV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginAllOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/allOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This only applies to Special Key for Low Latency Trading.
         * @summary Query Special key List(Low Latency Trading)(TRADE)
         * @param {number} timestamp 
         * @param {string} [symbol] isolated margin pair
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginApiKeyListV1: async (timestamp: number, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginApiKeyListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/api-key-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Special Key Information.
         * @summary Query Special key(Low Latency Trading)(TRADE)
         * @param {string} apiKey 
         * @param {number} timestamp 
         * @param {string} [symbol] isolated margin pair
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginApiKeyV1: async (apiKey: string, timestamp: number, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('marginGetMarginApiKeyV1', 'apiKey', apiKey)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginApiKeyV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/apiKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (apiKey !== undefined) {
                localVarQueryParameter['apiKey'] = apiKey;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Small liability Exchange History
         * @summary Get Small Liability Exchange History (USER_DATA)
         * @param {number} current Currently querying page. Start from 1. Default:1
         * @param {number} size Default:10, Max:100
         * @param {number} timestamp 
         * @param {number} [startTime] Default: 30 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginExchangeSmallLiabilityHistoryV1: async (current: number, size: number, timestamp: number, startTime?: number, endTime?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'current' is not null or undefined
            assertParamExists('marginGetMarginExchangeSmallLiabilityHistoryV1', 'current', current)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('marginGetMarginExchangeSmallLiabilityHistoryV1', 'size', size)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginExchangeSmallLiabilityHistoryV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/exchange-small-liability-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the coins which can be small liability exchange
         * @summary Get Small Liability Exchange Coin List (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginExchangeSmallLiabilityV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginExchangeSmallLiabilityV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/exchange-small-liability`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Force Liquidation Record
         * @summary Get Force Liquidation Record (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {string} [isolatedSymbol] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginForceLiquidationRecV1: async (timestamp: number, startTime?: number, endTime?: number, isolatedSymbol?: string, current?: number, size?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginForceLiquidationRecV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/forceLiquidationRec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (isolatedSymbol !== undefined) {
                localVarQueryParameter['isolatedSymbol'] = isolatedSymbol;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Margin Account\'s Trade List
         * @summary Query Margin Account\'s Trade List (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [orderId] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [fromId] TradeId to fetch from. Default gets most recent trades.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginMyTradesV1: async (symbol: string, timestamp: number, isIsolated?: string, orderId?: number, startTime?: number, endTime?: number, fromId?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginGetMarginMyTradesV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginMyTradesV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/myTrades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (fromId !== undefined) {
                localVarQueryParameter['fromId'] = fromId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Margin Account\'s Open OCO
         * @summary Query Margin Account\'s Open OCO (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {string} [symbol] mandatory for isolated margin, not supported for cross margin
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginOpenOrderListV1: async (timestamp: number, isIsolated?: string, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginOpenOrderListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/openOrderList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Margin Account\'s Open Orders
         * @summary Query Margin Account\'s Open Orders (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginOpenOrdersV1: async (timestamp: number, symbol?: string, isIsolated?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginOpenOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/openOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific OCO based on provided optional parameters
         * @summary Query Margin Account\'s OCO (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {string} [symbol] mandatory for isolated margin, not supported for cross margin
         * @param {number} [orderListId] Either &#x60;orderListId&#x60; or &#x60;origClientOrderId&#x60; must be provided
         * @param {string} [origClientOrderId] Either &#x60;orderListId&#x60; or &#x60;origClientOrderId&#x60; must be provided
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginOrderListV1: async (timestamp: number, isIsolated?: string, symbol?: string, orderListId?: number, origClientOrderId?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginOrderListV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/orderList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (orderListId !== undefined) {
                localVarQueryParameter['orderListId'] = orderListId;
            }

            if (origClientOrderId !== undefined) {
                localVarQueryParameter['origClientOrderId'] = origClientOrderId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Margin Account\'s Order
         * @summary Query Margin Account\'s Order (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [orderId] 
         * @param {string} [origClientOrderId] 
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginOrderV1: async (symbol: string, timestamp: number, isIsolated?: string, orderId?: number, origClientOrderId?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginGetMarginOrderV1', 'symbol', symbol)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginOrderV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (origClientOrderId !== undefined) {
                localVarQueryParameter['origClientOrderId'] = origClientOrderId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays the user\'s current margin order count usage for all intervals.
         * @summary Query Current Margin Order Count Usage (TRADE)
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {string} [symbol] isolated symbol, mandatory for isolated margin
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginRateLimitOrderV1: async (timestamp: number, isIsolated?: string, symbol?: string, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginGetMarginRateLimitOrderV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/rateLimit/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (isIsolated !== undefined) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit ip restriction. This only applies to Special Key for Low Latency Trading.
         * @summary Edit ip for Special Key(Low-Latency Trading)(TRADE)
         * @param {string} apiKey 
         * @param {string} ip 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {string} [symbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginUpdateMarginApiKeyIpV1: async (apiKey: string, ip: string, timestamp: number, recvWindow?: number, symbol?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('marginUpdateMarginApiKeyIpV1', 'apiKey', apiKey)
            // verify required parameter 'ip' is not null or undefined
            assertParamExists('marginUpdateMarginApiKeyIpV1', 'ip', ip)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('marginUpdateMarginApiKeyIpV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/margin/apiKey/ip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (apiKey !== undefined) { 
                localVarFormParams.set('apiKey', apiKey as any);
            }
    
            if (ip !== undefined) { 
                localVarFormParams.set('ip', ip as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (symbol !== undefined) { 
                localVarFormParams.set('symbol', symbol as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TradeApi - functional programming interface
 * @export
 */
export const TradeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TradeApiAxiosParamCreator(configuration)
    return {
        /**
         * **Binance Margin offers low-latency trading through a special key, available exclusively to users with VIP level 4 or higher. **
         * @summary Create Special Key(Low-Latency Trading)(TRADE)
         * @param {string} apiName 
         * @param {number} timestamp 
         * @param {string} [ip] 
         * @param {string} [permissionMode] 
         * @param {string} [publicKey] 
         * @param {number} [recvWindow] 
         * @param {string} [symbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateMarginApiKeyV1(apiName: string, timestamp: number, ip?: string, permissionMode?: string, publicKey?: string, recvWindow?: number, symbol?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateMarginApiKeyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateMarginApiKeyV1(apiName, timestamp, ip, permissionMode, publicKey, recvWindow, symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginCreateMarginApiKeyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Small Liability Exchange
         * @summary Small Liability Exchange (MARGIN)
         * @param {Array<string>} assetNames 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateMarginExchangeSmallLiabilityV1(assetNames: Array<string>, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateMarginExchangeSmallLiabilityV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateMarginExchangeSmallLiabilityV1(assetNames, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginCreateMarginExchangeSmallLiabilityV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Margin Manual Liquidation
         * @summary Margin Manual Liquidation(MARGIN)
         * @param {number} timestamp 
         * @param {string} type 
         * @param {number} [recvWindow] 
         * @param {string} [symbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateMarginManualLiquidationV1(timestamp: number, type: string, recvWindow?: number, symbol?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateMarginManualLiquidationV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateMarginManualLiquidationV1(timestamp, type, recvWindow, symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginCreateMarginManualLiquidationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send in a new OCO for a margin account
         * @summary Margin Account New OCO (TRADE)
         * @param {string} price 
         * @param {string} quantity 
         * @param {string} side 
         * @param {string} stopPrice 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {boolean} [autoRepayAtCancel] 
         * @param {string} [isIsolated] 
         * @param {string} [limitClientOrderId] 
         * @param {string} [limitIcebergQty] 
         * @param {string} [listClientOrderId] 
         * @param {string} [newOrderRespType] 
         * @param {number} [recvWindow] 
         * @param {string} [selfTradePreventionMode] 
         * @param {string} [sideEffectType] 
         * @param {string} [stopClientOrderId] 
         * @param {string} [stopIcebergQty] 
         * @param {string} [stopLimitPrice] 
         * @param {string} [stopLimitTimeInForce] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateMarginOrderOcoV1(price: string, quantity: string, side: string, stopPrice: string, symbol: string, timestamp: number, autoRepayAtCancel?: boolean, isIsolated?: string, limitClientOrderId?: string, limitIcebergQty?: string, listClientOrderId?: string, newOrderRespType?: string, recvWindow?: number, selfTradePreventionMode?: string, sideEffectType?: string, stopClientOrderId?: string, stopIcebergQty?: string, stopLimitPrice?: string, stopLimitTimeInForce?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateMarginOrderOcoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateMarginOrderOcoV1(price, quantity, side, stopPrice, symbol, timestamp, autoRepayAtCancel, isIsolated, limitClientOrderId, limitIcebergQty, listClientOrderId, newOrderRespType, recvWindow, selfTradePreventionMode, sideEffectType, stopClientOrderId, stopIcebergQty, stopLimitPrice, stopLimitTimeInForce, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginCreateMarginOrderOcoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post a new OTO order for margin account:
         * @summary Margin Account New OTO (TRADE)
         * @param {string} pendingQuantity 
         * @param {string} pendingSide 
         * @param {string} pendingType 
         * @param {string} symbol 
         * @param {string} workingIcebergQty 
         * @param {string} workingPrice 
         * @param {string} workingQuantity 
         * @param {string} workingSide 
         * @param {MarginCreateMarginOrderOtoV1WorkingTypeEnum} workingType 
         * @param {boolean} [autoRepayAtCancel] 
         * @param {string} [isIsolated] 
         * @param {string} [listClientOrderId] 
         * @param {string} [newOrderRespType] 
         * @param {string} [pendingClientOrderId] 
         * @param {string} [pendingIcebergQty] 
         * @param {string} [pendingPrice] 
         * @param {string} [pendingStopPrice] 
         * @param {string} [pendingTimeInForce] 
         * @param {string} [pendingTrailingDelta] 
         * @param {string} [selfTradePreventionMode] 
         * @param {string} [sideEffectType] 
         * @param {string} [workingClientOrderId] 
         * @param {string} [workingTimeInForce] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateMarginOrderOtoV1(pendingQuantity: string, pendingSide: string, pendingType: string, symbol: string, workingIcebergQty: string, workingPrice: string, workingQuantity: string, workingSide: string, workingType: MarginCreateMarginOrderOtoV1WorkingTypeEnum, autoRepayAtCancel?: boolean, isIsolated?: string, listClientOrderId?: string, newOrderRespType?: string, pendingClientOrderId?: string, pendingIcebergQty?: string, pendingPrice?: string, pendingStopPrice?: string, pendingTimeInForce?: string, pendingTrailingDelta?: string, selfTradePreventionMode?: string, sideEffectType?: string, workingClientOrderId?: string, workingTimeInForce?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateMarginOrderOtoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateMarginOrderOtoV1(pendingQuantity, pendingSide, pendingType, symbol, workingIcebergQty, workingPrice, workingQuantity, workingSide, workingType, autoRepayAtCancel, isIsolated, listClientOrderId, newOrderRespType, pendingClientOrderId, pendingIcebergQty, pendingPrice, pendingStopPrice, pendingTimeInForce, pendingTrailingDelta, selfTradePreventionMode, sideEffectType, workingClientOrderId, workingTimeInForce, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginCreateMarginOrderOtoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post a new OTOCO order for margin account：
         * @summary Margin Account New OTOCO (TRADE)
         * @param {MarginCreateMarginOrderOtocoV1PendingAboveTypeEnum} pendingAboveType 
         * @param {string} pendingQuantity 
         * @param {string} pendingSide 
         * @param {string} symbol 
         * @param {string} workingPrice 
         * @param {string} workingQuantity 
         * @param {string} workingSide 
         * @param {MarginCreateMarginOrderOtocoV1WorkingTypeEnum} workingType 
         * @param {boolean} [autoRepayAtCancel] 
         * @param {string} [isIsolated] 
         * @param {string} [listClientOrderId] 
         * @param {string} [newOrderRespType] 
         * @param {string} [pendingAboveClientOrderId] 
         * @param {string} [pendingAboveIcebergQty] 
         * @param {string} [pendingAbovePrice] 
         * @param {string} [pendingAboveStopPrice] 
         * @param {string} [pendingAboveTimeInForce] 
         * @param {string} [pendingAboveTrailingDelta] 
         * @param {string} [pendingBelowClientOrderId] 
         * @param {string} [pendingBelowIcebergQty] 
         * @param {string} [pendingBelowPrice] 
         * @param {string} [pendingBelowStopPrice] 
         * @param {string} [pendingBelowTimeInForce] 
         * @param {string} [pendingBelowTrailingDelta] 
         * @param {MarginCreateMarginOrderOtocoV1PendingBelowTypeEnum} [pendingBelowType] 
         * @param {string} [selfTradePreventionMode] 
         * @param {string} [sideEffectType] 
         * @param {string} [workingClientOrderId] 
         * @param {string} [workingIcebergQty] 
         * @param {string} [workingTimeInForce] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateMarginOrderOtocoV1(pendingAboveType: MarginCreateMarginOrderOtocoV1PendingAboveTypeEnum, pendingQuantity: string, pendingSide: string, symbol: string, workingPrice: string, workingQuantity: string, workingSide: string, workingType: MarginCreateMarginOrderOtocoV1WorkingTypeEnum, autoRepayAtCancel?: boolean, isIsolated?: string, listClientOrderId?: string, newOrderRespType?: string, pendingAboveClientOrderId?: string, pendingAboveIcebergQty?: string, pendingAbovePrice?: string, pendingAboveStopPrice?: string, pendingAboveTimeInForce?: string, pendingAboveTrailingDelta?: string, pendingBelowClientOrderId?: string, pendingBelowIcebergQty?: string, pendingBelowPrice?: string, pendingBelowStopPrice?: string, pendingBelowTimeInForce?: string, pendingBelowTrailingDelta?: string, pendingBelowType?: MarginCreateMarginOrderOtocoV1PendingBelowTypeEnum, selfTradePreventionMode?: string, sideEffectType?: string, workingClientOrderId?: string, workingIcebergQty?: string, workingTimeInForce?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateMarginOrderOtocoV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateMarginOrderOtocoV1(pendingAboveType, pendingQuantity, pendingSide, symbol, workingPrice, workingQuantity, workingSide, workingType, autoRepayAtCancel, isIsolated, listClientOrderId, newOrderRespType, pendingAboveClientOrderId, pendingAboveIcebergQty, pendingAbovePrice, pendingAboveStopPrice, pendingAboveTimeInForce, pendingAboveTrailingDelta, pendingBelowClientOrderId, pendingBelowIcebergQty, pendingBelowPrice, pendingBelowStopPrice, pendingBelowTimeInForce, pendingBelowTrailingDelta, pendingBelowType, selfTradePreventionMode, sideEffectType, workingClientOrderId, workingIcebergQty, workingTimeInForce, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginCreateMarginOrderOtocoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post a new order for margin account.
         * @summary Margin Account New Order (TRADE)
         * @param {string} side 
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} type 
         * @param {boolean} [autoRepayAtCancel] 
         * @param {string} [icebergQty] 
         * @param {string} [isIsolated] 
         * @param {string} [newClientOrderId] 
         * @param {string} [newOrderRespType] 
         * @param {string} [price] 
         * @param {string} [quantity] 
         * @param {string} [quoteOrderQty] 
         * @param {number} [recvWindow] 
         * @param {string} [selfTradePreventionMode] 
         * @param {string} [sideEffectType] 
         * @param {string} [stopPrice] 
         * @param {string} [timeInForce] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginCreateMarginOrderV1(side: string, symbol: string, timestamp: number, type: string, autoRepayAtCancel?: boolean, icebergQty?: string, isIsolated?: string, newClientOrderId?: string, newOrderRespType?: string, price?: string, quantity?: string, quoteOrderQty?: string, recvWindow?: number, selfTradePreventionMode?: string, sideEffectType?: string, stopPrice?: string, timeInForce?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginCreateMarginOrderV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginCreateMarginOrderV1(side, symbol, timestamp, type, autoRepayAtCancel, icebergQty, isIsolated, newClientOrderId, newOrderRespType, price, quantity, quoteOrderQty, recvWindow, selfTradePreventionMode, sideEffectType, stopPrice, timeInForce, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginCreateMarginOrderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This only applies to Special Key for Low Latency Trading.
         * @summary Delete Special Key(Low-Latency Trading)(TRADE)
         * @param {number} timestamp 
         * @param {string} [apiKey] 
         * @param {string} [apiName] 
         * @param {string} [symbol] isolated margin pair
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginDeleteMarginApiKeyV1(timestamp: number, apiKey?: string, apiName?: string, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginDeleteMarginApiKeyV1(timestamp, apiKey, apiName, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginDeleteMarginApiKeyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancels all active orders on a symbol for margin account. This includes OCO orders.
         * @summary Margin Account Cancel all Open Orders on a Symbol (TRADE)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginDeleteMarginOpenOrdersV1(symbol: string, timestamp: number, isIsolated?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginDeleteMarginOpenOrdersV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginDeleteMarginOpenOrdersV1(symbol, timestamp, isIsolated, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginDeleteMarginOpenOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancel an entire Order List for a margin account.
         * @summary Margin Account Cancel OCO (TRADE)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [orderListId] Either &#x60;orderListId&#x60; or &#x60;listClientOrderId&#x60; must be provided
         * @param {string} [listClientOrderId] Either &#x60;orderListId&#x60; or &#x60;listClientOrderId&#x60; must be provided
         * @param {string} [newClientOrderId] Used to uniquely identify this cancel. Automatically generated by default
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginDeleteMarginOrderListV1(symbol: string, timestamp: number, isIsolated?: string, orderListId?: number, listClientOrderId?: string, newClientOrderId?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginDeleteMarginOrderListV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginDeleteMarginOrderListV1(symbol, timestamp, isIsolated, orderListId, listClientOrderId, newClientOrderId, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginDeleteMarginOrderListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancel an active order for margin account.
         * @summary Margin Account Cancel Order (TRADE)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [orderId] 
         * @param {string} [origClientOrderId] 
         * @param {string} [newClientOrderId] Used to uniquely identify this cancel. Automatically generated by default.
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginDeleteMarginOrderV1(symbol: string, timestamp: number, isIsolated?: string, orderId?: number, origClientOrderId?: string, newClientOrderId?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginDeleteMarginOrderV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginDeleteMarginOrderV1(symbol, timestamp, isIsolated, orderId, origClientOrderId, newClientOrderId, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginDeleteMarginOrderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all OCO for a specific margin account based on provided optional parameters
         * @summary Query Margin Account\'s all OCO (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {string} [symbol] mandatory for isolated margin, not supported for cross margin
         * @param {number} [fromId] If supplied, neither &#x60;startTime&#x60; or &#x60;endTime&#x60; can be provided
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default Value: 500; Max Value: 1000
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginAllOrderListV1(timestamp: number, isIsolated?: string, symbol?: string, fromId?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginAllOrderListV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginAllOrderListV1(timestamp, isIsolated, symbol, fromId, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginAllOrderListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Margin Account\'s All Orders
         * @summary Query Margin Account\'s All Orders (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [orderId] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] Default 500; max 500.
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginAllOrdersV1(symbol: string, timestamp: number, isIsolated?: string, orderId?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginAllOrdersV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginAllOrdersV1(symbol, timestamp, isIsolated, orderId, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginAllOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This only applies to Special Key for Low Latency Trading.
         * @summary Query Special key List(Low Latency Trading)(TRADE)
         * @param {number} timestamp 
         * @param {string} [symbol] isolated margin pair
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginApiKeyListV1(timestamp: number, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginApiKeyListV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginApiKeyListV1(timestamp, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginApiKeyListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Special Key Information.
         * @summary Query Special key(Low Latency Trading)(TRADE)
         * @param {string} apiKey 
         * @param {number} timestamp 
         * @param {string} [symbol] isolated margin pair
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginApiKeyV1(apiKey: string, timestamp: number, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginApiKeyV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginApiKeyV1(apiKey, timestamp, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginApiKeyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Small liability Exchange History
         * @summary Get Small Liability Exchange History (USER_DATA)
         * @param {number} current Currently querying page. Start from 1. Default:1
         * @param {number} size Default:10, Max:100
         * @param {number} timestamp 
         * @param {number} [startTime] Default: 30 days from current timestamp
         * @param {number} [endTime] Default: present timestamp
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginExchangeSmallLiabilityHistoryV1(current: number, size: number, timestamp: number, startTime?: number, endTime?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginExchangeSmallLiabilityHistoryV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginExchangeSmallLiabilityHistoryV1(current, size, timestamp, startTime, endTime, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginExchangeSmallLiabilityHistoryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query the coins which can be small liability exchange
         * @summary Get Small Liability Exchange Coin List (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginExchangeSmallLiabilityV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginExchangeSmallLiabilityV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginExchangeSmallLiabilityV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginExchangeSmallLiabilityV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Force Liquidation Record
         * @summary Get Force Liquidation Record (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {string} [isolatedSymbol] 
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginForceLiquidationRecV1(timestamp: number, startTime?: number, endTime?: number, isolatedSymbol?: string, current?: number, size?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginForceLiquidationRecV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginForceLiquidationRecV1(timestamp, startTime, endTime, isolatedSymbol, current, size, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginForceLiquidationRecV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Margin Account\'s Trade List
         * @summary Query Margin Account\'s Trade List (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [orderId] 
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [fromId] TradeId to fetch from. Default gets most recent trades.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginMyTradesV1(symbol: string, timestamp: number, isIsolated?: string, orderId?: number, startTime?: number, endTime?: number, fromId?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginMyTradesV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginMyTradesV1(symbol, timestamp, isIsolated, orderId, startTime, endTime, fromId, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginMyTradesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Margin Account\'s Open OCO
         * @summary Query Margin Account\'s Open OCO (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {string} [symbol] mandatory for isolated margin, not supported for cross margin
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginOpenOrderListV1(timestamp: number, isIsolated?: string, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginOpenOrderListV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginOpenOrderListV1(timestamp, isIsolated, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginOpenOrderListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Margin Account\'s Open Orders
         * @summary Query Margin Account\'s Open Orders (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginOpenOrdersV1(timestamp: number, symbol?: string, isIsolated?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginOpenOrdersV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginOpenOrdersV1(timestamp, symbol, isIsolated, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginOpenOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a specific OCO based on provided optional parameters
         * @summary Query Margin Account\'s OCO (USER_DATA)
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {string} [symbol] mandatory for isolated margin, not supported for cross margin
         * @param {number} [orderListId] Either &#x60;orderListId&#x60; or &#x60;origClientOrderId&#x60; must be provided
         * @param {string} [origClientOrderId] Either &#x60;orderListId&#x60; or &#x60;origClientOrderId&#x60; must be provided
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginOrderListV1(timestamp: number, isIsolated?: string, symbol?: string, orderListId?: number, origClientOrderId?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginOrderListV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginOrderListV1(timestamp, isIsolated, symbol, orderListId, origClientOrderId, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginOrderListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query Margin Account\'s Order
         * @summary Query Margin Account\'s Order (USER_DATA)
         * @param {string} symbol 
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {number} [orderId] 
         * @param {string} [origClientOrderId] 
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginOrderV1(symbol: string, timestamp: number, isIsolated?: string, orderId?: number, origClientOrderId?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginGetMarginOrderV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginOrderV1(symbol, timestamp, isIsolated, orderId, origClientOrderId, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginOrderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Displays the user\'s current margin order count usage for all intervals.
         * @summary Query Current Margin Order Count Usage (TRADE)
         * @param {number} timestamp 
         * @param {string} [isIsolated] for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
         * @param {string} [symbol] isolated symbol, mandatory for isolated margin
         * @param {number} [recvWindow] The value cannot be greater than &#x60;60000&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginGetMarginRateLimitOrderV1(timestamp: number, isIsolated?: string, symbol?: string, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarginGetMarginRateLimitOrderV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginGetMarginRateLimitOrderV1(timestamp, isIsolated, symbol, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginGetMarginRateLimitOrderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit ip restriction. This only applies to Special Key for Low Latency Trading.
         * @summary Edit ip for Special Key(Low-Latency Trading)(TRADE)
         * @param {string} apiKey 
         * @param {string} ip 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {string} [symbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginUpdateMarginApiKeyIpV1(apiKey: string, ip: string, timestamp: number, recvWindow?: number, symbol?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginUpdateMarginApiKeyIpV1(apiKey, ip, timestamp, recvWindow, symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.marginUpdateMarginApiKeyIpV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TradeApi - factory interface
 * @export
 */
export const TradeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TradeApiFp(configuration)
    return {
        /**
         * **Binance Margin offers low-latency trading through a special key, available exclusively to users with VIP level 4 or higher. **
         * @summary Create Special Key(Low-Latency Trading)(TRADE)
         * @param {TradeApiMarginCreateMarginApiKeyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginApiKeyV1(requestParameters: TradeApiMarginCreateMarginApiKeyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginApiKeyV1Resp> {
            return localVarFp.marginCreateMarginApiKeyV1(requestParameters.apiName, requestParameters.timestamp, requestParameters.ip, requestParameters.permissionMode, requestParameters.publicKey, requestParameters.recvWindow, requestParameters.symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Small Liability Exchange
         * @summary Small Liability Exchange (MARGIN)
         * @param {TradeApiMarginCreateMarginExchangeSmallLiabilityV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginExchangeSmallLiabilityV1(requestParameters: TradeApiMarginCreateMarginExchangeSmallLiabilityV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginExchangeSmallLiabilityV1Resp> {
            return localVarFp.marginCreateMarginExchangeSmallLiabilityV1(requestParameters.assetNames, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Margin Manual Liquidation
         * @summary Margin Manual Liquidation(MARGIN)
         * @param {TradeApiMarginCreateMarginManualLiquidationV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginManualLiquidationV1(requestParameters: TradeApiMarginCreateMarginManualLiquidationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginManualLiquidationV1Resp> {
            return localVarFp.marginCreateMarginManualLiquidationV1(requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, requestParameters.symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Send in a new OCO for a margin account
         * @summary Margin Account New OCO (TRADE)
         * @param {TradeApiMarginCreateMarginOrderOcoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginOrderOcoV1(requestParameters: TradeApiMarginCreateMarginOrderOcoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginOrderOcoV1Resp> {
            return localVarFp.marginCreateMarginOrderOcoV1(requestParameters.price, requestParameters.quantity, requestParameters.side, requestParameters.stopPrice, requestParameters.symbol, requestParameters.timestamp, requestParameters.autoRepayAtCancel, requestParameters.isIsolated, requestParameters.limitClientOrderId, requestParameters.limitIcebergQty, requestParameters.listClientOrderId, requestParameters.newOrderRespType, requestParameters.recvWindow, requestParameters.selfTradePreventionMode, requestParameters.sideEffectType, requestParameters.stopClientOrderId, requestParameters.stopIcebergQty, requestParameters.stopLimitPrice, requestParameters.stopLimitTimeInForce, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a new OTO order for margin account:
         * @summary Margin Account New OTO (TRADE)
         * @param {TradeApiMarginCreateMarginOrderOtoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginOrderOtoV1(requestParameters: TradeApiMarginCreateMarginOrderOtoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginOrderOtoV1Resp> {
            return localVarFp.marginCreateMarginOrderOtoV1(requestParameters.pendingQuantity, requestParameters.pendingSide, requestParameters.pendingType, requestParameters.symbol, requestParameters.workingIcebergQty, requestParameters.workingPrice, requestParameters.workingQuantity, requestParameters.workingSide, requestParameters.workingType, requestParameters.autoRepayAtCancel, requestParameters.isIsolated, requestParameters.listClientOrderId, requestParameters.newOrderRespType, requestParameters.pendingClientOrderId, requestParameters.pendingIcebergQty, requestParameters.pendingPrice, requestParameters.pendingStopPrice, requestParameters.pendingTimeInForce, requestParameters.pendingTrailingDelta, requestParameters.selfTradePreventionMode, requestParameters.sideEffectType, requestParameters.workingClientOrderId, requestParameters.workingTimeInForce, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a new OTOCO order for margin account：
         * @summary Margin Account New OTOCO (TRADE)
         * @param {TradeApiMarginCreateMarginOrderOtocoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginOrderOtocoV1(requestParameters: TradeApiMarginCreateMarginOrderOtocoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginOrderOtocoV1Resp> {
            return localVarFp.marginCreateMarginOrderOtocoV1(requestParameters.pendingAboveType, requestParameters.pendingQuantity, requestParameters.pendingSide, requestParameters.symbol, requestParameters.workingPrice, requestParameters.workingQuantity, requestParameters.workingSide, requestParameters.workingType, requestParameters.autoRepayAtCancel, requestParameters.isIsolated, requestParameters.listClientOrderId, requestParameters.newOrderRespType, requestParameters.pendingAboveClientOrderId, requestParameters.pendingAboveIcebergQty, requestParameters.pendingAbovePrice, requestParameters.pendingAboveStopPrice, requestParameters.pendingAboveTimeInForce, requestParameters.pendingAboveTrailingDelta, requestParameters.pendingBelowClientOrderId, requestParameters.pendingBelowIcebergQty, requestParameters.pendingBelowPrice, requestParameters.pendingBelowStopPrice, requestParameters.pendingBelowTimeInForce, requestParameters.pendingBelowTrailingDelta, requestParameters.pendingBelowType, requestParameters.selfTradePreventionMode, requestParameters.sideEffectType, requestParameters.workingClientOrderId, requestParameters.workingIcebergQty, requestParameters.workingTimeInForce, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a new order for margin account.
         * @summary Margin Account New Order (TRADE)
         * @param {TradeApiMarginCreateMarginOrderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginCreateMarginOrderV1(requestParameters: TradeApiMarginCreateMarginOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginOrderV1Resp> {
            return localVarFp.marginCreateMarginOrderV1(requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.type, requestParameters.autoRepayAtCancel, requestParameters.icebergQty, requestParameters.isIsolated, requestParameters.newClientOrderId, requestParameters.newOrderRespType, requestParameters.price, requestParameters.quantity, requestParameters.quoteOrderQty, requestParameters.recvWindow, requestParameters.selfTradePreventionMode, requestParameters.sideEffectType, requestParameters.stopPrice, requestParameters.timeInForce, options).then((request) => request(axios, basePath));
        },
        /**
         * This only applies to Special Key for Low Latency Trading.
         * @summary Delete Special Key(Low-Latency Trading)(TRADE)
         * @param {TradeApiMarginDeleteMarginApiKeyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteMarginApiKeyV1(requestParameters: TradeApiMarginDeleteMarginApiKeyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.marginDeleteMarginApiKeyV1(requestParameters.timestamp, requestParameters.apiKey, requestParameters.apiName, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels all active orders on a symbol for margin account. This includes OCO orders.
         * @summary Margin Account Cancel all Open Orders on a Symbol (TRADE)
         * @param {TradeApiMarginDeleteMarginOpenOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteMarginOpenOrdersV1(requestParameters: TradeApiMarginDeleteMarginOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginDeleteMarginOpenOrdersV1RespItem>> {
            return localVarFp.marginDeleteMarginOpenOrdersV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel an entire Order List for a margin account.
         * @summary Margin Account Cancel OCO (TRADE)
         * @param {TradeApiMarginDeleteMarginOrderListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteMarginOrderListV1(requestParameters: TradeApiMarginDeleteMarginOrderListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginDeleteMarginOrderListV1Resp> {
            return localVarFp.marginDeleteMarginOrderListV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.orderListId, requestParameters.listClientOrderId, requestParameters.newClientOrderId, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel an active order for margin account.
         * @summary Margin Account Cancel Order (TRADE)
         * @param {TradeApiMarginDeleteMarginOrderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginDeleteMarginOrderV1(requestParameters: TradeApiMarginDeleteMarginOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginDeleteMarginOrderV1Resp> {
            return localVarFp.marginDeleteMarginOrderV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.orderId, requestParameters.origClientOrderId, requestParameters.newClientOrderId, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all OCO for a specific margin account based on provided optional parameters
         * @summary Query Margin Account\'s all OCO (USER_DATA)
         * @param {TradeApiMarginGetMarginAllOrderListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAllOrderListV1(requestParameters: TradeApiMarginGetMarginAllOrderListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginAllOrderListV1RespItem>> {
            return localVarFp.marginGetMarginAllOrderListV1(requestParameters.timestamp, requestParameters.isIsolated, requestParameters.symbol, requestParameters.fromId, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Margin Account\'s All Orders
         * @summary Query Margin Account\'s All Orders (USER_DATA)
         * @param {TradeApiMarginGetMarginAllOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginAllOrdersV1(requestParameters: TradeApiMarginGetMarginAllOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginAllOrdersV1RespItem>> {
            return localVarFp.marginGetMarginAllOrdersV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.orderId, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * This only applies to Special Key for Low Latency Trading.
         * @summary Query Special key List(Low Latency Trading)(TRADE)
         * @param {TradeApiMarginGetMarginApiKeyListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginApiKeyListV1(requestParameters: TradeApiMarginGetMarginApiKeyListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginApiKeyListV1RespItem>> {
            return localVarFp.marginGetMarginApiKeyListV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Special Key Information.
         * @summary Query Special key(Low Latency Trading)(TRADE)
         * @param {TradeApiMarginGetMarginApiKeyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginApiKeyV1(requestParameters: TradeApiMarginGetMarginApiKeyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginApiKeyV1Resp> {
            return localVarFp.marginGetMarginApiKeyV1(requestParameters.apiKey, requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Small liability Exchange History
         * @summary Get Small Liability Exchange History (USER_DATA)
         * @param {TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginExchangeSmallLiabilityHistoryV1(requestParameters: TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginExchangeSmallLiabilityHistoryV1Resp> {
            return localVarFp.marginGetMarginExchangeSmallLiabilityHistoryV1(requestParameters.current, requestParameters.size, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the coins which can be small liability exchange
         * @summary Get Small Liability Exchange Coin List (USER_DATA)
         * @param {TradeApiMarginGetMarginExchangeSmallLiabilityV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginExchangeSmallLiabilityV1(requestParameters: TradeApiMarginGetMarginExchangeSmallLiabilityV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginExchangeSmallLiabilityV1RespItem>> {
            return localVarFp.marginGetMarginExchangeSmallLiabilityV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Force Liquidation Record
         * @summary Get Force Liquidation Record (USER_DATA)
         * @param {TradeApiMarginGetMarginForceLiquidationRecV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginForceLiquidationRecV1(requestParameters: TradeApiMarginGetMarginForceLiquidationRecV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginForceLiquidationRecV1Resp> {
            return localVarFp.marginGetMarginForceLiquidationRecV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.isolatedSymbol, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Margin Account\'s Trade List
         * @summary Query Margin Account\'s Trade List (USER_DATA)
         * @param {TradeApiMarginGetMarginMyTradesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginMyTradesV1(requestParameters: TradeApiMarginGetMarginMyTradesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginMyTradesV1RespItem>> {
            return localVarFp.marginGetMarginMyTradesV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.orderId, requestParameters.startTime, requestParameters.endTime, requestParameters.fromId, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Margin Account\'s Open OCO
         * @summary Query Margin Account\'s Open OCO (USER_DATA)
         * @param {TradeApiMarginGetMarginOpenOrderListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginOpenOrderListV1(requestParameters: TradeApiMarginGetMarginOpenOrderListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginOpenOrderListV1RespItem>> {
            return localVarFp.marginGetMarginOpenOrderListV1(requestParameters.timestamp, requestParameters.isIsolated, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Margin Account\'s Open Orders
         * @summary Query Margin Account\'s Open Orders (USER_DATA)
         * @param {TradeApiMarginGetMarginOpenOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginOpenOrdersV1(requestParameters: TradeApiMarginGetMarginOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginOpenOrdersV1RespItem>> {
            return localVarFp.marginGetMarginOpenOrdersV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.isIsolated, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific OCO based on provided optional parameters
         * @summary Query Margin Account\'s OCO (USER_DATA)
         * @param {TradeApiMarginGetMarginOrderListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginOrderListV1(requestParameters: TradeApiMarginGetMarginOrderListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginOrderListV1Resp> {
            return localVarFp.marginGetMarginOrderListV1(requestParameters.timestamp, requestParameters.isIsolated, requestParameters.symbol, requestParameters.orderListId, requestParameters.origClientOrderId, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Margin Account\'s Order
         * @summary Query Margin Account\'s Order (USER_DATA)
         * @param {TradeApiMarginGetMarginOrderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginOrderV1(requestParameters: TradeApiMarginGetMarginOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginOrderV1Resp> {
            return localVarFp.marginGetMarginOrderV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.orderId, requestParameters.origClientOrderId, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays the user\'s current margin order count usage for all intervals.
         * @summary Query Current Margin Order Count Usage (TRADE)
         * @param {TradeApiMarginGetMarginRateLimitOrderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginGetMarginRateLimitOrderV1(requestParameters: TradeApiMarginGetMarginRateLimitOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginRateLimitOrderV1RespItem>> {
            return localVarFp.marginGetMarginRateLimitOrderV1(requestParameters.timestamp, requestParameters.isIsolated, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit ip restriction. This only applies to Special Key for Low Latency Trading.
         * @summary Edit ip for Special Key(Low-Latency Trading)(TRADE)
         * @param {TradeApiMarginUpdateMarginApiKeyIpV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginUpdateMarginApiKeyIpV1(requestParameters: TradeApiMarginUpdateMarginApiKeyIpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.marginUpdateMarginApiKeyIpV1(requestParameters.apiKey, requestParameters.ip, requestParameters.timestamp, requestParameters.recvWindow, requestParameters.symbol, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TradeApi - interface
 * @export
 * @interface TradeApi
 */
export interface TradeApiInterface {
    /**
     * **Binance Margin offers low-latency trading through a special key, available exclusively to users with VIP level 4 or higher. **
     * @summary Create Special Key(Low-Latency Trading)(TRADE)
     * @param {TradeApiMarginCreateMarginApiKeyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginCreateMarginApiKeyV1(requestParameters: TradeApiMarginCreateMarginApiKeyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginApiKeyV1Resp>;

    /**
     * Small Liability Exchange
     * @summary Small Liability Exchange (MARGIN)
     * @param {TradeApiMarginCreateMarginExchangeSmallLiabilityV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginCreateMarginExchangeSmallLiabilityV1(requestParameters: TradeApiMarginCreateMarginExchangeSmallLiabilityV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginExchangeSmallLiabilityV1Resp>;

    /**
     * Margin Manual Liquidation
     * @summary Margin Manual Liquidation(MARGIN)
     * @param {TradeApiMarginCreateMarginManualLiquidationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginCreateMarginManualLiquidationV1(requestParameters: TradeApiMarginCreateMarginManualLiquidationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginManualLiquidationV1Resp>;

    /**
     * Send in a new OCO for a margin account
     * @summary Margin Account New OCO (TRADE)
     * @param {TradeApiMarginCreateMarginOrderOcoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginCreateMarginOrderOcoV1(requestParameters: TradeApiMarginCreateMarginOrderOcoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginOrderOcoV1Resp>;

    /**
     * Post a new OTO order for margin account:
     * @summary Margin Account New OTO (TRADE)
     * @param {TradeApiMarginCreateMarginOrderOtoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginCreateMarginOrderOtoV1(requestParameters: TradeApiMarginCreateMarginOrderOtoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginOrderOtoV1Resp>;

    /**
     * Post a new OTOCO order for margin account：
     * @summary Margin Account New OTOCO (TRADE)
     * @param {TradeApiMarginCreateMarginOrderOtocoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginCreateMarginOrderOtocoV1(requestParameters: TradeApiMarginCreateMarginOrderOtocoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginOrderOtocoV1Resp>;

    /**
     * Post a new order for margin account.
     * @summary Margin Account New Order (TRADE)
     * @param {TradeApiMarginCreateMarginOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginCreateMarginOrderV1(requestParameters: TradeApiMarginCreateMarginOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginCreateMarginOrderV1Resp>;

    /**
     * This only applies to Special Key for Low Latency Trading.
     * @summary Delete Special Key(Low-Latency Trading)(TRADE)
     * @param {TradeApiMarginDeleteMarginApiKeyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginDeleteMarginApiKeyV1(requestParameters: TradeApiMarginDeleteMarginApiKeyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * Cancels all active orders on a symbol for margin account. This includes OCO orders.
     * @summary Margin Account Cancel all Open Orders on a Symbol (TRADE)
     * @param {TradeApiMarginDeleteMarginOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginDeleteMarginOpenOrdersV1(requestParameters: TradeApiMarginDeleteMarginOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginDeleteMarginOpenOrdersV1RespItem>>;

    /**
     * Cancel an entire Order List for a margin account.
     * @summary Margin Account Cancel OCO (TRADE)
     * @param {TradeApiMarginDeleteMarginOrderListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginDeleteMarginOrderListV1(requestParameters: TradeApiMarginDeleteMarginOrderListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginDeleteMarginOrderListV1Resp>;

    /**
     * Cancel an active order for margin account.
     * @summary Margin Account Cancel Order (TRADE)
     * @param {TradeApiMarginDeleteMarginOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginDeleteMarginOrderV1(requestParameters: TradeApiMarginDeleteMarginOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginDeleteMarginOrderV1Resp>;

    /**
     * Retrieves all OCO for a specific margin account based on provided optional parameters
     * @summary Query Margin Account\'s all OCO (USER_DATA)
     * @param {TradeApiMarginGetMarginAllOrderListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginAllOrderListV1(requestParameters: TradeApiMarginGetMarginAllOrderListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginAllOrderListV1RespItem>>;

    /**
     * Query Margin Account\'s All Orders
     * @summary Query Margin Account\'s All Orders (USER_DATA)
     * @param {TradeApiMarginGetMarginAllOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginAllOrdersV1(requestParameters: TradeApiMarginGetMarginAllOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginAllOrdersV1RespItem>>;

    /**
     * This only applies to Special Key for Low Latency Trading.
     * @summary Query Special key List(Low Latency Trading)(TRADE)
     * @param {TradeApiMarginGetMarginApiKeyListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginApiKeyListV1(requestParameters: TradeApiMarginGetMarginApiKeyListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginApiKeyListV1RespItem>>;

    /**
     * Query Special Key Information.
     * @summary Query Special key(Low Latency Trading)(TRADE)
     * @param {TradeApiMarginGetMarginApiKeyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginApiKeyV1(requestParameters: TradeApiMarginGetMarginApiKeyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginApiKeyV1Resp>;

    /**
     * Get Small liability Exchange History
     * @summary Get Small Liability Exchange History (USER_DATA)
     * @param {TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginExchangeSmallLiabilityHistoryV1(requestParameters: TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginExchangeSmallLiabilityHistoryV1Resp>;

    /**
     * Query the coins which can be small liability exchange
     * @summary Get Small Liability Exchange Coin List (USER_DATA)
     * @param {TradeApiMarginGetMarginExchangeSmallLiabilityV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginExchangeSmallLiabilityV1(requestParameters: TradeApiMarginGetMarginExchangeSmallLiabilityV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginExchangeSmallLiabilityV1RespItem>>;

    /**
     * Get Force Liquidation Record
     * @summary Get Force Liquidation Record (USER_DATA)
     * @param {TradeApiMarginGetMarginForceLiquidationRecV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginForceLiquidationRecV1(requestParameters: TradeApiMarginGetMarginForceLiquidationRecV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginForceLiquidationRecV1Resp>;

    /**
     * Query Margin Account\'s Trade List
     * @summary Query Margin Account\'s Trade List (USER_DATA)
     * @param {TradeApiMarginGetMarginMyTradesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginMyTradesV1(requestParameters: TradeApiMarginGetMarginMyTradesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginMyTradesV1RespItem>>;

    /**
     * Query Margin Account\'s Open OCO
     * @summary Query Margin Account\'s Open OCO (USER_DATA)
     * @param {TradeApiMarginGetMarginOpenOrderListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginOpenOrderListV1(requestParameters: TradeApiMarginGetMarginOpenOrderListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginOpenOrderListV1RespItem>>;

    /**
     * Query Margin Account\'s Open Orders
     * @summary Query Margin Account\'s Open Orders (USER_DATA)
     * @param {TradeApiMarginGetMarginOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginOpenOrdersV1(requestParameters: TradeApiMarginGetMarginOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginOpenOrdersV1RespItem>>;

    /**
     * Retrieves a specific OCO based on provided optional parameters
     * @summary Query Margin Account\'s OCO (USER_DATA)
     * @param {TradeApiMarginGetMarginOrderListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginOrderListV1(requestParameters: TradeApiMarginGetMarginOrderListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginOrderListV1Resp>;

    /**
     * Query Margin Account\'s Order
     * @summary Query Margin Account\'s Order (USER_DATA)
     * @param {TradeApiMarginGetMarginOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginOrderV1(requestParameters: TradeApiMarginGetMarginOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MarginGetMarginOrderV1Resp>;

    /**
     * Displays the user\'s current margin order count usage for all intervals.
     * @summary Query Current Margin Order Count Usage (TRADE)
     * @param {TradeApiMarginGetMarginRateLimitOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginGetMarginRateLimitOrderV1(requestParameters: TradeApiMarginGetMarginRateLimitOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<MarginGetMarginRateLimitOrderV1RespItem>>;

    /**
     * Edit ip restriction. This only applies to Special Key for Low Latency Trading.
     * @summary Edit ip for Special Key(Low-Latency Trading)(TRADE)
     * @param {TradeApiMarginUpdateMarginApiKeyIpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    marginUpdateMarginApiKeyIpV1(requestParameters: TradeApiMarginUpdateMarginApiKeyIpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

}

/**
 * Request parameters for marginCreateMarginApiKeyV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginCreateMarginApiKeyV1Request
 */
export interface TradeApiMarginCreateMarginApiKeyV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginApiKeyV1
     */
    readonly apiName: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginCreateMarginApiKeyV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginApiKeyV1
     */
    readonly ip?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginApiKeyV1
     */
    readonly permissionMode?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginApiKeyV1
     */
    readonly publicKey?: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginCreateMarginApiKeyV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginApiKeyV1
     */
    readonly symbol?: string
}

/**
 * Request parameters for marginCreateMarginExchangeSmallLiabilityV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginCreateMarginExchangeSmallLiabilityV1Request
 */
export interface TradeApiMarginCreateMarginExchangeSmallLiabilityV1Request {
    /**
     * 
     * @type {Array<string>}
     * @memberof TradeApiMarginCreateMarginExchangeSmallLiabilityV1
     */
    readonly assetNames: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginCreateMarginExchangeSmallLiabilityV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginCreateMarginExchangeSmallLiabilityV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginCreateMarginManualLiquidationV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginCreateMarginManualLiquidationV1Request
 */
export interface TradeApiMarginCreateMarginManualLiquidationV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginCreateMarginManualLiquidationV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginManualLiquidationV1
     */
    readonly type: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginCreateMarginManualLiquidationV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginManualLiquidationV1
     */
    readonly symbol?: string
}

/**
 * Request parameters for marginCreateMarginOrderOcoV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginCreateMarginOrderOcoV1Request
 */
export interface TradeApiMarginCreateMarginOrderOcoV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly price: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly quantity: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly side: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly stopPrice: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {boolean}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly autoRepayAtCancel?: boolean

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly isIsolated?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly limitClientOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly limitIcebergQty?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly listClientOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly newOrderRespType?: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly selfTradePreventionMode?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly sideEffectType?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly stopClientOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly stopIcebergQty?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly stopLimitPrice?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOcoV1
     */
    readonly stopLimitTimeInForce?: string
}

/**
 * Request parameters for marginCreateMarginOrderOtoV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginCreateMarginOrderOtoV1Request
 */
export interface TradeApiMarginCreateMarginOrderOtoV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly pendingQuantity: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly pendingSide: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly pendingType: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly symbol: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly workingIcebergQty: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly workingPrice: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly workingQuantity: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly workingSide: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly workingType: MarginCreateMarginOrderOtoV1WorkingTypeEnum

    /**
     * 
     * @type {boolean}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly autoRepayAtCancel?: boolean

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly isIsolated?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly listClientOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly newOrderRespType?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly pendingClientOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly pendingIcebergQty?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly pendingPrice?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly pendingStopPrice?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly pendingTimeInForce?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly pendingTrailingDelta?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly selfTradePreventionMode?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly sideEffectType?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly workingClientOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtoV1
     */
    readonly workingTimeInForce?: string
}

/**
 * Request parameters for marginCreateMarginOrderOtocoV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginCreateMarginOrderOtocoV1Request
 */
export interface TradeApiMarginCreateMarginOrderOtocoV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingAboveType: MarginCreateMarginOrderOtocoV1PendingAboveTypeEnum

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingQuantity: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingSide: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly symbol: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly workingPrice: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly workingQuantity: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly workingSide: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly workingType: MarginCreateMarginOrderOtocoV1WorkingTypeEnum

    /**
     * 
     * @type {boolean}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly autoRepayAtCancel?: boolean

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly isIsolated?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly listClientOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly newOrderRespType?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingAboveClientOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingAboveIcebergQty?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingAbovePrice?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingAboveStopPrice?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingAboveTimeInForce?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingAboveTrailingDelta?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingBelowClientOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingBelowIcebergQty?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingBelowPrice?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingBelowStopPrice?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingBelowTimeInForce?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingBelowTrailingDelta?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly pendingBelowType?: MarginCreateMarginOrderOtocoV1PendingBelowTypeEnum

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly selfTradePreventionMode?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly sideEffectType?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly workingClientOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly workingIcebergQty?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderOtocoV1
     */
    readonly workingTimeInForce?: string
}

/**
 * Request parameters for marginCreateMarginOrderV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginCreateMarginOrderV1Request
 */
export interface TradeApiMarginCreateMarginOrderV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly side: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly type: string

    /**
     * 
     * @type {boolean}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly autoRepayAtCancel?: boolean

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly icebergQty?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly isIsolated?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly newClientOrderId?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly newOrderRespType?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly price?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly quantity?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly quoteOrderQty?: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly selfTradePreventionMode?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly sideEffectType?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly stopPrice?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginCreateMarginOrderV1
     */
    readonly timeInForce?: string
}

/**
 * Request parameters for marginDeleteMarginApiKeyV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginDeleteMarginApiKeyV1Request
 */
export interface TradeApiMarginDeleteMarginApiKeyV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginDeleteMarginApiKeyV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginApiKeyV1
     */
    readonly apiKey?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginApiKeyV1
     */
    readonly apiName?: string

    /**
     * isolated margin pair
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginApiKeyV1
     */
    readonly symbol?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginDeleteMarginApiKeyV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginDeleteMarginOpenOrdersV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginDeleteMarginOpenOrdersV1Request
 */
export interface TradeApiMarginDeleteMarginOpenOrdersV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginOpenOrdersV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginDeleteMarginOpenOrdersV1
     */
    readonly timestamp: number

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginOpenOrdersV1
     */
    readonly isIsolated?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginDeleteMarginOpenOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginDeleteMarginOrderListV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginDeleteMarginOrderListV1Request
 */
export interface TradeApiMarginDeleteMarginOrderListV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginOrderListV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginDeleteMarginOrderListV1
     */
    readonly timestamp: number

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginOrderListV1
     */
    readonly isIsolated?: string

    /**
     * Either &#x60;orderListId&#x60; or &#x60;listClientOrderId&#x60; must be provided
     * @type {number}
     * @memberof TradeApiMarginDeleteMarginOrderListV1
     */
    readonly orderListId?: number

    /**
     * Either &#x60;orderListId&#x60; or &#x60;listClientOrderId&#x60; must be provided
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginOrderListV1
     */
    readonly listClientOrderId?: string

    /**
     * Used to uniquely identify this cancel. Automatically generated by default
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginOrderListV1
     */
    readonly newClientOrderId?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginDeleteMarginOrderListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginDeleteMarginOrderV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginDeleteMarginOrderV1Request
 */
export interface TradeApiMarginDeleteMarginOrderV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginOrderV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginDeleteMarginOrderV1
     */
    readonly timestamp: number

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginOrderV1
     */
    readonly isIsolated?: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginDeleteMarginOrderV1
     */
    readonly orderId?: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginOrderV1
     */
    readonly origClientOrderId?: string

    /**
     * Used to uniquely identify this cancel. Automatically generated by default.
     * @type {string}
     * @memberof TradeApiMarginDeleteMarginOrderV1
     */
    readonly newClientOrderId?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginDeleteMarginOrderV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginAllOrderListV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginAllOrderListV1Request
 */
export interface TradeApiMarginGetMarginAllOrderListV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrderListV1
     */
    readonly timestamp: number

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
     * @type {string}
     * @memberof TradeApiMarginGetMarginAllOrderListV1
     */
    readonly isIsolated?: string

    /**
     * mandatory for isolated margin, not supported for cross margin
     * @type {string}
     * @memberof TradeApiMarginGetMarginAllOrderListV1
     */
    readonly symbol?: string

    /**
     * If supplied, neither &#x60;startTime&#x60; or &#x60;endTime&#x60; can be provided
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrderListV1
     */
    readonly fromId?: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrderListV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrderListV1
     */
    readonly endTime?: number

    /**
     * Default Value: 500; Max Value: 1000
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrderListV1
     */
    readonly limit?: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrderListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginAllOrdersV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginAllOrdersV1Request
 */
export interface TradeApiMarginGetMarginAllOrdersV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginGetMarginAllOrdersV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrdersV1
     */
    readonly timestamp: number

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
     * @type {string}
     * @memberof TradeApiMarginGetMarginAllOrdersV1
     */
    readonly isIsolated?: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrdersV1
     */
    readonly orderId?: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrdersV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrdersV1
     */
    readonly endTime?: number

    /**
     * Default 500; max 500.
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrdersV1
     */
    readonly limit?: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginGetMarginAllOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginApiKeyListV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginApiKeyListV1Request
 */
export interface TradeApiMarginGetMarginApiKeyListV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginApiKeyListV1
     */
    readonly timestamp: number

    /**
     * isolated margin pair
     * @type {string}
     * @memberof TradeApiMarginGetMarginApiKeyListV1
     */
    readonly symbol?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginGetMarginApiKeyListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginApiKeyV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginApiKeyV1Request
 */
export interface TradeApiMarginGetMarginApiKeyV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginGetMarginApiKeyV1
     */
    readonly apiKey: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginApiKeyV1
     */
    readonly timestamp: number

    /**
     * isolated margin pair
     * @type {string}
     * @memberof TradeApiMarginGetMarginApiKeyV1
     */
    readonly symbol?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginGetMarginApiKeyV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginExchangeSmallLiabilityHistoryV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1Request
 */
export interface TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1Request {
    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1
     */
    readonly current: number

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1
     */
    readonly size: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1
     */
    readonly timestamp: number

    /**
     * Default: 30 days from current timestamp
     * @type {number}
     * @memberof TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1
     */
    readonly startTime?: number

    /**
     * Default: present timestamp
     * @type {number}
     * @memberof TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginExchangeSmallLiabilityV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginExchangeSmallLiabilityV1Request
 */
export interface TradeApiMarginGetMarginExchangeSmallLiabilityV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginExchangeSmallLiabilityV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginExchangeSmallLiabilityV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginForceLiquidationRecV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginForceLiquidationRecV1Request
 */
export interface TradeApiMarginGetMarginForceLiquidationRecV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginForceLiquidationRecV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginForceLiquidationRecV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginForceLiquidationRecV1
     */
    readonly endTime?: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginGetMarginForceLiquidationRecV1
     */
    readonly isolatedSymbol?: string

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof TradeApiMarginGetMarginForceLiquidationRecV1
     */
    readonly current?: number

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof TradeApiMarginGetMarginForceLiquidationRecV1
     */
    readonly size?: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginGetMarginForceLiquidationRecV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginMyTradesV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginMyTradesV1Request
 */
export interface TradeApiMarginGetMarginMyTradesV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginGetMarginMyTradesV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginMyTradesV1
     */
    readonly timestamp: number

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
     * @type {string}
     * @memberof TradeApiMarginGetMarginMyTradesV1
     */
    readonly isIsolated?: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginMyTradesV1
     */
    readonly orderId?: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginMyTradesV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginMyTradesV1
     */
    readonly endTime?: number

    /**
     * TradeId to fetch from. Default gets most recent trades.
     * @type {number}
     * @memberof TradeApiMarginGetMarginMyTradesV1
     */
    readonly fromId?: number

    /**
     * Default 500; max 1000.
     * @type {number}
     * @memberof TradeApiMarginGetMarginMyTradesV1
     */
    readonly limit?: number

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginGetMarginMyTradesV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginOpenOrderListV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginOpenOrderListV1Request
 */
export interface TradeApiMarginGetMarginOpenOrderListV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginOpenOrderListV1
     */
    readonly timestamp: number

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
     * @type {string}
     * @memberof TradeApiMarginGetMarginOpenOrderListV1
     */
    readonly isIsolated?: string

    /**
     * mandatory for isolated margin, not supported for cross margin
     * @type {string}
     * @memberof TradeApiMarginGetMarginOpenOrderListV1
     */
    readonly symbol?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginGetMarginOpenOrderListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginOpenOrdersV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginOpenOrdersV1Request
 */
export interface TradeApiMarginGetMarginOpenOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginOpenOrdersV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginGetMarginOpenOrdersV1
     */
    readonly symbol?: string

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
     * @type {string}
     * @memberof TradeApiMarginGetMarginOpenOrdersV1
     */
    readonly isIsolated?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginGetMarginOpenOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginOrderListV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginOrderListV1Request
 */
export interface TradeApiMarginGetMarginOrderListV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginOrderListV1
     */
    readonly timestamp: number

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
     * @type {string}
     * @memberof TradeApiMarginGetMarginOrderListV1
     */
    readonly isIsolated?: string

    /**
     * mandatory for isolated margin, not supported for cross margin
     * @type {string}
     * @memberof TradeApiMarginGetMarginOrderListV1
     */
    readonly symbol?: string

    /**
     * Either &#x60;orderListId&#x60; or &#x60;origClientOrderId&#x60; must be provided
     * @type {number}
     * @memberof TradeApiMarginGetMarginOrderListV1
     */
    readonly orderListId?: number

    /**
     * Either &#x60;orderListId&#x60; or &#x60;origClientOrderId&#x60; must be provided
     * @type {string}
     * @memberof TradeApiMarginGetMarginOrderListV1
     */
    readonly origClientOrderId?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginGetMarginOrderListV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginOrderV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginOrderV1Request
 */
export interface TradeApiMarginGetMarginOrderV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginGetMarginOrderV1
     */
    readonly symbol: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginOrderV1
     */
    readonly timestamp: number

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
     * @type {string}
     * @memberof TradeApiMarginGetMarginOrderV1
     */
    readonly isIsolated?: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginOrderV1
     */
    readonly orderId?: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginGetMarginOrderV1
     */
    readonly origClientOrderId?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginGetMarginOrderV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginGetMarginRateLimitOrderV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginGetMarginRateLimitOrderV1Request
 */
export interface TradeApiMarginGetMarginRateLimitOrderV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginGetMarginRateLimitOrderV1
     */
    readonly timestamp: number

    /**
     * for isolated margin or not, &amp;#34;TRUE&amp;#34;, &amp;#34;FALSE&amp;#34;，default &amp;#34;FALSE&amp;#34;
     * @type {string}
     * @memberof TradeApiMarginGetMarginRateLimitOrderV1
     */
    readonly isIsolated?: string

    /**
     * isolated symbol, mandatory for isolated margin
     * @type {string}
     * @memberof TradeApiMarginGetMarginRateLimitOrderV1
     */
    readonly symbol?: string

    /**
     * The value cannot be greater than &#x60;60000&#x60;
     * @type {number}
     * @memberof TradeApiMarginGetMarginRateLimitOrderV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for marginUpdateMarginApiKeyIpV1 operation in TradeApi.
 * @export
 * @interface TradeApiMarginUpdateMarginApiKeyIpV1Request
 */
export interface TradeApiMarginUpdateMarginApiKeyIpV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginUpdateMarginApiKeyIpV1
     */
    readonly apiKey: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginUpdateMarginApiKeyIpV1
     */
    readonly ip: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginUpdateMarginApiKeyIpV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiMarginUpdateMarginApiKeyIpV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiMarginUpdateMarginApiKeyIpV1
     */
    readonly symbol?: string
}

/**
 * TradeApi - object-oriented interface
 * @export
 * @class TradeApi
 * @extends {BaseAPI}
 */
export class TradeApi extends BaseAPI implements TradeApiInterface {
    /**
     * **Binance Margin offers low-latency trading through a special key, available exclusively to users with VIP level 4 or higher. **
     * @summary Create Special Key(Low-Latency Trading)(TRADE)
     * @param {TradeApiMarginCreateMarginApiKeyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginCreateMarginApiKeyV1(requestParameters: TradeApiMarginCreateMarginApiKeyV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginCreateMarginApiKeyV1(requestParameters.apiName, requestParameters.timestamp, requestParameters.ip, requestParameters.permissionMode, requestParameters.publicKey, requestParameters.recvWindow, requestParameters.symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Small Liability Exchange
     * @summary Small Liability Exchange (MARGIN)
     * @param {TradeApiMarginCreateMarginExchangeSmallLiabilityV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginCreateMarginExchangeSmallLiabilityV1(requestParameters: TradeApiMarginCreateMarginExchangeSmallLiabilityV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginCreateMarginExchangeSmallLiabilityV1(requestParameters.assetNames, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Margin Manual Liquidation
     * @summary Margin Manual Liquidation(MARGIN)
     * @param {TradeApiMarginCreateMarginManualLiquidationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginCreateMarginManualLiquidationV1(requestParameters: TradeApiMarginCreateMarginManualLiquidationV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginCreateMarginManualLiquidationV1(requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, requestParameters.symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send in a new OCO for a margin account
     * @summary Margin Account New OCO (TRADE)
     * @param {TradeApiMarginCreateMarginOrderOcoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginCreateMarginOrderOcoV1(requestParameters: TradeApiMarginCreateMarginOrderOcoV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginCreateMarginOrderOcoV1(requestParameters.price, requestParameters.quantity, requestParameters.side, requestParameters.stopPrice, requestParameters.symbol, requestParameters.timestamp, requestParameters.autoRepayAtCancel, requestParameters.isIsolated, requestParameters.limitClientOrderId, requestParameters.limitIcebergQty, requestParameters.listClientOrderId, requestParameters.newOrderRespType, requestParameters.recvWindow, requestParameters.selfTradePreventionMode, requestParameters.sideEffectType, requestParameters.stopClientOrderId, requestParameters.stopIcebergQty, requestParameters.stopLimitPrice, requestParameters.stopLimitTimeInForce, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post a new OTO order for margin account:
     * @summary Margin Account New OTO (TRADE)
     * @param {TradeApiMarginCreateMarginOrderOtoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginCreateMarginOrderOtoV1(requestParameters: TradeApiMarginCreateMarginOrderOtoV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginCreateMarginOrderOtoV1(requestParameters.pendingQuantity, requestParameters.pendingSide, requestParameters.pendingType, requestParameters.symbol, requestParameters.workingIcebergQty, requestParameters.workingPrice, requestParameters.workingQuantity, requestParameters.workingSide, requestParameters.workingType, requestParameters.autoRepayAtCancel, requestParameters.isIsolated, requestParameters.listClientOrderId, requestParameters.newOrderRespType, requestParameters.pendingClientOrderId, requestParameters.pendingIcebergQty, requestParameters.pendingPrice, requestParameters.pendingStopPrice, requestParameters.pendingTimeInForce, requestParameters.pendingTrailingDelta, requestParameters.selfTradePreventionMode, requestParameters.sideEffectType, requestParameters.workingClientOrderId, requestParameters.workingTimeInForce, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post a new OTOCO order for margin account：
     * @summary Margin Account New OTOCO (TRADE)
     * @param {TradeApiMarginCreateMarginOrderOtocoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginCreateMarginOrderOtocoV1(requestParameters: TradeApiMarginCreateMarginOrderOtocoV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginCreateMarginOrderOtocoV1(requestParameters.pendingAboveType, requestParameters.pendingQuantity, requestParameters.pendingSide, requestParameters.symbol, requestParameters.workingPrice, requestParameters.workingQuantity, requestParameters.workingSide, requestParameters.workingType, requestParameters.autoRepayAtCancel, requestParameters.isIsolated, requestParameters.listClientOrderId, requestParameters.newOrderRespType, requestParameters.pendingAboveClientOrderId, requestParameters.pendingAboveIcebergQty, requestParameters.pendingAbovePrice, requestParameters.pendingAboveStopPrice, requestParameters.pendingAboveTimeInForce, requestParameters.pendingAboveTrailingDelta, requestParameters.pendingBelowClientOrderId, requestParameters.pendingBelowIcebergQty, requestParameters.pendingBelowPrice, requestParameters.pendingBelowStopPrice, requestParameters.pendingBelowTimeInForce, requestParameters.pendingBelowTrailingDelta, requestParameters.pendingBelowType, requestParameters.selfTradePreventionMode, requestParameters.sideEffectType, requestParameters.workingClientOrderId, requestParameters.workingIcebergQty, requestParameters.workingTimeInForce, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post a new order for margin account.
     * @summary Margin Account New Order (TRADE)
     * @param {TradeApiMarginCreateMarginOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginCreateMarginOrderV1(requestParameters: TradeApiMarginCreateMarginOrderV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginCreateMarginOrderV1(requestParameters.side, requestParameters.symbol, requestParameters.timestamp, requestParameters.type, requestParameters.autoRepayAtCancel, requestParameters.icebergQty, requestParameters.isIsolated, requestParameters.newClientOrderId, requestParameters.newOrderRespType, requestParameters.price, requestParameters.quantity, requestParameters.quoteOrderQty, requestParameters.recvWindow, requestParameters.selfTradePreventionMode, requestParameters.sideEffectType, requestParameters.stopPrice, requestParameters.timeInForce, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This only applies to Special Key for Low Latency Trading.
     * @summary Delete Special Key(Low-Latency Trading)(TRADE)
     * @param {TradeApiMarginDeleteMarginApiKeyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginDeleteMarginApiKeyV1(requestParameters: TradeApiMarginDeleteMarginApiKeyV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginDeleteMarginApiKeyV1(requestParameters.timestamp, requestParameters.apiKey, requestParameters.apiName, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels all active orders on a symbol for margin account. This includes OCO orders.
     * @summary Margin Account Cancel all Open Orders on a Symbol (TRADE)
     * @param {TradeApiMarginDeleteMarginOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginDeleteMarginOpenOrdersV1(requestParameters: TradeApiMarginDeleteMarginOpenOrdersV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginDeleteMarginOpenOrdersV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel an entire Order List for a margin account.
     * @summary Margin Account Cancel OCO (TRADE)
     * @param {TradeApiMarginDeleteMarginOrderListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginDeleteMarginOrderListV1(requestParameters: TradeApiMarginDeleteMarginOrderListV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginDeleteMarginOrderListV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.orderListId, requestParameters.listClientOrderId, requestParameters.newClientOrderId, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel an active order for margin account.
     * @summary Margin Account Cancel Order (TRADE)
     * @param {TradeApiMarginDeleteMarginOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginDeleteMarginOrderV1(requestParameters: TradeApiMarginDeleteMarginOrderV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginDeleteMarginOrderV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.orderId, requestParameters.origClientOrderId, requestParameters.newClientOrderId, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all OCO for a specific margin account based on provided optional parameters
     * @summary Query Margin Account\'s all OCO (USER_DATA)
     * @param {TradeApiMarginGetMarginAllOrderListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginAllOrderListV1(requestParameters: TradeApiMarginGetMarginAllOrderListV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginAllOrderListV1(requestParameters.timestamp, requestParameters.isIsolated, requestParameters.symbol, requestParameters.fromId, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Margin Account\'s All Orders
     * @summary Query Margin Account\'s All Orders (USER_DATA)
     * @param {TradeApiMarginGetMarginAllOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginAllOrdersV1(requestParameters: TradeApiMarginGetMarginAllOrdersV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginAllOrdersV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.orderId, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This only applies to Special Key for Low Latency Trading.
     * @summary Query Special key List(Low Latency Trading)(TRADE)
     * @param {TradeApiMarginGetMarginApiKeyListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginApiKeyListV1(requestParameters: TradeApiMarginGetMarginApiKeyListV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginApiKeyListV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Special Key Information.
     * @summary Query Special key(Low Latency Trading)(TRADE)
     * @param {TradeApiMarginGetMarginApiKeyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginApiKeyV1(requestParameters: TradeApiMarginGetMarginApiKeyV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginApiKeyV1(requestParameters.apiKey, requestParameters.timestamp, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Small liability Exchange History
     * @summary Get Small Liability Exchange History (USER_DATA)
     * @param {TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginExchangeSmallLiabilityHistoryV1(requestParameters: TradeApiMarginGetMarginExchangeSmallLiabilityHistoryV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginExchangeSmallLiabilityHistoryV1(requestParameters.current, requestParameters.size, requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the coins which can be small liability exchange
     * @summary Get Small Liability Exchange Coin List (USER_DATA)
     * @param {TradeApiMarginGetMarginExchangeSmallLiabilityV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginExchangeSmallLiabilityV1(requestParameters: TradeApiMarginGetMarginExchangeSmallLiabilityV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginExchangeSmallLiabilityV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Force Liquidation Record
     * @summary Get Force Liquidation Record (USER_DATA)
     * @param {TradeApiMarginGetMarginForceLiquidationRecV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginForceLiquidationRecV1(requestParameters: TradeApiMarginGetMarginForceLiquidationRecV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginForceLiquidationRecV1(requestParameters.timestamp, requestParameters.startTime, requestParameters.endTime, requestParameters.isolatedSymbol, requestParameters.current, requestParameters.size, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Margin Account\'s Trade List
     * @summary Query Margin Account\'s Trade List (USER_DATA)
     * @param {TradeApiMarginGetMarginMyTradesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginMyTradesV1(requestParameters: TradeApiMarginGetMarginMyTradesV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginMyTradesV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.orderId, requestParameters.startTime, requestParameters.endTime, requestParameters.fromId, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Margin Account\'s Open OCO
     * @summary Query Margin Account\'s Open OCO (USER_DATA)
     * @param {TradeApiMarginGetMarginOpenOrderListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginOpenOrderListV1(requestParameters: TradeApiMarginGetMarginOpenOrderListV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginOpenOrderListV1(requestParameters.timestamp, requestParameters.isIsolated, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Margin Account\'s Open Orders
     * @summary Query Margin Account\'s Open Orders (USER_DATA)
     * @param {TradeApiMarginGetMarginOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginOpenOrdersV1(requestParameters: TradeApiMarginGetMarginOpenOrdersV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginOpenOrdersV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.isIsolated, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a specific OCO based on provided optional parameters
     * @summary Query Margin Account\'s OCO (USER_DATA)
     * @param {TradeApiMarginGetMarginOrderListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginOrderListV1(requestParameters: TradeApiMarginGetMarginOrderListV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginOrderListV1(requestParameters.timestamp, requestParameters.isIsolated, requestParameters.symbol, requestParameters.orderListId, requestParameters.origClientOrderId, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query Margin Account\'s Order
     * @summary Query Margin Account\'s Order (USER_DATA)
     * @param {TradeApiMarginGetMarginOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginOrderV1(requestParameters: TradeApiMarginGetMarginOrderV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginOrderV1(requestParameters.symbol, requestParameters.timestamp, requestParameters.isIsolated, requestParameters.orderId, requestParameters.origClientOrderId, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays the user\'s current margin order count usage for all intervals.
     * @summary Query Current Margin Order Count Usage (TRADE)
     * @param {TradeApiMarginGetMarginRateLimitOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginGetMarginRateLimitOrderV1(requestParameters: TradeApiMarginGetMarginRateLimitOrderV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginGetMarginRateLimitOrderV1(requestParameters.timestamp, requestParameters.isIsolated, requestParameters.symbol, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit ip restriction. This only applies to Special Key for Low Latency Trading.
     * @summary Edit ip for Special Key(Low-Latency Trading)(TRADE)
     * @param {TradeApiMarginUpdateMarginApiKeyIpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public marginUpdateMarginApiKeyIpV1(requestParameters: TradeApiMarginUpdateMarginApiKeyIpV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).marginUpdateMarginApiKeyIpV1(requestParameters.apiKey, requestParameters.ip, requestParameters.timestamp, requestParameters.recvWindow, requestParameters.symbol, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MarginCreateMarginOrderOtoV1WorkingTypeEnum = {
    Limit: 'LIMIT',
    LimitMaker: 'LIMIT_MAKER'
} as const;
export type MarginCreateMarginOrderOtoV1WorkingTypeEnum = typeof MarginCreateMarginOrderOtoV1WorkingTypeEnum[keyof typeof MarginCreateMarginOrderOtoV1WorkingTypeEnum];
/**
 * @export
 */
export const MarginCreateMarginOrderOtocoV1PendingAboveTypeEnum = {
    LimitMaker: 'LIMIT_MAKER',
    StopLoss: 'STOP_LOSS',
    AndStopLossLimit: 'and `STOP_LOSS_LIMIT'
} as const;
export type MarginCreateMarginOrderOtocoV1PendingAboveTypeEnum = typeof MarginCreateMarginOrderOtocoV1PendingAboveTypeEnum[keyof typeof MarginCreateMarginOrderOtocoV1PendingAboveTypeEnum];
/**
 * @export
 */
export const MarginCreateMarginOrderOtocoV1WorkingTypeEnum = {
    Limit: 'LIMIT',
    LimitMaker: 'LIMIT_MAKER'
} as const;
export type MarginCreateMarginOrderOtocoV1WorkingTypeEnum = typeof MarginCreateMarginOrderOtocoV1WorkingTypeEnum[keyof typeof MarginCreateMarginOrderOtocoV1WorkingTypeEnum];
/**
 * @export
 */
export const MarginCreateMarginOrderOtocoV1PendingBelowTypeEnum = {
    LimitMaker: 'LIMIT_MAKER',
    StopLoss: 'STOP_LOSS',
    AndStopLossLimit: 'and `STOP_LOSS_LIMIT'
} as const;
export type MarginCreateMarginOrderOtocoV1PendingBelowTypeEnum = typeof MarginCreateMarginOrderOtocoV1PendingBelowTypeEnum[keyof typeof MarginCreateMarginOrderOtocoV1PendingBelowTypeEnum];
