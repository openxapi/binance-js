/* tslint:disable */
/* eslint-disable */
/**
 * Binance USD-M Futures API
 * OpenAPI specification for Binance exchange - Umfutures API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { CreateApiReferralCustomizationV1Resp } from '../model';
// @ts-ignore
import type { CreateApiReferralUserCustomizationV1Resp } from '../model';
// @ts-ignore
import type { GetApiReferralCustomizationV1RespItem } from '../model';
// @ts-ignore
import type { GetApiReferralIfNewUserV1Resp } from '../model';
// @ts-ignore
import type { GetApiReferralOverviewV1Resp } from '../model';
// @ts-ignore
import type { GetApiReferralRebateVolV1RespItem } from '../model';
// @ts-ignore
import type { GetApiReferralTradeVolV1RespItem } from '../model';
// @ts-ignore
import type { GetApiReferralTraderNumV1RespItem } from '../model';
// @ts-ignore
import type { GetApiReferralTraderSummaryV1RespItem } from '../model';
// @ts-ignore
import type { GetApiReferralUserCustomizationV1Resp } from '../model';
// @ts-ignore
import type { GetIncomeV1RespItem } from '../model';
/**
 * BinanceLinkApi - axios parameter creator
 * @export
 */
export const BinanceLinkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * - CustomerId must be unique
         * @summary Customize Id For Client (USER DATA)(For Partner)
         * @param {string} customerId 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiReferralCustomizationV1: async (customerId: string, email: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('createApiReferralCustomizationV1', 'customerId', customerId)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createApiReferralCustomizationV1', 'email', email)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createApiReferralCustomizationV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/apiReferral/customization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (customerId !== undefined) { 
                localVarFormParams.set('customerId', customerId as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - CustomerId must be unique
         * @summary Customize Id For Client  (USER DATA)(For client)(PAPI)
         * @param {string} brokerId 
         * @param {string} customerId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiReferralUserCustomizationPAPIV1: async (brokerId: string, customerId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brokerId' is not null or undefined
            assertParamExists('createApiReferralUserCustomizationPAPIV1', 'brokerId', brokerId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('createApiReferralUserCustomizationPAPIV1', 'customerId', customerId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createApiReferralUserCustomizationPAPIV1', 'timestamp', timestamp)
            const localVarPath = `/papi/v1/apiReferral/userCustomization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (brokerId !== undefined) { 
                localVarFormParams.set('brokerId', brokerId as any);
            }
    
            if (customerId !== undefined) { 
                localVarFormParams.set('customerId', customerId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - CustomerId must be unique - If the user enabled Portfolio Margin, please user relevant /papi endpoint
         * @summary Customize Id For Client  (USER DATA)(For client)
         * @param {string} brokerId 
         * @param {string} customerId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiReferralUserCustomizationV1: async (brokerId: string, customerId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brokerId' is not null or undefined
            assertParamExists('createApiReferralUserCustomizationV1', 'brokerId', brokerId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('createApiReferralUserCustomizationV1', 'customerId', customerId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('createApiReferralUserCustomizationV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/apiReferral/userCustomization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (brokerId !== undefined) { 
                localVarFormParams.set('brokerId', brokerId as any);
            }
    
            if (customerId !== undefined) { 
                localVarFormParams.set('customerId', customerId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - CustomerId and email can not be sent at the same time
         * @summary Get Client Email Customized Id (USER DATA)
         * @param {number} timestamp 
         * @param {string} [customerId] 
         * @param {string} [email] 
         * @param {number} [page] default 1
         * @param {number} [limit] items num of one page，default 100，max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralCustomizationV1: async (timestamp: number, customerId?: string, email?: string, page?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralCustomizationV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/apiReferral/customization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query Client If The New User (USER DATA)(PAPI)
         * @param {string} brokerId 
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT-margined Futures,  2: Coin-margined Futures ; Default：1:USDT-margined Futures
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralIfNewUserPAPIV1: async (brokerId: string, timestamp: number, type?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brokerId' is not null or undefined
            assertParamExists('getApiReferralIfNewUserPAPIV1', 'brokerId', brokerId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralIfNewUserPAPIV1', 'timestamp', timestamp)
            const localVarPath = `/papi/v1/apiReferral/ifNewUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (brokerId !== undefined) {
                localVarQueryParameter['brokerId'] = brokerId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - If the user enabled Portfolio Margin, please user relevant /papi endpoint
         * @summary Query Client If The New User (USER DATA)
         * @param {string} brokerId 
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT-margined Futures，2: Coin-margined Futures; Default：1:USDT-margined Futures
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralIfNewUserV1: async (brokerId: string, timestamp: number, type?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brokerId' is not null or undefined
            assertParamExists('getApiReferralIfNewUserV1', 'brokerId', brokerId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralIfNewUserV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/apiReferral/ifNewUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (brokerId !== undefined) {
                localVarQueryParameter['brokerId'] = brokerId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Rebate Data Overview (USER DATA)
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralOverviewV1: async (timestamp: number, type?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralOverviewV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/apiReferral/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Rebate Volume (USER DATA)
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] default 500, max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralRebateVolV1: async (timestamp: number, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralRebateVolV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/apiReferral/rebateVol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User Trade Volume (USER DATA)
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] default 500, max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralTradeVolV1: async (timestamp: number, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralTradeVolV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/apiReferral/tradeVol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Trader Number (USER DATA)
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] default 500, max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralTraderNumV1: async (timestamp: number, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralTraderNumV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/apiReferral/traderNum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Trader Detail (USER DATA)
         * @param {number} timestamp 
         * @param {string} [customerId] 
         * @param {number} [type] 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] default 500, max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralTraderSummaryV1: async (timestamp: number, customerId?: string, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralTraderSummaryV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/apiReferral/traderSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User’s Customize Id (USER DATA)(PAPI)
         * @param {string} brokerId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralUserCustomizationPAPIV1: async (brokerId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brokerId' is not null or undefined
            assertParamExists('getApiReferralUserCustomizationPAPIV1', 'brokerId', brokerId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralUserCustomizationPAPIV1', 'timestamp', timestamp)
            const localVarPath = `/papi/v1/apiReferral/userCustomization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (brokerId !== undefined) {
                localVarQueryParameter['brokerId'] = brokerId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - CustomerId must be unique - If the user enabled Portfolio Margin, please user relevant /papi endpoint
         * @summary Get User’s Customize Id (USER DATA)
         * @param {string} brokerId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralUserCustomizationV1: async (brokerId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brokerId' is not null or undefined
            assertParamExists('getApiReferralUserCustomizationV1', 'brokerId', brokerId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiReferralUserCustomizationV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/apiReferral/userCustomization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (brokerId !== undefined) {
                localVarQueryParameter['brokerId'] = brokerId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - If incomeType  is not sent, all kinds of flow will be returned - If startTime and endTime are not sent, the most recent limit datas will be returned. - If the number of data between startTime and endTime is larger than limit, response will be return as startTime + limit.
         * @summary Get Income History(USER DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {string} [incomeType] &amp;#34;TRANSFER&amp;#34;，&amp;#34;WELCOME_BONUS&amp;#34;, &amp;#34;REALIZED_PNL&amp;#34;，&amp;#34;FUNDING_FEE&amp;#34;, &amp;#34;COMMISSION&amp;#34;, and &amp;#34;INSURANCE_CLEAR&amp;#34;
         * @param {number} [startTime] Timestamp in ms to get funding from INCLUSIVE.
         * @param {number} [endTime] Timestamp in ms to get funding until INCLUSIVE.
         * @param {number} [limit] Default 100; max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncomeV1: async (timestamp: number, symbol?: string, incomeType?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getIncomeV1', 'timestamp', timestamp)
            const localVarPath = `/fapi/v1/income`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (incomeType !== undefined) {
                localVarQueryParameter['incomeType'] = incomeType;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BinanceLinkApi - functional programming interface
 * @export
 */
export const BinanceLinkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BinanceLinkApiAxiosParamCreator(configuration)
    return {
        /**
         * - CustomerId must be unique
         * @summary Customize Id For Client (USER DATA)(For Partner)
         * @param {string} customerId 
         * @param {string} email 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiReferralCustomizationV1(customerId: string, email: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateApiReferralCustomizationV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiReferralCustomizationV1(customerId, email, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createApiReferralCustomizationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - CustomerId must be unique
         * @summary Customize Id For Client  (USER DATA)(For client)(PAPI)
         * @param {string} brokerId 
         * @param {string} customerId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiReferralUserCustomizationPAPIV1(brokerId: string, customerId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateApiReferralUserCustomizationV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiReferralUserCustomizationPAPIV1(brokerId, customerId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createApiReferralUserCustomizationPAPIV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - CustomerId must be unique - If the user enabled Portfolio Margin, please user relevant /papi endpoint
         * @summary Customize Id For Client  (USER DATA)(For client)
         * @param {string} brokerId 
         * @param {string} customerId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiReferralUserCustomizationV1(brokerId: string, customerId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateApiReferralUserCustomizationV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiReferralUserCustomizationV1(brokerId, customerId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.createApiReferralUserCustomizationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - CustomerId and email can not be sent at the same time
         * @summary Get Client Email Customized Id (USER DATA)
         * @param {number} timestamp 
         * @param {string} [customerId] 
         * @param {string} [email] 
         * @param {number} [page] default 1
         * @param {number} [limit] items num of one page，default 100，max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralCustomizationV1(timestamp: number, customerId?: string, email?: string, page?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetApiReferralCustomizationV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralCustomizationV1(timestamp, customerId, email, page, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralCustomizationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Query Client If The New User (USER DATA)(PAPI)
         * @param {string} brokerId 
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT-margined Futures,  2: Coin-margined Futures ; Default：1:USDT-margined Futures
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralIfNewUserPAPIV1(brokerId: string, timestamp: number, type?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiReferralIfNewUserV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralIfNewUserPAPIV1(brokerId, timestamp, type, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralIfNewUserPAPIV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - If the user enabled Portfolio Margin, please user relevant /papi endpoint
         * @summary Query Client If The New User (USER DATA)
         * @param {string} brokerId 
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT-margined Futures，2: Coin-margined Futures; Default：1:USDT-margined Futures
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralIfNewUserV1(brokerId: string, timestamp: number, type?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiReferralIfNewUserV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralIfNewUserV1(brokerId, timestamp, type, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralIfNewUserV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Rebate Data Overview (USER DATA)
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralOverviewV1(timestamp: number, type?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiReferralOverviewV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralOverviewV1(timestamp, type, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralOverviewV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Rebate Volume (USER DATA)
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] default 500, max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralRebateVolV1(timestamp: number, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetApiReferralRebateVolV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralRebateVolV1(timestamp, type, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralRebateVolV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User Trade Volume (USER DATA)
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] default 500, max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralTradeVolV1(timestamp: number, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetApiReferralTradeVolV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralTradeVolV1(timestamp, type, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralTradeVolV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Trader Number (USER DATA)
         * @param {number} timestamp 
         * @param {number} [type] 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] default 500, max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralTraderNumV1(timestamp: number, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetApiReferralTraderNumV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralTraderNumV1(timestamp, type, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralTraderNumV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Trader Detail (USER DATA)
         * @param {number} timestamp 
         * @param {string} [customerId] 
         * @param {number} [type] 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {number} [limit] default 500, max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralTraderSummaryV1(timestamp: number, customerId?: string, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetApiReferralTraderSummaryV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralTraderSummaryV1(timestamp, customerId, type, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralTraderSummaryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User’s Customize Id (USER DATA)(PAPI)
         * @param {string} brokerId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralUserCustomizationPAPIV1(brokerId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiReferralUserCustomizationV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralUserCustomizationPAPIV1(brokerId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralUserCustomizationPAPIV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - CustomerId must be unique - If the user enabled Portfolio Margin, please user relevant /papi endpoint
         * @summary Get User’s Customize Id (USER DATA)
         * @param {string} brokerId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiReferralUserCustomizationV1(brokerId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiReferralUserCustomizationV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiReferralUserCustomizationV1(brokerId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getApiReferralUserCustomizationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - If incomeType  is not sent, all kinds of flow will be returned - If startTime and endTime are not sent, the most recent limit datas will be returned. - If the number of data between startTime and endTime is larger than limit, response will be return as startTime + limit.
         * @summary Get Income History(USER DATA)
         * @param {number} timestamp 
         * @param {string} [symbol] 
         * @param {string} [incomeType] &amp;#34;TRANSFER&amp;#34;，&amp;#34;WELCOME_BONUS&amp;#34;, &amp;#34;REALIZED_PNL&amp;#34;，&amp;#34;FUNDING_FEE&amp;#34;, &amp;#34;COMMISSION&amp;#34;, and &amp;#34;INSURANCE_CLEAR&amp;#34;
         * @param {number} [startTime] Timestamp in ms to get funding from INCLUSIVE.
         * @param {number} [endTime] Timestamp in ms to get funding until INCLUSIVE.
         * @param {number} [limit] Default 100; max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncomeV1(timestamp: number, symbol?: string, incomeType?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetIncomeV1RespItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIncomeV1(timestamp, symbol, incomeType, startTime, endTime, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BinanceLinkApi.getIncomeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BinanceLinkApi - factory interface
 * @export
 */
export const BinanceLinkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BinanceLinkApiFp(configuration)
    return {
        /**
         * - CustomerId must be unique
         * @summary Customize Id For Client (USER DATA)(For Partner)
         * @param {BinanceLinkApiCreateApiReferralCustomizationV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiReferralCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateApiReferralCustomizationV1Resp> {
            return localVarFp.createApiReferralCustomizationV1(requestParameters.customerId, requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - CustomerId must be unique
         * @summary Customize Id For Client  (USER DATA)(For client)(PAPI)
         * @param {BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiReferralUserCustomizationPAPIV1(requestParameters: BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateApiReferralUserCustomizationV1Resp> {
            return localVarFp.createApiReferralUserCustomizationPAPIV1(requestParameters.brokerId, requestParameters.customerId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - CustomerId must be unique - If the user enabled Portfolio Margin, please user relevant /papi endpoint
         * @summary Customize Id For Client  (USER DATA)(For client)
         * @param {BinanceLinkApiCreateApiReferralUserCustomizationV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateApiReferralUserCustomizationV1Resp> {
            return localVarFp.createApiReferralUserCustomizationV1(requestParameters.brokerId, requestParameters.customerId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - CustomerId and email can not be sent at the same time
         * @summary Get Client Email Customized Id (USER DATA)
         * @param {BinanceLinkApiGetApiReferralCustomizationV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralCustomizationV1RespItem>> {
            return localVarFp.getApiReferralCustomizationV1(requestParameters.timestamp, requestParameters.customerId, requestParameters.email, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query Client If The New User (USER DATA)(PAPI)
         * @param {BinanceLinkApiGetApiReferralIfNewUserPAPIV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralIfNewUserPAPIV1(requestParameters: BinanceLinkApiGetApiReferralIfNewUserPAPIV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralIfNewUserV1Resp> {
            return localVarFp.getApiReferralIfNewUserPAPIV1(requestParameters.brokerId, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - If the user enabled Portfolio Margin, please user relevant /papi endpoint
         * @summary Query Client If The New User (USER DATA)
         * @param {BinanceLinkApiGetApiReferralIfNewUserV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralIfNewUserV1(requestParameters: BinanceLinkApiGetApiReferralIfNewUserV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralIfNewUserV1Resp> {
            return localVarFp.getApiReferralIfNewUserV1(requestParameters.brokerId, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Rebate Data Overview (USER DATA)
         * @param {BinanceLinkApiGetApiReferralOverviewV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralOverviewV1(requestParameters: BinanceLinkApiGetApiReferralOverviewV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralOverviewV1Resp> {
            return localVarFp.getApiReferralOverviewV1(requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Rebate Volume (USER DATA)
         * @param {BinanceLinkApiGetApiReferralRebateVolV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralRebateVolV1(requestParameters: BinanceLinkApiGetApiReferralRebateVolV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralRebateVolV1RespItem>> {
            return localVarFp.getApiReferralRebateVolV1(requestParameters.timestamp, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User Trade Volume (USER DATA)
         * @param {BinanceLinkApiGetApiReferralTradeVolV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralTradeVolV1(requestParameters: BinanceLinkApiGetApiReferralTradeVolV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralTradeVolV1RespItem>> {
            return localVarFp.getApiReferralTradeVolV1(requestParameters.timestamp, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Trader Number (USER DATA)
         * @param {BinanceLinkApiGetApiReferralTraderNumV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralTraderNumV1(requestParameters: BinanceLinkApiGetApiReferralTraderNumV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralTraderNumV1RespItem>> {
            return localVarFp.getApiReferralTraderNumV1(requestParameters.timestamp, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Trader Detail (USER DATA)
         * @param {BinanceLinkApiGetApiReferralTraderSummaryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralTraderSummaryV1(requestParameters: BinanceLinkApiGetApiReferralTraderSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralTraderSummaryV1RespItem>> {
            return localVarFp.getApiReferralTraderSummaryV1(requestParameters.timestamp, requestParameters.customerId, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User’s Customize Id (USER DATA)(PAPI)
         * @param {BinanceLinkApiGetApiReferralUserCustomizationPAPIV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralUserCustomizationPAPIV1(requestParameters: BinanceLinkApiGetApiReferralUserCustomizationPAPIV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralUserCustomizationV1Resp> {
            return localVarFp.getApiReferralUserCustomizationPAPIV1(requestParameters.brokerId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - CustomerId must be unique - If the user enabled Portfolio Margin, please user relevant /papi endpoint
         * @summary Get User’s Customize Id (USER DATA)
         * @param {BinanceLinkApiGetApiReferralUserCustomizationV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralUserCustomizationV1Resp> {
            return localVarFp.getApiReferralUserCustomizationV1(requestParameters.brokerId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - If incomeType  is not sent, all kinds of flow will be returned - If startTime and endTime are not sent, the most recent limit datas will be returned. - If the number of data between startTime and endTime is larger than limit, response will be return as startTime + limit.
         * @summary Get Income History(USER DATA)
         * @param {BinanceLinkApiGetIncomeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncomeV1(requestParameters: BinanceLinkApiGetIncomeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetIncomeV1RespItem>> {
            return localVarFp.getIncomeV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.incomeType, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BinanceLinkApi - interface
 * @export
 * @interface BinanceLinkApi
 */
export interface BinanceLinkApiInterface {
    /**
     * - CustomerId must be unique
     * @summary Customize Id For Client (USER DATA)(For Partner)
     * @param {BinanceLinkApiCreateApiReferralCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createApiReferralCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateApiReferralCustomizationV1Resp>;

    /**
     * - CustomerId must be unique
     * @summary Customize Id For Client  (USER DATA)(For client)(PAPI)
     * @param {BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createApiReferralUserCustomizationPAPIV1(requestParameters: BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateApiReferralUserCustomizationV1Resp>;

    /**
     * - CustomerId must be unique - If the user enabled Portfolio Margin, please user relevant /papi endpoint
     * @summary Customize Id For Client  (USER DATA)(For client)
     * @param {BinanceLinkApiCreateApiReferralUserCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    createApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateApiReferralUserCustomizationV1Resp>;

    /**
     * - CustomerId and email can not be sent at the same time
     * @summary Get Client Email Customized Id (USER DATA)
     * @param {BinanceLinkApiGetApiReferralCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralCustomizationV1RespItem>>;

    /**
     * 
     * @summary Query Client If The New User (USER DATA)(PAPI)
     * @param {BinanceLinkApiGetApiReferralIfNewUserPAPIV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralIfNewUserPAPIV1(requestParameters: BinanceLinkApiGetApiReferralIfNewUserPAPIV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralIfNewUserV1Resp>;

    /**
     * - If the user enabled Portfolio Margin, please user relevant /papi endpoint
     * @summary Query Client If The New User (USER DATA)
     * @param {BinanceLinkApiGetApiReferralIfNewUserV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralIfNewUserV1(requestParameters: BinanceLinkApiGetApiReferralIfNewUserV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralIfNewUserV1Resp>;

    /**
     * 
     * @summary Get Rebate Data Overview (USER DATA)
     * @param {BinanceLinkApiGetApiReferralOverviewV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralOverviewV1(requestParameters: BinanceLinkApiGetApiReferralOverviewV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralOverviewV1Resp>;

    /**
     * 
     * @summary Get Rebate Volume (USER DATA)
     * @param {BinanceLinkApiGetApiReferralRebateVolV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralRebateVolV1(requestParameters: BinanceLinkApiGetApiReferralRebateVolV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralRebateVolV1RespItem>>;

    /**
     * 
     * @summary Get User Trade Volume (USER DATA)
     * @param {BinanceLinkApiGetApiReferralTradeVolV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralTradeVolV1(requestParameters: BinanceLinkApiGetApiReferralTradeVolV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralTradeVolV1RespItem>>;

    /**
     * 
     * @summary Get Trader Number (USER DATA)
     * @param {BinanceLinkApiGetApiReferralTraderNumV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralTraderNumV1(requestParameters: BinanceLinkApiGetApiReferralTraderNumV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralTraderNumV1RespItem>>;

    /**
     * 
     * @summary Get Trader Detail (USER DATA)
     * @param {BinanceLinkApiGetApiReferralTraderSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralTraderSummaryV1(requestParameters: BinanceLinkApiGetApiReferralTraderSummaryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetApiReferralTraderSummaryV1RespItem>>;

    /**
     * 
     * @summary Get User’s Customize Id (USER DATA)(PAPI)
     * @param {BinanceLinkApiGetApiReferralUserCustomizationPAPIV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralUserCustomizationPAPIV1(requestParameters: BinanceLinkApiGetApiReferralUserCustomizationPAPIV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralUserCustomizationV1Resp>;

    /**
     * - CustomerId must be unique - If the user enabled Portfolio Margin, please user relevant /papi endpoint
     * @summary Get User’s Customize Id (USER DATA)
     * @param {BinanceLinkApiGetApiReferralUserCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetApiReferralUserCustomizationV1Resp>;

    /**
     * - If incomeType  is not sent, all kinds of flow will be returned - If startTime and endTime are not sent, the most recent limit datas will be returned. - If the number of data between startTime and endTime is larger than limit, response will be return as startTime + limit.
     * @summary Get Income History(USER DATA)
     * @param {BinanceLinkApiGetIncomeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApiInterface
     */
    getIncomeV1(requestParameters: BinanceLinkApiGetIncomeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetIncomeV1RespItem>>;

}

/**
 * Request parameters for createApiReferralCustomizationV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateApiReferralCustomizationV1Request
 */
export interface BinanceLinkApiCreateApiReferralCustomizationV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateApiReferralCustomizationV1
     */
    readonly customerId: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateApiReferralCustomizationV1
     */
    readonly email: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateApiReferralCustomizationV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateApiReferralCustomizationV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createApiReferralUserCustomizationPAPIV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1Request
 */
export interface BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1
     */
    readonly brokerId: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1
     */
    readonly customerId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for createApiReferralUserCustomizationV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiCreateApiReferralUserCustomizationV1Request
 */
export interface BinanceLinkApiCreateApiReferralUserCustomizationV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationV1
     */
    readonly brokerId: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationV1
     */
    readonly customerId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiCreateApiReferralUserCustomizationV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralCustomizationV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralCustomizationV1Request
 */
export interface BinanceLinkApiGetApiReferralCustomizationV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralCustomizationV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralCustomizationV1
     */
    readonly customerId?: string

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralCustomizationV1
     */
    readonly email?: string

    /**
     * default 1
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralCustomizationV1
     */
    readonly page?: number

    /**
     * items num of one page，default 100，max 1000
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralCustomizationV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralCustomizationV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralIfNewUserPAPIV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralIfNewUserPAPIV1Request
 */
export interface BinanceLinkApiGetApiReferralIfNewUserPAPIV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralIfNewUserPAPIV1
     */
    readonly brokerId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralIfNewUserPAPIV1
     */
    readonly timestamp: number

    /**
     * 1:USDT-margined Futures,  2: Coin-margined Futures ; Default：1:USDT-margined Futures
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralIfNewUserPAPIV1
     */
    readonly type?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralIfNewUserPAPIV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralIfNewUserV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralIfNewUserV1Request
 */
export interface BinanceLinkApiGetApiReferralIfNewUserV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralIfNewUserV1
     */
    readonly brokerId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralIfNewUserV1
     */
    readonly timestamp: number

    /**
     * 1:USDT-margined Futures，2: Coin-margined Futures; Default：1:USDT-margined Futures
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralIfNewUserV1
     */
    readonly type?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralIfNewUserV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralOverviewV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralOverviewV1Request
 */
export interface BinanceLinkApiGetApiReferralOverviewV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralOverviewV1
     */
    readonly timestamp: number

    /**
     * 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralOverviewV1
     */
    readonly type?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralOverviewV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralRebateVolV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralRebateVolV1Request
 */
export interface BinanceLinkApiGetApiReferralRebateVolV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralRebateVolV1
     */
    readonly timestamp: number

    /**
     * 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralRebateVolV1
     */
    readonly type?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralRebateVolV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralRebateVolV1
     */
    readonly endTime?: number

    /**
     * default 500, max 1000
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralRebateVolV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralRebateVolV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralTradeVolV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralTradeVolV1Request
 */
export interface BinanceLinkApiGetApiReferralTradeVolV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTradeVolV1
     */
    readonly timestamp: number

    /**
     * 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTradeVolV1
     */
    readonly type?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTradeVolV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTradeVolV1
     */
    readonly endTime?: number

    /**
     * default 500, max 1000
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTradeVolV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTradeVolV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralTraderNumV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralTraderNumV1Request
 */
export interface BinanceLinkApiGetApiReferralTraderNumV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderNumV1
     */
    readonly timestamp: number

    /**
     * 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderNumV1
     */
    readonly type?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderNumV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderNumV1
     */
    readonly endTime?: number

    /**
     * default 500, max 1000
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderNumV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderNumV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralTraderSummaryV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralTraderSummaryV1Request
 */
export interface BinanceLinkApiGetApiReferralTraderSummaryV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderSummaryV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralTraderSummaryV1
     */
    readonly customerId?: string

    /**
     * 1:USDT Margined Futures, 2:COIN Margined Futures Default： USDT Margined Futures
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderSummaryV1
     */
    readonly type?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderSummaryV1
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderSummaryV1
     */
    readonly endTime?: number

    /**
     * default 500, max 1000
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderSummaryV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralTraderSummaryV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralUserCustomizationPAPIV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralUserCustomizationPAPIV1Request
 */
export interface BinanceLinkApiGetApiReferralUserCustomizationPAPIV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralUserCustomizationPAPIV1
     */
    readonly brokerId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralUserCustomizationPAPIV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralUserCustomizationPAPIV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getApiReferralUserCustomizationV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetApiReferralUserCustomizationV1Request
 */
export interface BinanceLinkApiGetApiReferralUserCustomizationV1Request {
    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetApiReferralUserCustomizationV1
     */
    readonly brokerId: string

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralUserCustomizationV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetApiReferralUserCustomizationV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for getIncomeV1 operation in BinanceLinkApi.
 * @export
 * @interface BinanceLinkApiGetIncomeV1Request
 */
export interface BinanceLinkApiGetIncomeV1Request {
    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetIncomeV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof BinanceLinkApiGetIncomeV1
     */
    readonly symbol?: string

    /**
     * &amp;#34;TRANSFER&amp;#34;，&amp;#34;WELCOME_BONUS&amp;#34;, &amp;#34;REALIZED_PNL&amp;#34;，&amp;#34;FUNDING_FEE&amp;#34;, &amp;#34;COMMISSION&amp;#34;, and &amp;#34;INSURANCE_CLEAR&amp;#34;
     * @type {string}
     * @memberof BinanceLinkApiGetIncomeV1
     */
    readonly incomeType?: string

    /**
     * Timestamp in ms to get funding from INCLUSIVE.
     * @type {number}
     * @memberof BinanceLinkApiGetIncomeV1
     */
    readonly startTime?: number

    /**
     * Timestamp in ms to get funding until INCLUSIVE.
     * @type {number}
     * @memberof BinanceLinkApiGetIncomeV1
     */
    readonly endTime?: number

    /**
     * Default 100; max 1000
     * @type {number}
     * @memberof BinanceLinkApiGetIncomeV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof BinanceLinkApiGetIncomeV1
     */
    readonly recvWindow?: number
}

/**
 * BinanceLinkApi - object-oriented interface
 * @export
 * @class BinanceLinkApi
 * @extends {BaseAPI}
 */
export class BinanceLinkApi extends BaseAPI implements BinanceLinkApiInterface {
    /**
     * - CustomerId must be unique
     * @summary Customize Id For Client (USER DATA)(For Partner)
     * @param {BinanceLinkApiCreateApiReferralCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createApiReferralCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createApiReferralCustomizationV1(requestParameters.customerId, requestParameters.email, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - CustomerId must be unique
     * @summary Customize Id For Client  (USER DATA)(For client)(PAPI)
     * @param {BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createApiReferralUserCustomizationPAPIV1(requestParameters: BinanceLinkApiCreateApiReferralUserCustomizationPAPIV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createApiReferralUserCustomizationPAPIV1(requestParameters.brokerId, requestParameters.customerId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - CustomerId must be unique - If the user enabled Portfolio Margin, please user relevant /papi endpoint
     * @summary Customize Id For Client  (USER DATA)(For client)
     * @param {BinanceLinkApiCreateApiReferralUserCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public createApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiCreateApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).createApiReferralUserCustomizationV1(requestParameters.brokerId, requestParameters.customerId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - CustomerId and email can not be sent at the same time
     * @summary Get Client Email Customized Id (USER DATA)
     * @param {BinanceLinkApiGetApiReferralCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralCustomizationV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralCustomizationV1(requestParameters.timestamp, requestParameters.customerId, requestParameters.email, requestParameters.page, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query Client If The New User (USER DATA)(PAPI)
     * @param {BinanceLinkApiGetApiReferralIfNewUserPAPIV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralIfNewUserPAPIV1(requestParameters: BinanceLinkApiGetApiReferralIfNewUserPAPIV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralIfNewUserPAPIV1(requestParameters.brokerId, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - If the user enabled Portfolio Margin, please user relevant /papi endpoint
     * @summary Query Client If The New User (USER DATA)
     * @param {BinanceLinkApiGetApiReferralIfNewUserV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralIfNewUserV1(requestParameters: BinanceLinkApiGetApiReferralIfNewUserV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralIfNewUserV1(requestParameters.brokerId, requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Rebate Data Overview (USER DATA)
     * @param {BinanceLinkApiGetApiReferralOverviewV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralOverviewV1(requestParameters: BinanceLinkApiGetApiReferralOverviewV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralOverviewV1(requestParameters.timestamp, requestParameters.type, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Rebate Volume (USER DATA)
     * @param {BinanceLinkApiGetApiReferralRebateVolV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralRebateVolV1(requestParameters: BinanceLinkApiGetApiReferralRebateVolV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralRebateVolV1(requestParameters.timestamp, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User Trade Volume (USER DATA)
     * @param {BinanceLinkApiGetApiReferralTradeVolV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralTradeVolV1(requestParameters: BinanceLinkApiGetApiReferralTradeVolV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralTradeVolV1(requestParameters.timestamp, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Trader Number (USER DATA)
     * @param {BinanceLinkApiGetApiReferralTraderNumV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralTraderNumV1(requestParameters: BinanceLinkApiGetApiReferralTraderNumV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralTraderNumV1(requestParameters.timestamp, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Trader Detail (USER DATA)
     * @param {BinanceLinkApiGetApiReferralTraderSummaryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralTraderSummaryV1(requestParameters: BinanceLinkApiGetApiReferralTraderSummaryV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralTraderSummaryV1(requestParameters.timestamp, requestParameters.customerId, requestParameters.type, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User’s Customize Id (USER DATA)(PAPI)
     * @param {BinanceLinkApiGetApiReferralUserCustomizationPAPIV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralUserCustomizationPAPIV1(requestParameters: BinanceLinkApiGetApiReferralUserCustomizationPAPIV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralUserCustomizationPAPIV1(requestParameters.brokerId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - CustomerId must be unique - If the user enabled Portfolio Margin, please user relevant /papi endpoint
     * @summary Get User’s Customize Id (USER DATA)
     * @param {BinanceLinkApiGetApiReferralUserCustomizationV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getApiReferralUserCustomizationV1(requestParameters: BinanceLinkApiGetApiReferralUserCustomizationV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getApiReferralUserCustomizationV1(requestParameters.brokerId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - If incomeType  is not sent, all kinds of flow will be returned - If startTime and endTime are not sent, the most recent limit datas will be returned. - If the number of data between startTime and endTime is larger than limit, response will be return as startTime + limit.
     * @summary Get Income History(USER DATA)
     * @param {BinanceLinkApiGetIncomeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BinanceLinkApi
     */
    public getIncomeV1(requestParameters: BinanceLinkApiGetIncomeV1Request, options?: RawAxiosRequestConfig) {
        return BinanceLinkApiFp(this.configuration).getIncomeV1(requestParameters.timestamp, requestParameters.symbol, requestParameters.incomeType, requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

