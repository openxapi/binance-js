/* tslint:disable */
/* eslint-disable */
/**
 * Binance Convert API
 * OpenAPI specification for Binance exchange - Convert API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setBinanceAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIError } from '../model';
// @ts-ignore
import type { ConvertCreateConvertAcceptQuoteV1Resp } from '../model';
// @ts-ignore
import type { ConvertCreateConvertGetQuoteV1Resp } from '../model';
// @ts-ignore
import type { ConvertCreateConvertLimitCancelOrderV1Resp } from '../model';
// @ts-ignore
import type { ConvertCreateConvertLimitPlaceOrderV1Resp } from '../model';
// @ts-ignore
import type { ConvertCreateConvertLimitQueryOpenOrdersV1Resp } from '../model';
// @ts-ignore
import type { ConvertGetConvertOrderStatusV1Resp } from '../model';
// @ts-ignore
import type { ConvertGetConvertTradeFlowV1Resp } from '../model';
/**
 * TradeApi - axios parameter creator
 * @export
 */
export const TradeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept the offered quote by quote ID.
         * @summary Accept Quote (TRADE)
         * @param {string} quoteId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateConvertAcceptQuoteV1: async (quoteId: string, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('convertCreateConvertAcceptQuoteV1', 'quoteId', quoteId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('convertCreateConvertAcceptQuoteV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/convert/acceptQuote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (quoteId !== undefined) { 
                localVarFormParams.set('quoteId', quoteId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request a quote for the requested token pairs
         * @summary Send Quote Request(USER_DATA)
         * @param {string} fromAsset 
         * @param {number} timestamp 
         * @param {string} toAsset 
         * @param {string} [fromAmount] 
         * @param {number} [recvWindow] 
         * @param {string} [toAmount] 
         * @param {string} [validTime] 
         * @param {string} [walletType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateConvertGetQuoteV1: async (fromAsset: string, timestamp: number, toAsset: string, fromAmount?: string, recvWindow?: number, toAmount?: string, validTime?: string, walletType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromAsset' is not null or undefined
            assertParamExists('convertCreateConvertGetQuoteV1', 'fromAsset', fromAsset)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('convertCreateConvertGetQuoteV1', 'timestamp', timestamp)
            // verify required parameter 'toAsset' is not null or undefined
            assertParamExists('convertCreateConvertGetQuoteV1', 'toAsset', toAsset)
            const localVarPath = `/sapi/v1/convert/getQuote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (fromAmount !== undefined) { 
                localVarFormParams.set('fromAmount', fromAmount as any);
            }
    
            if (fromAsset !== undefined) { 
                localVarFormParams.set('fromAsset', fromAsset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (toAmount !== undefined) { 
                localVarFormParams.set('toAmount', toAmount as any);
            }
    
            if (toAsset !== undefined) { 
                localVarFormParams.set('toAsset', toAsset as any);
            }
    
            if (validTime !== undefined) { 
                localVarFormParams.set('validTime', validTime as any);
            }
    
            if (walletType !== undefined) { 
                localVarFormParams.set('walletType', walletType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable users to cancel a limit order
         * @summary Cancel limit order (USER_DATA)
         * @param {number} orderId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateConvertLimitCancelOrderV1: async (orderId: number, timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('convertCreateConvertLimitCancelOrderV1', 'orderId', orderId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('convertCreateConvertLimitCancelOrderV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/convert/limit/cancelOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (orderId !== undefined) { 
                localVarFormParams.set('orderId', orderId as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable users to place a limit order
         * @summary Place limit order (USER_DATA)
         * @param {string} baseAsset 
         * @param {string} expiredType 
         * @param {string} limitPrice 
         * @param {string} quoteAsset 
         * @param {string} side 
         * @param {number} timestamp 
         * @param {string} [baseAmount] 
         * @param {string} [quoteAmount] 
         * @param {number} [recvWindow] 
         * @param {string} [walletType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateConvertLimitPlaceOrderV1: async (baseAsset: string, expiredType: string, limitPrice: string, quoteAsset: string, side: string, timestamp: number, baseAmount?: string, quoteAmount?: string, recvWindow?: number, walletType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseAsset' is not null or undefined
            assertParamExists('convertCreateConvertLimitPlaceOrderV1', 'baseAsset', baseAsset)
            // verify required parameter 'expiredType' is not null or undefined
            assertParamExists('convertCreateConvertLimitPlaceOrderV1', 'expiredType', expiredType)
            // verify required parameter 'limitPrice' is not null or undefined
            assertParamExists('convertCreateConvertLimitPlaceOrderV1', 'limitPrice', limitPrice)
            // verify required parameter 'quoteAsset' is not null or undefined
            assertParamExists('convertCreateConvertLimitPlaceOrderV1', 'quoteAsset', quoteAsset)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('convertCreateConvertLimitPlaceOrderV1', 'side', side)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('convertCreateConvertLimitPlaceOrderV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/convert/limit/placeOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (baseAmount !== undefined) { 
                localVarFormParams.set('baseAmount', baseAmount as any);
            }
    
            if (baseAsset !== undefined) { 
                localVarFormParams.set('baseAsset', baseAsset as any);
            }
    
            if (expiredType !== undefined) { 
                localVarFormParams.set('expiredType', expiredType as any);
            }
    
            if (limitPrice !== undefined) { 
                localVarFormParams.set('limitPrice', limitPrice as any);
            }
    
            if (quoteAmount !== undefined) { 
                localVarFormParams.set('quoteAmount', quoteAmount as any);
            }
    
            if (quoteAsset !== undefined) { 
                localVarFormParams.set('quoteAsset', quoteAsset as any);
            }
    
            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.set('side', side as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
            if (walletType !== undefined) { 
                localVarFormParams.set('walletType', walletType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request a quote for the requested token pairs
         * @summary Query limit open orders (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateConvertLimitQueryOpenOrdersV1: async (timestamp: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('convertCreateConvertLimitQueryOpenOrdersV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/convert/limit/queryOpenOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication ApiKey required


            if (recvWindow !== undefined) { 
                localVarFormParams.set('recvWindow', recvWindow as any);
            }
    
            if (timestamp !== undefined) { 
                localVarFormParams.set('timestamp', timestamp as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query order status by order ID.
         * @summary Order status(USER_DATA)
         * @param {string} [orderId] Either orderId or quoteId is required
         * @param {string} [quoteId] Either orderId or quoteId is required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertGetConvertOrderStatusV1: async (orderId?: string, quoteId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/convert/orderStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (quoteId !== undefined) {
                localVarQueryParameter['quoteId'] = quoteId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Convert Trade History
         * @summary Get Convert Trade History(USER_DATA)
         * @param {number} startTime 
         * @param {number} endTime 
         * @param {number} timestamp 
         * @param {number} [limit] Default 100, Max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertGetConvertTradeFlowV1: async (startTime: number, endTime: number, timestamp: number, limit?: number, recvWindow?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('convertGetConvertTradeFlowV1', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('convertGetConvertTradeFlowV1', 'endTime', endTime)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('convertGetConvertTradeFlowV1', 'timestamp', timestamp)
            const localVarPath = `/sapi/v1/convert/tradeFlow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            // Handle Binance authentication with API key in header and signature in query parameters
            await setBinanceAuthToObject(localVarUrlObj, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TradeApi - functional programming interface
 * @export
 */
export const TradeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TradeApiAxiosParamCreator(configuration)
    return {
        /**
         * Accept the offered quote by quote ID.
         * @summary Accept Quote (TRADE)
         * @param {string} quoteId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertCreateConvertAcceptQuoteV1(quoteId: string, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConvertCreateConvertAcceptQuoteV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertCreateConvertAcceptQuoteV1(quoteId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.convertCreateConvertAcceptQuoteV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Request a quote for the requested token pairs
         * @summary Send Quote Request(USER_DATA)
         * @param {string} fromAsset 
         * @param {number} timestamp 
         * @param {string} toAsset 
         * @param {string} [fromAmount] 
         * @param {number} [recvWindow] 
         * @param {string} [toAmount] 
         * @param {string} [validTime] 
         * @param {string} [walletType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertCreateConvertGetQuoteV1(fromAsset: string, timestamp: number, toAsset: string, fromAmount?: string, recvWindow?: number, toAmount?: string, validTime?: string, walletType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConvertCreateConvertGetQuoteV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertCreateConvertGetQuoteV1(fromAsset, timestamp, toAsset, fromAmount, recvWindow, toAmount, validTime, walletType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.convertCreateConvertGetQuoteV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable users to cancel a limit order
         * @summary Cancel limit order (USER_DATA)
         * @param {number} orderId 
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertCreateConvertLimitCancelOrderV1(orderId: number, timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConvertCreateConvertLimitCancelOrderV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertCreateConvertLimitCancelOrderV1(orderId, timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.convertCreateConvertLimitCancelOrderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable users to place a limit order
         * @summary Place limit order (USER_DATA)
         * @param {string} baseAsset 
         * @param {string} expiredType 
         * @param {string} limitPrice 
         * @param {string} quoteAsset 
         * @param {string} side 
         * @param {number} timestamp 
         * @param {string} [baseAmount] 
         * @param {string} [quoteAmount] 
         * @param {number} [recvWindow] 
         * @param {string} [walletType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertCreateConvertLimitPlaceOrderV1(baseAsset: string, expiredType: string, limitPrice: string, quoteAsset: string, side: string, timestamp: number, baseAmount?: string, quoteAmount?: string, recvWindow?: number, walletType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConvertCreateConvertLimitPlaceOrderV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertCreateConvertLimitPlaceOrderV1(baseAsset, expiredType, limitPrice, quoteAsset, side, timestamp, baseAmount, quoteAmount, recvWindow, walletType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.convertCreateConvertLimitPlaceOrderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Request a quote for the requested token pairs
         * @summary Query limit open orders (USER_DATA)
         * @param {number} timestamp 
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertCreateConvertLimitQueryOpenOrdersV1(timestamp: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConvertCreateConvertLimitQueryOpenOrdersV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertCreateConvertLimitQueryOpenOrdersV1(timestamp, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.convertCreateConvertLimitQueryOpenOrdersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query order status by order ID.
         * @summary Order status(USER_DATA)
         * @param {string} [orderId] Either orderId or quoteId is required
         * @param {string} [quoteId] Either orderId or quoteId is required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertGetConvertOrderStatusV1(orderId?: string, quoteId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConvertGetConvertOrderStatusV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertGetConvertOrderStatusV1(orderId, quoteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.convertGetConvertOrderStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Convert Trade History
         * @summary Get Convert Trade History(USER_DATA)
         * @param {number} startTime 
         * @param {number} endTime 
         * @param {number} timestamp 
         * @param {number} [limit] Default 100, Max 1000
         * @param {number} [recvWindow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertGetConvertTradeFlowV1(startTime: number, endTime: number, timestamp: number, limit?: number, recvWindow?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConvertGetConvertTradeFlowV1Resp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertGetConvertTradeFlowV1(startTime, endTime, timestamp, limit, recvWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.convertGetConvertTradeFlowV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TradeApi - factory interface
 * @export
 */
export const TradeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TradeApiFp(configuration)
    return {
        /**
         * Accept the offered quote by quote ID.
         * @summary Accept Quote (TRADE)
         * @param {TradeApiConvertCreateConvertAcceptQuoteV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateConvertAcceptQuoteV1(requestParameters: TradeApiConvertCreateConvertAcceptQuoteV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertCreateConvertAcceptQuoteV1Resp> {
            return localVarFp.convertCreateConvertAcceptQuoteV1(requestParameters.quoteId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Request a quote for the requested token pairs
         * @summary Send Quote Request(USER_DATA)
         * @param {TradeApiConvertCreateConvertGetQuoteV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateConvertGetQuoteV1(requestParameters: TradeApiConvertCreateConvertGetQuoteV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertCreateConvertGetQuoteV1Resp> {
            return localVarFp.convertCreateConvertGetQuoteV1(requestParameters.fromAsset, requestParameters.timestamp, requestParameters.toAsset, requestParameters.fromAmount, requestParameters.recvWindow, requestParameters.toAmount, requestParameters.validTime, requestParameters.walletType, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable users to cancel a limit order
         * @summary Cancel limit order (USER_DATA)
         * @param {TradeApiConvertCreateConvertLimitCancelOrderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateConvertLimitCancelOrderV1(requestParameters: TradeApiConvertCreateConvertLimitCancelOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertCreateConvertLimitCancelOrderV1Resp> {
            return localVarFp.convertCreateConvertLimitCancelOrderV1(requestParameters.orderId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable users to place a limit order
         * @summary Place limit order (USER_DATA)
         * @param {TradeApiConvertCreateConvertLimitPlaceOrderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateConvertLimitPlaceOrderV1(requestParameters: TradeApiConvertCreateConvertLimitPlaceOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertCreateConvertLimitPlaceOrderV1Resp> {
            return localVarFp.convertCreateConvertLimitPlaceOrderV1(requestParameters.baseAsset, requestParameters.expiredType, requestParameters.limitPrice, requestParameters.quoteAsset, requestParameters.side, requestParameters.timestamp, requestParameters.baseAmount, requestParameters.quoteAmount, requestParameters.recvWindow, requestParameters.walletType, options).then((request) => request(axios, basePath));
        },
        /**
         * Request a quote for the requested token pairs
         * @summary Query limit open orders (USER_DATA)
         * @param {TradeApiConvertCreateConvertLimitQueryOpenOrdersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateConvertLimitQueryOpenOrdersV1(requestParameters: TradeApiConvertCreateConvertLimitQueryOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertCreateConvertLimitQueryOpenOrdersV1Resp> {
            return localVarFp.convertCreateConvertLimitQueryOpenOrdersV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query order status by order ID.
         * @summary Order status(USER_DATA)
         * @param {TradeApiConvertGetConvertOrderStatusV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertGetConvertOrderStatusV1(requestParameters: TradeApiConvertGetConvertOrderStatusV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<ConvertGetConvertOrderStatusV1Resp> {
            return localVarFp.convertGetConvertOrderStatusV1(requestParameters.orderId, requestParameters.quoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Convert Trade History
         * @summary Get Convert Trade History(USER_DATA)
         * @param {TradeApiConvertGetConvertTradeFlowV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertGetConvertTradeFlowV1(requestParameters: TradeApiConvertGetConvertTradeFlowV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertGetConvertTradeFlowV1Resp> {
            return localVarFp.convertGetConvertTradeFlowV1(requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TradeApi - interface
 * @export
 * @interface TradeApi
 */
export interface TradeApiInterface {
    /**
     * Accept the offered quote by quote ID.
     * @summary Accept Quote (TRADE)
     * @param {TradeApiConvertCreateConvertAcceptQuoteV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    convertCreateConvertAcceptQuoteV1(requestParameters: TradeApiConvertCreateConvertAcceptQuoteV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertCreateConvertAcceptQuoteV1Resp>;

    /**
     * Request a quote for the requested token pairs
     * @summary Send Quote Request(USER_DATA)
     * @param {TradeApiConvertCreateConvertGetQuoteV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    convertCreateConvertGetQuoteV1(requestParameters: TradeApiConvertCreateConvertGetQuoteV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertCreateConvertGetQuoteV1Resp>;

    /**
     * Enable users to cancel a limit order
     * @summary Cancel limit order (USER_DATA)
     * @param {TradeApiConvertCreateConvertLimitCancelOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    convertCreateConvertLimitCancelOrderV1(requestParameters: TradeApiConvertCreateConvertLimitCancelOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertCreateConvertLimitCancelOrderV1Resp>;

    /**
     * Enable users to place a limit order
     * @summary Place limit order (USER_DATA)
     * @param {TradeApiConvertCreateConvertLimitPlaceOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    convertCreateConvertLimitPlaceOrderV1(requestParameters: TradeApiConvertCreateConvertLimitPlaceOrderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertCreateConvertLimitPlaceOrderV1Resp>;

    /**
     * Request a quote for the requested token pairs
     * @summary Query limit open orders (USER_DATA)
     * @param {TradeApiConvertCreateConvertLimitQueryOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    convertCreateConvertLimitQueryOpenOrdersV1(requestParameters: TradeApiConvertCreateConvertLimitQueryOpenOrdersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertCreateConvertLimitQueryOpenOrdersV1Resp>;

    /**
     * Query order status by order ID.
     * @summary Order status(USER_DATA)
     * @param {TradeApiConvertGetConvertOrderStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    convertGetConvertOrderStatusV1(requestParameters?: TradeApiConvertGetConvertOrderStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertGetConvertOrderStatusV1Resp>;

    /**
     * Get Convert Trade History
     * @summary Get Convert Trade History(USER_DATA)
     * @param {TradeApiConvertGetConvertTradeFlowV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    convertGetConvertTradeFlowV1(requestParameters: TradeApiConvertGetConvertTradeFlowV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ConvertGetConvertTradeFlowV1Resp>;

}

/**
 * Request parameters for convertCreateConvertAcceptQuoteV1 operation in TradeApi.
 * @export
 * @interface TradeApiConvertCreateConvertAcceptQuoteV1Request
 */
export interface TradeApiConvertCreateConvertAcceptQuoteV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertAcceptQuoteV1
     */
    readonly quoteId: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertCreateConvertAcceptQuoteV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertCreateConvertAcceptQuoteV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for convertCreateConvertGetQuoteV1 operation in TradeApi.
 * @export
 * @interface TradeApiConvertCreateConvertGetQuoteV1Request
 */
export interface TradeApiConvertCreateConvertGetQuoteV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertGetQuoteV1
     */
    readonly fromAsset: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertCreateConvertGetQuoteV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertGetQuoteV1
     */
    readonly toAsset: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertGetQuoteV1
     */
    readonly fromAmount?: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertCreateConvertGetQuoteV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertGetQuoteV1
     */
    readonly toAmount?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertGetQuoteV1
     */
    readonly validTime?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertGetQuoteV1
     */
    readonly walletType?: string
}

/**
 * Request parameters for convertCreateConvertLimitCancelOrderV1 operation in TradeApi.
 * @export
 * @interface TradeApiConvertCreateConvertLimitCancelOrderV1Request
 */
export interface TradeApiConvertCreateConvertLimitCancelOrderV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertCreateConvertLimitCancelOrderV1
     */
    readonly orderId: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertCreateConvertLimitCancelOrderV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertCreateConvertLimitCancelOrderV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for convertCreateConvertLimitPlaceOrderV1 operation in TradeApi.
 * @export
 * @interface TradeApiConvertCreateConvertLimitPlaceOrderV1Request
 */
export interface TradeApiConvertCreateConvertLimitPlaceOrderV1Request {
    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertLimitPlaceOrderV1
     */
    readonly baseAsset: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertLimitPlaceOrderV1
     */
    readonly expiredType: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertLimitPlaceOrderV1
     */
    readonly limitPrice: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertLimitPlaceOrderV1
     */
    readonly quoteAsset: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertLimitPlaceOrderV1
     */
    readonly side: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertCreateConvertLimitPlaceOrderV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertLimitPlaceOrderV1
     */
    readonly baseAmount?: string

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertLimitPlaceOrderV1
     */
    readonly quoteAmount?: string

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertCreateConvertLimitPlaceOrderV1
     */
    readonly recvWindow?: number

    /**
     * 
     * @type {string}
     * @memberof TradeApiConvertCreateConvertLimitPlaceOrderV1
     */
    readonly walletType?: string
}

/**
 * Request parameters for convertCreateConvertLimitQueryOpenOrdersV1 operation in TradeApi.
 * @export
 * @interface TradeApiConvertCreateConvertLimitQueryOpenOrdersV1Request
 */
export interface TradeApiConvertCreateConvertLimitQueryOpenOrdersV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertCreateConvertLimitQueryOpenOrdersV1
     */
    readonly timestamp: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertCreateConvertLimitQueryOpenOrdersV1
     */
    readonly recvWindow?: number
}

/**
 * Request parameters for convertGetConvertOrderStatusV1 operation in TradeApi.
 * @export
 * @interface TradeApiConvertGetConvertOrderStatusV1Request
 */
export interface TradeApiConvertGetConvertOrderStatusV1Request {
    /**
     * Either orderId or quoteId is required
     * @type {string}
     * @memberof TradeApiConvertGetConvertOrderStatusV1
     */
    readonly orderId?: string

    /**
     * Either orderId or quoteId is required
     * @type {string}
     * @memberof TradeApiConvertGetConvertOrderStatusV1
     */
    readonly quoteId?: string
}

/**
 * Request parameters for convertGetConvertTradeFlowV1 operation in TradeApi.
 * @export
 * @interface TradeApiConvertGetConvertTradeFlowV1Request
 */
export interface TradeApiConvertGetConvertTradeFlowV1Request {
    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertGetConvertTradeFlowV1
     */
    readonly startTime: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertGetConvertTradeFlowV1
     */
    readonly endTime: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertGetConvertTradeFlowV1
     */
    readonly timestamp: number

    /**
     * Default 100, Max 1000
     * @type {number}
     * @memberof TradeApiConvertGetConvertTradeFlowV1
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof TradeApiConvertGetConvertTradeFlowV1
     */
    readonly recvWindow?: number
}

/**
 * TradeApi - object-oriented interface
 * @export
 * @class TradeApi
 * @extends {BaseAPI}
 */
export class TradeApi extends BaseAPI implements TradeApiInterface {
    /**
     * Accept the offered quote by quote ID.
     * @summary Accept Quote (TRADE)
     * @param {TradeApiConvertCreateConvertAcceptQuoteV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public convertCreateConvertAcceptQuoteV1(requestParameters: TradeApiConvertCreateConvertAcceptQuoteV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).convertCreateConvertAcceptQuoteV1(requestParameters.quoteId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request a quote for the requested token pairs
     * @summary Send Quote Request(USER_DATA)
     * @param {TradeApiConvertCreateConvertGetQuoteV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public convertCreateConvertGetQuoteV1(requestParameters: TradeApiConvertCreateConvertGetQuoteV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).convertCreateConvertGetQuoteV1(requestParameters.fromAsset, requestParameters.timestamp, requestParameters.toAsset, requestParameters.fromAmount, requestParameters.recvWindow, requestParameters.toAmount, requestParameters.validTime, requestParameters.walletType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable users to cancel a limit order
     * @summary Cancel limit order (USER_DATA)
     * @param {TradeApiConvertCreateConvertLimitCancelOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public convertCreateConvertLimitCancelOrderV1(requestParameters: TradeApiConvertCreateConvertLimitCancelOrderV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).convertCreateConvertLimitCancelOrderV1(requestParameters.orderId, requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable users to place a limit order
     * @summary Place limit order (USER_DATA)
     * @param {TradeApiConvertCreateConvertLimitPlaceOrderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public convertCreateConvertLimitPlaceOrderV1(requestParameters: TradeApiConvertCreateConvertLimitPlaceOrderV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).convertCreateConvertLimitPlaceOrderV1(requestParameters.baseAsset, requestParameters.expiredType, requestParameters.limitPrice, requestParameters.quoteAsset, requestParameters.side, requestParameters.timestamp, requestParameters.baseAmount, requestParameters.quoteAmount, requestParameters.recvWindow, requestParameters.walletType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request a quote for the requested token pairs
     * @summary Query limit open orders (USER_DATA)
     * @param {TradeApiConvertCreateConvertLimitQueryOpenOrdersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public convertCreateConvertLimitQueryOpenOrdersV1(requestParameters: TradeApiConvertCreateConvertLimitQueryOpenOrdersV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).convertCreateConvertLimitQueryOpenOrdersV1(requestParameters.timestamp, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query order status by order ID.
     * @summary Order status(USER_DATA)
     * @param {TradeApiConvertGetConvertOrderStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public convertGetConvertOrderStatusV1(requestParameters: TradeApiConvertGetConvertOrderStatusV1Request = {}, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).convertGetConvertOrderStatusV1(requestParameters.orderId, requestParameters.quoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Convert Trade History
     * @summary Get Convert Trade History(USER_DATA)
     * @param {TradeApiConvertGetConvertTradeFlowV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public convertGetConvertTradeFlowV1(requestParameters: TradeApiConvertGetConvertTradeFlowV1Request, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).convertGetConvertTradeFlowV1(requestParameters.startTime, requestParameters.endTime, requestParameters.timestamp, requestParameters.limit, requestParameters.recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}

